from datetime import datetime
from Qt.QtWidgets import QFileDialog
from Qt.QtWidgets import QMessageBox
import subprocess
import os

from PyFlow.Core.Common import *
from PyFlow.UI.UIInterfaces import IDataExporter
from PyFlow.Core.version import Version


class CPPCompiler(IDataExporter):
    """docstring for CPPCompiler."""

    def __init__(self):
        super(CPPCompiler, self).__init__()

    @staticmethod
    def createImporterMenu():
        return False

    @staticmethod
    def creationDateString():
        return datetime.now().strftime("%I:%M%p on %B %d, %Y")

    @staticmethod
    def version():
        return Version(1, 0, 0)

    @staticmethod
    def toolTip():
        return "Export/Import program as python script."

    @staticmethod
    def displayName():
        return "c++ console app"

    @staticmethod
    def doImport(pyFlowInstance):
        name_filter = "Graph files (*.json)"
        openFilename, filterString = QFileDialog.getOpenFileName(filter=CPPCompiler.name_filter)
        if openFilename != "":
            with open(openFilename, 'r') as f:
                script = f.read()
                mem = Py3CodeCompiler().compile(code=script, scope=globals())
                fileVersion = Version.fromString(mem["EXPORTER_VERSION"])
                if fileVersion >= CPPCompiler.version() and CPPCompiler.displayName() == mem["EXPORTER_NAME"]:
                    pyFlowInstance.newFile()
                    ROOT_GRAPH = pyFlowInstance.graphManager.findRootGraph()
                    mem["createScene"](ROOT_GRAPH)
                    pyFlowInstance.afterLoad()

    @staticmethod
    def doExport(pyFlowInstance):

        supportedDataTypes = {"StringPin"}
        supportedStructures = {PinStructure.Single}

        script = "// This file was auto-generated by PyFlow exporter '{0} v{1}'\n".format(CPPCompiler.displayName(), str(CPPCompiler.version()))
        script += "// Created: {0}\n\n".format(CPPCompiler.creationDateString())
        script += "#include <iostream>\n\n"
        script += "int main()\n"
        script += "{\n"

        rootGraph = pyFlowInstance.graphManager.findRootGraph()
        if len(rootGraph.getNodes()) == 0:
            QMessageBox.warning(pyFlowInstance, "Warning", "Nothing to export!")
            return

        consoleOutNode = pyFlowInstance.graphManager.findNode("consoleOutput")
        if consoleOutNode is None:
            QMessageBox.warning(pyFlowInstance, "Warning", "Console out node not found")
            return

        consoleOutNode[DEFAULT_IN_EXEC_NAME].call()

        script += '\tstd::cout << "{}\\n";\n'.format(consoleOutNode["entity"].getData())

        script += "}\n"

        outFilePath, filterString = QFileDialog.getSaveFileName(filter="c++ source (*.cpp)")
        if outFilePath != "":
            with open(outFilePath, 'w') as f:
                f.write(script)
            cmd = ["g++.exe", outFilePath, "-std=c++11", "-o", outFilePath.replace(".cpp", ".exe")]
            myEnv = os.environ.copy()
            proc = subprocess.Popen(cmd, shell=True, env=myEnv, stdout=subprocess.PIPE, stderr=subprocess.STDOUT)
            proc.communicate()
            print("EXE OUTPUT:", subprocess.check_output(outFilePath.replace(".cpp", ".exe")))
