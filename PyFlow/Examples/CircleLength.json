{"root": {"nodes": [{"inputs": [], "meta": {"var": {}, "commentNode": {"color": [0, 0, 255, 80], "h": 132.0, "labelHeight": 20.0, "w": 160.0, "text": "Circle length calculation"}, "label": "Circle length calculation"}, "name": "CommentNode2", "outputs": [], "y": 4718.0, "x": 5240.0, "computeCode": "def compute(self):\n    '''\n    node calculations here\n    '''\n    # getting data from inputs\n    # do stuff\n    # write data to outputs\n    return\n", "type": "CommentNode", "uuid": "703d58fe-992c-486c-8084-efec9166e0c9"}, {"inputs": [], "meta": {"var": {}, "label": "pi"}, "name": "pi", "outputs": [{"bDirty": true, "name": "out", "dataType": 0, "type": 1, "value": 3.141592653589793, "bLabelHidden": false, "uuid": "005d1700-e526-4524-ad20-d02111fb7f1b"}], "y": 4868.0, "x": 4900.0, "computeCode": "def compute(self):\n    # arguments will be taken from inputs\n    kwargs = {}\n    for i in self.inputs.values():\n        if i.dataType is not DataTypes.Exec:\n            kwargs[i.name] = i.getData()\n    for ref in refs:\n        if ref.dataType is not DataTypes.Exec:\n            kwargs[ref.name] = ref\n    result = foo(**kwargs)\n    if returnType is not None:\n        self.setData('out', result)\n    if nodeType == NodeTypes.Callable:\n        outExec.call()\n", "type": "pi", "uuid": "653fbc4f-7637-4e6c-986a-a03cb7c5c42e"}, {"inputs": [{"bDirty": true, "name": "in1", "dataType": 0, "type": 0, "value": 12.24, "bLabelHidden": false, "uuid": "7e994aec-9dc8-4ce1-803d-9b9bf740bc44"}], "meta": {"var": {}, "label": "FloatNode"}, "name": "FloatNode", "outputs": [{"bDirty": true, "name": "out", "dataType": 0, "type": 1, "value": 12.24, "bLabelHidden": false, "uuid": "58586281-122e-43ff-91f7-a124aeb7e6d2"}], "y": 4728.0, "x": 4960.0, "computeCode": "def compute(self):\n    self.output.setData(float(self.input.currentData()))\n", "type": "FloatNode", "uuid": "5d8caa02-b068-4c2c-85eb-ece72e949e95"}, {"inputs": [{"bDirty": true, "name": "input", "dataType": 5, "type": 0, "value": 76.90618815987814, "bLabelHidden": false, "uuid": "52f42623-63ac-4751-8b53-798ed8aeaee7"}], "meta": {"var": {}, "label": "RequestNode"}, "name": "RequestNode", "outputs": [], "y": 4758.0, "x": 5260.0, "computeCode": "def compute(self):\n    # check if any dirty nodes before connected Pin.\n    # randint for example\n    # if so push forward and recompute\n    behind_dirty_ports = [p for p in findPinsBehind(self.input) if p.dirty is True]\n    shouldRecalc = (not len(behind_dirty_ports) == 0)\n    if shouldRecalc:\n        # push from dirty ports\n        # request data\n        for p in behind_dirty_ports:\n            push(p)\n    data = self.input.getData()\n    self.graph().writeToConsole(str(data))\n    print(str(data))\n", "type": "RequestNode", "uuid": "1677afda-36e8-4bdb-864e-ad5ba512d5d6"}, {"inputs": [], "meta": {"var": {}, "commentNode": {"color": [0, 170, 0, 80], "h": 92.0, "labelHeight": 20.0, "w": 190.0, "text": "2pi"}, "label": "2pi"}, "name": "CommentNode", "outputs": [], "y": 4838.0, "x": 4890.0, "computeCode": "def compute(self):\n    '''\n    node calculations here\n    '''\n    # getting data from inputs\n    # do stuff\n    # write data to outputs\n    return\n", "type": "CommentNode", "uuid": "9b6303b8-6c16-4e8a-9181-9eb1cbfa6642"}, {"inputs": [{"bDirty": true, "name": "A", "dataType": 0, "type": 0, "value": 3.141592653589793, "bLabelHidden": false, "uuid": "93974670-2aec-4e8b-93a2-6ec63d68e1ee"}, {"bDirty": true, "name": "B", "dataType": 0, "type": 0, "value": 2.0, "bLabelHidden": false, "uuid": "4a7af1ba-53ad-4c58-8d5c-f930a59082cd"}], "meta": {"var": {}, "label": "multf"}, "name": "multf", "outputs": [{"bDirty": true, "name": "out", "dataType": 0, "type": 1, "value": 6.283185307179586, "bLabelHidden": false, "uuid": "21607012-7b57-49a6-b372-dc2c0b785fad"}], "y": 4868.0, "x": 4970.0, "computeCode": "def compute(self):\n    # arguments will be taken from inputs\n    kwargs = {}\n    for i in self.inputs.values():\n        if i.dataType is not DataTypes.Exec:\n            kwargs[i.name] = i.getData()\n    for ref in refs:\n        if ref.dataType is not DataTypes.Exec:\n            kwargs[ref.name] = ref\n    result = foo(**kwargs)\n    if returnType is not None:\n        self.setData('out', result)\n    if nodeType == NodeTypes.Callable:\n        outExec.call()\n", "type": "multf", "uuid": "f7231813-7861-4f1e-ad0e-c507e225cc80"}, {"inputs": [], "meta": {"var": {}, "commentNode": {"color": [0, 170, 0, 80], "h": 72.0, "labelHeight": 20.0, "w": 110.0, "text": "Radius"}, "label": "Radius"}, "name": "CommentNode1", "outputs": [], "y": 4698.0, "x": 4950.0, "computeCode": "def compute(self):\n    '''\n    node calculations here\n    '''\n    # getting data from inputs\n    # do stuff\n    # write data to outputs\n    return\n", "type": "CommentNode", "uuid": "a9741097-308b-4706-b4db-07151cb4160b"}, {"inputs": [{"bDirty": true, "name": "A", "dataType": 0, "type": 0, "value": 12.24, "bLabelHidden": false, "uuid": "7e6852ff-f3be-4e75-b560-99a6c8ca0951"}, {"bDirty": true, "name": "B", "dataType": 0, "type": 0, "value": 6.283185307179586, "bLabelHidden": false, "uuid": "3b405314-4b71-4034-8967-3ee6c930234d"}], "meta": {"var": {}, "label": "multf"}, "name": "multf1", "outputs": [{"bDirty": true, "name": "out", "dataType": 0, "type": 1, "value": 76.90618815987814, "bLabelHidden": false, "uuid": "1b344888-3a2a-4c65-aa42-f4ece74f52a7"}], "y": 4758.0, "x": 5110.0, "computeCode": "def compute(self):\n    # arguments will be taken from inputs\n    kwargs = {}\n    for i in self.inputs.values():\n        if i.dataType is not DataTypes.Exec:\n            kwargs[i.name] = i.getData()\n    for ref in refs:\n        if ref.dataType is not DataTypes.Exec:\n            kwargs[ref.name] = ref\n    result = foo(**kwargs)\n    if returnType is not None:\n        self.setData('out', result)\n    if nodeType == NodeTypes.Callable:\n        outExec.call()\n", "type": "multf", "uuid": "ec79913f-40e9-402a-bbbe-477245b36de2"}], "edges": [{"sourceName": "pi.out", "sourceUUID": "005d1700-e526-4524-ad20-d02111fb7f1b", "destinationName": "multf.A", "destinationUUID": "93974670-2aec-4e8b-93a2-6ec63d68e1ee", "uuid": "17822cc7-7861-4ee0-bccc-122a3d154831"}, {"sourceName": "FloatNode.out", "sourceUUID": "58586281-122e-43ff-91f7-a124aeb7e6d2", "destinationName": "multf1.A", "destinationUUID": "7e6852ff-f3be-4e75-b560-99a6c8ca0951", "uuid": "e996dc73-ba0e-4304-9af6-32cafc992202"}, {"sourceName": "multf.out", "sourceUUID": "21607012-7b57-49a6-b372-dc2c0b785fad", "destinationName": "multf1.B", "destinationUUID": "3b405314-4b71-4034-8967-3ee6c930234d", "uuid": "d97bc26f-74e2-488e-a14c-2889783baba9"}, {"sourceName": "multf1.out", "sourceUUID": "1b344888-3a2a-4c65-aa42-f4ece74f52a7", "destinationName": "RequestNode.input", "destinationUUID": "52f42623-63ac-4751-8b53-798ed8aeaee7", "uuid": "2a62ea5e-9402-40be-a800-80ea28c2bdb3"}], "variables": []}}