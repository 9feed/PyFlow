{"root": {"nodes": [{"inputs": [], "meta": {"var": {}, "label": "clock"}, "name": "clock", "outputs": [{"bDirty": false, "name": "out", "dataType": 0, "type": 1, "value": 224.58761019349345, "bLabelHidden": false, "uuid": "1eddf257-9385-4735-bb9b-3cc5374ac613"}], "y": 4788.0, "x": 4490.0, "computeCode": "def compute(self):\n    # arguments will be taken from inputs\n    kwargs = {}\n    for i in self.inputs.values():\n        if i.dataType is not DataTypes.Exec:\n            kwargs[i.name] = i.getData()\n    for ref in refs:\n        if ref.dataType is not DataTypes.Exec:\n            kwargs[ref.name] = ref\n    result = foo(**kwargs)\n    if returnType is not None:\n        self.setData('out', result)\n    if nodeType == NodeTypes.Callable:\n        outExec.call()\n", "type": "clock", "uuid": "b0e2b861-e139-4683-a25d-8a33fe1e1b88"}, {"inputs": [{"bDirty": false, "name": "v", "dataType": 8, "type": 0, "value": [0.9993425136960876, 0.9993425136960876, 0.9993425136960876, 0.9993425136960876], "bLabelHidden": false, "uuid": "69ea30ac-7ed2-4882-a3c8-3134c23112ea"}], "meta": {"var": {}, "label": "v4ToStr"}, "name": "v4ToStr", "outputs": [{"bDirty": false, "name": "out", "dataType": 2, "type": 1, "value": "[0.99934251 0.99934251 0.99934251 0.99934251]", "bLabelHidden": false, "uuid": "f58f28c9-3153-4a51-b2dc-c0d58af3ca88"}], "y": 4758.0, "x": 4870.0, "computeCode": "def compute(self):\n    # arguments will be taken from inputs\n    kwargs = {}\n    for i in self.inputs.values():\n        if i.dataType is not DataTypes.Exec:\n            kwargs[i.name] = i.getData()\n    for ref in refs:\n        if ref.dataType is not DataTypes.Exec:\n            kwargs[ref.name] = ref\n    result = foo(**kwargs)\n    if returnType is not None:\n        self.setData('out', result)\n    if nodeType == NodeTypes.Callable:\n        outExec.call()\n", "type": "v4ToStr", "uuid": "fdb02f21-1745-48bc-9c75-aa2fbc701748"}, {"inputs": [{"bDirty": false, "name": "a", "dataType": 8, "type": 0, "value": [0.0, 0.0, 0.0, 0.0], "bLabelHidden": false, "uuid": "a97d723e-1c96-4d0c-a22a-4aacdab3d775"}, {"bDirty": false, "name": "b", "dataType": 8, "type": 0, "value": [1.0, 1.0, 1.0, 1.0], "bLabelHidden": false, "uuid": "54ea59bb-2a5d-4aca-9d29-5638eac20cf6"}, {"bDirty": false, "name": "alpha", "dataType": 0, "type": 0, "value": 0.9993425136960876, "bLabelHidden": false, "uuid": "33e50af7-0bc7-444d-a500-20e1088618bc"}], "meta": {"var": {}, "label": "v4Lerp"}, "name": "v4Lerp", "outputs": [{"bDirty": false, "name": "out", "dataType": 8, "type": 1, "value": [0.9993425136960876, 0.9993425136960876, 0.9993425136960876, 0.9993425136960876], "bLabelHidden": false, "uuid": "779e7ef2-d6b0-447b-8fb3-9fea87e8d9d4"}], "y": 4758.0, "x": 4730.0, "computeCode": "def compute(self):\n    # arguments will be taken from inputs\n    kwargs = {}\n    for i in self.inputs.values():\n        if i.dataType is not DataTypes.Exec:\n            kwargs[i.name] = i.getData()\n    for ref in refs:\n        if ref.dataType is not DataTypes.Exec:\n            kwargs[ref.name] = ref\n    result = foo(**kwargs)\n    if returnType is not None:\n        self.setData('out', result)\n    if nodeType == NodeTypes.Callable:\n        outExec.call()\n", "type": "v4Lerp", "uuid": "836d7a29-bac2-45e4-8e02-7631642974cd"}, {"inputs": [{"bDirty": false, "name": "inp", "dataType": 0, "type": 0, "value": -0.9993425136960876, "bLabelHidden": false, "uuid": "eaf0935c-f182-4788-952f-2a74df840bc3"}], "meta": {"var": {}, "label": "absfloat"}, "name": "absfloat", "outputs": [{"bDirty": false, "name": "out", "dataType": 0, "type": 1, "value": 0.9993425136960876, "bLabelHidden": false, "uuid": "75ad776b-b91c-42f1-bc9c-af74fa352e8a"}], "y": 4788.0, "x": 4640.0, "computeCode": "def compute(self):\n    # arguments will be taken from inputs\n    kwargs = {}\n    for i in self.inputs.values():\n        if i.dataType is not DataTypes.Exec:\n            kwargs[i.name] = i.getData()\n    for ref in refs:\n        if ref.dataType is not DataTypes.Exec:\n            kwargs[ref.name] = ref\n    result = foo(**kwargs)\n    if returnType is not None:\n        self.setData('out', result)\n    if nodeType == NodeTypes.Callable:\n        outExec.call()\n", "type": "absfloat", "uuid": "d80653c2-8057-405c-b62f-863dc7b646d6"}, {"inputs": [{"bDirty": false, "name": "entity", "dataType": 2, "type": 0, "value": "[0.99934251 0.99934251 0.99934251 0.99934251]", "bLabelHidden": false, "uuid": "3fdbca09-4c21-4ec0-ad2e-4b9d2029c0ef"}, {"bDirty": false, "name": "inExec", "dataType": 5, "type": 0, "value": null, "bLabelHidden": true, "uuid": "5be748b7-43a5-4c7f-be4f-d2345facfef0"}], "meta": {"var": {}, "label": "pyprint"}, "name": "pyprint", "outputs": [{"bDirty": false, "name": "outExec", "dataType": 5, "type": 1, "value": null, "bLabelHidden": true, "uuid": "c5fe6b8c-0f04-4006-b290-13a48ff09c2b"}], "y": 4628.0, "x": 5010.0, "computeCode": "def compute(self):\n    # arguments will be taken from inputs\n    kwargs = {}\n    for i in self.inputs.values():\n        if i.dataType is not DataTypes.Exec:\n            kwargs[i.name] = i.getData()\n    for ref in refs:\n        if ref.dataType is not DataTypes.Exec:\n            kwargs[ref.name] = ref\n    result = foo(**kwargs)\n    if returnType is not None:\n        self.setData('out', result)\n    if nodeType == NodeTypes.Callable:\n        outExec.call()\n", "type": "pyprint", "uuid": "66d964ee-10ec-4a72-927b-94c57b9af2b0"}, {"inputs": [{"bDirty": false, "name": "rad", "dataType": 0, "type": 0, "value": 224.58761019349345, "bLabelHidden": false, "uuid": "76219370-fa1d-4060-b2a8-e03d2225adff"}], "meta": {"var": {}, "label": "sin"}, "name": "sin", "outputs": [{"bDirty": false, "name": "out", "dataType": 0, "type": 1, "value": -0.9993425136960876, "bLabelHidden": false, "uuid": "3a8d69ad-aebf-4d3d-86ad-7c78a82518d8"}], "y": 4788.0, "x": 4550.0, "computeCode": "def compute(self):\n    # arguments will be taken from inputs\n    kwargs = {}\n    for i in self.inputs.values():\n        if i.dataType is not DataTypes.Exec:\n            kwargs[i.name] = i.getData()\n    for ref in refs:\n        if ref.dataType is not DataTypes.Exec:\n            kwargs[ref.name] = ref\n    result = foo(**kwargs)\n    if returnType is not None:\n        self.setData('out', result)\n    if nodeType == NodeTypes.Callable:\n        outExec.call()\n", "type": "sin", "uuid": "853356a3-03ab-4500-97c0-fe3b4e721edb"}, {"inputs": [], "meta": {"var": {}, "deltaTime": 0.05, "label": "call"}, "name": "call", "outputs": [{"bDirty": false, "name": "OUT", "dataType": 5, "type": 1, "value": null, "bLabelHidden": false, "uuid": "75698e87-382a-4e5b-af02-3998f8348f05"}], "y": 4598.0, "x": 4710.0, "computeCode": "def compute(self):\n    self.out.call()\n", "type": "call", "uuid": "d88b02bd-8de5-4184-b313-901160bf03e8"}], "edges": [{"sourceName": "clock.out", "sourceUUID": "1eddf257-9385-4735-bb9b-3cc5374ac613", "destinationName": "sin.rad", "destinationUUID": "76219370-fa1d-4060-b2a8-e03d2225adff", "uuid": "78859018-6e93-4ce8-a8ed-7ab8beac6312"}, {"sourceName": "v4ToStr.out", "sourceUUID": "f58f28c9-3153-4a51-b2dc-c0d58af3ca88", "destinationName": "pyprint.entity", "destinationUUID": "3fdbca09-4c21-4ec0-ad2e-4b9d2029c0ef", "uuid": "58483d63-2a04-459a-a104-8dc8987404cd"}, {"sourceName": "absfloat.out", "sourceUUID": "75ad776b-b91c-42f1-bc9c-af74fa352e8a", "destinationName": "v4Lerp.alpha", "destinationUUID": "33e50af7-0bc7-444d-a500-20e1088618bc", "uuid": "fa066f4c-39c6-4325-b5e7-e3582673a22a"}, {"sourceName": "sin.out", "sourceUUID": "3a8d69ad-aebf-4d3d-86ad-7c78a82518d8", "destinationName": "absfloat.inp", "destinationUUID": "eaf0935c-f182-4788-952f-2a74df840bc3", "uuid": "4db925e9-c21f-4c16-804e-e93a51827e7f"}, {"sourceName": "call.OUT", "sourceUUID": "75698e87-382a-4e5b-af02-3998f8348f05", "destinationName": "pyprint.inExec", "destinationUUID": "5be748b7-43a5-4c7f-be4f-d2345facfef0", "uuid": "afdd4b4d-a6c1-4922-b88b-4741da5f6386"}, {"sourceName": "v4Lerp.out", "sourceUUID": "779e7ef2-d6b0-447b-8fb3-9fea87e8d9d4", "destinationName": "v4ToStr.v", "destinationUUID": "69ea30ac-7ed2-4882-a3c8-3134c23112ea", "uuid": "06f7f68b-3e5c-4bcc-b683-a425d0c61c1c"}], "variables": []}}