PACKAGE_NAME = '@PACKAGE_NAME'

from PyFlow.UI.UIInterfaces import IPackage

# Pins
from PyFlow.Packages.@PACKAGE_NAME.Pins.DemoPin import DemoPin

# Function based nodes
from PyFlow.Packages.@PACKAGE_NAME.FunctionLibraries.DemoLib import DemoLib


# Class based nodes
from PyFlow.Packages.@PACKAGE_NAME.Nodes.DemoNode import DemoNode

# Tools
from PyFlow.Packages.@PACKAGE_NAME.Tools.DemoShelfTool import DemoShelfTool
from PyFlow.Packages.@PACKAGE_NAME.Tools.DemoDockTool import DemoDockTool

# Exporters
from PyFlow.Packages.@PACKAGE_NAME.Exporters.DemoExporter import DemoExporter


# Factories
from PyFlow.Packages.@PACKAGE_NAME.Factories.UIPinFactory import createUIPin
from PyFlow.Packages.@PACKAGE_NAME.Factories.PinInputWidgetFactory import getInputWidget
from PyFlow.Packages.@PACKAGE_NAME.Factories.UINodeFactory import createUINode


_FOO_LIBS = {
    DemoLib.__name__: DemoLib(PACKAGE_NAME),
}


_NODES = {
    DemoNode.__name__: DemoNode,
}

_PINS = {
    DemoPin.__name__: DemoPin,
}


_TOOLS = OrderedDict()
_TOOLS[DemoShelfTool.__name__] = DemoShelfTool
_TOOLS[DemoDockTool.__name__] = DemoDockTool


_EXPORTERS = OrderedDict()
_EXPORTERS[DemoExporter.__name__] = DemoExporter


class @PACKAGE_NAME(IPackage):
    def __init__(self):
        super(@PACKAGE_NAME, self).__init__()

    @staticmethod
    def GetExporters():
        return _EXPORTERS

    @staticmethod
    def GetFunctionLibraries():
        return _FOO_LIBS

    @staticmethod
    def GetNodeClasses():
        return _NODES

    @staticmethod
    def GetPinClasses():
        return _PINS

    @staticmethod
    def GetToolClasses():
        return _TOOLS

    @staticmethod
    def UIPinsFactory():
        return createUIPin

    @staticmethod
    def UINodesFactory():
        return createUINode

    @staticmethod
    def PinsInputWidgetFactory():
        return getInputWidget
