                                            Abstract_Graph


                    Основные принципы и как все будет работать.

1) У каждой ноды есть входные и выходные порты, и есть "мозг" - функция "compute", которая запрашивает данные у входных портов, производит какие-то вычисления а затем записывает результат во выходные порты.

2) Нода не должна знать ничего из окружающей среды и никогда не использует даные которые являются для нее внешними. Все что она знает это свои входные и выходные порты и может запрашивать у них данные или записывать их через функцию compute.

    Внутри ноды должны быть переменные для каждого инпута, в которых хранятся их значения. Чтобы в случае если порт будет отсоединен и останется в изоляции, алгоритм использующий данные брал их из этих пременных, котрые сохранят последнее значение с портов. А так же, можно сравнивать значения с портов со значениями в переменных и если они одинаковы - не производить никакие вычисления.

3) У каждого порта должно быть бинарное свойство dirty. И служебные списки кто на кого влияет. Для установления этих зависимостей должна вызываться функция portAffects.

    Например если это выходной порт ноды "А", то на него будет влиять какой-то входной порт этой ноды. А в момент соединения с нодой "Б" аутпут "А" станет влиять на какой-то инпут ноды "Б", и т.д. реализуя связи между входными и выходными портами нод. На основе таких связей будет реализован механизм dirty propogation для оптимального пересчета графа.

4) Выходные порты выдают информацию только если у них спросить (get_data). Функция compute не должна вызываться если ни один из выходных портов не подключен.

5) Данные запрещается читать\писать на прямую, для этого существуют специальные методы.                                        

                                        Правила.

- Подключены могут быть только порты разного типа.
- Входной порт может принимать только одно значение.
- Выходной порт может отдавать значение многим.
- Входной порт может принимать значение с выходного порта собственной ноды.


                                        Описание событий.

1) Выходной порт ноды "А" соеденился с входным портом ноды "Б".

    В этот момент заполнятся списки влияния.
    Заполняются списки графа.
    В визуальной части в этот момент будет рисоваться кривая между портами.
    Данные из выходного порта ноды "А" записались во входной порт ноды "Б".
    Расставляются dirty флаги.

2) Изменилось значения инпут порта ноды.

    В этот момент по служебным спискам портов кто на кого влияет выставляются флаги dirty вверх до конца графа. И как только с конца графа будет запрос выдать результат, верхняя нода проверит актуальны ли данные у своих входных портов, и встретит там dirty = true, тогда она спустится вниз по графу и проверит dirty флаги там, и так до тех пор пока не дойдет до dirty = false. С этого места с низу вверх начинают вызываться функции compute, данные начнут записываться в выходные порты до самого верха графа.

3) Связь между портами разорвалась.

    Редактируются списки влияния.
    В визуальной части, удаляется кривая.

4) Порт запраштвает данные.
    
    Если это выходной порт то проверяется dirty и если true вызывается функция compute, если false то берется записанное значение.
    Если это входной порт то находится подсоединенный выходной порт, проверяется dirty, если true то пересчитывается, если false то берется значение.

5) Порт устанавливает занчение.
    
