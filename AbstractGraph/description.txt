                                                Abstract_Graph


                                                Принципы.

1) У каждой ноды есть входные и выходные порты, и есть "мозг" - функция "compute", которая запрашивает данные у входных портов, производит какие-то вычисления а затем записывает результат в выходные порты.

2) Нода не должна знать ничего из окружающей среды и никогда не использует даные которые являются для нее внешними. Все что она знает это свои входные и выходные порты и может запрашивать у них данные или записывать их через функцию compute.

    У ноды есть входные и выходные порты, в каждом порте есть данные с предыдущего просчета. В случае если порт будет отсоединен и останется в изоляции, алгоритм использующий данные возьмет значение с предыдущего просчета.

3) У каждого порта должно быть бинарное свойство dirty. И служебные списки кто на кого влияет. Для установления этих зависимостей должна вызываться функция portAffects.

    Например если это выходной порт ноды "А", то на него будет влиять какой-то входной порт этой ноды. А в момент соединения с нодой "Б" аутпут "А" станет влиять на какой-то инпут ноды "Б", и т.д. реализуя связи между входными и выходными портами нод. На основе таких связей будет работать механизм dirty propogation для оптимального пересчета графа.

4) Выходные порты выдают информацию только если у них спросить (get_data).

5) Данные запрещается читать\писать на прямую внутри функции compute, для этого существуют специальные методы get_data, set_data. Хотя например в методе отображения графа plot мы обращаемся к данным на прямую, чтобы распечатать их значение в данный момент, не вызывая при этом get_data и не задействуя механизм dirty_propagation. Проще говоря, напрямую можем только чтобы посмотреть значение.

6) Кроме функции compute будут еще две дополнительные connected, disconnected. Выполняются один раз в момент создания связи или её разрыва. То есть функцию compute заполнять не обязательно.

7) Compute методы вызываются единожды для каждой ноды по глубине начиная с конца графа, учитывая dirty флаги. Информацию о том в каком порядке вызывать комьют должен знать граф, и её можно получить скормив мутоду ноду. Нужно учесть ситуацию ненаправленных циклов.

8) Ноды одного уровня вычисляются параллельно. Когда все ноды одного уровня просчитаны, начинают вычисляться ноды следующего уровня, и т.д.


                                                Правила.

- Подключены могут быть только порты разного типа (входной и выходной).
- Входной порт принимать только одну связь.
- Выходной порт может связываться со многими.
- Входной порт не может принимать значение с выходного порта собственной ноды. (Циклических нод не будет)


                                            Описание событий.

1) Выходной порт ноды "А" соеденился с входным портом ноды "Б".

    В этот момент заполнятся списки влияния.
    Заполняются списки графа.
    Создается связь. (графически - линия соединяющая порты)
    Данные из выходного порта ноды "А" записались во входной порт ноды "Б".
    Расставляются dirty флаги.

2) Связь между портами разорвалась.

    Редактируются списки влияния.
    Удаляется связь.

3) Изменилось значения инпут порта ноды.

    В этот момент по служебным спискам портов кто на кого влияет выставляются флаги dirty вверх до конца графа, начиная с порта в котором изменились данные.

4) Порт запраштвает данные.
    
    Если это выходной порт то проверяется dirty и если true вызывается функция compute, если false то берется записанное значение.
    Если это входной порт то находится подсоединенный выходной порт, проверяется dirty, если true то пересчитывается, если false то берется значение с подключеннго выходного порта.