 --- modulename: Launcher, funcname: <module>
Launcher.py(1): from AGraphPySide import *
 --- modulename: __init__, funcname: <module>
__init__.py(1): import sys
__init__.py(2): import os
__init__.py(3): from PySide import QtCore
 --- modulename: __init__, funcname: <module>
__init__.py(1): __all__ = ['QtCore', 'QtGui', 'QtNetwork', 'QtOpenGL', 'QtSql', 'QtSvg', 'QtTest', 'QtWebKit', 'QtScript']
__init__.py(2): __version__         = "1.2.4"
__init__.py(3): __version_info__    = (1, 2, 4, "final", 0)
__init__.py(6): def _setupQtDirectories():
__init__.py(41): _setupQtDirectories()
 --- modulename: __init__, funcname: _setupQtDirectories
__init__.py(7):     import sys
__init__.py(8):     import os
__init__.py(9):     from . import _utils
 --- modulename: _utils, funcname: <module>
_utils.py(21): import sys
_utils.py(22): import os
_utils.py(23): import fnmatch
 --- modulename: fnmatch, funcname: <module>
fnmatch.py(11): """
fnmatch.py(13): import re
fnmatch.py(15): __all__ = ["filter", "fnmatch", "fnmatchcase", "translate"]
fnmatch.py(17): _cache = {}
fnmatch.py(18): _MAXCACHE = 100
fnmatch.py(20): def _purge():
fnmatch.py(24): def fnmatch(name, pat):
fnmatch.py(45): def filter(names, pat):
fnmatch.py(69): def fnmatchcase(name, pat):
fnmatch.py(85): def translate(pat):
_utils.py(26): if sys.platform == 'win32':
_utils.py(31):     import ctypes
 --- modulename: __init__, funcname: <module>
__init__.py(1): """create and manipulate C data types in Python"""
__init__.py(3): import os as _os, sys as _sys
__init__.py(5): __version__ = "1.1.0"
__init__.py(7): from _ctypes import Union, Structure, Array
__init__.py(8): from _ctypes import _Pointer
__init__.py(9): from _ctypes import CFuncPtr as _CFuncPtr
__init__.py(10): from _ctypes import __version__ as _ctypes_version
__init__.py(11): from _ctypes import RTLD_LOCAL, RTLD_GLOBAL
__init__.py(12): from _ctypes import ArgumentError
__init__.py(14): from struct import calcsize as _calcsize
 --- modulename: struct, funcname: <module>
struct.py(1): from _struct import *
struct.py(2): from _struct import _clearcache
struct.py(3): from _struct import __doc__
__init__.py(16): if __version__ != _ctypes_version:
__init__.py(19): if _os.name in ("nt", "ce"):
__init__.py(20):     from _ctypes import FormatError
__init__.py(22): DEFAULT_MODE = RTLD_LOCAL
__init__.py(23): if _os.name == "posix" and _sys.platform == "darwin":
__init__.py(32): from _ctypes import FUNCFLAG_CDECL as _FUNCFLAG_CDECL, \
__init__.py(49): def create_string_buffer(init, size=None):
__init__.py(67): def c_buffer(init, size=None):
__init__.py(74): _c_functype_cache = {}
__init__.py(75): def CFUNCTYPE(restype, *argtypes, **kw):
__init__.py(108): if _os.name in ("nt", "ce"):
__init__.py(109):     from _ctypes import LoadLibrary as _dlopen
__init__.py(110):     from _ctypes import FUNCFLAG_STDCALL as _FUNCFLAG_STDCALL
__init__.py(111):     if _os.name == "ce":
__init__.py(115):     _win_functype_cache = {}
__init__.py(116):     def WINFUNCTYPE(restype, *argtypes, **kw):
__init__.py(134):     if WINFUNCTYPE.__doc__:
__init__.py(140): from _ctypes import sizeof, byref, addressof, alignment, resize
__init__.py(141): from _ctypes import get_errno, set_errno
__init__.py(142): from _ctypes import _SimpleCData
__init__.py(144): def _check_size(typ, typecode=None):
__init__.py(156): class py_object(_SimpleCData):
 --- modulename: __init__, funcname: py_object
__init__.py(156): class py_object(_SimpleCData):
__init__.py(157):     _type_ = "O"
__init__.py(158):     def __repr__(self):
__init__.py(163): _check_size(py_object, "P")
 --- modulename: __init__, funcname: _check_size
__init__.py(147):     from struct import calcsize
__init__.py(148):     if typecode is None:
__init__.py(151):     actual, required = sizeof(typ), calcsize(typecode)
__init__.py(152):     if actual != required:
__init__.py(165): class c_short(_SimpleCData):
 --- modulename: __init__, funcname: c_short
__init__.py(165): class c_short(_SimpleCData):
__init__.py(166):     _type_ = "h"
__init__.py(167): _check_size(c_short)
 --- modulename: __init__, funcname: _check_size
__init__.py(147):     from struct import calcsize
__init__.py(148):     if typecode is None:
__init__.py(150):         typecode = typ._type_
__init__.py(151):     actual, required = sizeof(typ), calcsize(typecode)
__init__.py(152):     if actual != required:
__init__.py(169): class c_ushort(_SimpleCData):
 --- modulename: __init__, funcname: c_ushort
__init__.py(169): class c_ushort(_SimpleCData):
__init__.py(170):     _type_ = "H"
__init__.py(171): _check_size(c_ushort)
 --- modulename: __init__, funcname: _check_size
__init__.py(147):     from struct import calcsize
__init__.py(148):     if typecode is None:
__init__.py(150):         typecode = typ._type_
__init__.py(151):     actual, required = sizeof(typ), calcsize(typecode)
__init__.py(152):     if actual != required:
__init__.py(173): class c_long(_SimpleCData):
 --- modulename: __init__, funcname: c_long
__init__.py(173): class c_long(_SimpleCData):
__init__.py(174):     _type_ = "l"
__init__.py(175): _check_size(c_long)
 --- modulename: __init__, funcname: _check_size
__init__.py(147):     from struct import calcsize
__init__.py(148):     if typecode is None:
__init__.py(150):         typecode = typ._type_
__init__.py(151):     actual, required = sizeof(typ), calcsize(typecode)
__init__.py(152):     if actual != required:
__init__.py(177): class c_ulong(_SimpleCData):
 --- modulename: __init__, funcname: c_ulong
__init__.py(177): class c_ulong(_SimpleCData):
__init__.py(178):     _type_ = "L"
__init__.py(179): _check_size(c_ulong)
 --- modulename: __init__, funcname: _check_size
__init__.py(147):     from struct import calcsize
__init__.py(148):     if typecode is None:
__init__.py(150):         typecode = typ._type_
__init__.py(151):     actual, required = sizeof(typ), calcsize(typecode)
__init__.py(152):     if actual != required:
__init__.py(181): if _calcsize("i") == _calcsize("l"):
__init__.py(183):     c_int = c_long
__init__.py(184):     c_uint = c_ulong
__init__.py(194): class c_float(_SimpleCData):
 --- modulename: __init__, funcname: c_float
__init__.py(194): class c_float(_SimpleCData):
__init__.py(195):     _type_ = "f"
__init__.py(196): _check_size(c_float)
 --- modulename: __init__, funcname: _check_size
__init__.py(147):     from struct import calcsize
__init__.py(148):     if typecode is None:
__init__.py(150):         typecode = typ._type_
__init__.py(151):     actual, required = sizeof(typ), calcsize(typecode)
__init__.py(152):     if actual != required:
__init__.py(198): class c_double(_SimpleCData):
 --- modulename: __init__, funcname: c_double
__init__.py(198): class c_double(_SimpleCData):
__init__.py(199):     _type_ = "d"
__init__.py(200): _check_size(c_double)
 --- modulename: __init__, funcname: _check_size
__init__.py(147):     from struct import calcsize
__init__.py(148):     if typecode is None:
__init__.py(150):         typecode = typ._type_
__init__.py(151):     actual, required = sizeof(typ), calcsize(typecode)
__init__.py(152):     if actual != required:
__init__.py(202): class c_longdouble(_SimpleCData):
 --- modulename: __init__, funcname: c_longdouble
__init__.py(202): class c_longdouble(_SimpleCData):
__init__.py(203):     _type_ = "g"
__init__.py(204): if sizeof(c_longdouble) == sizeof(c_double):
__init__.py(205):     c_longdouble = c_double
__init__.py(207): if _calcsize("l") == _calcsize("q"):
__init__.py(212):     class c_longlong(_SimpleCData):
 --- modulename: __init__, funcname: c_longlong
__init__.py(212):     class c_longlong(_SimpleCData):
__init__.py(213):         _type_ = "q"
__init__.py(214):     _check_size(c_longlong)
 --- modulename: __init__, funcname: _check_size
__init__.py(147):     from struct import calcsize
__init__.py(148):     if typecode is None:
__init__.py(150):         typecode = typ._type_
__init__.py(151):     actual, required = sizeof(typ), calcsize(typecode)
__init__.py(152):     if actual != required:
__init__.py(216):     class c_ulonglong(_SimpleCData):
 --- modulename: __init__, funcname: c_ulonglong
__init__.py(216):     class c_ulonglong(_SimpleCData):
__init__.py(217):         _type_ = "Q"
__init__.py(221):     _check_size(c_ulonglong)
 --- modulename: __init__, funcname: _check_size
__init__.py(147):     from struct import calcsize
__init__.py(148):     if typecode is None:
__init__.py(150):         typecode = typ._type_
__init__.py(151):     actual, required = sizeof(typ), calcsize(typecode)
__init__.py(152):     if actual != required:
__init__.py(223): class c_ubyte(_SimpleCData):
 --- modulename: __init__, funcname: c_ubyte
__init__.py(223): class c_ubyte(_SimpleCData):
__init__.py(224):     _type_ = "B"
__init__.py(225): c_ubyte.__ctype_le__ = c_ubyte.__ctype_be__ = c_ubyte
__init__.py(228): _check_size(c_ubyte)
 --- modulename: __init__, funcname: _check_size
__init__.py(147):     from struct import calcsize
__init__.py(148):     if typecode is None:
__init__.py(150):         typecode = typ._type_
__init__.py(151):     actual, required = sizeof(typ), calcsize(typecode)
__init__.py(152):     if actual != required:
__init__.py(230): class c_byte(_SimpleCData):
 --- modulename: __init__, funcname: c_byte
__init__.py(230): class c_byte(_SimpleCData):
__init__.py(231):     _type_ = "b"
__init__.py(232): c_byte.__ctype_le__ = c_byte.__ctype_be__ = c_byte
__init__.py(233): _check_size(c_byte)
 --- modulename: __init__, funcname: _check_size
__init__.py(147):     from struct import calcsize
__init__.py(148):     if typecode is None:
__init__.py(150):         typecode = typ._type_
__init__.py(151):     actual, required = sizeof(typ), calcsize(typecode)
__init__.py(152):     if actual != required:
__init__.py(235): class c_char(_SimpleCData):
 --- modulename: __init__, funcname: c_char
__init__.py(235): class c_char(_SimpleCData):
__init__.py(236):     _type_ = "c"
__init__.py(237): c_char.__ctype_le__ = c_char.__ctype_be__ = c_char
__init__.py(238): _check_size(c_char)
 --- modulename: __init__, funcname: _check_size
__init__.py(147):     from struct import calcsize
__init__.py(148):     if typecode is None:
__init__.py(150):         typecode = typ._type_
__init__.py(151):     actual, required = sizeof(typ), calcsize(typecode)
__init__.py(152):     if actual != required:
__init__.py(240): class c_char_p(_SimpleCData):
 --- modulename: __init__, funcname: c_char_p
__init__.py(240): class c_char_p(_SimpleCData):
__init__.py(241):     _type_ = "z"
__init__.py(242):     if _os.name == "nt":
__init__.py(243):         def __repr__(self):
__init__.py(250): _check_size(c_char_p, "P")
 --- modulename: __init__, funcname: _check_size
__init__.py(147):     from struct import calcsize
__init__.py(148):     if typecode is None:
__init__.py(151):     actual, required = sizeof(typ), calcsize(typecode)
__init__.py(152):     if actual != required:
__init__.py(252): class c_void_p(_SimpleCData):
 --- modulename: __init__, funcname: c_void_p
__init__.py(252): class c_void_p(_SimpleCData):
__init__.py(253):     _type_ = "P"
__init__.py(254): c_voidp = c_void_p # backwards compatibility (to a bug)
__init__.py(255): _check_size(c_void_p)
 --- modulename: __init__, funcname: _check_size
__init__.py(147):     from struct import calcsize
__init__.py(148):     if typecode is None:
__init__.py(150):         typecode = typ._type_
__init__.py(151):     actual, required = sizeof(typ), calcsize(typecode)
__init__.py(152):     if actual != required:
__init__.py(257): class c_bool(_SimpleCData):
 --- modulename: __init__, funcname: c_bool
__init__.py(257): class c_bool(_SimpleCData):
__init__.py(258):     _type_ = "?"
__init__.py(260): from _ctypes import POINTER, pointer, _pointer_type_cache
__init__.py(262): def _reset_cache():
__init__.py(278): try:
__init__.py(279):     from _ctypes import set_conversion_mode
__init__.py(283):     if _os.name in ("nt", "ce"):
__init__.py(284):         set_conversion_mode("mbcs", "ignore")
__init__.py(288):     class c_wchar_p(_SimpleCData):
 --- modulename: __init__, funcname: c_wchar_p
__init__.py(288):     class c_wchar_p(_SimpleCData):
__init__.py(289):         _type_ = "Z"
__init__.py(291):     class c_wchar(_SimpleCData):
 --- modulename: __init__, funcname: c_wchar
__init__.py(291):     class c_wchar(_SimpleCData):
__init__.py(292):         _type_ = "u"
__init__.py(294):     def create_unicode_buffer(init, size=None):
__init__.py(313): def SetPointerType(pointer, cls):
__init__.py(323): def ARRAY(typ, len):
__init__.py(329): class CDLL(object):
 --- modulename: __init__, funcname: CDLL
__init__.py(329): class CDLL(object):
__init__.py(342):     """
__init__.py(343):     _func_flags_ = _FUNCFLAG_CDECL
__init__.py(344):     _func_restype_ = c_int
__init__.py(346):     def __init__(self, name, mode=DEFAULT_MODE, handle=None,
__init__.py(347):                  use_errno=False,
__init__.py(348):                  use_last_error=False):
__init__.py(366):     def __repr__(self):
__init__.py(372):     def __getattr__(self, name):
__init__.py(379):     def __getitem__(self, name_or_ordinal):
__init__.py(385): class PyDLL(CDLL):
 --- modulename: __init__, funcname: PyDLL
__init__.py(385): class PyDLL(CDLL):
__init__.py(389):     """
__init__.py(390):     _func_flags_ = _FUNCFLAG_CDECL | _FUNCFLAG_PYTHONAPI
__init__.py(392): if _os.name in ("nt", "ce"):
__init__.py(394):     class WinDLL(CDLL):
 --- modulename: __init__, funcname: WinDLL
__init__.py(394):     class WinDLL(CDLL):
__init__.py(397):         """
__init__.py(398):         _func_flags_ = _FUNCFLAG_STDCALL
__init__.py(402):     from _ctypes import _check_HRESULT, _SimpleCData
__init__.py(403):     class HRESULT(_SimpleCData):
 --- modulename: __init__, funcname: HRESULT
__init__.py(403):     class HRESULT(_SimpleCData):
__init__.py(404):         _type_ = "l"
__init__.py(414):         _check_retval_ = _check_HRESULT
__init__.py(416):     class OleDLL(CDLL):
 --- modulename: __init__, funcname: OleDLL
__init__.py(416):     class OleDLL(CDLL):
__init__.py(421):         """
__init__.py(422):         _func_flags_ = _FUNCFLAG_STDCALL
__init__.py(423):         _func_restype_ = HRESULT
__init__.py(425): class LibraryLoader(object):
 --- modulename: __init__, funcname: LibraryLoader
__init__.py(425): class LibraryLoader(object):
__init__.py(426):     def __init__(self, dlltype):
__init__.py(429):     def __getattr__(self, name):
__init__.py(436):     def __getitem__(self, name):
__init__.py(439):     def LoadLibrary(self, name):
__init__.py(442): cdll = LibraryLoader(CDLL)
 --- modulename: __init__, funcname: __init__
__init__.py(427):         self._dlltype = dlltype
__init__.py(443): pydll = LibraryLoader(PyDLL)
 --- modulename: __init__, funcname: __init__
__init__.py(427):         self._dlltype = dlltype
__init__.py(445): if _os.name in ("nt", "ce"):
__init__.py(446):     pythonapi = PyDLL("python dll", None, _sys.dllhandle)
 --- modulename: __init__, funcname: __init__
__init__.py(349):         self._name = name
__init__.py(350):         flags = self._func_flags_
__init__.py(351):         if use_errno:
__init__.py(353):         if use_last_error:
__init__.py(356):         class _FuncPtr(_CFuncPtr):
 --- modulename: __init__, funcname: _FuncPtr
__init__.py(356):         class _FuncPtr(_CFuncPtr):
__init__.py(357):             _flags_ = flags
__init__.py(358):             _restype_ = self._func_restype_
__init__.py(359):         self._FuncPtr = _FuncPtr
__init__.py(361):         if handle is None:
__init__.py(364):             self._handle = handle
__init__.py(453): if _os.name in ("nt", "ce"):
__init__.py(454):     windll = LibraryLoader(WinDLL)
 --- modulename: __init__, funcname: __init__
__init__.py(427):         self._dlltype = dlltype
__init__.py(455):     oledll = LibraryLoader(OleDLL)
 --- modulename: __init__, funcname: __init__
__init__.py(427):         self._dlltype = dlltype
__init__.py(457):     if _os.name == "nt":
__init__.py(458):         GetLastError = windll.kernel32.GetLastError
 --- modulename: __init__, funcname: __getattr__
__init__.py(430):         if name[0] == '_':
__init__.py(432):         dll = self._dlltype(name)
 --- modulename: __init__, funcname: __init__
__init__.py(349):         self._name = name
__init__.py(350):         flags = self._func_flags_
__init__.py(351):         if use_errno:
__init__.py(353):         if use_last_error:
__init__.py(356):         class _FuncPtr(_CFuncPtr):
 --- modulename: __init__, funcname: _FuncPtr
__init__.py(356):         class _FuncPtr(_CFuncPtr):
__init__.py(357):             _flags_ = flags
__init__.py(358):             _restype_ = self._func_restype_
__init__.py(359):         self._FuncPtr = _FuncPtr
__init__.py(361):         if handle is None:
__init__.py(362):             self._handle = _dlopen(self._name, mode)
__init__.py(433):         setattr(self, name, dll)
__init__.py(434):         return dll
 --- modulename: __init__, funcname: __getattr__
__init__.py(373):         if name.startswith('__') and name.endswith('__'):
__init__.py(375):         func = self.__getitem__(name)
 --- modulename: __init__, funcname: __getitem__
__init__.py(380):         func = self._FuncPtr((name_or_ordinal, self))
__init__.py(381):         if not isinstance(name_or_ordinal, (int, long)):
__init__.py(382):             func.__name__ = name_or_ordinal
__init__.py(383):         return func
__init__.py(376):         setattr(self, name, func)
__init__.py(377):         return func
__init__.py(461):     from _ctypes import get_last_error, set_last_error
__init__.py(463):     def WinError(code=None, descr=None):
__init__.py(470): if sizeof(c_uint) == sizeof(c_void_p):
__init__.py(471):     c_size_t = c_uint
__init__.py(472):     c_ssize_t = c_int
__init__.py(482): from _ctypes import _memmove_addr, _memset_addr, _string_at_addr, _cast_addr
__init__.py(485): memmove = CFUNCTYPE(c_void_p, c_void_p, c_void_p, c_size_t)(_memmove_addr)
 --- modulename: __init__, funcname: CFUNCTYPE
__init__.py(91):     flags = _FUNCFLAG_CDECL
__init__.py(92):     if kw.pop("use_errno", False):
__init__.py(94):     if kw.pop("use_last_error", False):
__init__.py(96):     if kw:
__init__.py(98):     try:
__init__.py(99):         return _c_functype_cache[(restype, argtypes, flags)]
__init__.py(100):     except KeyError:
__init__.py(101):         class CFunctionType(_CFuncPtr):
 --- modulename: __init__, funcname: CFunctionType
__init__.py(101):         class CFunctionType(_CFuncPtr):
__init__.py(102):             _argtypes_ = argtypes
__init__.py(103):             _restype_ = restype
__init__.py(104):             _flags_ = flags
__init__.py(105):         _c_functype_cache[(restype, argtypes, flags)] = CFunctionType
__init__.py(106):         return CFunctionType
__init__.py(488): memset = CFUNCTYPE(c_void_p, c_void_p, c_int, c_size_t)(_memset_addr)
 --- modulename: __init__, funcname: CFUNCTYPE
__init__.py(91):     flags = _FUNCFLAG_CDECL
__init__.py(92):     if kw.pop("use_errno", False):
__init__.py(94):     if kw.pop("use_last_error", False):
__init__.py(96):     if kw:
__init__.py(98):     try:
__init__.py(99):         return _c_functype_cache[(restype, argtypes, flags)]
__init__.py(100):     except KeyError:
__init__.py(101):         class CFunctionType(_CFuncPtr):
 --- modulename: __init__, funcname: CFunctionType
__init__.py(101):         class CFunctionType(_CFuncPtr):
__init__.py(102):             _argtypes_ = argtypes
__init__.py(103):             _restype_ = restype
__init__.py(104):             _flags_ = flags
__init__.py(105):         _c_functype_cache[(restype, argtypes, flags)] = CFunctionType
__init__.py(106):         return CFunctionType
__init__.py(490): def PYFUNCTYPE(restype, *argtypes):
__init__.py(497): _cast = PYFUNCTYPE(py_object, c_void_p, py_object, py_object)(_cast_addr)
 --- modulename: __init__, funcname: PYFUNCTYPE
__init__.py(491):     class CFunctionType(_CFuncPtr):
 --- modulename: __init__, funcname: CFunctionType
__init__.py(491):     class CFunctionType(_CFuncPtr):
__init__.py(492):         _argtypes_ = argtypes
__init__.py(493):         _restype_ = restype
__init__.py(494):         _flags_ = _FUNCFLAG_CDECL | _FUNCFLAG_PYTHONAPI
__init__.py(495):     return CFunctionType
__init__.py(498): def cast(obj, typ):
__init__.py(501): _string_at = PYFUNCTYPE(py_object, c_void_p, c_int)(_string_at_addr)
 --- modulename: __init__, funcname: PYFUNCTYPE
__init__.py(491):     class CFunctionType(_CFuncPtr):
 --- modulename: __init__, funcname: CFunctionType
__init__.py(491):     class CFunctionType(_CFuncPtr):
__init__.py(492):         _argtypes_ = argtypes
__init__.py(493):         _restype_ = restype
__init__.py(494):         _flags_ = _FUNCFLAG_CDECL | _FUNCFLAG_PYTHONAPI
__init__.py(495):     return CFunctionType
__init__.py(502): def string_at(ptr, size=-1):
__init__.py(508): try:
__init__.py(509):     from _ctypes import _wstring_at_addr
__init__.py(513):     _wstring_at = PYFUNCTYPE(py_object, c_void_p, c_int)(_wstring_at_addr)
 --- modulename: __init__, funcname: PYFUNCTYPE
__init__.py(491):     class CFunctionType(_CFuncPtr):
 --- modulename: __init__, funcname: CFunctionType
__init__.py(491):     class CFunctionType(_CFuncPtr):
__init__.py(492):         _argtypes_ = argtypes
__init__.py(493):         _restype_ = restype
__init__.py(494):         _flags_ = _FUNCFLAG_CDECL | _FUNCFLAG_PYTHONAPI
__init__.py(495):     return CFunctionType
__init__.py(514):     def wstring_at(ptr, size=-1):
__init__.py(521): if _os.name in ("nt", "ce"): # COM stuff
__init__.py(522):     def DllGetClassObject(rclsid, riid, ppv):
__init__.py(530):     def DllCanUnloadNow():
__init__.py(537): from ctypes._endian import BigEndianStructure, LittleEndianStructure
 --- modulename: _endian, funcname: <module>
_endian.py(1): import sys
_endian.py(2): from ctypes import *
_endian.py(4): _array_type = type(Array)
_endian.py(6): def _other_endian(typ):
_endian.py(23): class _swapped_meta(type(Structure)):
 --- modulename: _endian, funcname: _swapped_meta
_endian.py(23): class _swapped_meta(type(Structure)):
_endian.py(24):     def __setattr__(self, attrname, value):
_endian.py(41): if sys.byteorder == "little":
_endian.py(42):     _OTHER_ENDIAN = "__ctype_be__"
_endian.py(44):     LittleEndianStructure = Structure
_endian.py(46):     class BigEndianStructure(Structure):
 --- modulename: _endian, funcname: BigEndianStructure
_endian.py(46):     class BigEndianStructure(Structure):
_endian.py(47):         """Structure with big endian byte order"""
_endian.py(48):         __metaclass__ = _swapped_meta
_endian.py(49):         _swappedbytes_ = None
__init__.py(540): c_int8 = c_byte
__init__.py(541): c_uint8 = c_ubyte
__init__.py(542): for kind in [c_short, c_int, c_long, c_longlong]:
__init__.py(543):     if sizeof(kind) == 2: c_int16 = kind
__init__.py(542): for kind in [c_short, c_int, c_long, c_longlong]:
__init__.py(543):     if sizeof(kind) == 2: c_int16 = kind
__init__.py(544):     elif sizeof(kind) == 4: c_int32 = kind
__init__.py(542): for kind in [c_short, c_int, c_long, c_longlong]:
__init__.py(543):     if sizeof(kind) == 2: c_int16 = kind
__init__.py(544):     elif sizeof(kind) == 4: c_int32 = kind
__init__.py(542): for kind in [c_short, c_int, c_long, c_longlong]:
__init__.py(543):     if sizeof(kind) == 2: c_int16 = kind
__init__.py(544):     elif sizeof(kind) == 4: c_int32 = kind
__init__.py(545):     elif sizeof(kind) == 8: c_int64 = kind
__init__.py(542): for kind in [c_short, c_int, c_long, c_longlong]:
__init__.py(546): for kind in [c_ushort, c_uint, c_ulong, c_ulonglong]:
__init__.py(547):     if sizeof(kind) == 2: c_uint16 = kind
__init__.py(546): for kind in [c_ushort, c_uint, c_ulong, c_ulonglong]:
__init__.py(547):     if sizeof(kind) == 2: c_uint16 = kind
__init__.py(548):     elif sizeof(kind) == 4: c_uint32 = kind
__init__.py(546): for kind in [c_ushort, c_uint, c_ulong, c_ulonglong]:
__init__.py(547):     if sizeof(kind) == 2: c_uint16 = kind
__init__.py(548):     elif sizeof(kind) == 4: c_uint32 = kind
__init__.py(546): for kind in [c_ushort, c_uint, c_ulong, c_ulonglong]:
__init__.py(547):     if sizeof(kind) == 2: c_uint16 = kind
__init__.py(548):     elif sizeof(kind) == 4: c_uint32 = kind
__init__.py(549):     elif sizeof(kind) == 8: c_uint64 = kind
__init__.py(546): for kind in [c_ushort, c_uint, c_ulong, c_ulonglong]:
__init__.py(550): del(kind)
__init__.py(552): _reset_cache()
 --- modulename: __init__, funcname: _reset_cache
__init__.py(263):     _pointer_type_cache.clear()
__init__.py(264):     _c_functype_cache.clear()
__init__.py(265):     if _os.name in ("nt", "ce"):
__init__.py(266):         _win_functype_cache.clear()
__init__.py(268):     POINTER(c_wchar).from_param = c_wchar_p.from_param
__init__.py(270):     POINTER(c_char).from_param = c_char_p.from_param
__init__.py(271):     _pointer_type_cache[None] = c_void_p
__init__.py(276):     CFUNCTYPE(c_int)(lambda: None)
 --- modulename: __init__, funcname: CFUNCTYPE
__init__.py(91):     flags = _FUNCFLAG_CDECL
__init__.py(92):     if kw.pop("use_errno", False):
__init__.py(94):     if kw.pop("use_last_error", False):
__init__.py(96):     if kw:
__init__.py(98):     try:
__init__.py(99):         return _c_functype_cache[(restype, argtypes, flags)]
__init__.py(100):     except KeyError:
__init__.py(101):         class CFunctionType(_CFuncPtr):
 --- modulename: __init__, funcname: CFunctionType
__init__.py(101):         class CFunctionType(_CFuncPtr):
__init__.py(102):             _argtypes_ = argtypes
__init__.py(103):             _restype_ = restype
__init__.py(104):             _flags_ = flags
__init__.py(105):         _c_functype_cache[(restype, argtypes, flags)] = CFunctionType
__init__.py(106):         return CFunctionType
_utils.py(32):     from ctypes import POINTER, WinError, sizeof, byref, create_unicode_buffer
_utils.py(33):     from ctypes.wintypes import MAX_PATH, LPCWSTR, LPWSTR, DWORD
 --- modulename: wintypes, funcname: <module>
wintypes.py(2): from ctypes import *
wintypes.py(4): BYTE = c_byte
wintypes.py(5): WORD = c_ushort
wintypes.py(6): DWORD = c_ulong
wintypes.py(8): WCHAR = c_wchar
wintypes.py(9): UINT = c_uint
wintypes.py(10): INT = c_int
wintypes.py(12): DOUBLE = c_double
wintypes.py(13): FLOAT = c_float
wintypes.py(15): BOOLEAN = BYTE
wintypes.py(16): BOOL = c_long
wintypes.py(18): from ctypes import _SimpleCData
wintypes.py(19): class VARIANT_BOOL(_SimpleCData):
 --- modulename: wintypes, funcname: VARIANT_BOOL
wintypes.py(19): class VARIANT_BOOL(_SimpleCData):
wintypes.py(20):     _type_ = "v"
wintypes.py(21):     def __repr__(self):
wintypes.py(24): ULONG = c_ulong
wintypes.py(25): LONG = c_long
wintypes.py(27): USHORT = c_ushort
wintypes.py(28): SHORT = c_short
wintypes.py(31): _LARGE_INTEGER = LARGE_INTEGER = c_longlong
wintypes.py(32): _ULARGE_INTEGER = ULARGE_INTEGER = c_ulonglong
wintypes.py(34): LPCOLESTR = LPOLESTR = OLESTR = c_wchar_p
wintypes.py(35): LPCWSTR = LPWSTR = c_wchar_p
wintypes.py(36): LPCSTR = LPSTR = c_char_p
wintypes.py(37): LPCVOID = LPVOID = c_void_p
wintypes.py(41): if sizeof(c_long) == sizeof(c_void_p):
wintypes.py(42):     WPARAM = c_ulong
wintypes.py(43):     LPARAM = c_long
wintypes.py(48): ATOM = WORD
wintypes.py(49): LANGID = WORD
wintypes.py(51): COLORREF = DWORD
wintypes.py(52): LGRPID = DWORD
wintypes.py(53): LCTYPE = DWORD
wintypes.py(55): LCID = DWORD
wintypes.py(59): HANDLE = c_void_p # in the header files: void *
wintypes.py(61): HACCEL = HANDLE
wintypes.py(62): HBITMAP = HANDLE
wintypes.py(63): HBRUSH = HANDLE
wintypes.py(64): HCOLORSPACE = HANDLE
wintypes.py(65): HDC = HANDLE
wintypes.py(66): HDESK = HANDLE
wintypes.py(67): HDWP = HANDLE
wintypes.py(68): HENHMETAFILE = HANDLE
wintypes.py(69): HFONT = HANDLE
wintypes.py(70): HGDIOBJ = HANDLE
wintypes.py(71): HGLOBAL = HANDLE
wintypes.py(72): HHOOK = HANDLE
wintypes.py(73): HICON = HANDLE
wintypes.py(74): HINSTANCE = HANDLE
wintypes.py(75): HKEY = HANDLE
wintypes.py(76): HKL = HANDLE
wintypes.py(77): HLOCAL = HANDLE
wintypes.py(78): HMENU = HANDLE
wintypes.py(79): HMETAFILE = HANDLE
wintypes.py(80): HMODULE = HANDLE
wintypes.py(81): HMONITOR = HANDLE
wintypes.py(82): HPALETTE = HANDLE
wintypes.py(83): HPEN = HANDLE
wintypes.py(84): HRGN = HANDLE
wintypes.py(85): HRSRC = HANDLE
wintypes.py(86): HSTR = HANDLE
wintypes.py(87): HTASK = HANDLE
wintypes.py(88): HWINSTA = HANDLE
wintypes.py(89): HWND = HANDLE
wintypes.py(90): SC_HANDLE = HANDLE
wintypes.py(91): SERVICE_STATUS_HANDLE = HANDLE
wintypes.py(96): class RECT(Structure):
 --- modulename: wintypes, funcname: RECT
wintypes.py(96): class RECT(Structure):
wintypes.py(97):     _fields_ = [("left", c_long),
wintypes.py(98):                 ("top", c_long),
wintypes.py(99):                 ("right", c_long),
wintypes.py(100):                 ("bottom", c_long)]
wintypes.py(101): tagRECT = _RECTL = RECTL = RECT
wintypes.py(103): class _SMALL_RECT(Structure):
 --- modulename: wintypes, funcname: _SMALL_RECT
wintypes.py(103): class _SMALL_RECT(Structure):
wintypes.py(104):     _fields_ = [('Left', c_short),
wintypes.py(105):                 ('Top', c_short),
wintypes.py(106):                 ('Right', c_short),
wintypes.py(107):                 ('Bottom', c_short)]
wintypes.py(108): SMALL_RECT = _SMALL_RECT
wintypes.py(110): class _COORD(Structure):
 --- modulename: wintypes, funcname: _COORD
wintypes.py(110): class _COORD(Structure):
wintypes.py(111):     _fields_ = [('X', c_short),
wintypes.py(112):                 ('Y', c_short)]
wintypes.py(114): class POINT(Structure):
 --- modulename: wintypes, funcname: POINT
wintypes.py(114): class POINT(Structure):
wintypes.py(115):     _fields_ = [("x", c_long),
wintypes.py(116):                 ("y", c_long)]
wintypes.py(117): tagPOINT = _POINTL = POINTL = POINT
wintypes.py(119): class SIZE(Structure):
 --- modulename: wintypes, funcname: SIZE
wintypes.py(119): class SIZE(Structure):
wintypes.py(120):     _fields_ = [("cx", c_long),
wintypes.py(121):                 ("cy", c_long)]
wintypes.py(122): tagSIZE = SIZEL = SIZE
wintypes.py(124): def RGB(red, green, blue):
wintypes.py(127): class FILETIME(Structure):
 --- modulename: wintypes, funcname: FILETIME
wintypes.py(127): class FILETIME(Structure):
wintypes.py(128):     _fields_ = [("dwLowDateTime", DWORD),
wintypes.py(129):                 ("dwHighDateTime", DWORD)]
wintypes.py(130): _FILETIME = FILETIME
wintypes.py(132): class MSG(Structure):
 --- modulename: wintypes, funcname: MSG
wintypes.py(132): class MSG(Structure):
wintypes.py(133):     _fields_ = [("hWnd", HWND),
wintypes.py(134):                 ("message", c_uint),
wintypes.py(135):                 ("wParam", WPARAM),
wintypes.py(136):                 ("lParam", LPARAM),
wintypes.py(137):                 ("time", DWORD),
wintypes.py(138):                 ("pt", POINT)]
wintypes.py(139): tagMSG = MSG
wintypes.py(140): MAX_PATH = 260
wintypes.py(142): class WIN32_FIND_DATAA(Structure):
 --- modulename: wintypes, funcname: WIN32_FIND_DATAA
wintypes.py(142): class WIN32_FIND_DATAA(Structure):
wintypes.py(143):     _fields_ = [("dwFileAttributes", DWORD),
wintypes.py(144):                 ("ftCreationTime", FILETIME),
wintypes.py(145):                 ("ftLastAccessTime", FILETIME),
wintypes.py(146):                 ("ftLastWriteTime", FILETIME),
wintypes.py(147):                 ("nFileSizeHigh", DWORD),
wintypes.py(148):                 ("nFileSizeLow", DWORD),
wintypes.py(149):                 ("dwReserved0", DWORD),
wintypes.py(150):                 ("dwReserved1", DWORD),
wintypes.py(151):                 ("cFileName", c_char * MAX_PATH),
wintypes.py(152):                 ("cAlternateFileName", c_char * 14)]
wintypes.py(154): class WIN32_FIND_DATAW(Structure):
 --- modulename: wintypes, funcname: WIN32_FIND_DATAW
wintypes.py(154): class WIN32_FIND_DATAW(Structure):
wintypes.py(155):     _fields_ = [("dwFileAttributes", DWORD),
wintypes.py(156):                 ("ftCreationTime", FILETIME),
wintypes.py(157):                 ("ftLastAccessTime", FILETIME),
wintypes.py(158):                 ("ftLastWriteTime", FILETIME),
wintypes.py(159):                 ("nFileSizeHigh", DWORD),
wintypes.py(160):                 ("nFileSizeLow", DWORD),
wintypes.py(161):                 ("dwReserved0", DWORD),
wintypes.py(162):                 ("dwReserved1", DWORD),
wintypes.py(163):                 ("cFileName", c_wchar * MAX_PATH),
wintypes.py(164):                 ("cAlternateFileName", c_wchar * 14)]
wintypes.py(166): __all__ = ['ATOM', 'BOOL', 'BOOLEAN', 'BYTE', 'COLORREF', 'DOUBLE', 'DWORD',
wintypes.py(167):            'FILETIME', 'FLOAT', 'HACCEL', 'HANDLE', 'HBITMAP', 'HBRUSH',
wintypes.py(168):            'HCOLORSPACE', 'HDC', 'HDESK', 'HDWP', 'HENHMETAFILE', 'HFONT',
wintypes.py(169):            'HGDIOBJ', 'HGLOBAL', 'HHOOK', 'HICON', 'HINSTANCE', 'HKEY',
wintypes.py(170):            'HKL', 'HLOCAL', 'HMENU', 'HMETAFILE', 'HMODULE', 'HMONITOR',
wintypes.py(171):            'HPALETTE', 'HPEN', 'HRGN', 'HRSRC', 'HSTR', 'HTASK', 'HWINSTA',
wintypes.py(172):            'HWND', 'INT', 'LANGID', 'LARGE_INTEGER', 'LCID', 'LCTYPE',
wintypes.py(173):            'LGRPID', 'LONG', 'LPARAM', 'LPCOLESTR', 'LPCSTR', 'LPCVOID',
wintypes.py(174):            'LPCWSTR', 'LPOLESTR', 'LPSTR', 'LPVOID', 'LPWSTR', 'MAX_PATH',
wintypes.py(175):            'MSG', 'OLESTR', 'POINT', 'POINTL', 'RECT', 'RECTL', 'RGB',
wintypes.py(176):            'SC_HANDLE', 'SERVICE_STATUS_HANDLE', 'SHORT', 'SIZE', 'SIZEL',
wintypes.py(177):            'SMALL_RECT', 'UINT', 'ULARGE_INTEGER', 'ULONG', 'USHORT',
wintypes.py(178):            'VARIANT_BOOL', 'WCHAR', 'WIN32_FIND_DATAA', 'WIN32_FIND_DATAW',
wintypes.py(179):            'WORD', 'WPARAM', '_COORD', '_FILETIME', '_LARGE_INTEGER',
wintypes.py(180):            '_POINTL', '_RECTL', '_SMALL_RECT', '_ULARGE_INTEGER', 'tagMSG',
wintypes.py(181):            'tagPOINT', 'tagRECT', 'tagSIZE']
_utils.py(35):     GetShortPathNameW = ctypes.windll.kernel32.GetShortPathNameW
 --- modulename: __init__, funcname: __getattr__
__init__.py(373):         if name.startswith('__') and name.endswith('__'):
__init__.py(375):         func = self.__getitem__(name)
 --- modulename: __init__, funcname: __getitem__
__init__.py(380):         func = self._FuncPtr((name_or_ordinal, self))
__init__.py(381):         if not isinstance(name_or_ordinal, (int, long)):
__init__.py(382):             func.__name__ = name_or_ordinal
__init__.py(383):         return func
__init__.py(376):         setattr(self, name, func)
__init__.py(377):         return func
_utils.py(36):     GetShortPathNameW.argtypes = [LPCWSTR, LPWSTR, DWORD]
_utils.py(37):     GetShortPathNameW.restype = DWORD
_utils.py(39):     GetLongPathNameW = ctypes.windll.kernel32.GetLongPathNameW
 --- modulename: __init__, funcname: __getattr__
__init__.py(373):         if name.startswith('__') and name.endswith('__'):
__init__.py(375):         func = self.__getitem__(name)
 --- modulename: __init__, funcname: __getitem__
__init__.py(380):         func = self._FuncPtr((name_or_ordinal, self))
__init__.py(381):         if not isinstance(name_or_ordinal, (int, long)):
__init__.py(382):             func.__name__ = name_or_ordinal
__init__.py(383):         return func
__init__.py(376):         setattr(self, name, func)
__init__.py(377):         return func
_utils.py(40):     GetLongPathNameW.argtypes = [LPCWSTR, LPWSTR, DWORD]
_utils.py(41):     GetLongPathNameW.restype = DWORD
_utils.py(43):     PY_2 = sys.version_info[0] < 3
_utils.py(45):     if PY_2:
_utils.py(46):         def u(x):
_utils.py(48):         def u_fs(x):
_utils.py(56):     def _get_win32_short_name(s):
_utils.py(71):     def _get_win32_long_name(s):
_utils.py(86):     def _get_win32_case_sensitive_name(s):
_utils.py(91):     def get_pyside_dir():
_utils.py(109): def _filter_match(name, patterns):
_utils.py(118): def _dir_contains(dir, filter):
_utils.py(127): def _rcc_write_number(out, number, width):
_utils.py(142): def _rcc_write_data(out, data):
_utils.py(148): def _get_qt_conf_resource(prefix, binaries, plugins, imports, translations):
_utils.py(200):                      force=False):
__init__.py(11):     pysideDir = _utils.get_pyside_dir()
 --- modulename: _utils, funcname: get_pyside_dir
_utils.py(92):         try:
_utils.py(93):             from . import QtCore
 --- modulename: atexit, funcname: <module>
atexit.py(6): """
atexit.py(8): __all__ = ["register"]
atexit.py(10): import sys
atexit.py(12): _exithandlers = []
atexit.py(13): def _run_exitfuncs():
atexit.py(37): def register(func, *targs, **kargs):
atexit.py(49): if hasattr(sys, "exitfunc"):
atexit.py(52): sys.exitfunc = _run_exitfuncs
atexit.py(54): if __name__ == "__main__":
 --- modulename: atexit, funcname: register
atexit.py(46):     _exithandlers.append((func, targs, kargs))
atexit.py(47):     return func
_utils.py(97):             return _get_win32_case_sensitive_name(os.path.abspath(os.path.dirname(QtCore.__file__)))
 --- modulename: ntpath, funcname: dirname
ntpath.py(215):     return split(p)[0]
 --- modulename: ntpath, funcname: split
ntpath.py(180):     d, p = splitdrive(p)
 --- modulename: ntpath, funcname: splitdrive
ntpath.py(115):     if len(p) > 1:
ntpath.py(116):         normp = p.replace(altsep, sep)
ntpath.py(117):         if (normp[0:2] == sep*2) and (normp[2:3] != sep):
ntpath.py(133):         if normp[1] == ':':
ntpath.py(134):             return p[:2], p[2:]
ntpath.py(182):     i = len(p)
ntpath.py(183):     while i and p[i-1] not in '/\\':
ntpath.py(184):         i = i - 1
ntpath.py(183):     while i and p[i-1] not in '/\\':
ntpath.py(184):         i = i - 1
ntpath.py(183):     while i and p[i-1] not in '/\\':
ntpath.py(184):         i = i - 1
ntpath.py(183):     while i and p[i-1] not in '/\\':
ntpath.py(184):         i = i - 1
ntpath.py(183):     while i and p[i-1] not in '/\\':
ntpath.py(184):         i = i - 1
ntpath.py(183):     while i and p[i-1] not in '/\\':
ntpath.py(184):         i = i - 1
ntpath.py(183):     while i and p[i-1] not in '/\\':
ntpath.py(184):         i = i - 1
ntpath.py(183):     while i and p[i-1] not in '/\\':
ntpath.py(184):         i = i - 1
ntpath.py(183):     while i and p[i-1] not in '/\\':
ntpath.py(184):         i = i - 1
ntpath.py(183):     while i and p[i-1] not in '/\\':
ntpath.py(184):         i = i - 1
ntpath.py(183):     while i and p[i-1] not in '/\\':
ntpath.py(185):     head, tail = p[:i], p[i:]  # now tail has no slashes
ntpath.py(187):     head2 = head
ntpath.py(188):     while head2 and head2[-1] in '/\\':
ntpath.py(189):         head2 = head2[:-1]
ntpath.py(188):     while head2 and head2[-1] in '/\\':
ntpath.py(190):     head = head2 or head
ntpath.py(191):     return d + head, tail
 --- modulename: ntpath, funcname: abspath
ntpath.py(486):         if path: # Empty path must return current working directory.
ntpath.py(487):             try:
ntpath.py(488):                 path = _getfullpathname(path)
ntpath.py(495):         return normpath(path)
 --- modulename: ntpath, funcname: normpath
ntpath.py(418):     backslash, dot = (u'\\', u'.') if isinstance(path, _unicode) else ('\\', '.')
ntpath.py(419):     if path.startswith(('\\\\.\\', '\\\\?\\')):
ntpath.py(425):     path = path.replace("/", "\\")
ntpath.py(426):     prefix, path = splitdrive(path)
 --- modulename: ntpath, funcname: splitdrive
ntpath.py(115):     if len(p) > 1:
ntpath.py(116):         normp = p.replace(altsep, sep)
ntpath.py(117):         if (normp[0:2] == sep*2) and (normp[2:3] != sep):
ntpath.py(133):         if normp[1] == ':':
ntpath.py(134):             return p[:2], p[2:]
ntpath.py(436):     if prefix == '':
ntpath.py(443):         if path.startswith("\\"):
ntpath.py(444):             prefix = prefix + backslash
ntpath.py(445):             path = path.lstrip("\\")
ntpath.py(446):     comps = path.split("\\")
ntpath.py(447):     i = 0
ntpath.py(448):     while i < len(comps):
ntpath.py(449):         if comps[i] in ('.', ''):
ntpath.py(451):         elif comps[i] == '..':
ntpath.py(460):             i += 1
ntpath.py(448):     while i < len(comps):
ntpath.py(449):         if comps[i] in ('.', ''):
ntpath.py(451):         elif comps[i] == '..':
ntpath.py(460):             i += 1
ntpath.py(448):     while i < len(comps):
ntpath.py(449):         if comps[i] in ('.', ''):
ntpath.py(451):         elif comps[i] == '..':
ntpath.py(460):             i += 1
ntpath.py(448):     while i < len(comps):
ntpath.py(449):         if comps[i] in ('.', ''):
ntpath.py(451):         elif comps[i] == '..':
ntpath.py(460):             i += 1
ntpath.py(448):     while i < len(comps):
ntpath.py(449):         if comps[i] in ('.', ''):
ntpath.py(451):         elif comps[i] == '..':
ntpath.py(460):             i += 1
ntpath.py(448):     while i < len(comps):
ntpath.py(449):         if comps[i] in ('.', ''):
ntpath.py(451):         elif comps[i] == '..':
ntpath.py(460):             i += 1
ntpath.py(448):     while i < len(comps):
ntpath.py(462):     if not prefix and not comps:
ntpath.py(464):     return prefix + backslash.join(comps)
 --- modulename: _utils, funcname: _get_win32_case_sensitive_name
_utils.py(88):         path = _get_win32_long_name(_get_win32_short_name(s))
 --- modulename: _utils, funcname: _get_win32_short_name
_utils.py(58):         buf_size = MAX_PATH
_utils.py(59):         for i in range(2):
_utils.py(60):             buf = create_unicode_buffer(u('\0') * (buf_size + 1))
 --- modulename: _utils, funcname: u
_utils.py(47):             return unicode(x)
 --- modulename: __init__, funcname: create_unicode_buffer
__init__.py(299):         if isinstance(init, (str, unicode)):
__init__.py(300):             if size is None:
__init__.py(301):                 size = len(init)+1
__init__.py(302):             buftype = c_wchar * size
__init__.py(303):             buf = buftype()
__init__.py(304):             buf.value = init
__init__.py(305):             return buf
_utils.py(61):             r = GetShortPathNameW(u_fs(s), buf, buf_size)
 --- modulename: _utils, funcname: u_fs
_utils.py(49):             return unicode(x, sys.getfilesystemencoding())
_utils.py(62):             if r == 0:
_utils.py(64):             if r < buf_size:
_utils.py(65):                 if PY_2:
_utils.py(66):                     return buf.value.encode(sys.getfilesystemencoding())
 --- modulename: __init__, funcname: search_function
__init__.py(74):     entry = _cache.get(encoding, _unknown)
__init__.py(75):     if entry is not _unknown:
__init__.py(85):     norm_encoding = normalize_encoding(encoding)
 --- modulename: __init__, funcname: normalize_encoding
__init__.py(64):     if hasattr(__builtin__, "unicode") and isinstance(encoding, unicode):
__init__.py(69):     return '_'.join(encoding.translate(_norm_encoding_map).split())
__init__.py(86):     aliased_encoding = _aliases.get(norm_encoding) or \
__init__.py(87):                        _aliases.get(norm_encoding.replace('.', '_'))
__init__.py(88):     if aliased_encoding is not None:
__init__.py(92):         modnames = [norm_encoding]
__init__.py(93):     for modname in modnames:
__init__.py(94):         if not modname or '.' in modname:
__init__.py(96):         try:
__init__.py(99):             mod = __import__('encodings.' + modname, fromlist=_import_tail,
__init__.py(100):                              level=0)
 --- modulename: mbcs, funcname: <module>
mbcs.py(9): """
mbcs.py(12): from codecs import mbcs_encode, mbcs_decode
mbcs.py(14): import codecs
mbcs.py(18): encode = mbcs_encode
mbcs.py(20): def decode(input, errors='strict'):
mbcs.py(23): class IncrementalEncoder(codecs.IncrementalEncoder):
 --- modulename: mbcs, funcname: IncrementalEncoder
mbcs.py(23): class IncrementalEncoder(codecs.IncrementalEncoder):
mbcs.py(24):     def encode(self, input, final=False):
mbcs.py(27): class IncrementalDecoder(codecs.BufferedIncrementalDecoder):
 --- modulename: mbcs, funcname: IncrementalDecoder
mbcs.py(27): class IncrementalDecoder(codecs.BufferedIncrementalDecoder):
mbcs.py(28):     _buffer_decode = mbcs_decode
mbcs.py(30): class StreamWriter(codecs.StreamWriter):
 --- modulename: mbcs, funcname: StreamWriter
mbcs.py(30): class StreamWriter(codecs.StreamWriter):
mbcs.py(31):     encode = mbcs_encode
mbcs.py(33): class StreamReader(codecs.StreamReader):
 --- modulename: mbcs, funcname: StreamReader
mbcs.py(33): class StreamReader(codecs.StreamReader):
mbcs.py(34):     decode = mbcs_decode
mbcs.py(38): def getregentry():
__init__.py(104):             break
__init__.py(108):     try:
__init__.py(109):         getregentry = mod.getregentry
__init__.py(114):     if mod is None:
__init__.py(120):     entry = getregentry()
 --- modulename: mbcs, funcname: getregentry
mbcs.py(39):     return codecs.CodecInfo(
mbcs.py(40):         name='mbcs',
mbcs.py(41):         encode=encode,
mbcs.py(42):         decode=decode,
mbcs.py(43):         incrementalencoder=IncrementalEncoder,
mbcs.py(44):         incrementaldecoder=IncrementalDecoder,
mbcs.py(45):         streamreader=StreamReader,
mbcs.py(46):         streamwriter=StreamWriter,
 --- modulename: codecs, funcname: __new__
codecs.py(95):         self = tuple.__new__(cls, (encode, decode, streamreader, streamwriter))
codecs.py(96):         self.name = name
codecs.py(97):         self.encode = encode
codecs.py(98):         self.decode = decode
codecs.py(99):         self.incrementalencoder = incrementalencoder
codecs.py(100):         self.incrementaldecoder = incrementaldecoder
codecs.py(101):         self.streamwriter = streamwriter
codecs.py(102):         self.streamreader = streamreader
codecs.py(103):         if _is_text_encoding is not None:
codecs.py(105):         return self
__init__.py(121):     if not isinstance(entry, codecs.CodecInfo):
__init__.py(140):     _cache[encoding] = entry
__init__.py(144):     try:
__init__.py(145):         codecaliases = mod.getaliases()
__init__.py(146):     except AttributeError:
__init__.py(147):         pass
__init__.py(154):     return entry
 --- modulename: _utils, funcname: _get_win32_long_name
_utils.py(73):         buf_size = MAX_PATH
_utils.py(74):         for i in range(2):
_utils.py(75):             buf = create_unicode_buffer(u('\0') * (buf_size + 1))
 --- modulename: _utils, funcname: u
_utils.py(47):             return unicode(x)
 --- modulename: __init__, funcname: create_unicode_buffer
__init__.py(299):         if isinstance(init, (str, unicode)):
__init__.py(300):             if size is None:
__init__.py(301):                 size = len(init)+1
__init__.py(302):             buftype = c_wchar * size
__init__.py(303):             buf = buftype()
__init__.py(304):             buf.value = init
__init__.py(305):             return buf
_utils.py(76):             r = GetLongPathNameW(u_fs(s), buf, buf_size)
 --- modulename: _utils, funcname: u_fs
_utils.py(49):             return unicode(x, sys.getfilesystemencoding())
_utils.py(77):             if r == 0:
_utils.py(79):             if r < buf_size:
_utils.py(80):                 if PY_2:
_utils.py(81):                     return buf.value.encode(sys.getfilesystemencoding())
_utils.py(89):         return path
__init__.py(16):     prefix = pysideDir.replace('\\', '/')
__init__.py(17):     _utils.register_qt_conf(prefix=prefix,
__init__.py(18):                             binaries=prefix,
__init__.py(19):                             plugins=prefix+"/plugins",
__init__.py(20):                             imports=prefix+"/imports",
__init__.py(21):                             translations=prefix+"/translations")
 --- modulename: _utils, funcname: register_qt_conf
_utils.py(207):     try:
_utils.py(208):         from . import QtCore
_utils.py(213):     if not prefix or not os.path.exists(prefix):
 --- modulename: genericpath, funcname: exists
genericpath.py(25):     try:
genericpath.py(26):         os.stat(path)
genericpath.py(29):     return True
_utils.py(218):     if not binaries or not os.path.exists(binaries):
 --- modulename: genericpath, funcname: exists
genericpath.py(25):     try:
genericpath.py(26):         os.stat(path)
genericpath.py(29):     return True
_utils.py(225):         if sys.platform == 'win32':
_utils.py(226):             pattern = ["QtCore*.dll"]
_utils.py(229):         if not _dir_contains(binaries, pattern):
 --- modulename: _utils, funcname: _dir_contains
_utils.py(119):     names = os.listdir(dir)
_utils.py(120):     for name in names:
_utils.py(121):         srcname = os.path.join(dir, name)
 --- modulename: ntpath, funcname: join
ntpath.py(65):     result_drive, result_path = splitdrive(path)
 --- modulename: ntpath, funcname: splitdrive
ntpath.py(115):     if len(p) > 1:
ntpath.py(116):         normp = p.replace(altsep, sep)
ntpath.py(117):         if (normp[0:2] == sep*2) and (normp[2:3] != sep):
ntpath.py(133):         if normp[1] == ':':
ntpath.py(134):             return p[:2], p[2:]
ntpath.py(66):     for p in paths:
ntpath.py(67):         p_drive, p_path = splitdrive(p)
 --- modulename: ntpath, funcname: splitdrive
ntpath.py(115):     if len(p) > 1:
ntpath.py(116):         normp = p.replace(altsep, sep)
ntpath.py(117):         if (normp[0:2] == sep*2) and (normp[2:3] != sep):
ntpath.py(133):         if normp[1] == ':':
ntpath.py(135):     return '', p
ntpath.py(68):         if p_path and p_path[0] in '\\/':
ntpath.py(74):         elif p_drive and p_drive != result_drive:
ntpath.py(83):         if result_path and result_path[-1] not in '\\/':
ntpath.py(84):             result_path = result_path + '\\'
ntpath.py(85):         result_path = result_path + p_path
ntpath.py(66):     for p in paths:
ntpath.py(87):     if (result_path and result_path[0] not in '\\/' and
ntpath.py(90):     return result_drive + result_path
_utils.py(122):         if not os.path.isdir(srcname) and _filter_match(name, filter):
 --- modulename: _utils, funcname: _filter_match
_utils.py(110):     for pattern in patterns:
_utils.py(111):         if pattern is None:
_utils.py(113):         if fnmatch.fnmatch(name, pattern):
 --- modulename: fnmatch, funcname: fnmatch
fnmatch.py(40):     import os
fnmatch.py(41):     name = os.path.normcase(name)
 --- modulename: ntpath, funcname: normcase
ntpath.py(47):     return s.replace("/", "\\").lower()
fnmatch.py(42):     pat = os.path.normcase(pat)
 --- modulename: ntpath, funcname: normcase
ntpath.py(47):     return s.replace("/", "\\").lower()
fnmatch.py(43):     return fnmatchcase(name, pat)
 --- modulename: fnmatch, funcname: fnmatchcase
fnmatch.py(76):     try:
fnmatch.py(77):         re_pat = _cache[pat]
fnmatch.py(78):     except KeyError:
fnmatch.py(79):         res = translate(pat)
 --- modulename: fnmatch, funcname: translate
fnmatch.py(91):     i, n = 0, len(pat)
fnmatch.py(92):     res = ''
fnmatch.py(93):     while i < n:
fnmatch.py(94):         c = pat[i]
fnmatch.py(95):         i = i+1
fnmatch.py(96):         if c == '*':
fnmatch.py(98):         elif c == '?':
fnmatch.py(100):         elif c == '[':
fnmatch.py(119):             res = res + re.escape(c)
 --- modulename: re, funcname: escape
re.py(210):     s = list(pattern)
re.py(211):     alphanum = _alphanum
re.py(212):     for i, c in enumerate(pattern):
re.py(213):         if c not in alphanum:
re.py(212):     for i, c in enumerate(pattern):
re.py(218):     return pattern[:0].join(s)
fnmatch.py(93):     while i < n:
fnmatch.py(94):         c = pat[i]
fnmatch.py(95):         i = i+1
fnmatch.py(96):         if c == '*':
fnmatch.py(98):         elif c == '?':
fnmatch.py(100):         elif c == '[':
fnmatch.py(119):             res = res + re.escape(c)
 --- modulename: re, funcname: escape
re.py(210):     s = list(pattern)
re.py(211):     alphanum = _alphanum
re.py(212):     for i, c in enumerate(pattern):
re.py(213):         if c not in alphanum:
re.py(212):     for i, c in enumerate(pattern):
re.py(218):     return pattern[:0].join(s)
fnmatch.py(93):     while i < n:
fnmatch.py(94):         c = pat[i]
fnmatch.py(95):         i = i+1
fnmatch.py(96):         if c == '*':
fnmatch.py(98):         elif c == '?':
fnmatch.py(100):         elif c == '[':
fnmatch.py(119):             res = res + re.escape(c)
 --- modulename: re, funcname: escape
re.py(210):     s = list(pattern)
re.py(211):     alphanum = _alphanum
re.py(212):     for i, c in enumerate(pattern):
re.py(213):         if c not in alphanum:
re.py(212):     for i, c in enumerate(pattern):
re.py(218):     return pattern[:0].join(s)
fnmatch.py(93):     while i < n:
fnmatch.py(94):         c = pat[i]
fnmatch.py(95):         i = i+1
fnmatch.py(96):         if c == '*':
fnmatch.py(98):         elif c == '?':
fnmatch.py(100):         elif c == '[':
fnmatch.py(119):             res = res + re.escape(c)
 --- modulename: re, funcname: escape
re.py(210):     s = list(pattern)
re.py(211):     alphanum = _alphanum
re.py(212):     for i, c in enumerate(pattern):
re.py(213):         if c not in alphanum:
re.py(212):     for i, c in enumerate(pattern):
re.py(218):     return pattern[:0].join(s)
fnmatch.py(93):     while i < n:
fnmatch.py(94):         c = pat[i]
fnmatch.py(95):         i = i+1
fnmatch.py(96):         if c == '*':
fnmatch.py(98):         elif c == '?':
fnmatch.py(100):         elif c == '[':
fnmatch.py(119):             res = res + re.escape(c)
 --- modulename: re, funcname: escape
re.py(210):     s = list(pattern)
re.py(211):     alphanum = _alphanum
re.py(212):     for i, c in enumerate(pattern):
re.py(213):         if c not in alphanum:
re.py(212):     for i, c in enumerate(pattern):
re.py(218):     return pattern[:0].join(s)
fnmatch.py(93):     while i < n:
fnmatch.py(94):         c = pat[i]
fnmatch.py(95):         i = i+1
fnmatch.py(96):         if c == '*':
fnmatch.py(98):         elif c == '?':
fnmatch.py(100):         elif c == '[':
fnmatch.py(119):             res = res + re.escape(c)
 --- modulename: re, funcname: escape
re.py(210):     s = list(pattern)
re.py(211):     alphanum = _alphanum
re.py(212):     for i, c in enumerate(pattern):
re.py(213):         if c not in alphanum:
re.py(212):     for i, c in enumerate(pattern):
re.py(218):     return pattern[:0].join(s)
fnmatch.py(93):     while i < n:
fnmatch.py(94):         c = pat[i]
fnmatch.py(95):         i = i+1
fnmatch.py(96):         if c == '*':
fnmatch.py(97):             res = res + '.*'
fnmatch.py(93):     while i < n:
fnmatch.py(94):         c = pat[i]
fnmatch.py(95):         i = i+1
fnmatch.py(96):         if c == '*':
fnmatch.py(98):         elif c == '?':
fnmatch.py(100):         elif c == '[':
fnmatch.py(119):             res = res + re.escape(c)
 --- modulename: re, funcname: escape
re.py(210):     s = list(pattern)
re.py(211):     alphanum = _alphanum
re.py(212):     for i, c in enumerate(pattern):
re.py(213):         if c not in alphanum:
re.py(214):             if c == "\000":
re.py(217):                 s[i] = "\\" + c
re.py(212):     for i, c in enumerate(pattern):
re.py(218):     return pattern[:0].join(s)
fnmatch.py(93):     while i < n:
fnmatch.py(94):         c = pat[i]
fnmatch.py(95):         i = i+1
fnmatch.py(96):         if c == '*':
fnmatch.py(98):         elif c == '?':
fnmatch.py(100):         elif c == '[':
fnmatch.py(119):             res = res + re.escape(c)
 --- modulename: re, funcname: escape
re.py(210):     s = list(pattern)
re.py(211):     alphanum = _alphanum
re.py(212):     for i, c in enumerate(pattern):
re.py(213):         if c not in alphanum:
re.py(212):     for i, c in enumerate(pattern):
re.py(218):     return pattern[:0].join(s)
fnmatch.py(93):     while i < n:
fnmatch.py(94):         c = pat[i]
fnmatch.py(95):         i = i+1
fnmatch.py(96):         if c == '*':
fnmatch.py(98):         elif c == '?':
fnmatch.py(100):         elif c == '[':
fnmatch.py(119):             res = res + re.escape(c)
 --- modulename: re, funcname: escape
re.py(210):     s = list(pattern)
re.py(211):     alphanum = _alphanum
re.py(212):     for i, c in enumerate(pattern):
re.py(213):         if c not in alphanum:
re.py(212):     for i, c in enumerate(pattern):
re.py(218):     return pattern[:0].join(s)
fnmatch.py(93):     while i < n:
fnmatch.py(94):         c = pat[i]
fnmatch.py(95):         i = i+1
fnmatch.py(96):         if c == '*':
fnmatch.py(98):         elif c == '?':
fnmatch.py(100):         elif c == '[':
fnmatch.py(119):             res = res + re.escape(c)
 --- modulename: re, funcname: escape
re.py(210):     s = list(pattern)
re.py(211):     alphanum = _alphanum
re.py(212):     for i, c in enumerate(pattern):
re.py(213):         if c not in alphanum:
re.py(212):     for i, c in enumerate(pattern):
re.py(218):     return pattern[:0].join(s)
fnmatch.py(93):     while i < n:
fnmatch.py(120):     return res + '\Z(?ms)'
fnmatch.py(80):         if len(_cache) >= _MAXCACHE:
fnmatch.py(82):         _cache[pat] = re_pat = re.compile(res)
 --- modulename: re, funcname: compile
re.py(194):     return _compile(pattern, flags)
 --- modulename: re, funcname: _compile
re.py(232):     pattern, flags = key
re.py(233):     bypass_cache = flags & DEBUG
re.py(234):     if not bypass_cache:
re.py(235):         cachekey = (type(key[0]),) + key
re.py(236):         try:
re.py(237):             p, loc = _cache[cachekey]
re.py(240):         except KeyError:
re.py(241):             pass
re.py(242):     if isinstance(pattern, _pattern_type):
re.py(246):     if not sre_compile.isstring(pattern):
 --- modulename: sre_compile, funcname: isstring
sre_compile.py(547):     for tp in STRING_TYPES:
sre_compile.py(548):         if isinstance(obj, tp):
sre_compile.py(549):             return 1
re.py(248):     try:
re.py(249):         p = sre_compile.compile(pattern, flags)
 --- modulename: sre_compile, funcname: compile
sre_compile.py(570):     if isstring(p):
 --- modulename: sre_compile, funcname: isstring
sre_compile.py(547):     for tp in STRING_TYPES:
sre_compile.py(548):         if isinstance(obj, tp):
sre_compile.py(549):             return 1
sre_compile.py(571):         pattern = p
sre_compile.py(572):         p = sre_parse.parse(p, flags)
 --- modulename: sre_parse, funcname: parse
sre_parse.py(709):     source = Tokenizer(str)
 --- modulename: sre_parse, funcname: __init__
sre_parse.py(190):         self.string = string
sre_parse.py(191):         self.index = 0
sre_parse.py(192):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(711):     if pattern is None:
sre_parse.py(712):         pattern = Pattern()
 --- modulename: sre_parse, funcname: __init__
sre_parse.py(68):         self.flags = 0
sre_parse.py(69):         self.open = []
sre_parse.py(70):         self.groups = 1
sre_parse.py(71):         self.groupdict = {}
sre_parse.py(72):         self.lookbehind = 0
sre_parse.py(713):     pattern.flags = flags
sre_parse.py(714):     pattern.str = str
sre_parse.py(716):     p = _parse_sub(source, pattern, 0)
 --- modulename: sre_parse, funcname: _parse_sub
sre_parse.py(320):     items = []
sre_parse.py(321):     itemsappend = items.append
sre_parse.py(322):     sourcematch = source.match
sre_parse.py(323):     while 1:
sre_parse.py(324):         itemsappend(_parse(source, state))
 --- modulename: sre_parse, funcname: _parse
sre_parse.py(397):     subpattern = SubPattern(state)
 --- modulename: sre_parse, funcname: __init__
sre_parse.py(93):         self.pattern = pattern
sre_parse.py(94):         if data is None:
sre_parse.py(95):             data = []
sre_parse.py(96):         self.data = data
sre_parse.py(97):         self.width = None
sre_parse.py(400):     subpatternappend = subpattern.append
sre_parse.py(401):     sourceget = source.get
sre_parse.py(402):     sourcematch = source.match
sre_parse.py(403):     _len = len
sre_parse.py(404):     PATTERNENDERS = _PATTERNENDERS
sre_parse.py(405):     ASSERTCHARS = _ASSERTCHARS
sre_parse.py(406):     LOOKBEHINDASSERTCHARS = _LOOKBEHINDASSERTCHARS
sre_parse.py(407):     REPEATCODES = _REPEATCODES
sre_parse.py(409):     while 1:
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(413):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(414):         if this is None:
sre_parse.py(417):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(428):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(429):             subpatternappend((LITERAL, ord(this)))
 --- modulename: sre_parse, funcname: append
sre_parse.py(150):         self.data.append(code)
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(413):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(414):         if this is None:
sre_parse.py(417):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(428):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(429):             subpatternappend((LITERAL, ord(this)))
 --- modulename: sre_parse, funcname: append
sre_parse.py(150):         self.data.append(code)
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(413):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(414):         if this is None:
sre_parse.py(417):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(428):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(429):             subpatternappend((LITERAL, ord(this)))
 --- modulename: sre_parse, funcname: append
sre_parse.py(150):         self.data.append(code)
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(413):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(414):         if this is None:
sre_parse.py(417):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(428):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(429):             subpatternappend((LITERAL, ord(this)))
 --- modulename: sre_parse, funcname: append
sre_parse.py(150):         self.data.append(code)
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(413):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(414):         if this is None:
sre_parse.py(417):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(428):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(429):             subpatternappend((LITERAL, ord(this)))
 --- modulename: sre_parse, funcname: append
sre_parse.py(150):         self.data.append(code)
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(413):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(414):         if this is None:
sre_parse.py(417):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(428):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(429):             subpatternappend((LITERAL, ord(this)))
 --- modulename: sre_parse, funcname: append
sre_parse.py(150):         self.data.append(code)
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(413):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(414):         if this is None:
sre_parse.py(417):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(428):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(431):         elif this == "[":
sre_parse.py(488):         elif this and this[0] in REPEAT_CHARS:
sre_parse.py(541):         elif this == ".":
sre_parse.py(542):             subpatternappend((ANY, None))
 --- modulename: sre_parse, funcname: append
sre_parse.py(150):         self.data.append(code)
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(413):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(199):             try:
sre_parse.py(200):                 c = self.string[self.index + 1]
sre_parse.py(203):             char = char + c
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(414):         if this is None:
sre_parse.py(417):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(428):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(431):         elif this == "[":
sre_parse.py(488):         elif this and this[0] in REPEAT_CHARS:
sre_parse.py(490):             if this == "?":
sre_parse.py(492):             elif this == "*":
sre_parse.py(493):                 min, max = 0, MAXREPEAT
sre_parse.py(528):             if subpattern:
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(138):         return len(self.data)
sre_parse.py(529):                 item = subpattern[-1:]
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(138):         return len(self.data)
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(143):             return SubPattern(self.pattern, self.data[index])
 --- modulename: sre_parse, funcname: __init__
sre_parse.py(93):         self.pattern = pattern
sre_parse.py(94):         if data is None:
sre_parse.py(96):         self.data = data
sre_parse.py(97):         self.width = None
sre_parse.py(532):             if not item or (_len(item) == 1 and item[0][0] == AT):
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(138):         return len(self.data)
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(138):         return len(self.data)
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_parse.py(534):             if item[0][0] in REPEATCODES:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_parse.py(536):             if sourcematch("?"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(211):         return 0
sre_parse.py(539):                 subpattern[-1] = (MAX_REPEAT, (min, max, item))
 --- modulename: sre_parse, funcname: __setitem__
sre_parse.py(146):         self.data[index] = code
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(413):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(414):         if this is None:
sre_parse.py(417):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(428):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(431):         elif this == "[":
sre_parse.py(488):         elif this and this[0] in REPEAT_CHARS:
sre_parse.py(541):         elif this == ".":
sre_parse.py(544):         elif this == "(":
sre_parse.py(691):         elif this == "^":
sre_parse.py(694):         elif this == "$":
sre_parse.py(697):         elif this and this[0] == "\\":
sre_parse.py(698):             code = _escape(source, this, state)
 --- modulename: sre_parse, funcname: _escape
sre_parse.py(270):     code = CATEGORIES.get(escape)
sre_parse.py(271):     if code:
sre_parse.py(273):     code = ESCAPES.get(escape)
sre_parse.py(274):     if code:
sre_parse.py(276):     try:
sre_parse.py(277):         c = escape[1:2]
sre_parse.py(278):         if c == "x":
sre_parse.py(285):         elif c == "0":
sre_parse.py(290):         elif c in DIGITS:
sre_parse.py(311):         if len(escape) == 2:
sre_parse.py(312):             return LITERAL, ord(escape[1])
sre_parse.py(699):             subpatternappend(code)
 --- modulename: sre_parse, funcname: append
sre_parse.py(150):         self.data.append(code)
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(413):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(414):         if this is None:
sre_parse.py(417):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(428):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(429):             subpatternappend((LITERAL, ord(this)))
 --- modulename: sre_parse, funcname: append
sre_parse.py(150):         self.data.append(code)
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(413):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(414):         if this is None:
sre_parse.py(417):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(428):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(429):             subpatternappend((LITERAL, ord(this)))
 --- modulename: sre_parse, funcname: append
sre_parse.py(150):         self.data.append(code)
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(413):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(199):             try:
sre_parse.py(200):                 c = self.string[self.index + 1]
sre_parse.py(203):             char = char + c
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(414):         if this is None:
sre_parse.py(417):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(428):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(429):             subpatternappend((LITERAL, ord(this)))
 --- modulename: sre_parse, funcname: append
sre_parse.py(150):         self.data.append(code)
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(413):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(414):         if this is None:
sre_parse.py(417):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(428):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(431):         elif this == "[":
sre_parse.py(488):         elif this and this[0] in REPEAT_CHARS:
sre_parse.py(541):         elif this == ".":
sre_parse.py(544):         elif this == "(":
sre_parse.py(691):         elif this == "^":
sre_parse.py(694):         elif this == "$":
sre_parse.py(697):         elif this and this[0] == "\\":
sre_parse.py(698):             code = _escape(source, this, state)
 --- modulename: sre_parse, funcname: _escape
sre_parse.py(270):     code = CATEGORIES.get(escape)
sre_parse.py(271):     if code:
sre_parse.py(272):         return code
sre_parse.py(699):             subpatternappend(code)
 --- modulename: sre_parse, funcname: append
sre_parse.py(150):         self.data.append(code)
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(413):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(414):         if this is None:
sre_parse.py(417):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(428):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(431):         elif this == "[":
sre_parse.py(488):         elif this and this[0] in REPEAT_CHARS:
sre_parse.py(541):         elif this == ".":
sre_parse.py(544):         elif this == "(":
sre_parse.py(545):             group = 1
sre_parse.py(546):             name = None
sre_parse.py(547):             condgroup = None
sre_parse.py(548):             if sourcematch("?"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(208):             if skip:
sre_parse.py(209):                 self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(210):             return 1
sre_parse.py(549):                 group = 0
sre_parse.py(551):                 if sourcematch("P"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(211):         return 0
sre_parse.py(600):                 elif sourcematch(":"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(211):         return 0
sre_parse.py(603):                 elif sourcematch("#"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(211):         return 0
sre_parse.py(612):                 elif source.next in ASSERTCHARS:
sre_parse.py(632):                 elif sourcematch("("):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(211):         return 0
sre_parse.py(662):                     if not source.next in FLAGS:
sre_parse.py(664):                     while source.next in FLAGS:
sre_parse.py(665):                         state.flags = state.flags | FLAGS[sourceget()]
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(664):                     while source.next in FLAGS:
sre_parse.py(665):                         state.flags = state.flags | FLAGS[sourceget()]
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(664):                     while source.next in FLAGS:
sre_parse.py(666):             if group:
sre_parse.py(683):                 while 1:
sre_parse.py(684):                     char = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(195):             self.next = None
sre_parse.py(196):             return
sre_parse.py(215):         return this
sre_parse.py(685):                     if char is None:
sre_parse.py(687):                     if char == ")":
sre_parse.py(688):                         break
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(413):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(195):             self.next = None
sre_parse.py(196):             return
sre_parse.py(215):         return this
sre_parse.py(414):         if this is None:
sre_parse.py(415):             break # end of pattern
sre_parse.py(704):     return subpattern
sre_parse.py(325):         if sourcematch("|"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(211):         return 0
sre_parse.py(327):         if not nested:
sre_parse.py(328):             break
sre_parse.py(334):     if len(items) == 1:
sre_parse.py(335):         return items[0]
sre_parse.py(718):     tail = source.get()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(195):             self.next = None
sre_parse.py(196):             return
sre_parse.py(215):         return this
sre_parse.py(719):     if tail == ")":
sre_parse.py(721):     elif tail:
sre_parse.py(724):     if not (flags & SRE_FLAG_VERBOSE) and p.pattern.flags & SRE_FLAG_VERBOSE:
sre_parse.py(729):     if flags & SRE_FLAG_DEBUG:
sre_parse.py(732):     return p
sre_compile.py(576):     code = _code(p, flags)
 --- modulename: sre_compile, funcname: _code
sre_compile.py(554):     flags = p.pattern.flags | flags
sre_compile.py(555):     code = []
sre_compile.py(558):     _compile_info(code, p, flags)
 --- modulename: sre_compile, funcname: _compile_info
sre_compile.py(437):     lo, hi = pattern.getwidth()
 --- modulename: sre_parse, funcname: getwidth
sre_parse.py(153):         if self.width:
sre_parse.py(155):         lo = hi = 0
sre_parse.py(156):         UNITCODES = (ANY, RANGE, IN, LITERAL, NOT_LITERAL, CATEGORY)
sre_parse.py(157):         REPEATCODES = (MIN_REPEAT, MAX_REPEAT)
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(159):             if op is BRANCH:
sre_parse.py(168):             elif op is CALL:
sre_parse.py(172):             elif op is SUBPATTERN:
sre_parse.py(176):             elif op in REPEATCODES:
sre_parse.py(180):             elif op in UNITCODES:
sre_parse.py(181):                 lo = lo + 1
sre_parse.py(182):                 hi = hi + 1
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(159):             if op is BRANCH:
sre_parse.py(168):             elif op is CALL:
sre_parse.py(172):             elif op is SUBPATTERN:
sre_parse.py(176):             elif op in REPEATCODES:
sre_parse.py(180):             elif op in UNITCODES:
sre_parse.py(181):                 lo = lo + 1
sre_parse.py(182):                 hi = hi + 1
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(159):             if op is BRANCH:
sre_parse.py(168):             elif op is CALL:
sre_parse.py(172):             elif op is SUBPATTERN:
sre_parse.py(176):             elif op in REPEATCODES:
sre_parse.py(180):             elif op in UNITCODES:
sre_parse.py(181):                 lo = lo + 1
sre_parse.py(182):                 hi = hi + 1
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(159):             if op is BRANCH:
sre_parse.py(168):             elif op is CALL:
sre_parse.py(172):             elif op is SUBPATTERN:
sre_parse.py(176):             elif op in REPEATCODES:
sre_parse.py(180):             elif op in UNITCODES:
sre_parse.py(181):                 lo = lo + 1
sre_parse.py(182):                 hi = hi + 1
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(159):             if op is BRANCH:
sre_parse.py(168):             elif op is CALL:
sre_parse.py(172):             elif op is SUBPATTERN:
sre_parse.py(176):             elif op in REPEATCODES:
sre_parse.py(180):             elif op in UNITCODES:
sre_parse.py(181):                 lo = lo + 1
sre_parse.py(182):                 hi = hi + 1
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(159):             if op is BRANCH:
sre_parse.py(168):             elif op is CALL:
sre_parse.py(172):             elif op is SUBPATTERN:
sre_parse.py(176):             elif op in REPEATCODES:
sre_parse.py(180):             elif op in UNITCODES:
sre_parse.py(181):                 lo = lo + 1
sre_parse.py(182):                 hi = hi + 1
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(159):             if op is BRANCH:
sre_parse.py(168):             elif op is CALL:
sre_parse.py(172):             elif op is SUBPATTERN:
sre_parse.py(176):             elif op in REPEATCODES:
sre_parse.py(177):                 i, j = av[2].getwidth()
 --- modulename: sre_parse, funcname: getwidth
sre_parse.py(153):         if self.width:
sre_parse.py(155):         lo = hi = 0
sre_parse.py(156):         UNITCODES = (ANY, RANGE, IN, LITERAL, NOT_LITERAL, CATEGORY)
sre_parse.py(157):         REPEATCODES = (MIN_REPEAT, MAX_REPEAT)
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(159):             if op is BRANCH:
sre_parse.py(168):             elif op is CALL:
sre_parse.py(172):             elif op is SUBPATTERN:
sre_parse.py(176):             elif op in REPEATCODES:
sre_parse.py(180):             elif op in UNITCODES:
sre_parse.py(181):                 lo = lo + 1
sre_parse.py(182):                 hi = hi + 1
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(185):         self.width = min(lo, MAXREPEAT - 1), min(hi, MAXREPEAT)
sre_parse.py(186):         return self.width
sre_parse.py(178):                 lo = lo + i * av[0]
sre_parse.py(179):                 hi = hi + j * av[1]
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(159):             if op is BRANCH:
sre_parse.py(168):             elif op is CALL:
sre_parse.py(172):             elif op is SUBPATTERN:
sre_parse.py(176):             elif op in REPEATCODES:
sre_parse.py(180):             elif op in UNITCODES:
sre_parse.py(181):                 lo = lo + 1
sre_parse.py(182):                 hi = hi + 1
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(159):             if op is BRANCH:
sre_parse.py(168):             elif op is CALL:
sre_parse.py(172):             elif op is SUBPATTERN:
sre_parse.py(176):             elif op in REPEATCODES:
sre_parse.py(180):             elif op in UNITCODES:
sre_parse.py(181):                 lo = lo + 1
sre_parse.py(182):                 hi = hi + 1
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(159):             if op is BRANCH:
sre_parse.py(168):             elif op is CALL:
sre_parse.py(172):             elif op is SUBPATTERN:
sre_parse.py(176):             elif op in REPEATCODES:
sre_parse.py(180):             elif op in UNITCODES:
sre_parse.py(181):                 lo = lo + 1
sre_parse.py(182):                 hi = hi + 1
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(159):             if op is BRANCH:
sre_parse.py(168):             elif op is CALL:
sre_parse.py(172):             elif op is SUBPATTERN:
sre_parse.py(176):             elif op in REPEATCODES:
sre_parse.py(180):             elif op in UNITCODES:
sre_parse.py(181):                 lo = lo + 1
sre_parse.py(182):                 hi = hi + 1
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(159):             if op is BRANCH:
sre_parse.py(168):             elif op is CALL:
sre_parse.py(172):             elif op is SUBPATTERN:
sre_parse.py(176):             elif op in REPEATCODES:
sre_parse.py(180):             elif op in UNITCODES:
sre_parse.py(183):             elif op == SUCCESS:
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(185):         self.width = min(lo, MAXREPEAT - 1), min(hi, MAXREPEAT)
sre_parse.py(186):         return self.width
sre_compile.py(438):     if lo == 0:
sre_compile.py(441):     prefix = []
sre_compile.py(442):     prefixappend = prefix.append
sre_compile.py(443):     prefix_skip = 0
sre_compile.py(444):     charset = [] # not used
sre_compile.py(445):     charsetappend = charset.append
sre_compile.py(446):     if not (flags & SRE_FLAG_IGNORECASE):
sre_compile.py(448):         for op, av in pattern.data:
sre_compile.py(449):             if op is LITERAL:
sre_compile.py(450):                 if len(prefix) == prefix_skip:
sre_compile.py(451):                     prefix_skip = prefix_skip + 1
sre_compile.py(452):                 prefixappend(av)
sre_compile.py(448):         for op, av in pattern.data:
sre_compile.py(449):             if op is LITERAL:
sre_compile.py(450):                 if len(prefix) == prefix_skip:
sre_compile.py(451):                     prefix_skip = prefix_skip + 1
sre_compile.py(452):                 prefixappend(av)
sre_compile.py(448):         for op, av in pattern.data:
sre_compile.py(449):             if op is LITERAL:
sre_compile.py(450):                 if len(prefix) == prefix_skip:
sre_compile.py(451):                     prefix_skip = prefix_skip + 1
sre_compile.py(452):                 prefixappend(av)
sre_compile.py(448):         for op, av in pattern.data:
sre_compile.py(449):             if op is LITERAL:
sre_compile.py(450):                 if len(prefix) == prefix_skip:
sre_compile.py(451):                     prefix_skip = prefix_skip + 1
sre_compile.py(452):                 prefixappend(av)
sre_compile.py(448):         for op, av in pattern.data:
sre_compile.py(449):             if op is LITERAL:
sre_compile.py(450):                 if len(prefix) == prefix_skip:
sre_compile.py(451):                     prefix_skip = prefix_skip + 1
sre_compile.py(452):                 prefixappend(av)
sre_compile.py(448):         for op, av in pattern.data:
sre_compile.py(449):             if op is LITERAL:
sre_compile.py(450):                 if len(prefix) == prefix_skip:
sre_compile.py(451):                     prefix_skip = prefix_skip + 1
sre_compile.py(452):                 prefixappend(av)
sre_compile.py(448):         for op, av in pattern.data:
sre_compile.py(449):             if op is LITERAL:
sre_compile.py(453):             elif op is SUBPATTERN and len(av[1]) == 1:
sre_compile.py(460):                 break
sre_compile.py(462):         if not prefix and pattern.data:
sre_compile.py(501):     emit = code.append
sre_compile.py(502):     emit(OPCODES[INFO])
sre_compile.py(503):     skip = len(code); emit(0)
sre_compile.py(505):     mask = 0
sre_compile.py(506):     if prefix:
sre_compile.py(507):         mask = SRE_INFO_PREFIX
sre_compile.py(508):         if len(prefix) == prefix_skip == len(pattern.data):
sre_compile.py(512):     emit(mask)
sre_compile.py(514):     if lo < MAXCODE:
sre_compile.py(515):         emit(lo)
sre_compile.py(519):     if hi < MAXCODE:
sre_compile.py(520):         emit(hi)
sre_compile.py(524):     if prefix:
sre_compile.py(525):         emit(len(prefix)) # length
sre_compile.py(526):         emit(prefix_skip) # skip
sre_compile.py(527):         code.extend(prefix)
sre_compile.py(529):         table = [-1] + ([0]*len(prefix))
sre_compile.py(530):         for i in xrange(len(prefix)):
sre_compile.py(531):             table[i+1] = table[i]+1
sre_compile.py(532):             while table[i+1] > 0 and prefix[i] != prefix[table[i+1]-1]:
sre_compile.py(530):         for i in xrange(len(prefix)):
sre_compile.py(531):             table[i+1] = table[i]+1
sre_compile.py(532):             while table[i+1] > 0 and prefix[i] != prefix[table[i+1]-1]:
sre_compile.py(533):                 table[i+1] = table[table[i+1]-1]+1
sre_compile.py(532):             while table[i+1] > 0 and prefix[i] != prefix[table[i+1]-1]:
sre_compile.py(530):         for i in xrange(len(prefix)):
sre_compile.py(531):             table[i+1] = table[i]+1
sre_compile.py(532):             while table[i+1] > 0 and prefix[i] != prefix[table[i+1]-1]:
sre_compile.py(533):                 table[i+1] = table[table[i+1]-1]+1
sre_compile.py(532):             while table[i+1] > 0 and prefix[i] != prefix[table[i+1]-1]:
sre_compile.py(530):         for i in xrange(len(prefix)):
sre_compile.py(531):             table[i+1] = table[i]+1
sre_compile.py(532):             while table[i+1] > 0 and prefix[i] != prefix[table[i+1]-1]:
sre_compile.py(533):                 table[i+1] = table[table[i+1]-1]+1
sre_compile.py(532):             while table[i+1] > 0 and prefix[i] != prefix[table[i+1]-1]:
sre_compile.py(530):         for i in xrange(len(prefix)):
sre_compile.py(531):             table[i+1] = table[i]+1
sre_compile.py(532):             while table[i+1] > 0 and prefix[i] != prefix[table[i+1]-1]:
sre_compile.py(533):                 table[i+1] = table[table[i+1]-1]+1
sre_compile.py(532):             while table[i+1] > 0 and prefix[i] != prefix[table[i+1]-1]:
sre_compile.py(530):         for i in xrange(len(prefix)):
sre_compile.py(531):             table[i+1] = table[i]+1
sre_compile.py(532):             while table[i+1] > 0 and prefix[i] != prefix[table[i+1]-1]:
sre_compile.py(533):                 table[i+1] = table[table[i+1]-1]+1
sre_compile.py(532):             while table[i+1] > 0 and prefix[i] != prefix[table[i+1]-1]:
sre_compile.py(530):         for i in xrange(len(prefix)):
sre_compile.py(534):         code.extend(table[1:]) # don't store first entry
sre_compile.py(537):     code[skip] = len(code) - skip
sre_compile.py(561):     _compile(code, p.data, flags)
 --- modulename: sre_compile, funcname: _compile
sre_compile.py(66):     emit = code.append
sre_compile.py(67):     _len = len
sre_compile.py(68):     LITERAL_CODES = _LITERAL_CODES
sre_compile.py(69):     REPEATING_CODES = _REPEATING_CODES
sre_compile.py(70):     SUCCESS_CODES = _SUCCESS_CODES
sre_compile.py(71):     ASSERT_CODES = _ASSERT_CODES
sre_compile.py(72):     if (flags & SRE_FLAG_IGNORECASE and
sre_compile.py(77):         fixes = None
sre_compile.py(78):     for op, av in pattern:
sre_compile.py(79):         if op in LITERAL_CODES:
sre_compile.py(80):             if flags & SRE_FLAG_IGNORECASE:
sre_compile.py(96):                 emit(OPCODES[op])
sre_compile.py(97):                 emit(av)
sre_compile.py(78):     for op, av in pattern:
sre_compile.py(79):         if op in LITERAL_CODES:
sre_compile.py(80):             if flags & SRE_FLAG_IGNORECASE:
sre_compile.py(96):                 emit(OPCODES[op])
sre_compile.py(97):                 emit(av)
sre_compile.py(78):     for op, av in pattern:
sre_compile.py(79):         if op in LITERAL_CODES:
sre_compile.py(80):             if flags & SRE_FLAG_IGNORECASE:
sre_compile.py(96):                 emit(OPCODES[op])
sre_compile.py(97):                 emit(av)
sre_compile.py(78):     for op, av in pattern:
sre_compile.py(79):         if op in LITERAL_CODES:
sre_compile.py(80):             if flags & SRE_FLAG_IGNORECASE:
sre_compile.py(96):                 emit(OPCODES[op])
sre_compile.py(97):                 emit(av)
sre_compile.py(78):     for op, av in pattern:
sre_compile.py(79):         if op in LITERAL_CODES:
sre_compile.py(80):             if flags & SRE_FLAG_IGNORECASE:
sre_compile.py(96):                 emit(OPCODES[op])
sre_compile.py(97):                 emit(av)
sre_compile.py(78):     for op, av in pattern:
sre_compile.py(79):         if op in LITERAL_CODES:
sre_compile.py(80):             if flags & SRE_FLAG_IGNORECASE:
sre_compile.py(96):                 emit(OPCODES[op])
sre_compile.py(97):                 emit(av)
sre_compile.py(78):     for op, av in pattern:
sre_compile.py(79):         if op in LITERAL_CODES:
sre_compile.py(98):         elif op is IN:
sre_compile.py(109):         elif op is ANY:
sre_compile.py(114):         elif op in REPEATING_CODES:
sre_compile.py(115):             if flags & SRE_FLAG_TEMPLATE:
sre_compile.py(124):             elif _simple(av) and op is not REPEAT:
 --- modulename: sre_compile, funcname: _simple
sre_compile.py(430):     lo, hi = av[2].getwidth()
 --- modulename: sre_parse, funcname: getwidth
sre_parse.py(153):         if self.width:
sre_parse.py(154):             return self.width
sre_compile.py(431):     return lo == hi == 1 and av[2][0][0] != SUBPATTERN
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(125):                 if op is MAX_REPEAT:
sre_compile.py(126):                     emit(OPCODES[REPEAT_ONE])
sre_compile.py(129):                 skip = _len(code); emit(0)
sre_compile.py(130):                 emit(av[0])
sre_compile.py(131):                 emit(av[1])
sre_compile.py(132):                 _compile(code, av[2], flags)
 --- modulename: sre_compile, funcname: _compile
sre_compile.py(66):     emit = code.append
sre_compile.py(67):     _len = len
sre_compile.py(68):     LITERAL_CODES = _LITERAL_CODES
sre_compile.py(69):     REPEATING_CODES = _REPEATING_CODES
sre_compile.py(70):     SUCCESS_CODES = _SUCCESS_CODES
sre_compile.py(71):     ASSERT_CODES = _ASSERT_CODES
sre_compile.py(72):     if (flags & SRE_FLAG_IGNORECASE and
sre_compile.py(77):         fixes = None
sre_compile.py(78):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(79):         if op in LITERAL_CODES:
sre_compile.py(98):         elif op is IN:
sre_compile.py(109):         elif op is ANY:
sre_compile.py(110):             if flags & SRE_FLAG_DOTALL:
sre_compile.py(111):                 emit(OPCODES[ANY_ALL])
sre_compile.py(78):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(133):                 emit(OPCODES[SUCCESS])
sre_compile.py(134):                 code[skip] = _len(code) - skip
sre_compile.py(78):     for op, av in pattern:
sre_compile.py(79):         if op in LITERAL_CODES:
sre_compile.py(80):             if flags & SRE_FLAG_IGNORECASE:
sre_compile.py(96):                 emit(OPCODES[op])
sre_compile.py(97):                 emit(av)
sre_compile.py(78):     for op, av in pattern:
sre_compile.py(79):         if op in LITERAL_CODES:
sre_compile.py(80):             if flags & SRE_FLAG_IGNORECASE:
sre_compile.py(96):                 emit(OPCODES[op])
sre_compile.py(97):                 emit(av)
sre_compile.py(78):     for op, av in pattern:
sre_compile.py(79):         if op in LITERAL_CODES:
sre_compile.py(80):             if flags & SRE_FLAG_IGNORECASE:
sre_compile.py(96):                 emit(OPCODES[op])
sre_compile.py(97):                 emit(av)
sre_compile.py(78):     for op, av in pattern:
sre_compile.py(79):         if op in LITERAL_CODES:
sre_compile.py(80):             if flags & SRE_FLAG_IGNORECASE:
sre_compile.py(96):                 emit(OPCODES[op])
sre_compile.py(97):                 emit(av)
sre_compile.py(78):     for op, av in pattern:
sre_compile.py(79):         if op in LITERAL_CODES:
sre_compile.py(98):         elif op is IN:
sre_compile.py(109):         elif op is ANY:
sre_compile.py(114):         elif op in REPEATING_CODES:
sre_compile.py(146):         elif op is SUBPATTERN:
sre_compile.py(155):         elif op in SUCCESS_CODES:
sre_compile.py(157):         elif op in ASSERT_CODES:
sre_compile.py(170):         elif op is CALL:
sre_compile.py(176):         elif op is AT:
sre_compile.py(177):             emit(OPCODES[op])
sre_compile.py(178):             if flags & SRE_FLAG_MULTILINE:
sre_compile.py(179):                 av = AT_MULTILINE.get(av, av)
sre_compile.py(180):             if flags & SRE_FLAG_LOCALE:
sre_compile.py(182):             elif flags & SRE_FLAG_UNICODE:
sre_compile.py(184):             emit(ATCODES[av])
sre_compile.py(78):     for op, av in pattern:
sre_compile.py(563):     code.append(OPCODES[SUCCESS])
sre_compile.py(565):     return code
sre_compile.py(581):     if p.pattern.groups > 100:
sre_compile.py(587):     groupindex = p.pattern.groupdict
sre_compile.py(588):     indexgroup = [None] * p.pattern.groups
sre_compile.py(589):     for k, i in groupindex.items():
sre_compile.py(592):     return _sre.compile(
sre_compile.py(593):         pattern, flags | p.pattern.flags, code,
sre_compile.py(594):         p.pattern.groups-1,
sre_compile.py(595):         groupindex, indexgroup
re.py(252):     if not bypass_cache:
re.py(253):         if len(_cache) >= _MAXCACHE:
re.py(255):         if p.flags & LOCALE:
re.py(260):             loc = None
re.py(261):         _cache[cachekey] = p, loc
re.py(262):     return p
fnmatch.py(83):     return re_pat.match(name) is not None
_utils.py(110):     for pattern in patterns:
_utils.py(115):     return False
_utils.py(120):     for name in names:
_utils.py(121):         srcname = os.path.join(dir, name)
 --- modulename: ntpath, funcname: join
ntpath.py(65):     result_drive, result_path = splitdrive(path)
 --- modulename: ntpath, funcname: splitdrive
ntpath.py(115):     if len(p) > 1:
ntpath.py(116):         normp = p.replace(altsep, sep)
ntpath.py(117):         if (normp[0:2] == sep*2) and (normp[2:3] != sep):
ntpath.py(133):         if normp[1] == ':':
ntpath.py(134):             return p[:2], p[2:]
ntpath.py(66):     for p in paths:
ntpath.py(67):         p_drive, p_path = splitdrive(p)
 --- modulename: ntpath, funcname: splitdrive
ntpath.py(115):     if len(p) > 1:
ntpath.py(116):         normp = p.replace(altsep, sep)
ntpath.py(117):         if (normp[0:2] == sep*2) and (normp[2:3] != sep):
ntpath.py(133):         if normp[1] == ':':
ntpath.py(135):     return '', p
ntpath.py(68):         if p_path and p_path[0] in '\\/':
ntpath.py(74):         elif p_drive and p_drive != result_drive:
ntpath.py(83):         if result_path and result_path[-1] not in '\\/':
ntpath.py(84):             result_path = result_path + '\\'
ntpath.py(85):         result_path = result_path + p_path
ntpath.py(66):     for p in paths:
ntpath.py(87):     if (result_path and result_path[0] not in '\\/' and
ntpath.py(90):     return result_drive + result_path
_utils.py(122):         if not os.path.isdir(srcname) and _filter_match(name, filter):
_utils.py(120):     for name in names:
_utils.py(121):         srcname = os.path.join(dir, name)
 --- modulename: ntpath, funcname: join
ntpath.py(65):     result_drive, result_path = splitdrive(path)
 --- modulename: ntpath, funcname: splitdrive
ntpath.py(115):     if len(p) > 1:
ntpath.py(116):         normp = p.replace(altsep, sep)
ntpath.py(117):         if (normp[0:2] == sep*2) and (normp[2:3] != sep):
ntpath.py(133):         if normp[1] == ':':
ntpath.py(134):             return p[:2], p[2:]
ntpath.py(66):     for p in paths:
ntpath.py(67):         p_drive, p_path = splitdrive(p)
 --- modulename: ntpath, funcname: splitdrive
ntpath.py(115):     if len(p) > 1:
ntpath.py(116):         normp = p.replace(altsep, sep)
ntpath.py(117):         if (normp[0:2] == sep*2) and (normp[2:3] != sep):
ntpath.py(133):         if normp[1] == ':':
ntpath.py(135):     return '', p
ntpath.py(68):         if p_path and p_path[0] in '\\/':
ntpath.py(74):         elif p_drive and p_drive != result_drive:
ntpath.py(83):         if result_path and result_path[-1] not in '\\/':
ntpath.py(84):             result_path = result_path + '\\'
ntpath.py(85):         result_path = result_path + p_path
ntpath.py(66):     for p in paths:
ntpath.py(87):     if (result_path and result_path[0] not in '\\/' and
ntpath.py(90):     return result_drive + result_path
_utils.py(122):         if not os.path.isdir(srcname) and _filter_match(name, filter):
_utils.py(120):     for name in names:
_utils.py(121):         srcname = os.path.join(dir, name)
 --- modulename: ntpath, funcname: join
ntpath.py(65):     result_drive, result_path = splitdrive(path)
 --- modulename: ntpath, funcname: splitdrive
ntpath.py(115):     if len(p) > 1:
ntpath.py(116):         normp = p.replace(altsep, sep)
ntpath.py(117):         if (normp[0:2] == sep*2) and (normp[2:3] != sep):
ntpath.py(133):         if normp[1] == ':':
ntpath.py(134):             return p[:2], p[2:]
ntpath.py(66):     for p in paths:
ntpath.py(67):         p_drive, p_path = splitdrive(p)
 --- modulename: ntpath, funcname: splitdrive
ntpath.py(115):     if len(p) > 1:
ntpath.py(116):         normp = p.replace(altsep, sep)
ntpath.py(117):         if (normp[0:2] == sep*2) and (normp[2:3] != sep):
ntpath.py(133):         if normp[1] == ':':
ntpath.py(135):     return '', p
ntpath.py(68):         if p_path and p_path[0] in '\\/':
ntpath.py(74):         elif p_drive and p_drive != result_drive:
ntpath.py(83):         if result_path and result_path[-1] not in '\\/':
ntpath.py(84):             result_path = result_path + '\\'
ntpath.py(85):         result_path = result_path + p_path
ntpath.py(66):     for p in paths:
ntpath.py(87):     if (result_path and result_path[0] not in '\\/' and
ntpath.py(90):     return result_drive + result_path
_utils.py(122):         if not os.path.isdir(srcname) and _filter_match(name, filter):
_utils.py(120):     for name in names:
_utils.py(121):         srcname = os.path.join(dir, name)
 --- modulename: ntpath, funcname: join
ntpath.py(65):     result_drive, result_path = splitdrive(path)
 --- modulename: ntpath, funcname: splitdrive
ntpath.py(115):     if len(p) > 1:
ntpath.py(116):         normp = p.replace(altsep, sep)
ntpath.py(117):         if (normp[0:2] == sep*2) and (normp[2:3] != sep):
ntpath.py(133):         if normp[1] == ':':
ntpath.py(134):             return p[:2], p[2:]
ntpath.py(66):     for p in paths:
ntpath.py(67):         p_drive, p_path = splitdrive(p)
 --- modulename: ntpath, funcname: splitdrive
ntpath.py(115):     if len(p) > 1:
ntpath.py(116):         normp = p.replace(altsep, sep)
ntpath.py(117):         if (normp[0:2] == sep*2) and (normp[2:3] != sep):
ntpath.py(133):         if normp[1] == ':':
ntpath.py(135):     return '', p
ntpath.py(68):         if p_path and p_path[0] in '\\/':
ntpath.py(74):         elif p_drive and p_drive != result_drive:
ntpath.py(83):         if result_path and result_path[-1] not in '\\/':
ntpath.py(84):             result_path = result_path + '\\'
ntpath.py(85):         result_path = result_path + p_path
ntpath.py(66):     for p in paths:
ntpath.py(87):     if (result_path and result_path[0] not in '\\/' and
ntpath.py(90):     return result_drive + result_path
_utils.py(122):         if not os.path.isdir(srcname) and _filter_match(name, filter):
_utils.py(120):     for name in names:
_utils.py(121):         srcname = os.path.join(dir, name)
 --- modulename: ntpath, funcname: join
ntpath.py(65):     result_drive, result_path = splitdrive(path)
 --- modulename: ntpath, funcname: splitdrive
ntpath.py(115):     if len(p) > 1:
ntpath.py(116):         normp = p.replace(altsep, sep)
ntpath.py(117):         if (normp[0:2] == sep*2) and (normp[2:3] != sep):
ntpath.py(133):         if normp[1] == ':':
ntpath.py(134):             return p[:2], p[2:]
ntpath.py(66):     for p in paths:
ntpath.py(67):         p_drive, p_path = splitdrive(p)
 --- modulename: ntpath, funcname: splitdrive
ntpath.py(115):     if len(p) > 1:
ntpath.py(116):         normp = p.replace(altsep, sep)
ntpath.py(117):         if (normp[0:2] == sep*2) and (normp[2:3] != sep):
ntpath.py(133):         if normp[1] == ':':
ntpath.py(135):     return '', p
ntpath.py(68):         if p_path and p_path[0] in '\\/':
ntpath.py(74):         elif p_drive and p_drive != result_drive:
ntpath.py(83):         if result_path and result_path[-1] not in '\\/':
ntpath.py(84):             result_path = result_path + '\\'
ntpath.py(85):         result_path = result_path + p_path
ntpath.py(66):     for p in paths:
ntpath.py(87):     if (result_path and result_path[0] not in '\\/' and
ntpath.py(90):     return result_drive + result_path
_utils.py(122):         if not os.path.isdir(srcname) and _filter_match(name, filter):
 --- modulename: _utils, funcname: _filter_match
_utils.py(110):     for pattern in patterns:
_utils.py(111):         if pattern is None:
_utils.py(113):         if fnmatch.fnmatch(name, pattern):
 --- modulename: fnmatch, funcname: fnmatch
fnmatch.py(40):     import os
fnmatch.py(41):     name = os.path.normcase(name)
 --- modulename: ntpath, funcname: normcase
ntpath.py(47):     return s.replace("/", "\\").lower()
fnmatch.py(42):     pat = os.path.normcase(pat)
 --- modulename: ntpath, funcname: normcase
ntpath.py(47):     return s.replace("/", "\\").lower()
fnmatch.py(43):     return fnmatchcase(name, pat)
 --- modulename: fnmatch, funcname: fnmatchcase
fnmatch.py(76):     try:
fnmatch.py(77):         re_pat = _cache[pat]
fnmatch.py(83):     return re_pat.match(name) is not None
_utils.py(110):     for pattern in patterns:
_utils.py(115):     return False
_utils.py(120):     for name in names:
_utils.py(121):         srcname = os.path.join(dir, name)
 --- modulename: ntpath, funcname: join
ntpath.py(65):     result_drive, result_path = splitdrive(path)
 --- modulename: ntpath, funcname: splitdrive
ntpath.py(115):     if len(p) > 1:
ntpath.py(116):         normp = p.replace(altsep, sep)
ntpath.py(117):         if (normp[0:2] == sep*2) and (normp[2:3] != sep):
ntpath.py(133):         if normp[1] == ':':
ntpath.py(134):             return p[:2], p[2:]
ntpath.py(66):     for p in paths:
ntpath.py(67):         p_drive, p_path = splitdrive(p)
 --- modulename: ntpath, funcname: splitdrive
ntpath.py(115):     if len(p) > 1:
ntpath.py(116):         normp = p.replace(altsep, sep)
ntpath.py(117):         if (normp[0:2] == sep*2) and (normp[2:3] != sep):
ntpath.py(133):         if normp[1] == ':':
ntpath.py(135):     return '', p
ntpath.py(68):         if p_path and p_path[0] in '\\/':
ntpath.py(74):         elif p_drive and p_drive != result_drive:
ntpath.py(83):         if result_path and result_path[-1] not in '\\/':
ntpath.py(84):             result_path = result_path + '\\'
ntpath.py(85):         result_path = result_path + p_path
ntpath.py(66):     for p in paths:
ntpath.py(87):     if (result_path and result_path[0] not in '\\/' and
ntpath.py(90):     return result_drive + result_path
_utils.py(122):         if not os.path.isdir(srcname) and _filter_match(name, filter):
 --- modulename: _utils, funcname: _filter_match
_utils.py(110):     for pattern in patterns:
_utils.py(111):         if pattern is None:
_utils.py(113):         if fnmatch.fnmatch(name, pattern):
 --- modulename: fnmatch, funcname: fnmatch
fnmatch.py(40):     import os
fnmatch.py(41):     name = os.path.normcase(name)
 --- modulename: ntpath, funcname: normcase
ntpath.py(47):     return s.replace("/", "\\").lower()
fnmatch.py(42):     pat = os.path.normcase(pat)
 --- modulename: ntpath, funcname: normcase
ntpath.py(47):     return s.replace("/", "\\").lower()
fnmatch.py(43):     return fnmatchcase(name, pat)
 --- modulename: fnmatch, funcname: fnmatchcase
fnmatch.py(76):     try:
fnmatch.py(77):         re_pat = _cache[pat]
fnmatch.py(83):     return re_pat.match(name) is not None
_utils.py(110):     for pattern in patterns:
_utils.py(115):     return False
_utils.py(120):     for name in names:
_utils.py(121):         srcname = os.path.join(dir, name)
 --- modulename: ntpath, funcname: join
ntpath.py(65):     result_drive, result_path = splitdrive(path)
 --- modulename: ntpath, funcname: splitdrive
ntpath.py(115):     if len(p) > 1:
ntpath.py(116):         normp = p.replace(altsep, sep)
ntpath.py(117):         if (normp[0:2] == sep*2) and (normp[2:3] != sep):
ntpath.py(133):         if normp[1] == ':':
ntpath.py(134):             return p[:2], p[2:]
ntpath.py(66):     for p in paths:
ntpath.py(67):         p_drive, p_path = splitdrive(p)
 --- modulename: ntpath, funcname: splitdrive
ntpath.py(115):     if len(p) > 1:
ntpath.py(116):         normp = p.replace(altsep, sep)
ntpath.py(117):         if (normp[0:2] == sep*2) and (normp[2:3] != sep):
ntpath.py(133):         if normp[1] == ':':
ntpath.py(135):     return '', p
ntpath.py(68):         if p_path and p_path[0] in '\\/':
ntpath.py(74):         elif p_drive and p_drive != result_drive:
ntpath.py(83):         if result_path and result_path[-1] not in '\\/':
ntpath.py(84):             result_path = result_path + '\\'
ntpath.py(85):         result_path = result_path + p_path
ntpath.py(66):     for p in paths:
ntpath.py(87):     if (result_path and result_path[0] not in '\\/' and
ntpath.py(90):     return result_drive + result_path
_utils.py(122):         if not os.path.isdir(srcname) and _filter_match(name, filter):
 --- modulename: _utils, funcname: _filter_match
_utils.py(110):     for pattern in patterns:
_utils.py(111):         if pattern is None:
_utils.py(113):         if fnmatch.fnmatch(name, pattern):
 --- modulename: fnmatch, funcname: fnmatch
fnmatch.py(40):     import os
fnmatch.py(41):     name = os.path.normcase(name)
 --- modulename: ntpath, funcname: normcase
ntpath.py(47):     return s.replace("/", "\\").lower()
fnmatch.py(42):     pat = os.path.normcase(pat)
 --- modulename: ntpath, funcname: normcase
ntpath.py(47):     return s.replace("/", "\\").lower()
fnmatch.py(43):     return fnmatchcase(name, pat)
 --- modulename: fnmatch, funcname: fnmatchcase
fnmatch.py(76):     try:
fnmatch.py(77):         re_pat = _cache[pat]
fnmatch.py(83):     return re_pat.match(name) is not None
_utils.py(110):     for pattern in patterns:
_utils.py(115):     return False
_utils.py(120):     for name in names:
_utils.py(121):         srcname = os.path.join(dir, name)
 --- modulename: ntpath, funcname: join
ntpath.py(65):     result_drive, result_path = splitdrive(path)
 --- modulename: ntpath, funcname: splitdrive
ntpath.py(115):     if len(p) > 1:
ntpath.py(116):         normp = p.replace(altsep, sep)
ntpath.py(117):         if (normp[0:2] == sep*2) and (normp[2:3] != sep):
ntpath.py(133):         if normp[1] == ':':
ntpath.py(134):             return p[:2], p[2:]
ntpath.py(66):     for p in paths:
ntpath.py(67):         p_drive, p_path = splitdrive(p)
 --- modulename: ntpath, funcname: splitdrive
ntpath.py(115):     if len(p) > 1:
ntpath.py(116):         normp = p.replace(altsep, sep)
ntpath.py(117):         if (normp[0:2] == sep*2) and (normp[2:3] != sep):
ntpath.py(133):         if normp[1] == ':':
ntpath.py(135):     return '', p
ntpath.py(68):         if p_path and p_path[0] in '\\/':
ntpath.py(74):         elif p_drive and p_drive != result_drive:
ntpath.py(83):         if result_path and result_path[-1] not in '\\/':
ntpath.py(84):             result_path = result_path + '\\'
ntpath.py(85):         result_path = result_path + p_path
ntpath.py(66):     for p in paths:
ntpath.py(87):     if (result_path and result_path[0] not in '\\/' and
ntpath.py(90):     return result_drive + result_path
_utils.py(122):         if not os.path.isdir(srcname) and _filter_match(name, filter):
 --- modulename: _utils, funcname: _filter_match
_utils.py(110):     for pattern in patterns:
_utils.py(111):         if pattern is None:
_utils.py(113):         if fnmatch.fnmatch(name, pattern):
 --- modulename: fnmatch, funcname: fnmatch
fnmatch.py(40):     import os
fnmatch.py(41):     name = os.path.normcase(name)
 --- modulename: ntpath, funcname: normcase
ntpath.py(47):     return s.replace("/", "\\").lower()
fnmatch.py(42):     pat = os.path.normcase(pat)
 --- modulename: ntpath, funcname: normcase
ntpath.py(47):     return s.replace("/", "\\").lower()
fnmatch.py(43):     return fnmatchcase(name, pat)
 --- modulename: fnmatch, funcname: fnmatchcase
fnmatch.py(76):     try:
fnmatch.py(77):         re_pat = _cache[pat]
fnmatch.py(83):     return re_pat.match(name) is not None
_utils.py(110):     for pattern in patterns:
_utils.py(115):     return False
_utils.py(120):     for name in names:
_utils.py(121):         srcname = os.path.join(dir, name)
 --- modulename: ntpath, funcname: join
ntpath.py(65):     result_drive, result_path = splitdrive(path)
 --- modulename: ntpath, funcname: splitdrive
ntpath.py(115):     if len(p) > 1:
ntpath.py(116):         normp = p.replace(altsep, sep)
ntpath.py(117):         if (normp[0:2] == sep*2) and (normp[2:3] != sep):
ntpath.py(133):         if normp[1] == ':':
ntpath.py(134):             return p[:2], p[2:]
ntpath.py(66):     for p in paths:
ntpath.py(67):         p_drive, p_path = splitdrive(p)
 --- modulename: ntpath, funcname: splitdrive
ntpath.py(115):     if len(p) > 1:
ntpath.py(116):         normp = p.replace(altsep, sep)
ntpath.py(117):         if (normp[0:2] == sep*2) and (normp[2:3] != sep):
ntpath.py(133):         if normp[1] == ':':
ntpath.py(135):     return '', p
ntpath.py(68):         if p_path and p_path[0] in '\\/':
ntpath.py(74):         elif p_drive and p_drive != result_drive:
ntpath.py(83):         if result_path and result_path[-1] not in '\\/':
ntpath.py(84):             result_path = result_path + '\\'
ntpath.py(85):         result_path = result_path + p_path
ntpath.py(66):     for p in paths:
ntpath.py(87):     if (result_path and result_path[0] not in '\\/' and
ntpath.py(90):     return result_drive + result_path
_utils.py(122):         if not os.path.isdir(srcname) and _filter_match(name, filter):
_utils.py(120):     for name in names:
_utils.py(121):         srcname = os.path.join(dir, name)
 --- modulename: ntpath, funcname: join
ntpath.py(65):     result_drive, result_path = splitdrive(path)
 --- modulename: ntpath, funcname: splitdrive
ntpath.py(115):     if len(p) > 1:
ntpath.py(116):         normp = p.replace(altsep, sep)
ntpath.py(117):         if (normp[0:2] == sep*2) and (normp[2:3] != sep):
ntpath.py(133):         if normp[1] == ':':
ntpath.py(134):             return p[:2], p[2:]
ntpath.py(66):     for p in paths:
ntpath.py(67):         p_drive, p_path = splitdrive(p)
 --- modulename: ntpath, funcname: splitdrive
ntpath.py(115):     if len(p) > 1:
ntpath.py(116):         normp = p.replace(altsep, sep)
ntpath.py(117):         if (normp[0:2] == sep*2) and (normp[2:3] != sep):
ntpath.py(133):         if normp[1] == ':':
ntpath.py(135):     return '', p
ntpath.py(68):         if p_path and p_path[0] in '\\/':
ntpath.py(74):         elif p_drive and p_drive != result_drive:
ntpath.py(83):         if result_path and result_path[-1] not in '\\/':
ntpath.py(84):             result_path = result_path + '\\'
ntpath.py(85):         result_path = result_path + p_path
ntpath.py(66):     for p in paths:
ntpath.py(87):     if (result_path and result_path[0] not in '\\/' and
ntpath.py(90):     return result_drive + result_path
_utils.py(122):         if not os.path.isdir(srcname) and _filter_match(name, filter):
 --- modulename: _utils, funcname: _filter_match
_utils.py(110):     for pattern in patterns:
_utils.py(111):         if pattern is None:
_utils.py(113):         if fnmatch.fnmatch(name, pattern):
 --- modulename: fnmatch, funcname: fnmatch
fnmatch.py(40):     import os
fnmatch.py(41):     name = os.path.normcase(name)
 --- modulename: ntpath, funcname: normcase
ntpath.py(47):     return s.replace("/", "\\").lower()
fnmatch.py(42):     pat = os.path.normcase(pat)
 --- modulename: ntpath, funcname: normcase
ntpath.py(47):     return s.replace("/", "\\").lower()
fnmatch.py(43):     return fnmatchcase(name, pat)
 --- modulename: fnmatch, funcname: fnmatchcase
fnmatch.py(76):     try:
fnmatch.py(77):         re_pat = _cache[pat]
fnmatch.py(83):     return re_pat.match(name) is not None
_utils.py(110):     for pattern in patterns:
_utils.py(115):     return False
_utils.py(120):     for name in names:
_utils.py(121):         srcname = os.path.join(dir, name)
 --- modulename: ntpath, funcname: join
ntpath.py(65):     result_drive, result_path = splitdrive(path)
 --- modulename: ntpath, funcname: splitdrive
ntpath.py(115):     if len(p) > 1:
ntpath.py(116):         normp = p.replace(altsep, sep)
ntpath.py(117):         if (normp[0:2] == sep*2) and (normp[2:3] != sep):
ntpath.py(133):         if normp[1] == ':':
ntpath.py(134):             return p[:2], p[2:]
ntpath.py(66):     for p in paths:
ntpath.py(67):         p_drive, p_path = splitdrive(p)
 --- modulename: ntpath, funcname: splitdrive
ntpath.py(115):     if len(p) > 1:
ntpath.py(116):         normp = p.replace(altsep, sep)
ntpath.py(117):         if (normp[0:2] == sep*2) and (normp[2:3] != sep):
ntpath.py(133):         if normp[1] == ':':
ntpath.py(135):     return '', p
ntpath.py(68):         if p_path and p_path[0] in '\\/':
ntpath.py(74):         elif p_drive and p_drive != result_drive:
ntpath.py(83):         if result_path and result_path[-1] not in '\\/':
ntpath.py(84):             result_path = result_path + '\\'
ntpath.py(85):         result_path = result_path + p_path
ntpath.py(66):     for p in paths:
ntpath.py(87):     if (result_path and result_path[0] not in '\\/' and
ntpath.py(90):     return result_drive + result_path
_utils.py(122):         if not os.path.isdir(srcname) and _filter_match(name, filter):
 --- modulename: _utils, funcname: _filter_match
_utils.py(110):     for pattern in patterns:
_utils.py(111):         if pattern is None:
_utils.py(113):         if fnmatch.fnmatch(name, pattern):
 --- modulename: fnmatch, funcname: fnmatch
fnmatch.py(40):     import os
fnmatch.py(41):     name = os.path.normcase(name)
 --- modulename: ntpath, funcname: normcase
ntpath.py(47):     return s.replace("/", "\\").lower()
fnmatch.py(42):     pat = os.path.normcase(pat)
 --- modulename: ntpath, funcname: normcase
ntpath.py(47):     return s.replace("/", "\\").lower()
fnmatch.py(43):     return fnmatchcase(name, pat)
 --- modulename: fnmatch, funcname: fnmatchcase
fnmatch.py(76):     try:
fnmatch.py(77):         re_pat = _cache[pat]
fnmatch.py(83):     return re_pat.match(name) is not None
_utils.py(110):     for pattern in patterns:
_utils.py(115):     return False
_utils.py(120):     for name in names:
_utils.py(121):         srcname = os.path.join(dir, name)
 --- modulename: ntpath, funcname: join
ntpath.py(65):     result_drive, result_path = splitdrive(path)
 --- modulename: ntpath, funcname: splitdrive
ntpath.py(115):     if len(p) > 1:
ntpath.py(116):         normp = p.replace(altsep, sep)
ntpath.py(117):         if (normp[0:2] == sep*2) and (normp[2:3] != sep):
ntpath.py(133):         if normp[1] == ':':
ntpath.py(134):             return p[:2], p[2:]
ntpath.py(66):     for p in paths:
ntpath.py(67):         p_drive, p_path = splitdrive(p)
 --- modulename: ntpath, funcname: splitdrive
ntpath.py(115):     if len(p) > 1:
ntpath.py(116):         normp = p.replace(altsep, sep)
ntpath.py(117):         if (normp[0:2] == sep*2) and (normp[2:3] != sep):
ntpath.py(133):         if normp[1] == ':':
ntpath.py(135):     return '', p
ntpath.py(68):         if p_path and p_path[0] in '\\/':
ntpath.py(74):         elif p_drive and p_drive != result_drive:
ntpath.py(83):         if result_path and result_path[-1] not in '\\/':
ntpath.py(84):             result_path = result_path + '\\'
ntpath.py(85):         result_path = result_path + p_path
ntpath.py(66):     for p in paths:
ntpath.py(87):     if (result_path and result_path[0] not in '\\/' and
ntpath.py(90):     return result_drive + result_path
_utils.py(122):         if not os.path.isdir(srcname) and _filter_match(name, filter):
_utils.py(120):     for name in names:
_utils.py(121):         srcname = os.path.join(dir, name)
 --- modulename: ntpath, funcname: join
ntpath.py(65):     result_drive, result_path = splitdrive(path)
 --- modulename: ntpath, funcname: splitdrive
ntpath.py(115):     if len(p) > 1:
ntpath.py(116):         normp = p.replace(altsep, sep)
ntpath.py(117):         if (normp[0:2] == sep*2) and (normp[2:3] != sep):
ntpath.py(133):         if normp[1] == ':':
ntpath.py(134):             return p[:2], p[2:]
ntpath.py(66):     for p in paths:
ntpath.py(67):         p_drive, p_path = splitdrive(p)
 --- modulename: ntpath, funcname: splitdrive
ntpath.py(115):     if len(p) > 1:
ntpath.py(116):         normp = p.replace(altsep, sep)
ntpath.py(117):         if (normp[0:2] == sep*2) and (normp[2:3] != sep):
ntpath.py(133):         if normp[1] == ':':
ntpath.py(135):     return '', p
ntpath.py(68):         if p_path and p_path[0] in '\\/':
ntpath.py(74):         elif p_drive and p_drive != result_drive:
ntpath.py(83):         if result_path and result_path[-1] not in '\\/':
ntpath.py(84):             result_path = result_path + '\\'
ntpath.py(85):         result_path = result_path + p_path
ntpath.py(66):     for p in paths:
ntpath.py(87):     if (result_path and result_path[0] not in '\\/' and
ntpath.py(90):     return result_drive + result_path
_utils.py(122):         if not os.path.isdir(srcname) and _filter_match(name, filter):
 --- modulename: _utils, funcname: _filter_match
_utils.py(110):     for pattern in patterns:
_utils.py(111):         if pattern is None:
_utils.py(113):         if fnmatch.fnmatch(name, pattern):
 --- modulename: fnmatch, funcname: fnmatch
fnmatch.py(40):     import os
fnmatch.py(41):     name = os.path.normcase(name)
 --- modulename: ntpath, funcname: normcase
ntpath.py(47):     return s.replace("/", "\\").lower()
fnmatch.py(42):     pat = os.path.normcase(pat)
 --- modulename: ntpath, funcname: normcase
ntpath.py(47):     return s.replace("/", "\\").lower()
fnmatch.py(43):     return fnmatchcase(name, pat)
 --- modulename: fnmatch, funcname: fnmatchcase
fnmatch.py(76):     try:
fnmatch.py(77):         re_pat = _cache[pat]
fnmatch.py(83):     return re_pat.match(name) is not None
_utils.py(110):     for pattern in patterns:
_utils.py(115):     return False
_utils.py(120):     for name in names:
_utils.py(121):         srcname = os.path.join(dir, name)
 --- modulename: ntpath, funcname: join
ntpath.py(65):     result_drive, result_path = splitdrive(path)
 --- modulename: ntpath, funcname: splitdrive
ntpath.py(115):     if len(p) > 1:
ntpath.py(116):         normp = p.replace(altsep, sep)
ntpath.py(117):         if (normp[0:2] == sep*2) and (normp[2:3] != sep):
ntpath.py(133):         if normp[1] == ':':
ntpath.py(134):             return p[:2], p[2:]
ntpath.py(66):     for p in paths:
ntpath.py(67):         p_drive, p_path = splitdrive(p)
 --- modulename: ntpath, funcname: splitdrive
ntpath.py(115):     if len(p) > 1:
ntpath.py(116):         normp = p.replace(altsep, sep)
ntpath.py(117):         if (normp[0:2] == sep*2) and (normp[2:3] != sep):
ntpath.py(133):         if normp[1] == ':':
ntpath.py(135):     return '', p
ntpath.py(68):         if p_path and p_path[0] in '\\/':
ntpath.py(74):         elif p_drive and p_drive != result_drive:
ntpath.py(83):         if result_path and result_path[-1] not in '\\/':
ntpath.py(84):             result_path = result_path + '\\'
ntpath.py(85):         result_path = result_path + p_path
ntpath.py(66):     for p in paths:
ntpath.py(87):     if (result_path and result_path[0] not in '\\/' and
ntpath.py(90):     return result_drive + result_path
_utils.py(122):         if not os.path.isdir(srcname) and _filter_match(name, filter):
 --- modulename: _utils, funcname: _filter_match
_utils.py(110):     for pattern in patterns:
_utils.py(111):         if pattern is None:
_utils.py(113):         if fnmatch.fnmatch(name, pattern):
 --- modulename: fnmatch, funcname: fnmatch
fnmatch.py(40):     import os
fnmatch.py(41):     name = os.path.normcase(name)
 --- modulename: ntpath, funcname: normcase
ntpath.py(47):     return s.replace("/", "\\").lower()
fnmatch.py(42):     pat = os.path.normcase(pat)
 --- modulename: ntpath, funcname: normcase
ntpath.py(47):     return s.replace("/", "\\").lower()
fnmatch.py(43):     return fnmatchcase(name, pat)
 --- modulename: fnmatch, funcname: fnmatchcase
fnmatch.py(76):     try:
fnmatch.py(77):         re_pat = _cache[pat]
fnmatch.py(83):     return re_pat.match(name) is not None
_utils.py(110):     for pattern in patterns:
_utils.py(115):     return False
_utils.py(120):     for name in names:
_utils.py(121):         srcname = os.path.join(dir, name)
 --- modulename: ntpath, funcname: join
ntpath.py(65):     result_drive, result_path = splitdrive(path)
 --- modulename: ntpath, funcname: splitdrive
ntpath.py(115):     if len(p) > 1:
ntpath.py(116):         normp = p.replace(altsep, sep)
ntpath.py(117):         if (normp[0:2] == sep*2) and (normp[2:3] != sep):
ntpath.py(133):         if normp[1] == ':':
ntpath.py(134):             return p[:2], p[2:]
ntpath.py(66):     for p in paths:
ntpath.py(67):         p_drive, p_path = splitdrive(p)
 --- modulename: ntpath, funcname: splitdrive
ntpath.py(115):     if len(p) > 1:
ntpath.py(116):         normp = p.replace(altsep, sep)
ntpath.py(117):         if (normp[0:2] == sep*2) and (normp[2:3] != sep):
ntpath.py(133):         if normp[1] == ':':
ntpath.py(135):     return '', p
ntpath.py(68):         if p_path and p_path[0] in '\\/':
ntpath.py(74):         elif p_drive and p_drive != result_drive:
ntpath.py(83):         if result_path and result_path[-1] not in '\\/':
ntpath.py(84):             result_path = result_path + '\\'
ntpath.py(85):         result_path = result_path + p_path
ntpath.py(66):     for p in paths:
ntpath.py(87):     if (result_path and result_path[0] not in '\\/' and
ntpath.py(90):     return result_drive + result_path
_utils.py(122):         if not os.path.isdir(srcname) and _filter_match(name, filter):
 --- modulename: _utils, funcname: _filter_match
_utils.py(110):     for pattern in patterns:
_utils.py(111):         if pattern is None:
_utils.py(113):         if fnmatch.fnmatch(name, pattern):
 --- modulename: fnmatch, funcname: fnmatch
fnmatch.py(40):     import os
fnmatch.py(41):     name = os.path.normcase(name)
 --- modulename: ntpath, funcname: normcase
ntpath.py(47):     return s.replace("/", "\\").lower()
fnmatch.py(42):     pat = os.path.normcase(pat)
 --- modulename: ntpath, funcname: normcase
ntpath.py(47):     return s.replace("/", "\\").lower()
fnmatch.py(43):     return fnmatchcase(name, pat)
 --- modulename: fnmatch, funcname: fnmatchcase
fnmatch.py(76):     try:
fnmatch.py(77):         re_pat = _cache[pat]
fnmatch.py(83):     return re_pat.match(name) is not None
_utils.py(110):     for pattern in patterns:
_utils.py(115):     return False
_utils.py(120):     for name in names:
_utils.py(121):         srcname = os.path.join(dir, name)
 --- modulename: ntpath, funcname: join
ntpath.py(65):     result_drive, result_path = splitdrive(path)
 --- modulename: ntpath, funcname: splitdrive
ntpath.py(115):     if len(p) > 1:
ntpath.py(116):         normp = p.replace(altsep, sep)
ntpath.py(117):         if (normp[0:2] == sep*2) and (normp[2:3] != sep):
ntpath.py(133):         if normp[1] == ':':
ntpath.py(134):             return p[:2], p[2:]
ntpath.py(66):     for p in paths:
ntpath.py(67):         p_drive, p_path = splitdrive(p)
 --- modulename: ntpath, funcname: splitdrive
ntpath.py(115):     if len(p) > 1:
ntpath.py(116):         normp = p.replace(altsep, sep)
ntpath.py(117):         if (normp[0:2] == sep*2) and (normp[2:3] != sep):
ntpath.py(133):         if normp[1] == ':':
ntpath.py(135):     return '', p
ntpath.py(68):         if p_path and p_path[0] in '\\/':
ntpath.py(74):         elif p_drive and p_drive != result_drive:
ntpath.py(83):         if result_path and result_path[-1] not in '\\/':
ntpath.py(84):             result_path = result_path + '\\'
ntpath.py(85):         result_path = result_path + p_path
ntpath.py(66):     for p in paths:
ntpath.py(87):     if (result_path and result_path[0] not in '\\/' and
ntpath.py(90):     return result_drive + result_path
_utils.py(122):         if not os.path.isdir(srcname) and _filter_match(name, filter):
 --- modulename: _utils, funcname: _filter_match
_utils.py(110):     for pattern in patterns:
_utils.py(111):         if pattern is None:
_utils.py(113):         if fnmatch.fnmatch(name, pattern):
 --- modulename: fnmatch, funcname: fnmatch
fnmatch.py(40):     import os
fnmatch.py(41):     name = os.path.normcase(name)
 --- modulename: ntpath, funcname: normcase
ntpath.py(47):     return s.replace("/", "\\").lower()
fnmatch.py(42):     pat = os.path.normcase(pat)
 --- modulename: ntpath, funcname: normcase
ntpath.py(47):     return s.replace("/", "\\").lower()
fnmatch.py(43):     return fnmatchcase(name, pat)
 --- modulename: fnmatch, funcname: fnmatchcase
fnmatch.py(76):     try:
fnmatch.py(77):         re_pat = _cache[pat]
fnmatch.py(83):     return re_pat.match(name) is not None
_utils.py(110):     for pattern in patterns:
_utils.py(115):     return False
_utils.py(120):     for name in names:
_utils.py(121):         srcname = os.path.join(dir, name)
 --- modulename: ntpath, funcname: join
ntpath.py(65):     result_drive, result_path = splitdrive(path)
 --- modulename: ntpath, funcname: splitdrive
ntpath.py(115):     if len(p) > 1:
ntpath.py(116):         normp = p.replace(altsep, sep)
ntpath.py(117):         if (normp[0:2] == sep*2) and (normp[2:3] != sep):
ntpath.py(133):         if normp[1] == ':':
ntpath.py(134):             return p[:2], p[2:]
ntpath.py(66):     for p in paths:
ntpath.py(67):         p_drive, p_path = splitdrive(p)
 --- modulename: ntpath, funcname: splitdrive
ntpath.py(115):     if len(p) > 1:
ntpath.py(116):         normp = p.replace(altsep, sep)
ntpath.py(117):         if (normp[0:2] == sep*2) and (normp[2:3] != sep):
ntpath.py(133):         if normp[1] == ':':
ntpath.py(135):     return '', p
ntpath.py(68):         if p_path and p_path[0] in '\\/':
ntpath.py(74):         elif p_drive and p_drive != result_drive:
ntpath.py(83):         if result_path and result_path[-1] not in '\\/':
ntpath.py(84):             result_path = result_path + '\\'
ntpath.py(85):         result_path = result_path + p_path
ntpath.py(66):     for p in paths:
ntpath.py(87):     if (result_path and result_path[0] not in '\\/' and
ntpath.py(90):     return result_drive + result_path
_utils.py(122):         if not os.path.isdir(srcname) and _filter_match(name, filter):
 --- modulename: _utils, funcname: _filter_match
_utils.py(110):     for pattern in patterns:
_utils.py(111):         if pattern is None:
_utils.py(113):         if fnmatch.fnmatch(name, pattern):
 --- modulename: fnmatch, funcname: fnmatch
fnmatch.py(40):     import os
fnmatch.py(41):     name = os.path.normcase(name)
 --- modulename: ntpath, funcname: normcase
ntpath.py(47):     return s.replace("/", "\\").lower()
fnmatch.py(42):     pat = os.path.normcase(pat)
 --- modulename: ntpath, funcname: normcase
ntpath.py(47):     return s.replace("/", "\\").lower()
fnmatch.py(43):     return fnmatchcase(name, pat)
 --- modulename: fnmatch, funcname: fnmatchcase
fnmatch.py(76):     try:
fnmatch.py(77):         re_pat = _cache[pat]
fnmatch.py(83):     return re_pat.match(name) is not None
_utils.py(110):     for pattern in patterns:
_utils.py(115):     return False
_utils.py(120):     for name in names:
_utils.py(121):         srcname = os.path.join(dir, name)
 --- modulename: ntpath, funcname: join
ntpath.py(65):     result_drive, result_path = splitdrive(path)
 --- modulename: ntpath, funcname: splitdrive
ntpath.py(115):     if len(p) > 1:
ntpath.py(116):         normp = p.replace(altsep, sep)
ntpath.py(117):         if (normp[0:2] == sep*2) and (normp[2:3] != sep):
ntpath.py(133):         if normp[1] == ':':
ntpath.py(134):             return p[:2], p[2:]
ntpath.py(66):     for p in paths:
ntpath.py(67):         p_drive, p_path = splitdrive(p)
 --- modulename: ntpath, funcname: splitdrive
ntpath.py(115):     if len(p) > 1:
ntpath.py(116):         normp = p.replace(altsep, sep)
ntpath.py(117):         if (normp[0:2] == sep*2) and (normp[2:3] != sep):
ntpath.py(133):         if normp[1] == ':':
ntpath.py(135):     return '', p
ntpath.py(68):         if p_path and p_path[0] in '\\/':
ntpath.py(74):         elif p_drive and p_drive != result_drive:
ntpath.py(83):         if result_path and result_path[-1] not in '\\/':
ntpath.py(84):             result_path = result_path + '\\'
ntpath.py(85):         result_path = result_path + p_path
ntpath.py(66):     for p in paths:
ntpath.py(87):     if (result_path and result_path[0] not in '\\/' and
ntpath.py(90):     return result_drive + result_path
_utils.py(122):         if not os.path.isdir(srcname) and _filter_match(name, filter):
 --- modulename: _utils, funcname: _filter_match
_utils.py(110):     for pattern in patterns:
_utils.py(111):         if pattern is None:
_utils.py(113):         if fnmatch.fnmatch(name, pattern):
 --- modulename: fnmatch, funcname: fnmatch
fnmatch.py(40):     import os
fnmatch.py(41):     name = os.path.normcase(name)
 --- modulename: ntpath, funcname: normcase
ntpath.py(47):     return s.replace("/", "\\").lower()
fnmatch.py(42):     pat = os.path.normcase(pat)
 --- modulename: ntpath, funcname: normcase
ntpath.py(47):     return s.replace("/", "\\").lower()
fnmatch.py(43):     return fnmatchcase(name, pat)
 --- modulename: fnmatch, funcname: fnmatchcase
fnmatch.py(76):     try:
fnmatch.py(77):         re_pat = _cache[pat]
fnmatch.py(83):     return re_pat.match(name) is not None
_utils.py(110):     for pattern in patterns:
_utils.py(115):     return False
_utils.py(120):     for name in names:
_utils.py(121):         srcname = os.path.join(dir, name)
 --- modulename: ntpath, funcname: join
ntpath.py(65):     result_drive, result_path = splitdrive(path)
 --- modulename: ntpath, funcname: splitdrive
ntpath.py(115):     if len(p) > 1:
ntpath.py(116):         normp = p.replace(altsep, sep)
ntpath.py(117):         if (normp[0:2] == sep*2) and (normp[2:3] != sep):
ntpath.py(133):         if normp[1] == ':':
ntpath.py(134):             return p[:2], p[2:]
ntpath.py(66):     for p in paths:
ntpath.py(67):         p_drive, p_path = splitdrive(p)
 --- modulename: ntpath, funcname: splitdrive
ntpath.py(115):     if len(p) > 1:
ntpath.py(116):         normp = p.replace(altsep, sep)
ntpath.py(117):         if (normp[0:2] == sep*2) and (normp[2:3] != sep):
ntpath.py(133):         if normp[1] == ':':
ntpath.py(135):     return '', p
ntpath.py(68):         if p_path and p_path[0] in '\\/':
ntpath.py(74):         elif p_drive and p_drive != result_drive:
ntpath.py(83):         if result_path and result_path[-1] not in '\\/':
ntpath.py(84):             result_path = result_path + '\\'
ntpath.py(85):         result_path = result_path + p_path
ntpath.py(66):     for p in paths:
ntpath.py(87):     if (result_path and result_path[0] not in '\\/' and
ntpath.py(90):     return result_drive + result_path
_utils.py(122):         if not os.path.isdir(srcname) and _filter_match(name, filter):
 --- modulename: _utils, funcname: _filter_match
_utils.py(110):     for pattern in patterns:
_utils.py(111):         if pattern is None:
_utils.py(113):         if fnmatch.fnmatch(name, pattern):
 --- modulename: fnmatch, funcname: fnmatch
fnmatch.py(40):     import os
fnmatch.py(41):     name = os.path.normcase(name)
 --- modulename: ntpath, funcname: normcase
ntpath.py(47):     return s.replace("/", "\\").lower()
fnmatch.py(42):     pat = os.path.normcase(pat)
 --- modulename: ntpath, funcname: normcase
ntpath.py(47):     return s.replace("/", "\\").lower()
fnmatch.py(43):     return fnmatchcase(name, pat)
 --- modulename: fnmatch, funcname: fnmatchcase
fnmatch.py(76):     try:
fnmatch.py(77):         re_pat = _cache[pat]
fnmatch.py(83):     return re_pat.match(name) is not None
_utils.py(110):     for pattern in patterns:
_utils.py(115):     return False
_utils.py(120):     for name in names:
_utils.py(121):         srcname = os.path.join(dir, name)
 --- modulename: ntpath, funcname: join
ntpath.py(65):     result_drive, result_path = splitdrive(path)
 --- modulename: ntpath, funcname: splitdrive
ntpath.py(115):     if len(p) > 1:
ntpath.py(116):         normp = p.replace(altsep, sep)
ntpath.py(117):         if (normp[0:2] == sep*2) and (normp[2:3] != sep):
ntpath.py(133):         if normp[1] == ':':
ntpath.py(134):             return p[:2], p[2:]
ntpath.py(66):     for p in paths:
ntpath.py(67):         p_drive, p_path = splitdrive(p)
 --- modulename: ntpath, funcname: splitdrive
ntpath.py(115):     if len(p) > 1:
ntpath.py(116):         normp = p.replace(altsep, sep)
ntpath.py(117):         if (normp[0:2] == sep*2) and (normp[2:3] != sep):
ntpath.py(133):         if normp[1] == ':':
ntpath.py(135):     return '', p
ntpath.py(68):         if p_path and p_path[0] in '\\/':
ntpath.py(74):         elif p_drive and p_drive != result_drive:
ntpath.py(83):         if result_path and result_path[-1] not in '\\/':
ntpath.py(84):             result_path = result_path + '\\'
ntpath.py(85):         result_path = result_path + p_path
ntpath.py(66):     for p in paths:
ntpath.py(87):     if (result_path and result_path[0] not in '\\/' and
ntpath.py(90):     return result_drive + result_path
_utils.py(122):         if not os.path.isdir(srcname) and _filter_match(name, filter):
 --- modulename: _utils, funcname: _filter_match
_utils.py(110):     for pattern in patterns:
_utils.py(111):         if pattern is None:
_utils.py(113):         if fnmatch.fnmatch(name, pattern):
 --- modulename: fnmatch, funcname: fnmatch
fnmatch.py(40):     import os
fnmatch.py(41):     name = os.path.normcase(name)
 --- modulename: ntpath, funcname: normcase
ntpath.py(47):     return s.replace("/", "\\").lower()
fnmatch.py(42):     pat = os.path.normcase(pat)
 --- modulename: ntpath, funcname: normcase
ntpath.py(47):     return s.replace("/", "\\").lower()
fnmatch.py(43):     return fnmatchcase(name, pat)
 --- modulename: fnmatch, funcname: fnmatchcase
fnmatch.py(76):     try:
fnmatch.py(77):         re_pat = _cache[pat]
fnmatch.py(83):     return re_pat.match(name) is not None
_utils.py(114):             return True
_utils.py(123):             return True
_utils.py(235):     if not plugins or not os.path.exists(plugins):
 --- modulename: genericpath, funcname: exists
genericpath.py(25):     try:
genericpath.py(26):         os.stat(path)
genericpath.py(29):     return True
_utils.py(240):     if not imports or not os.path.exists(imports):
 --- modulename: genericpath, funcname: exists
genericpath.py(25):     try:
genericpath.py(26):         os.stat(path)
genericpath.py(29):     return True
_utils.py(245):     if not translations or not os.path.exists(translations):
 --- modulename: genericpath, funcname: exists
genericpath.py(25):     try:
genericpath.py(26):         os.stat(path)
genericpath.py(29):     return True
_utils.py(253):     exec_prefix = os.path.dirname(sys.executable)
 --- modulename: ntpath, funcname: dirname
ntpath.py(215):     return split(p)[0]
 --- modulename: ntpath, funcname: split
ntpath.py(180):     d, p = splitdrive(p)
 --- modulename: ntpath, funcname: splitdrive
ntpath.py(115):     if len(p) > 1:
ntpath.py(116):         normp = p.replace(altsep, sep)
ntpath.py(117):         if (normp[0:2] == sep*2) and (normp[2:3] != sep):
ntpath.py(133):         if normp[1] == ':':
ntpath.py(134):             return p[:2], p[2:]
ntpath.py(182):     i = len(p)
ntpath.py(183):     while i and p[i-1] not in '/\\':
ntpath.py(184):         i = i - 1
ntpath.py(183):     while i and p[i-1] not in '/\\':
ntpath.py(184):         i = i - 1
ntpath.py(183):     while i and p[i-1] not in '/\\':
ntpath.py(184):         i = i - 1
ntpath.py(183):     while i and p[i-1] not in '/\\':
ntpath.py(184):         i = i - 1
ntpath.py(183):     while i and p[i-1] not in '/\\':
ntpath.py(184):         i = i - 1
ntpath.py(183):     while i and p[i-1] not in '/\\':
ntpath.py(184):         i = i - 1
ntpath.py(183):     while i and p[i-1] not in '/\\':
ntpath.py(184):         i = i - 1
ntpath.py(183):     while i and p[i-1] not in '/\\':
ntpath.py(184):         i = i - 1
ntpath.py(183):     while i and p[i-1] not in '/\\':
ntpath.py(184):         i = i - 1
ntpath.py(183):     while i and p[i-1] not in '/\\':
ntpath.py(184):         i = i - 1
ntpath.py(183):     while i and p[i-1] not in '/\\':
ntpath.py(185):     head, tail = p[:i], p[i:]  # now tail has no slashes
ntpath.py(187):     head2 = head
ntpath.py(188):     while head2 and head2[-1] in '/\\':
ntpath.py(189):         head2 = head2[:-1]
ntpath.py(188):     while head2 and head2[-1] in '/\\':
ntpath.py(190):     head = head2 or head
ntpath.py(191):     return d + head, tail
_utils.py(254):     qtconf_path = os.path.join(exec_prefix, 'qt.conf')
 --- modulename: ntpath, funcname: join
ntpath.py(65):     result_drive, result_path = splitdrive(path)
 --- modulename: ntpath, funcname: splitdrive
ntpath.py(115):     if len(p) > 1:
ntpath.py(116):         normp = p.replace(altsep, sep)
ntpath.py(117):         if (normp[0:2] == sep*2) and (normp[2:3] != sep):
ntpath.py(133):         if normp[1] == ':':
ntpath.py(134):             return p[:2], p[2:]
ntpath.py(66):     for p in paths:
ntpath.py(67):         p_drive, p_path = splitdrive(p)
 --- modulename: ntpath, funcname: splitdrive
ntpath.py(115):     if len(p) > 1:
ntpath.py(116):         normp = p.replace(altsep, sep)
ntpath.py(117):         if (normp[0:2] == sep*2) and (normp[2:3] != sep):
ntpath.py(133):         if normp[1] == ':':
ntpath.py(135):     return '', p
ntpath.py(68):         if p_path and p_path[0] in '\\/':
ntpath.py(74):         elif p_drive and p_drive != result_drive:
ntpath.py(83):         if result_path and result_path[-1] not in '\\/':
ntpath.py(84):             result_path = result_path + '\\'
ntpath.py(85):         result_path = result_path + p_path
ntpath.py(66):     for p in paths:
ntpath.py(87):     if (result_path and result_path[0] not in '\\/' and
ntpath.py(90):     return result_drive + result_path
_utils.py(255):     if os.path.exists(qtconf_path) and not force:
 --- modulename: genericpath, funcname: exists
genericpath.py(25):     try:
genericpath.py(26):         os.stat(path)
genericpath.py(27):     except os.error:
genericpath.py(28):         return False
_utils.py(259):     if QtCore.QFile.exists(":/qt/etc/qt.conf") and not force:
_utils.py(262):     rc_struct, rc_name, rc_data = _get_qt_conf_resource(prefix, binaries,
_utils.py(263):                                                         plugins, imports,
_utils.py(264):                                                         translations)
 --- modulename: _utils, funcname: _get_qt_conf_resource
_utils.py(158): Translations = %(translations)s"
_utils.py(160):     rc_data_input = qt_conf_template % {"prefix": prefix,
_utils.py(161):                                         "binaries": binaries,
_utils.py(162):                                         "plugins": plugins,
_utils.py(163):                                         "imports": imports,
_utils.py(164):                                         "translations": translations}
_utils.py(165):     rc_data_ouput = []
_utils.py(166):     _rcc_write_data(rc_data_ouput, rc_data_input)
 --- modulename: _utils, funcname: _rcc_write_data
_utils.py(143):     _rcc_write_number(out, len(data), 4)
 --- modulename: _utils, funcname: _rcc_write_number
_utils.py(128):     dividend = 1
_utils.py(129):     if width == 2:
_utils.py(131):     elif width == 3:
_utils.py(133):     elif width == 4:
_utils.py(134):         dividend = 16777216
_utils.py(135):     while dividend >= 1:
_utils.py(136):         tmp = int(number / dividend)
_utils.py(137):         out.append("%02x" % tmp)
_utils.py(138):         number -= tmp * dividend
_utils.py(139):         dividend = int(dividend / 256)
_utils.py(135):     while dividend >= 1:
_utils.py(136):         tmp = int(number / dividend)
_utils.py(137):         out.append("%02x" % tmp)
_utils.py(138):         number -= tmp * dividend
_utils.py(139):         dividend = int(dividend / 256)
_utils.py(135):     while dividend >= 1:
_utils.py(136):         tmp = int(number / dividend)
_utils.py(137):         out.append("%02x" % tmp)
_utils.py(138):         number -= tmp * dividend
_utils.py(139):         dividend = int(dividend / 256)
_utils.py(135):     while dividend >= 1:
_utils.py(136):         tmp = int(number / dividend)
_utils.py(137):         out.append("%02x" % tmp)
_utils.py(138):         number -= tmp * dividend
_utils.py(139):         dividend = int(dividend / 256)
_utils.py(135):     while dividend >= 1:
_utils.py(144):     for d in data:
_utils.py(145):         _rcc_write_number(out, ord(d), 1)
 --- modulename: _utils, funcname: _rcc_write_number
_utils.py(128):     dividend = 1
_utils.py(129):     if width == 2:
_utils.py(131):     elif width == 3:
_utils.py(133):     elif width == 4:
_utils.py(135):     while dividend >= 1:
_utils.py(136):         tmp = int(number / dividend)
_utils.py(137):         out.append("%02x" % tmp)
_utils.py(138):         number -= tmp * dividend
_utils.py(139):         dividend = int(dividend / 256)
_utils.py(135):     while dividend >= 1:
_utils.py(144):     for d in data:
_utils.py(145):         _rcc_write_number(out, ord(d), 1)
 --- modulename: _utils, funcname: _rcc_write_number
_utils.py(128):     dividend = 1
_utils.py(129):     if width == 2:
_utils.py(131):     elif width == 3:
_utils.py(133):     elif width == 4:
_utils.py(135):     while dividend >= 1:
_utils.py(136):         tmp = int(number / dividend)
_utils.py(137):         out.append("%02x" % tmp)
_utils.py(138):         number -= tmp * dividend
_utils.py(139):         dividend = int(dividend / 256)
_utils.py(135):     while dividend >= 1:
_utils.py(144):     for d in data:
_utils.py(145):         _rcc_write_number(out, ord(d), 1)
 --- modulename: _utils, funcname: _rcc_write_number
_utils.py(128):     dividend = 1
_utils.py(129):     if width == 2:
_utils.py(131):     elif width == 3:
_utils.py(133):     elif width == 4:
_utils.py(135):     while dividend >= 1:
_utils.py(136):         tmp = int(number / dividend)
_utils.py(137):         out.append("%02x" % tmp)
_utils.py(138):         number -= tmp * dividend
_utils.py(139):         dividend = int(dividend / 256)
_utils.py(135):     while dividend >= 1:
_utils.py(144):     for d in data:
_utils.py(145):         _rcc_write_number(out, ord(d), 1)
 --- modulename: _utils, funcname: _rcc_write_number
_utils.py(128):     dividend = 1
_utils.py(129):     if width == 2:
_utils.py(131):     elif width == 3:
_utils.py(133):     elif width == 4:
_utils.py(135):     while dividend >= 1:
_utils.py(136):         tmp = int(number / dividend)
_utils.py(137):         out.append("%02x" % tmp)
_utils.py(138):         number -= tmp * dividend
_utils.py(139):         dividend = int(dividend / 256)
_utils.py(135):     while dividend >= 1:
_utils.py(144):     for d in data:
_utils.py(145):         _rcc_write_number(out, ord(d), 1)
 --- modulename: _utils, funcname: _rcc_write_number
_utils.py(128):     dividend = 1
_utils.py(129):     if width == 2:
_utils.py(131):     elif width == 3:
_utils.py(133):     elif width == 4:
_utils.py(135):     while dividend >= 1:
_utils.py(136):         tmp = int(number / dividend)
_utils.py(137):         out.append("%02x" % tmp)
_utils.py(138):         number -= tmp * dividend
_utils.py(139):         dividend = int(dividend / 256)
_utils.py(135):     while dividend >= 1:
_utils.py(144):     for d in data:
_utils.py(145):         _rcc_write_number(out, ord(d), 1)
 --- modulename: _utils, funcname: _rcc_write_number
_utils.py(128):     dividend = 1
_utils.py(129):     if width == 2:
_utils.py(131):     elif width == 3:
_utils.py(133):     elif width == 4:
_utils.py(135):     while dividend >= 1:
_utils.py(136):         tmp = int(number / dividend)
_utils.py(137):         out.append("%02x" % tmp)
_utils.py(138):         number -= tmp * dividend
_utils.py(139):         dividend = int(dividend / 256)
_utils.py(135):     while dividend >= 1:
_utils.py(144):     for d in data:
_utils.py(145):         _rcc_write_number(out, ord(d), 1)
 --- modulename: _utils, funcname: _rcc_write_number
_utils.py(128):     dividend = 1
_utils.py(129):     if width == 2:
_utils.py(131):     elif width == 3:
_utils.py(133):     elif width == 4:
_utils.py(135):     while dividend >= 1:
_utils.py(136):         tmp = int(number / dividend)
_utils.py(137):         out.append("%02x" % tmp)
_utils.py(138):         number -= tmp * dividend
_utils.py(139):         dividend = int(dividend / 256)
_utils.py(135):     while dividend >= 1:
_utils.py(144):     for d in data:
_utils.py(145):         _rcc_write_number(out, ord(d), 1)
 --- modulename: _utils, funcname: _rcc_write_number
_utils.py(128):     dividend = 1
_utils.py(129):     if width == 2:
_utils.py(131):     elif width == 3:
_utils.py(133):     elif width == 4:
_utils.py(135):     while dividend >= 1:
_utils.py(136):         tmp = int(number / dividend)
_utils.py(137):         out.append("%02x" % tmp)
_utils.py(138):         number -= tmp * dividend
_utils.py(139):         dividend = int(dividend / 256)
_utils.py(135):     while dividend >= 1:
_utils.py(144):     for d in data:
_utils.py(145):         _rcc_write_number(out, ord(d), 1)
 --- modulename: _utils, funcname: _rcc_write_number
_utils.py(128):     dividend = 1
_utils.py(129):     if width == 2:
_utils.py(131):     elif width == 3:
_utils.py(133):     elif width == 4:
_utils.py(135):     while dividend >= 1:
_utils.py(136):         tmp = int(number / dividend)
_utils.py(137):         out.append("%02x" % tmp)
_utils.py(138):         number -= tmp * dividend
_utils.py(139):         dividend = int(dividend / 256)
_utils.py(135):     while dividend >= 1:
_utils.py(144):     for d in data:
_utils.py(145):         _rcc_write_number(out, ord(d), 1)
 --- modulename: _utils, funcname: _rcc_write_number
_utils.py(128):     dividend = 1
_utils.py(129):     if width == 2:
_utils.py(131):     elif width == 3:
_utils.py(133):     elif width == 4:
_utils.py(135):     while dividend >= 1:
_utils.py(136):         tmp = int(number / dividend)
_utils.py(137):         out.append("%02x" % tmp)
_utils.py(138):         number -= tmp * dividend
_utils.py(139):         dividend = int(dividend / 256)
_utils.py(135):     while dividend >= 1:
_utils.py(144):     for d in data:
_utils.py(145):         _rcc_write_number(out, ord(d), 1)
 --- modulename: _utils, funcname: _rcc_write_number
_utils.py(128):     dividend = 1
_utils.py(129):     if width == 2:
_utils.py(131):     elif width == 3:
_utils.py(133):     elif width == 4:
_utils.py(135):     while dividend >= 1:
_utils.py(136):         tmp = int(number / dividend)
_utils.py(137):         out.append("%02x" % tmp)
_utils.py(138):         number -= tmp * dividend
_utils.py(139):         dividend = int(dividend / 256)
_utils.py(135):     while dividend >= 1:
_utils.py(144):     for d in data:
_utils.py(145):         _rcc_write_number(out, ord(d), 1)
 --- modulename: _utils, funcname: _rcc_write_number
_utils.py(128):     dividend = 1
_utils.py(129):     if width == 2:
_utils.py(131):     elif width == 3:
_utils.py(133):     elif width == 4:
_utils.py(135):     while dividend >= 1:
_utils.py(136):         tmp = int(number / dividend)
_utils.py(137):         out.append("%02x" % tmp)
_utils.py(138):         number -= tmp * dividend
_utils.py(139):         dividend = int(dividend / 256)
_utils.py(135):     while dividend >= 1:
_utils.py(144):     for d in data:
_utils.py(145):         _rcc_write_number(out, ord(d), 1)
 --- modulename: _utils, funcname: _rcc_write_number
_utils.py(128):     dividend = 1
_utils.py(129):     if width == 2:
_utils.py(131):     elif width == 3:
_utils.py(133):     elif width == 4:
_utils.py(135):     while dividend >= 1:
_utils.py(136):         tmp = int(number / dividend)
_utils.py(137):         out.append("%02x" % tmp)
_utils.py(138):         number -= tmp * dividend
_utils.py(139):         dividend = int(dividend / 256)
_utils.py(135):     while dividend >= 1:
_utils.py(144):     for d in data:
_utils.py(145):         _rcc_write_number(out, ord(d), 1)
 --- modulename: _utils, funcname: _rcc_write_number
_utils.py(128):     dividend = 1
_utils.py(129):     if width == 2:
_utils.py(131):     elif width == 3:
_utils.py(133):     elif width == 4:
_utils.py(135):     while dividend >= 1:
_utils.py(136):         tmp = int(number / dividend)
_utils.py(137):         out.append("%02x" % tmp)
_utils.py(138):         number -= tmp * dividend
_utils.py(139):         dividend = int(dividend / 256)
_utils.py(135):     while dividend >= 1:
_utils.py(144):     for d in data:
_utils.py(145):         _rcc_write_number(out, ord(d), 1)
 --- modulename: _utils, funcname: _rcc_write_number
_utils.py(128):     dividend = 1
_utils.py(129):     if width == 2:
_utils.py(131):     elif width == 3:
_utils.py(133):     elif width == 4:
_utils.py(135):     while dividend >= 1:
_utils.py(136):         tmp = int(number / dividend)
_utils.py(137):         out.append("%02x" % tmp)
_utils.py(138):         number -= tmp * dividend
_utils.py(139):         dividend = int(dividend / 256)
_utils.py(135):     while dividend >= 1:
_utils.py(144):     for d in data:
_utils.py(145):         _rcc_write_number(out, ord(d), 1)
 --- modulename: _utils, funcname: _rcc_write_number
_utils.py(128):     dividend = 1
_utils.py(129):     if width == 2:
_utils.py(131):     elif width == 3:
_utils.py(133):     elif width == 4:
_utils.py(135):     while dividend >= 1:
_utils.py(136):         tmp = int(number / dividend)
_utils.py(137):         out.append("%02x" % tmp)
_utils.py(138):         number -= tmp * dividend
_utils.py(139):         dividend = int(dividend / 256)
_utils.py(135):     while dividend >= 1:
_utils.py(144):     for d in data:
_utils.py(145):         _rcc_write_number(out, ord(d), 1)
 --- modulename: _utils, funcname: _rcc_write_number
_utils.py(128):     dividend = 1
_utils.py(129):     if width == 2:
_utils.py(131):     elif width == 3:
_utils.py(133):     elif width == 4:
_utils.py(135):     while dividend >= 1:
_utils.py(136):         tmp = int(number / dividend)
_utils.py(137):         out.append("%02x" % tmp)
_utils.py(138):         number -= tmp * dividend
_utils.py(139):         dividend = int(dividend / 256)
_utils.py(135):     while dividend >= 1:
_utils.py(144):     for d in data:
_utils.py(145):         _rcc_write_number(out, ord(d), 1)
 --- modulename: _utils, funcname: _rcc_write_number
_utils.py(128):     dividend = 1
_utils.py(129):     if width == 2:
_utils.py(131):     elif width == 3:
_utils.py(133):     elif width == 4:
_utils.py(135):     while dividend >= 1:
_utils.py(136):         tmp = int(number / dividend)
_utils.py(137):         out.append("%02x" % tmp)
_utils.py(138):         number -= tmp * dividend
_utils.py(139):         dividend = int(dividend / 256)
_utils.py(135):     while dividend >= 1:
_utils.py(144):     for d in data:
_utils.py(145):         _rcc_write_number(out, ord(d), 1)
 --- modulename: _utils, funcname: _rcc_write_number
_utils.py(128):     dividend = 1
_utils.py(129):     if width == 2:
_utils.py(131):     elif width == 3:
_utils.py(133):     elif width == 4:
_utils.py(135):     while dividend >= 1:
_utils.py(136):         tmp = int(number / dividend)
_utils.py(137):         out.append("%02x" % tmp)
_utils.py(138):         number -= tmp * dividend
_utils.py(139):         dividend = int(dividend / 256)
_utils.py(135):     while dividend >= 1:
_utils.py(144):     for d in data:
_utils.py(145):         _rcc_write_number(out, ord(d), 1)
 --- modulename: _utils, funcname: _rcc_write_number
_utils.py(128):     dividend = 1
_utils.py(129):     if width == 2:
_utils.py(131):     elif width == 3:
_utils.py(133):     elif width == 4:
_utils.py(135):     while dividend >= 1:
_utils.py(136):         tmp = int(number / dividend)
_utils.py(137):         out.append("%02x" % tmp)
_utils.py(138):         number -= tmp * dividend
_utils.py(139):         dividend = int(dividend / 256)
_utils.py(135):     while dividend >= 1:
_utils.py(144):     for d in data:
_utils.py(145):         _rcc_write_number(out, ord(d), 1)
 --- modulename: _utils, funcname: _rcc_write_number
_utils.py(128):     dividend = 1
_utils.py(129):     if width == 2:
_utils.py(131):     elif width == 3:
_utils.py(133):     elif width == 4:
_utils.py(135):     while dividend >= 1:
_utils.py(136):         tmp = int(number / dividend)
_utils.py(137):         out.append("%02x" % tmp)
_utils.py(138):         number -= tmp * dividend
_utils.py(139):         dividend = int(dividend / 256)
_utils.py(135):     while dividend >= 1:
_utils.py(144):     for d in data:
_utils.py(145):         _rcc_write_number(out, ord(d), 1)
 --- modulename: _utils, funcname: _rcc_write_number
_utils.py(128):     dividend = 1
_utils.py(129):     if width == 2:
_utils.py(131):     elif width == 3:
_utils.py(133):     elif width == 4:
_utils.py(135):     while dividend >= 1:
_utils.py(136):         tmp = int(number / dividend)
_utils.py(137):         out.append("%02x" % tmp)
_utils.py(138):         number -= tmp * dividend
_utils.py(139):         dividend = int(dividend / 256)
_utils.py(135):     while dividend >= 1:
_utils.py(144):     for d in data:
_utils.py(145):         _rcc_write_number(out, ord(d), 1)
 --- modulename: _utils, funcname: _rcc_write_number
_utils.py(128):     dividend = 1
_utils.py(129):     if width == 2:
_utils.py(131):     elif width == 3:
_utils.py(133):     elif width == 4:
_utils.py(135):     while dividend >= 1:
_utils.py(136):         tmp = int(number / dividend)
_utils.py(137):         out.append("%02x" % tmp)
_utils.py(138):         number -= tmp * dividend
_utils.py(139):         dividend = int(dividend / 256)
_utils.py(135):     while dividend >= 1:
_utils.py(144):     for d in data:
_utils.py(145):         _rcc_write_number(out, ord(d), 1)
 --- modulename: _utils, funcname: _rcc_write_number
_utils.py(128):     dividend = 1
_utils.py(129):     if width == 2:
_utils.py(131):     elif width == 3:
_utils.py(133):     elif width == 4:
_utils.py(135):     while dividend >= 1:
_utils.py(136):         tmp = int(number / dividend)
_utils.py(137):         out.append("%02x" % tmp)
_utils.py(138):         number -= tmp * dividend
_utils.py(139):         dividend = int(dividend / 256)
_utils.py(135):     while dividend >= 1:
_utils.py(144):     for d in data:
_utils.py(145):         _rcc_write_number(out, ord(d), 1)
 --- modulename: _utils, funcname: _rcc_write_number
_utils.py(128):     dividend = 1
_utils.py(129):     if width == 2:
_utils.py(131):     elif width == 3:
_utils.py(133):     elif width == 4:
_utils.py(135):     while dividend >= 1:
_utils.py(136):         tmp = int(number / dividend)
_utils.py(137):         out.append("%02x" % tmp)
_utils.py(138):         number -= tmp * dividend
_utils.py(139):         dividend = int(dividend / 256)
_utils.py(135):     while dividend >= 1:
_utils.py(144):     for d in data:
_utils.py(145):         _rcc_write_number(out, ord(d), 1)
 --- modulename: _utils, funcname: _rcc_write_number
_utils.py(128):     dividend = 1
_utils.py(129):     if width == 2:
_utils.py(131):     elif width == 3:
_utils.py(133):     elif width == 4:
_utils.py(135):     while dividend >= 1:
_utils.py(136):         tmp = int(number / dividend)
_utils.py(137):         out.append("%02x" % tmp)
_utils.py(138):         number -= tmp * dividend
_utils.py(139):         dividend = int(dividend / 256)
_utils.py(135):     while dividend >= 1:
_utils.py(144):     for d in data:
_utils.py(145):         _rcc_write_number(out, ord(d), 1)
 --- modulename: _utils, funcname: _rcc_write_number
_utils.py(128):     dividend = 1
_utils.py(129):     if width == 2:
_utils.py(131):     elif width == 3:
_utils.py(133):     elif width == 4:
_utils.py(135):     while dividend >= 1:
_utils.py(136):         tmp = int(number / dividend)
_utils.py(137):         out.append("%02x" % tmp)
_utils.py(138):         number -= tmp * dividend
_utils.py(139):         dividend = int(dividend / 256)
_utils.py(135):     while dividend >= 1:
_utils.py(144):     for d in data:
_utils.py(145):         _rcc_write_number(out, ord(d), 1)
 --- modulename: _utils, funcname: _rcc_write_number
_utils.py(128):     dividend = 1
_utils.py(129):     if width == 2:
_utils.py(131):     elif width == 3:
_utils.py(133):     elif width == 4:
_utils.py(135):     while dividend >= 1:
_utils.py(136):         tmp = int(number / dividend)
_utils.py(137):         out.append("%02x" % tmp)
_utils.py(138):         number -= tmp * dividend
_utils.py(139):         dividend = int(dividend / 256)
_utils.py(135):     while dividend >= 1:
_utils.py(144):     for d in data:
_utils.py(145):         _rcc_write_number(out, ord(d), 1)
 --- modulename: _utils, funcname: _rcc_write_number
_utils.py(128):     dividend = 1
_utils.py(129):     if width == 2:
_utils.py(131):     elif width == 3:
_utils.py(133):     elif width == 4:
_utils.py(135):     while dividend >= 1:
_utils.py(136):         tmp = int(number / dividend)
_utils.py(137):         out.append("%02x" % tmp)
_utils.py(138):         number -= tmp * dividend
_utils.py(139):         dividend = int(dividend / 256)
_utils.py(135):     while dividend >= 1:
_utils.py(144):     for d in data:
_utils.py(145):         _rcc_write_number(out, ord(d), 1)
 --- modulename: _utils, funcname: _rcc_write_number
_utils.py(128):     dividend = 1
_utils.py(129):     if width == 2:
_utils.py(131):     elif width == 3:
_utils.py(133):     elif width == 4:
_utils.py(135):     while dividend >= 1:
_utils.py(136):         tmp = int(number / dividend)
_utils.py(137):         out.append("%02x" % tmp)
_utils.py(138):         number -= tmp * dividend
_utils.py(139):         dividend = int(dividend / 256)
_utils.py(135):     while dividend >= 1:
_utils.py(144):     for d in data:
_utils.py(145):         _rcc_write_number(out, ord(d), 1)
 --- modulename: _utils, funcname: _rcc_write_number
_utils.py(128):     dividend = 1
_utils.py(129):     if width == 2:
_utils.py(131):     elif width == 3:
_utils.py(133):     elif width == 4:
_utils.py(135):     while dividend >= 1:
_utils.py(136):         tmp = int(number / dividend)
_utils.py(137):         out.append("%02x" % tmp)
_utils.py(138):         number -= tmp * dividend
_utils.py(139):         dividend = int(dividend / 256)
_utils.py(135):     while dividend >= 1:
_utils.py(144):     for d in data:
_utils.py(145):         _rcc_write_number(out, ord(d), 1)
 --- modulename: _utils, funcname: _rcc_write_number
_utils.py(128):     dividend = 1
_utils.py(129):     if width == 2:
_utils.py(131):     elif width == 3:
_utils.py(133):     elif width == 4:
_utils.py(135):     while dividend >= 1:
_utils.py(136):         tmp = int(number / dividend)
_utils.py(137):         out.append("%02x" % tmp)
_utils.py(138):         number -= tmp * dividend
_utils.py(139):         dividend = int(dividend / 256)
_utils.py(135):     while dividend >= 1:
_utils.py(144):     for d in data:
_utils.py(145):         _rcc_write_number(out, ord(d), 1)
 --- modulename: _utils, funcname: _rcc_write_number
_utils.py(128):     dividend = 1
_utils.py(129):     if width == 2:
_utils.py(131):     elif width == 3:
_utils.py(133):     elif width == 4:
_utils.py(135):     while dividend >= 1:
_utils.py(136):         tmp = int(number / dividend)
_utils.py(137):         out.append("%02x" % tmp)
_utils.py(138):         number -= tmp * dividend
_utils.py(139):         dividend = int(dividend / 256)
_utils.py(135):     while dividend >= 1:
_utils.py(144):     for d in data:
_utils.py(145):         _rcc_write_number(out, ord(d), 1)
 --- modulename: _utils, funcname: _rcc_write_number
_utils.py(128):     dividend = 1
_utils.py(129):     if width == 2:
_utils.py(131):     elif width == 3:
_utils.py(133):     elif width == 4:
_utils.py(135):     while dividend >= 1:
_utils.py(136):         tmp = int(number / dividend)
_utils.py(137):         out.append("%02x" % tmp)
_utils.py(138):         number -= tmp * dividend
_utils.py(139):         dividend = int(dividend / 256)
_utils.py(135):     while dividend >= 1:
_utils.py(144):     for d in data:
_utils.py(145):         _rcc_write_number(out, ord(d), 1)
 --- modulename: _utils, funcname: _rcc_write_number
_utils.py(128):     dividend = 1
_utils.py(129):     if width == 2:
_utils.py(131):     elif width == 3:
_utils.py(133):     elif width == 4:
_utils.py(135):     while dividend >= 1:
_utils.py(136):         tmp = int(number / dividend)
_utils.py(137):         out.append("%02x" % tmp)
_utils.py(138):         number -= tmp * dividend
_utils.py(139):         dividend = int(dividend / 256)
_utils.py(135):     while dividend >= 1:
_utils.py(144):     for d in data:
_utils.py(145):         _rcc_write_number(out, ord(d), 1)
 --- modulename: _utils, funcname: _rcc_write_number
_utils.py(128):     dividend = 1
_utils.py(129):     if width == 2:
_utils.py(131):     elif width == 3:
_utils.py(133):     elif width == 4:
_utils.py(135):     while dividend >= 1:
_utils.py(136):         tmp = int(number / dividend)
_utils.py(137):         out.append("%02x" % tmp)
_utils.py(138):         number -= tmp * dividend
_utils.py(139):         dividend = int(dividend / 256)
_utils.py(135):     while dividend >= 1:
_utils.py(144):     for d in data:
_utils.py(145):         _rcc_write_number(out, ord(d), 1)
 --- modulename: _utils, funcname: _rcc_write_number
_utils.py(128):     dividend = 1
_utils.py(129):     if width == 2:
_utils.py(131):     elif width == 3:
_utils.py(133):     elif width == 4:
_utils.py(135):     while dividend >= 1:
_utils.py(136):         tmp = int(number / dividend)
_utils.py(137):         out.append("%02x" % tmp)
_utils.py(138):         number -= tmp * dividend
_utils.py(139):         dividend = int(dividend / 256)
_utils.py(135):     while dividend >= 1:
_utils.py(144):     for d in data:
_utils.py(145):         _rcc_write_number(out, ord(d), 1)
 --- modulename: _utils, funcname: _rcc_write_number
_utils.py(128):     dividend = 1
_utils.py(129):     if width == 2:
_utils.py(131):     elif width == 3:
_utils.py(133):     elif width == 4:
_utils.py(135):     while dividend >= 1:
_utils.py(136):         tmp = int(number / dividend)
_utils.py(137):         out.append("%02x" % tmp)
_utils.py(138):         number -= tmp * dividend
_utils.py(139):         dividend = int(dividend / 256)
_utils.py(135):     while dividend >= 1:
_utils.py(144):     for d in data:
_utils.py(145):         _rcc_write_number(out, ord(d), 1)
 --- modulename: _utils, funcname: _rcc_write_number
_utils.py(128):     dividend = 1
_utils.py(129):     if width == 2:
_utils.py(131):     elif width == 3:
_utils.py(133):     elif width == 4:
_utils.py(135):     while dividend >= 1:
_utils.py(136):         tmp = int(number / dividend)
_utils.py(137):         out.append("%02x" % tmp)
_utils.py(138):         number -= tmp * dividend
_utils.py(139):         dividend = int(dividend / 256)
_utils.py(135):     while dividend >= 1:
_utils.py(144):     for d in data:
_utils.py(145):         _rcc_write_number(out, ord(d), 1)
 --- modulename: _utils, funcname: _rcc_write_number
_utils.py(128):     dividend = 1
_utils.py(129):     if width == 2:
_utils.py(131):     elif width == 3:
_utils.py(133):     elif width == 4:
_utils.py(135):     while dividend >= 1:
_utils.py(136):         tmp = int(number / dividend)
_utils.py(137):         out.append("%02x" % tmp)
_utils.py(138):         number -= tmp * dividend
_utils.py(139):         dividend = int(dividend / 256)
_utils.py(135):     while dividend >= 1:
_utils.py(144):     for d in data:
_utils.py(145):         _rcc_write_number(out, ord(d), 1)
 --- modulename: _utils, funcname: _rcc_write_number
_utils.py(128):     dividend = 1
_utils.py(129):     if width == 2:
_utils.py(131):     elif width == 3:
_utils.py(133):     elif width == 4:
_utils.py(135):     while dividend >= 1:
_utils.py(136):         tmp = int(number / dividend)
_utils.py(137):         out.append("%02x" % tmp)
_utils.py(138):         number -= tmp * dividend
_utils.py(139):         dividend = int(dividend / 256)
_utils.py(135):     while dividend >= 1:
_utils.py(144):     for d in data:
_utils.py(145):         _rcc_write_number(out, ord(d), 1)
 --- modulename: _utils, funcname: _rcc_write_number
_utils.py(128):     dividend = 1
_utils.py(129):     if width == 2:
_utils.py(131):     elif width == 3:
_utils.py(133):     elif width == 4:
_utils.py(135):     while dividend >= 1:
_utils.py(136):         tmp = int(number / dividend)
_utils.py(137):         out.append("%02x" % tmp)
_utils.py(138):         number -= tmp * dividend
_utils.py(139):         dividend = int(dividend / 256)
_utils.py(135):     while dividend >= 1:
_utils.py(144):     for d in data:
_utils.py(145):         _rcc_write_number(out, ord(d), 1)
 --- modulename: _utils, funcname: _rcc_write_number
_utils.py(128):     dividend = 1
_utils.py(129):     if width == 2:
_utils.py(131):     elif width == 3:
_utils.py(133):     elif width == 4:
_utils.py(135):     while dividend >= 1:
_utils.py(136):         tmp = int(number / dividend)
_utils.py(137):         out.append("%02x" % tmp)
_utils.py(138):         number -= tmp * dividend
_utils.py(139):         dividend = int(dividend / 256)
_utils.py(135):     while dividend >= 1:
_utils.py(144):     for d in data:
_utils.py(145):         _rcc_write_number(out, ord(d), 1)
 --- modulename: _utils, funcname: _rcc_write_number
_utils.py(128):     dividend = 1
_utils.py(129):     if width == 2:
_utils.py(131):     elif width == 3:
_utils.py(133):     elif width == 4:
_utils.py(135):     while dividend >= 1:
_utils.py(136):         tmp = int(number / dividend)
_utils.py(137):         out.append("%02x" % tmp)
_utils.py(138):         number -= tmp * dividend
_utils.py(139):         dividend = int(dividend / 256)
_utils.py(135):     while dividend >= 1:
_utils.py(144):     for d in data:
_utils.py(145):         _rcc_write_number(out, ord(d), 1)
 --- modulename: _utils, funcname: _rcc_write_number
_utils.py(128):     dividend = 1
_utils.py(129):     if width == 2:
_utils.py(131):     elif width == 3:
_utils.py(133):     elif width == 4:
_utils.py(135):     while dividend >= 1:
_utils.py(136):         tmp = int(number / dividend)
_utils.py(137):         out.append("%02x" % tmp)
_utils.py(138):         number -= tmp * dividend
_utils.py(139):         dividend = int(dividend / 256)
_utils.py(135):     while dividend >= 1:
_utils.py(144):     for d in data:
_utils.py(145):         _rcc_write_number(out, ord(d), 1)
 --- modulename: _utils, funcname: _rcc_write_number
_utils.py(128):     dividend = 1
_utils.py(129):     if width == 2:
_utils.py(131):     elif width == 3:
_utils.py(133):     elif width == 4:
_utils.py(135):     while dividend >= 1:
_utils.py(136):         tmp = int(number / dividend)
_utils.py(137):         out.append("%02x" % tmp)
_utils.py(138):         number -= tmp * dividend
_utils.py(139):         dividend = int(dividend / 256)
_utils.py(135):     while dividend >= 1:
_utils.py(144):     for d in data:
_utils.py(145):         _rcc_write_number(out, ord(d), 1)
 --- modulename: _utils, funcname: _rcc_write_number
_utils.py(128):     dividend = 1
_utils.py(129):     if width == 2:
_utils.py(131):     elif width == 3:
_utils.py(133):     elif width == 4:
_utils.py(135):     while dividend >= 1:
_utils.py(136):         tmp = int(number / dividend)
_utils.py(137):         out.append("%02x" % tmp)
_utils.py(138):         number -= tmp * dividend
_utils.py(139):         dividend = int(dividend / 256)
_utils.py(135):     while dividend >= 1:
_utils.py(144):     for d in data:
_utils.py(145):         _rcc_write_number(out, ord(d), 1)
 --- modulename: _utils, funcname: _rcc_write_number
_utils.py(128):     dividend = 1
_utils.py(129):     if width == 2:
_utils.py(131):     elif width == 3:
_utils.py(133):     elif width == 4:
_utils.py(135):     while dividend >= 1:
_utils.py(136):         tmp = int(number / dividend)
_utils.py(137):         out.append("%02x" % tmp)
_utils.py(138):         number -= tmp * dividend
_utils.py(139):         dividend = int(dividend / 256)
_utils.py(135):     while dividend >= 1:
_utils.py(144):     for d in data:
_utils.py(145):         _rcc_write_number(out, ord(d), 1)
 --- modulename: _utils, funcname: _rcc_write_number
_utils.py(128):     dividend = 1
_utils.py(129):     if width == 2:
_utils.py(131):     elif width == 3:
_utils.py(133):     elif width == 4:
_utils.py(135):     while dividend >= 1:
_utils.py(136):         tmp = int(number / dividend)
_utils.py(137):         out.append("%02x" % tmp)
_utils.py(138):         number -= tmp * dividend
_utils.py(139):         dividend = int(dividend / 256)
_utils.py(135):     while dividend >= 1:
_utils.py(144):     for d in data:
_utils.py(145):         _rcc_write_number(out, ord(d), 1)
 --- modulename: _utils, funcname: _rcc_write_number
_utils.py(128):     dividend = 1
_utils.py(129):     if width == 2:
_utils.py(131):     elif width == 3:
_utils.py(133):     elif width == 4:
_utils.py(135):     while dividend >= 1:
_utils.py(136):         tmp = int(number / dividend)
_utils.py(137):         out.append("%02x" % tmp)
_utils.py(138):         number -= tmp * dividend
_utils.py(139):         dividend = int(dividend / 256)
_utils.py(135):     while dividend >= 1:
_utils.py(144):     for d in data:
_utils.py(145):         _rcc_write_number(out, ord(d), 1)
 --- modulename: _utils, funcname: _rcc_write_number
_utils.py(128):     dividend = 1
_utils.py(129):     if width == 2:
_utils.py(131):     elif width == 3:
_utils.py(133):     elif width == 4:
_utils.py(135):     while dividend >= 1:
_utils.py(136):         tmp = int(number / dividend)
_utils.py(137):         out.append("%02x" % tmp)
_utils.py(138):         number -= tmp * dividend
_utils.py(139):         dividend = int(dividend / 256)
_utils.py(135):     while dividend >= 1:
_utils.py(144):     for d in data:
_utils.py(145):         _rcc_write_number(out, ord(d), 1)
 --- modulename: _utils, funcname: _rcc_write_number
_utils.py(128):     dividend = 1
_utils.py(129):     if width == 2:
_utils.py(131):     elif width == 3:
_utils.py(133):     elif width == 4:
_utils.py(135):     while dividend >= 1:
_utils.py(136):         tmp = int(number / dividend)
_utils.py(137):         out.append("%02x" % tmp)
_utils.py(138):         number -= tmp * dividend
_utils.py(139):         dividend = int(dividend / 256)
_utils.py(135):     while dividend >= 1:
_utils.py(144):     for d in data:
_utils.py(145):         _rcc_write_number(out, ord(d), 1)
 --- modulename: _utils, funcname: _rcc_write_number
_utils.py(128):     dividend = 1
_utils.py(129):     if width == 2:
_utils.py(131):     elif width == 3:
_utils.py(133):     elif width == 4:
_utils.py(135):     while dividend >= 1:
_utils.py(136):         tmp = int(number / dividend)
_utils.py(137):         out.append("%02x" % tmp)
_utils.py(138):         number -= tmp * dividend
_utils.py(139):         dividend = int(dividend / 256)
_utils.py(135):     while dividend >= 1:
_utils.py(144):     for d in data:
_utils.py(145):         _rcc_write_number(out, ord(d), 1)
 --- modulename: _utils, funcname: _rcc_write_number
_utils.py(128):     dividend = 1
_utils.py(129):     if width == 2:
_utils.py(131):     elif width == 3:
_utils.py(133):     elif width == 4:
_utils.py(135):     while dividend >= 1:
_utils.py(136):         tmp = int(number / dividend)
_utils.py(137):         out.append("%02x" % tmp)
_utils.py(138):         number -= tmp * dividend
_utils.py(139):         dividend = int(dividend / 256)
_utils.py(135):     while dividend >= 1:
_utils.py(144):     for d in data:
_utils.py(145):         _rcc_write_number(out, ord(d), 1)
 --- modulename: _utils, funcname: _rcc_write_number
_utils.py(128):     dividend = 1
_utils.py(129):     if width == 2:
_utils.py(131):     elif width == 3:
_utils.py(133):     elif width == 4:
_utils.py(135):     while dividend >= 1:
_utils.py(136):         tmp = int(number / dividend)
_utils.py(137):         out.append("%02x" % tmp)
_utils.py(138):         number -= tmp * dividend
_utils.py(139):         dividend = int(dividend / 256)
_utils.py(135):     while dividend >= 1:
_utils.py(144):     for d in data:
_utils.py(145):         _rcc_write_number(out, ord(d), 1)
 --- modulename: _utils, funcname: _rcc_write_number
_utils.py(128):     dividend = 1
_utils.py(129):     if width == 2:
_utils.py(131):     elif width == 3:
_utils.py(133):     elif width == 4:
_utils.py(135):     while dividend >= 1:
_utils.py(136):         tmp = int(number / dividend)
_utils.py(137):         out.append("%02x" % tmp)
_utils.py(138):         number -= tmp * dividend
_utils.py(139):         dividend = int(dividend / 256)
_utils.py(135):     while dividend >= 1:
_utils.py(144):     for d in data:
_utils.py(145):         _rcc_write_number(out, ord(d), 1)
 --- modulename: _utils, funcname: _rcc_write_number
_utils.py(128):     dividend = 1
_utils.py(129):     if width == 2:
_utils.py(131):     elif width == 3:
_utils.py(133):     elif width == 4:
_utils.py(135):     while dividend >= 1:
_utils.py(136):         tmp = int(number / dividend)
_utils.py(137):         out.append("%02x" % tmp)
_utils.py(138):         number -= tmp * dividend
_utils.py(139):         dividend = int(dividend / 256)
_utils.py(135):     while dividend >= 1:
_utils.py(144):     for d in data:
_utils.py(145):         _rcc_write_number(out, ord(d), 1)
 --- modulename: _utils, funcname: _rcc_write_number
_utils.py(128):     dividend = 1
_utils.py(129):     if width == 2:
_utils.py(131):     elif width == 3:
_utils.py(133):     elif width == 4:
_utils.py(135):     while dividend >= 1:
_utils.py(136):         tmp = int(number / dividend)
_utils.py(137):         out.append("%02x" % tmp)
_utils.py(138):         number -= tmp * dividend
_utils.py(139):         dividend = int(dividend / 256)
_utils.py(135):     while dividend >= 1:
_utils.py(144):     for d in data:
_utils.py(145):         _rcc_write_number(out, ord(d), 1)
 --- modulename: _utils, funcname: _rcc_write_number
_utils.py(128):     dividend = 1
_utils.py(129):     if width == 2:
_utils.py(131):     elif width == 3:
_utils.py(133):     elif width == 4:
_utils.py(135):     while dividend >= 1:
_utils.py(136):         tmp = int(number / dividend)
_utils.py(137):         out.append("%02x" % tmp)
_utils.py(138):         number -= tmp * dividend
_utils.py(139):         dividend = int(dividend / 256)
_utils.py(135):     while dividend >= 1:
_utils.py(144):     for d in data:
_utils.py(145):         _rcc_write_number(out, ord(d), 1)
 --- modulename: _utils, funcname: _rcc_write_number
_utils.py(128):     dividend = 1
_utils.py(129):     if width == 2:
_utils.py(131):     elif width == 3:
_utils.py(133):     elif width == 4:
_utils.py(135):     while dividend >= 1:
_utils.py(136):         tmp = int(number / dividend)
_utils.py(137):         out.append("%02x" % tmp)
_utils.py(138):         number -= tmp * dividend
_utils.py(139):         dividend = int(dividend / 256)
_utils.py(135):     while dividend >= 1:
_utils.py(144):     for d in data:
_utils.py(145):         _rcc_write_number(out, ord(d), 1)
 --- modulename: _utils, funcname: _rcc_write_number
_utils.py(128):     dividend = 1
_utils.py(129):     if width == 2:
_utils.py(131):     elif width == 3:
_utils.py(133):     elif width == 4:
_utils.py(135):     while dividend >= 1:
_utils.py(136):         tmp = int(number / dividend)
_utils.py(137):         out.append("%02x" % tmp)
_utils.py(138):         number -= tmp * dividend
_utils.py(139):         dividend = int(dividend / 256)
_utils.py(135):     while dividend >= 1:
_utils.py(144):     for d in data:
_utils.py(145):         _rcc_write_number(out, ord(d), 1)
 --- modulename: _utils, funcname: _rcc_write_number
_utils.py(128):     dividend = 1
_utils.py(129):     if width == 2:
_utils.py(131):     elif width == 3:
_utils.py(133):     elif width == 4:
_utils.py(135):     while dividend >= 1:
_utils.py(136):         tmp = int(number / dividend)
_utils.py(137):         out.append("%02x" % tmp)
_utils.py(138):         number -= tmp * dividend
_utils.py(139):         dividend = int(dividend / 256)
_utils.py(135):     while dividend >= 1:
_utils.py(144):     for d in data:
_utils.py(145):         _rcc_write_number(out, ord(d), 1)
 --- modulename: _utils, funcname: _rcc_write_number
_utils.py(128):     dividend = 1
_utils.py(129):     if width == 2:
_utils.py(131):     elif width == 3:
_utils.py(133):     elif width == 4:
_utils.py(135):     while dividend >= 1:
_utils.py(136):         tmp = int(number / dividend)
_utils.py(137):         out.append("%02x" % tmp)
_utils.py(138):         number -= tmp * dividend
_utils.py(139):         dividend = int(dividend / 256)
_utils.py(135):     while dividend >= 1:
_utils.py(144):     for d in data:
_utils.py(145):         _rcc_write_number(out, ord(d), 1)
 --- modulename: _utils, funcname: _rcc_write_number
_utils.py(128):     dividend = 1
_utils.py(129):     if width == 2:
_utils.py(131):     elif width == 3:
_utils.py(133):     elif width == 4:
_utils.py(135):     while dividend >= 1:
_utils.py(136):         tmp = int(number / dividend)
_utils.py(137):         out.append("%02x" % tmp)
_utils.py(138):         number -= tmp * dividend
_utils.py(139):         dividend = int(dividend / 256)
_utils.py(135):     while dividend >= 1:
_utils.py(144):     for d in data:
_utils.py(145):         _rcc_write_number(out, ord(d), 1)
 --- modulename: _utils, funcname: _rcc_write_number
_utils.py(128):     dividend = 1
_utils.py(129):     if width == 2:
_utils.py(131):     elif width == 3:
_utils.py(133):     elif width == 4:
_utils.py(135):     while dividend >= 1:
_utils.py(136):         tmp = int(number / dividend)
_utils.py(137):         out.append("%02x" % tmp)
_utils.py(138):         number -= tmp * dividend
_utils.py(139):         dividend = int(dividend / 256)
_utils.py(135):     while dividend >= 1:
_utils.py(144):     for d in data:
_utils.py(145):         _rcc_write_number(out, ord(d), 1)
 --- modulename: _utils, funcname: _rcc_write_number
_utils.py(128):     dividend = 1
_utils.py(129):     if width == 2:
_utils.py(131):     elif width == 3:
_utils.py(133):     elif width == 4:
_utils.py(135):     while dividend >= 1:
_utils.py(136):         tmp = int(number / dividend)
_utils.py(137):         out.append("%02x" % tmp)
_utils.py(138):         number -= tmp * dividend
_utils.py(139):         dividend = int(dividend / 256)
_utils.py(135):     while dividend >= 1:
_utils.py(144):     for d in data:
_utils.py(145):         _rcc_write_number(out, ord(d), 1)
 --- modulename: _utils, funcname: _rcc_write_number
_utils.py(128):     dividend = 1
_utils.py(129):     if width == 2:
_utils.py(131):     elif width == 3:
_utils.py(133):     elif width == 4:
_utils.py(135):     while dividend >= 1:
_utils.py(136):         tmp = int(number / dividend)
_utils.py(137):         out.append("%02x" % tmp)
_utils.py(138):         number -= tmp * dividend
_utils.py(139):         dividend = int(dividend / 256)
_utils.py(135):     while dividend >= 1:
_utils.py(144):     for d in data:
_utils.py(145):         _rcc_write_number(out, ord(d), 1)
 --- modulename: _utils, funcname: _rcc_write_number
_utils.py(128):     dividend = 1
_utils.py(129):     if width == 2:
_utils.py(131):     elif width == 3:
_utils.py(133):     elif width == 4:
_utils.py(135):     while dividend >= 1:
_utils.py(136):         tmp = int(number / dividend)
_utils.py(137):         out.append("%02x" % tmp)
_utils.py(138):         number -= tmp * dividend
_utils.py(139):         dividend = int(dividend / 256)
_utils.py(135):     while dividend >= 1:
_utils.py(144):     for d in data:
_utils.py(145):         _rcc_write_number(out, ord(d), 1)
 --- modulename: _utils, funcname: _rcc_write_number
_utils.py(128):     dividend = 1
_utils.py(129):     if width == 2:
_utils.py(131):     elif width == 3:
_utils.py(133):     elif width == 4:
_utils.py(135):     while dividend >= 1:
_utils.py(136):         tmp = int(number / dividend)
_utils.py(137):         out.append("%02x" % tmp)
_utils.py(138):         number -= tmp * dividend
_utils.py(139):         dividend = int(dividend / 256)
_utils.py(135):     while dividend >= 1:
_utils.py(144):     for d in data:
_utils.py(145):         _rcc_write_number(out, ord(d), 1)
 --- modulename: _utils, funcname: _rcc_write_number
_utils.py(128):     dividend = 1
_utils.py(129):     if width == 2:
_utils.py(131):     elif width == 3:
_utils.py(133):     elif width == 4:
_utils.py(135):     while dividend >= 1:
_utils.py(136):         tmp = int(number / dividend)
_utils.py(137):         out.append("%02x" % tmp)
_utils.py(138):         number -= tmp * dividend
_utils.py(139):         dividend = int(dividend / 256)
_utils.py(135):     while dividend >= 1:
_utils.py(144):     for d in data:
_utils.py(145):         _rcc_write_number(out, ord(d), 1)
 --- modulename: _utils, funcname: _rcc_write_number
_utils.py(128):     dividend = 1
_utils.py(129):     if width == 2:
_utils.py(131):     elif width == 3:
_utils.py(133):     elif width == 4:
_utils.py(135):     while dividend >= 1:
_utils.py(136):         tmp = int(number / dividend)
_utils.py(137):         out.append("%02x" % tmp)
_utils.py(138):         number -= tmp * dividend
_utils.py(139):         dividend = int(dividend / 256)
_utils.py(135):     while dividend >= 1:
_utils.py(144):     for d in data:
_utils.py(145):         _rcc_write_number(out, ord(d), 1)
 --- modulename: _utils, funcname: _rcc_write_number
_utils.py(128):     dividend = 1
_utils.py(129):     if width == 2:
_utils.py(131):     elif width == 3:
_utils.py(133):     elif width == 4:
_utils.py(135):     while dividend >= 1:
_utils.py(136):         tmp = int(number / dividend)
_utils.py(137):         out.append("%02x" % tmp)
_utils.py(138):         number -= tmp * dividend
_utils.py(139):         dividend = int(dividend / 256)
_utils.py(135):     while dividend >= 1:
_utils.py(144):     for d in data:
_utils.py(145):         _rcc_write_number(out, ord(d), 1)
 --- modulename: _utils, funcname: _rcc_write_number
_utils.py(128):     dividend = 1
_utils.py(129):     if width == 2:
_utils.py(131):     elif width == 3:
_utils.py(133):     elif width == 4:
_utils.py(135):     while dividend >= 1:
_utils.py(136):         tmp = int(number / dividend)
_utils.py(137):         out.append("%02x" % tmp)
_utils.py(138):         number -= tmp * dividend
_utils.py(139):         dividend = int(dividend / 256)
_utils.py(135):     while dividend >= 1:
_utils.py(144):     for d in data:
_utils.py(145):         _rcc_write_number(out, ord(d), 1)
 --- modulename: _utils, funcname: _rcc_write_number
_utils.py(128):     dividend = 1
_utils.py(129):     if width == 2:
_utils.py(131):     elif width == 3:
_utils.py(133):     elif width == 4:
_utils.py(135):     while dividend >= 1:
_utils.py(136):         tmp = int(number / dividend)
_utils.py(137):         out.append("%02x" % tmp)
_utils.py(138):         number -= tmp * dividend
_utils.py(139):         dividend = int(dividend / 256)
_utils.py(135):     while dividend >= 1:
_utils.py(144):     for d in data:
_utils.py(145):         _rcc_write_number(out, ord(d), 1)
 --- modulename: _utils, funcname: _rcc_write_number
_utils.py(128):     dividend = 1
_utils.py(129):     if width == 2:
_utils.py(131):     elif width == 3:
_utils.py(133):     elif width == 4:
_utils.py(135):     while dividend >= 1:
_utils.py(136):         tmp = int(number / dividend)
_utils.py(137):         out.append("%02x" % tmp)
_utils.py(138):         number -= tmp * dividend
_utils.py(139):         dividend = int(dividend / 256)
_utils.py(135):     while dividend >= 1:
_utils.py(144):     for d in data:
_utils.py(145):         _rcc_write_number(out, ord(d), 1)
 --- modulename: _utils, funcname: _rcc_write_number
_utils.py(128):     dividend = 1
_utils.py(129):     if width == 2:
_utils.py(131):     elif width == 3:
_utils.py(133):     elif width == 4:
_utils.py(135):     while dividend >= 1:
_utils.py(136):         tmp = int(number / dividend)
_utils.py(137):         out.append("%02x" % tmp)
_utils.py(138):         number -= tmp * dividend
_utils.py(139):         dividend = int(dividend / 256)
_utils.py(135):     while dividend >= 1:
_utils.py(144):     for d in data:
_utils.py(145):         _rcc_write_number(out, ord(d), 1)
 --- modulename: _utils, funcname: _rcc_write_number
_utils.py(128):     dividend = 1
_utils.py(129):     if width == 2:
_utils.py(131):     elif width == 3:
_utils.py(133):     elif width == 4:
_utils.py(135):     while dividend >= 1:
_utils.py(136):         tmp = int(number / dividend)
_utils.py(137):         out.append("%02x" % tmp)
_utils.py(138):         number -= tmp * dividend
_utils.py(139):         dividend = int(dividend / 256)
_utils.py(135):     while dividend >= 1:
_utils.py(144):     for d in data:
_utils.py(145):         _rcc_write_number(out, ord(d), 1)
 --- modulename: _utils, funcname: _rcc_write_number
_utils.py(128):     dividend = 1
_utils.py(129):     if width == 2:
_utils.py(131):     elif width == 3:
_utils.py(133):     elif width == 4:
_utils.py(135):     while dividend >= 1:
_utils.py(136):         tmp = int(number / dividend)
_utils.py(137):         out.append("%02x" % tmp)
_utils.py(138):         number -= tmp * dividend
_utils.py(139):         dividend = int(dividend / 256)
_utils.py(135):     while dividend >= 1:
_utils.py(144):     for d in data:
_utils.py(145):         _rcc_write_number(out, ord(d), 1)
 --- modulename: _utils, funcname: _rcc_write_number
_utils.py(128):     dividend = 1
_utils.py(129):     if width == 2:
_utils.py(131):     elif width == 3:
_utils.py(133):     elif width == 4:
_utils.py(135):     while dividend >= 1:
_utils.py(136):         tmp = int(number / dividend)
_utils.py(137):         out.append("%02x" % tmp)
_utils.py(138):         number -= tmp * dividend
_utils.py(139):         dividend = int(dividend / 256)
_utils.py(135):     while dividend >= 1:
_utils.py(144):     for d in data:
_utils.py(145):         _rcc_write_number(out, ord(d), 1)
 --- modulename: _utils, funcname: _rcc_write_number
_utils.py(128):     dividend = 1
_utils.py(129):     if width == 2:
_utils.py(131):     elif width == 3:
_utils.py(133):     elif width == 4:
_utils.py(135):     while dividend >= 1:
_utils.py(136):         tmp = int(number / dividend)
_utils.py(137):         out.append("%02x" % tmp)
_utils.py(138):         number -= tmp * dividend
_utils.py(139):         dividend = int(dividend / 256)
_utils.py(135):     while dividend >= 1:
_utils.py(144):     for d in data:
_utils.py(145):         _rcc_write_number(out, ord(d), 1)
 --- modulename: _utils, funcname: _rcc_write_number
_utils.py(128):     dividend = 1
_utils.py(129):     if width == 2:
_utils.py(131):     elif width == 3:
_utils.py(133):     elif width == 4:
_utils.py(135):     while dividend >= 1:
_utils.py(136):         tmp = int(number / dividend)
_utils.py(137):         out.append("%02x" % tmp)
_utils.py(138):         number -= tmp * dividend
_utils.py(139):         dividend = int(dividend / 256)
_utils.py(135):     while dividend >= 1:
_utils.py(144):     for d in data:
_utils.py(145):         _rcc_write_number(out, ord(d), 1)
 --- modulename: _utils, funcname: _rcc_write_number
_utils.py(128):     dividend = 1
_utils.py(129):     if width == 2:
_utils.py(131):     elif width == 3:
_utils.py(133):     elif width == 4:
_utils.py(135):     while dividend >= 1:
_utils.py(136):         tmp = int(number / dividend)
_utils.py(137):         out.append("%02x" % tmp)
_utils.py(138):         number -= tmp * dividend
_utils.py(139):         dividend = int(dividend / 256)
_utils.py(135):     while dividend >= 1:
_utils.py(144):     for d in data:
_utils.py(145):         _rcc_write_number(out, ord(d), 1)
 --- modulename: _utils, funcname: _rcc_write_number
_utils.py(128):     dividend = 1
_utils.py(129):     if width == 2:
_utils.py(131):     elif width == 3:
_utils.py(133):     elif width == 4:
_utils.py(135):     while dividend >= 1:
_utils.py(136):         tmp = int(number / dividend)
_utils.py(137):         out.append("%02x" % tmp)
_utils.py(138):         number -= tmp * dividend
_utils.py(139):         dividend = int(dividend / 256)
_utils.py(135):     while dividend >= 1:
_utils.py(144):     for d in data:
_utils.py(145):         _rcc_write_number(out, ord(d), 1)
 --- modulename: _utils, funcname: _rcc_write_number
_utils.py(128):     dividend = 1
_utils.py(129):     if width == 2:
_utils.py(131):     elif width == 3:
_utils.py(133):     elif width == 4:
_utils.py(135):     while dividend >= 1:
_utils.py(136):         tmp = int(number / dividend)
_utils.py(137):         out.append("%02x" % tmp)
_utils.py(138):         number -= tmp * dividend
_utils.py(139):         dividend = int(dividend / 256)
_utils.py(135):     while dividend >= 1:
_utils.py(144):     for d in data:
_utils.py(145):         _rcc_write_number(out, ord(d), 1)
 --- modulename: _utils, funcname: _rcc_write_number
_utils.py(128):     dividend = 1
_utils.py(129):     if width == 2:
_utils.py(131):     elif width == 3:
_utils.py(133):     elif width == 4:
_utils.py(135):     while dividend >= 1:
_utils.py(136):         tmp = int(number / dividend)
_utils.py(137):         out.append("%02x" % tmp)
_utils.py(138):         number -= tmp * dividend
_utils.py(139):         dividend = int(dividend / 256)
_utils.py(135):     while dividend >= 1:
_utils.py(144):     for d in data:
_utils.py(145):         _rcc_write_number(out, ord(d), 1)
 --- modulename: _utils, funcname: _rcc_write_number
_utils.py(128):     dividend = 1
_utils.py(129):     if width == 2:
_utils.py(131):     elif width == 3:
_utils.py(133):     elif width == 4:
_utils.py(135):     while dividend >= 1:
_utils.py(136):         tmp = int(number / dividend)
_utils.py(137):         out.append("%02x" % tmp)
_utils.py(138):         number -= tmp * dividend
_utils.py(139):         dividend = int(dividend / 256)
_utils.py(135):     while dividend >= 1:
_utils.py(144):     for d in data:
_utils.py(145):         _rcc_write_number(out, ord(d), 1)
 --- modulename: _utils, funcname: _rcc_write_number
_utils.py(128):     dividend = 1
_utils.py(129):     if width == 2:
_utils.py(131):     elif width == 3:
_utils.py(133):     elif width == 4:
_utils.py(135):     while dividend >= 1:
_utils.py(136):         tmp = int(number / dividend)
_utils.py(137):         out.append("%02x" % tmp)
_utils.py(138):         number -= tmp * dividend
_utils.py(139):         dividend = int(dividend / 256)
_utils.py(135):     while dividend >= 1:
_utils.py(144):     for d in data:
_utils.py(145):         _rcc_write_number(out, ord(d), 1)
 --- modulename: _utils, funcname: _rcc_write_number
_utils.py(128):     dividend = 1
_utils.py(129):     if width == 2:
_utils.py(131):     elif width == 3:
_utils.py(133):     elif width == 4:
_utils.py(135):     while dividend >= 1:
_utils.py(136):         tmp = int(number / dividend)
_utils.py(137):         out.append("%02x" % tmp)
_utils.py(138):         number -= tmp * dividend
_utils.py(139):         dividend = int(dividend / 256)
_utils.py(135):     while dividend >= 1:
_utils.py(144):     for d in data:
_utils.py(145):         _rcc_write_number(out, ord(d), 1)
 --- modulename: _utils, funcname: _rcc_write_number
_utils.py(128):     dividend = 1
_utils.py(129):     if width == 2:
_utils.py(131):     elif width == 3:
_utils.py(133):     elif width == 4:
_utils.py(135):     while dividend >= 1:
_utils.py(136):         tmp = int(number / dividend)
_utils.py(137):         out.append("%02x" % tmp)
_utils.py(138):         number -= tmp * dividend
_utils.py(139):         dividend = int(dividend / 256)
_utils.py(135):     while dividend >= 1:
_utils.py(144):     for d in data:
_utils.py(145):         _rcc_write_number(out, ord(d), 1)
 --- modulename: _utils, funcname: _rcc_write_number
_utils.py(128):     dividend = 1
_utils.py(129):     if width == 2:
_utils.py(131):     elif width == 3:
_utils.py(133):     elif width == 4:
_utils.py(135):     while dividend >= 1:
_utils.py(136):         tmp = int(number / dividend)
_utils.py(137):         out.append("%02x" % tmp)
_utils.py(138):         number -= tmp * dividend
_utils.py(139):         dividend = int(dividend / 256)
_utils.py(135):     while dividend >= 1:
_utils.py(144):     for d in data:
_utils.py(145):         _rcc_write_number(out, ord(d), 1)
 --- modulename: _utils, funcname: _rcc_write_number
_utils.py(128):     dividend = 1
_utils.py(129):     if width == 2:
_utils.py(131):     elif width == 3:
_utils.py(133):     elif width == 4:
_utils.py(135):     while dividend >= 1:
_utils.py(136):         tmp = int(number / dividend)
_utils.py(137):         out.append("%02x" % tmp)
_utils.py(138):         number -= tmp * dividend
_utils.py(139):         dividend = int(dividend / 256)
_utils.py(135):     while dividend >= 1:
_utils.py(144):     for d in data:
_utils.py(145):         _rcc_write_number(out, ord(d), 1)
 --- modulename: _utils, funcname: _rcc_write_number
_utils.py(128):     dividend = 1
_utils.py(129):     if width == 2:
_utils.py(131):     elif width == 3:
_utils.py(133):     elif width == 4:
_utils.py(135):     while dividend >= 1:
_utils.py(136):         tmp = int(number / dividend)
_utils.py(137):         out.append("%02x" % tmp)
_utils.py(138):         number -= tmp * dividend
_utils.py(139):         dividend = int(dividend / 256)
_utils.py(135):     while dividend >= 1:
_utils.py(144):     for d in data:
_utils.py(145):         _rcc_write_number(out, ord(d), 1)
 --- modulename: _utils, funcname: _rcc_write_number
_utils.py(128):     dividend = 1
_utils.py(129):     if width == 2:
_utils.py(131):     elif width == 3:
_utils.py(133):     elif width == 4:
_utils.py(135):     while dividend >= 1:
_utils.py(136):         tmp = int(number / dividend)
_utils.py(137):         out.append("%02x" % tmp)
_utils.py(138):         number -= tmp * dividend
_utils.py(139):         dividend = int(dividend / 256)
_utils.py(135):     while dividend >= 1:
_utils.py(144):     for d in data:
_utils.py(145):         _rcc_write_number(out, ord(d), 1)
 --- modulename: _utils, funcname: _rcc_write_number
_utils.py(128):     dividend = 1
_utils.py(129):     if width == 2:
_utils.py(131):     elif width == 3:
_utils.py(133):     elif width == 4:
_utils.py(135):     while dividend >= 1:
_utils.py(136):         tmp = int(number / dividend)
_utils.py(137):         out.append("%02x" % tmp)
_utils.py(138):         number -= tmp * dividend
_utils.py(139):         dividend = int(dividend / 256)
_utils.py(135):     while dividend >= 1:
_utils.py(144):     for d in data:
_utils.py(145):         _rcc_write_number(out, ord(d), 1)
 --- modulename: _utils, funcname: _rcc_write_number
_utils.py(128):     dividend = 1
_utils.py(129):     if width == 2:
_utils.py(131):     elif width == 3:
_utils.py(133):     elif width == 4:
_utils.py(135):     while dividend >= 1:
_utils.py(136):         tmp = int(number / dividend)
_utils.py(137):         out.append("%02x" % tmp)
_utils.py(138):         number -= tmp * dividend
_utils.py(139):         dividend = int(dividend / 256)
_utils.py(135):     while dividend >= 1:
_utils.py(144):     for d in data:
_utils.py(145):         _rcc_write_number(out, ord(d), 1)
 --- modulename: _utils, funcname: _rcc_write_number
_utils.py(128):     dividend = 1
_utils.py(129):     if width == 2:
_utils.py(131):     elif width == 3:
_utils.py(133):     elif width == 4:
_utils.py(135):     while dividend >= 1:
_utils.py(136):         tmp = int(number / dividend)
_utils.py(137):         out.append("%02x" % tmp)
_utils.py(138):         number -= tmp * dividend
_utils.py(139):         dividend = int(dividend / 256)
_utils.py(135):     while dividend >= 1:
_utils.py(144):     for d in data:
_utils.py(145):         _rcc_write_number(out, ord(d), 1)
 --- modulename: _utils, funcname: _rcc_write_number
_utils.py(128):     dividend = 1
_utils.py(129):     if width == 2:
_utils.py(131):     elif width == 3:
_utils.py(133):     elif width == 4:
_utils.py(135):     while dividend >= 1:
_utils.py(136):         tmp = int(number / dividend)
_utils.py(137):         out.append("%02x" % tmp)
_utils.py(138):         number -= tmp * dividend
_utils.py(139):         dividend = int(dividend / 256)
_utils.py(135):     while dividend >= 1:
_utils.py(144):     for d in data:
_utils.py(145):         _rcc_write_number(out, ord(d), 1)
 --- modulename: _utils, funcname: _rcc_write_number
_utils.py(128):     dividend = 1
_utils.py(129):     if width == 2:
_utils.py(131):     elif width == 3:
_utils.py(133):     elif width == 4:
_utils.py(135):     while dividend >= 1:
_utils.py(136):         tmp = int(number / dividend)
_utils.py(137):         out.append("%02x" % tmp)
_utils.py(138):         number -= tmp * dividend
_utils.py(139):         dividend = int(dividend / 256)
_utils.py(135):     while dividend >= 1:
_utils.py(144):     for d in data:
_utils.py(145):         _rcc_write_number(out, ord(d), 1)
 --- modulename: _utils, funcname: _rcc_write_number
_utils.py(128):     dividend = 1
_utils.py(129):     if width == 2:
_utils.py(131):     elif width == 3:
_utils.py(133):     elif width == 4:
_utils.py(135):     while dividend >= 1:
_utils.py(136):         tmp = int(number / dividend)
_utils.py(137):         out.append("%02x" % tmp)
_utils.py(138):         number -= tmp * dividend
_utils.py(139):         dividend = int(dividend / 256)
_utils.py(135):     while dividend >= 1:
_utils.py(144):     for d in data:
_utils.py(145):         _rcc_write_number(out, ord(d), 1)
 --- modulename: _utils, funcname: _rcc_write_number
_utils.py(128):     dividend = 1
_utils.py(129):     if width == 2:
_utils.py(131):     elif width == 3:
_utils.py(133):     elif width == 4:
_utils.py(135):     while dividend >= 1:
_utils.py(136):         tmp = int(number / dividend)
_utils.py(137):         out.append("%02x" % tmp)
_utils.py(138):         number -= tmp * dividend
_utils.py(139):         dividend = int(dividend / 256)
_utils.py(135):     while dividend >= 1:
_utils.py(144):     for d in data:
_utils.py(145):         _rcc_write_number(out, ord(d), 1)
 --- modulename: _utils, funcname: _rcc_write_number
_utils.py(128):     dividend = 1
_utils.py(129):     if width == 2:
_utils.py(131):     elif width == 3:
_utils.py(133):     elif width == 4:
_utils.py(135):     while dividend >= 1:
_utils.py(136):         tmp = int(number / dividend)
_utils.py(137):         out.append("%02x" % tmp)
_utils.py(138):         number -= tmp * dividend
_utils.py(139):         dividend = int(dividend / 256)
_utils.py(135):     while dividend >= 1:
_utils.py(144):     for d in data:
_utils.py(145):         _rcc_write_number(out, ord(d), 1)
 --- modulename: _utils, funcname: _rcc_write_number
_utils.py(128):     dividend = 1
_utils.py(129):     if width == 2:
_utils.py(131):     elif width == 3:
_utils.py(133):     elif width == 4:
_utils.py(135):     while dividend >= 1:
_utils.py(136):         tmp = int(number / dividend)
_utils.py(137):         out.append("%02x" % tmp)
_utils.py(138):         number -= tmp * dividend
_utils.py(139):         dividend = int(dividend / 256)
_utils.py(135):     while dividend >= 1:
_utils.py(144):     for d in data:
_utils.py(145):         _rcc_write_number(out, ord(d), 1)
 --- modulename: _utils, funcname: _rcc_write_number
_utils.py(128):     dividend = 1
_utils.py(129):     if width == 2:
_utils.py(131):     elif width == 3:
_utils.py(133):     elif width == 4:
_utils.py(135):     while dividend >= 1:
_utils.py(136):         tmp = int(number / dividend)
_utils.py(137):         out.append("%02x" % tmp)
_utils.py(138):         number -= tmp * dividend
_utils.py(139):         dividend = int(dividend / 256)
_utils.py(135):     while dividend >= 1:
_utils.py(144):     for d in data:
_utils.py(145):         _rcc_write_number(out, ord(d), 1)
 --- modulename: _utils, funcname: _rcc_write_number
_utils.py(128):     dividend = 1
_utils.py(129):     if width == 2:
_utils.py(131):     elif width == 3:
_utils.py(133):     elif width == 4:
_utils.py(135):     while dividend >= 1:
_utils.py(136):         tmp = int(number / dividend)
_utils.py(137):         out.append("%02x" % tmp)
_utils.py(138):         number -= tmp * dividend
_utils.py(139):         dividend = int(dividend / 256)
_utils.py(135):     while dividend >= 1:
_utils.py(144):     for d in data:
_utils.py(145):         _rcc_write_number(out, ord(d), 1)
 --- modulename: _utils, funcname: _rcc_write_number
_utils.py(128):     dividend = 1
_utils.py(129):     if width == 2:
_utils.py(131):     elif width == 3:
_utils.py(133):     elif width == 4:
_utils.py(135):     while dividend >= 1:
_utils.py(136):         tmp = int(number / dividend)
_utils.py(137):         out.append("%02x" % tmp)
_utils.py(138):         number -= tmp * dividend
_utils.py(139):         dividend = int(dividend / 256)
_utils.py(135):     while dividend >= 1:
_utils.py(144):     for d in data:
_utils.py(145):         _rcc_write_number(out, ord(d), 1)
 --- modulename: _utils, funcname: _rcc_write_number
_utils.py(128):     dividend = 1
_utils.py(129):     if width == 2:
_utils.py(131):     elif width == 3:
_utils.py(133):     elif width == 4:
_utils.py(135):     while dividend >= 1:
_utils.py(136):         tmp = int(number / dividend)
_utils.py(137):         out.append("%02x" % tmp)
_utils.py(138):         number -= tmp * dividend
_utils.py(139):         dividend = int(dividend / 256)
_utils.py(135):     while dividend >= 1:
_utils.py(144):     for d in data:
_utils.py(145):         _rcc_write_number(out, ord(d), 1)
 --- modulename: _utils, funcname: _rcc_write_number
_utils.py(128):     dividend = 1
_utils.py(129):     if width == 2:
_utils.py(131):     elif width == 3:
_utils.py(133):     elif width == 4:
_utils.py(135):     while dividend >= 1:
_utils.py(136):         tmp = int(number / dividend)
_utils.py(137):         out.append("%02x" % tmp)
_utils.py(138):         number -= tmp * dividend
_utils.py(139):         dividend = int(dividend / 256)
_utils.py(135):     while dividend >= 1:
_utils.py(144):     for d in data:
_utils.py(145):         _rcc_write_number(out, ord(d), 1)
 --- modulename: _utils, funcname: _rcc_write_number
_utils.py(128):     dividend = 1
_utils.py(129):     if width == 2:
_utils.py(131):     elif width == 3:
_utils.py(133):     elif width == 4:
_utils.py(135):     while dividend >= 1:
_utils.py(136):         tmp = int(number / dividend)
_utils.py(137):         out.append("%02x" % tmp)
_utils.py(138):         number -= tmp * dividend
_utils.py(139):         dividend = int(dividend / 256)
_utils.py(135):     while dividend >= 1:
_utils.py(144):     for d in data:
_utils.py(145):         _rcc_write_number(out, ord(d), 1)
 --- modulename: _utils, funcname: _rcc_write_number
_utils.py(128):     dividend = 1
_utils.py(129):     if width == 2:
_utils.py(131):     elif width == 3:
_utils.py(133):     elif width == 4:
_utils.py(135):     while dividend >= 1:
_utils.py(136):         tmp = int(number / dividend)
_utils.py(137):         out.append("%02x" % tmp)
_utils.py(138):         number -= tmp * dividend
_utils.py(139):         dividend = int(dividend / 256)
_utils.py(135):     while dividend >= 1:
_utils.py(144):     for d in data:
_utils.py(145):         _rcc_write_number(out, ord(d), 1)
 --- modulename: _utils, funcname: _rcc_write_number
_utils.py(128):     dividend = 1
_utils.py(129):     if width == 2:
_utils.py(131):     elif width == 3:
_utils.py(133):     elif width == 4:
_utils.py(135):     while dividend >= 1:
_utils.py(136):         tmp = int(number / dividend)
_utils.py(137):         out.append("%02x" % tmp)
_utils.py(138):         number -= tmp * dividend
_utils.py(139):         dividend = int(dividend / 256)
_utils.py(135):     while dividend >= 1:
_utils.py(144):     for d in data:
_utils.py(145):         _rcc_write_number(out, ord(d), 1)
 --- modulename: _utils, funcname: _rcc_write_number
_utils.py(128):     dividend = 1
_utils.py(129):     if width == 2:
_utils.py(131):     elif width == 3:
_utils.py(133):     elif width == 4:
_utils.py(135):     while dividend >= 1:
_utils.py(136):         tmp = int(number / dividend)
_utils.py(137):         out.append("%02x" % tmp)
_utils.py(138):         number -= tmp * dividend
_utils.py(139):         dividend = int(dividend / 256)
_utils.py(135):     while dividend >= 1:
_utils.py(144):     for d in data:
_utils.py(145):         _rcc_write_number(out, ord(d), 1)
 --- modulename: _utils, funcname: _rcc_write_number
_utils.py(128):     dividend = 1
_utils.py(129):     if width == 2:
_utils.py(131):     elif width == 3:
_utils.py(133):     elif width == 4:
_utils.py(135):     while dividend >= 1:
_utils.py(136):         tmp = int(number / dividend)
_utils.py(137):         out.append("%02x" % tmp)
_utils.py(138):         number -= tmp * dividend
_utils.py(139):         dividend = int(dividend / 256)
_utils.py(135):     while dividend >= 1:
_utils.py(144):     for d in data:
_utils.py(145):         _rcc_write_number(out, ord(d), 1)
 --- modulename: _utils, funcname: _rcc_write_number
_utils.py(128):     dividend = 1
_utils.py(129):     if width == 2:
_utils.py(131):     elif width == 3:
_utils.py(133):     elif width == 4:
_utils.py(135):     while dividend >= 1:
_utils.py(136):         tmp = int(number / dividend)
_utils.py(137):         out.append("%02x" % tmp)
_utils.py(138):         number -= tmp * dividend
_utils.py(139):         dividend = int(dividend / 256)
_utils.py(135):     while dividend >= 1:
_utils.py(144):     for d in data:
_utils.py(145):         _rcc_write_number(out, ord(d), 1)
 --- modulename: _utils, funcname: _rcc_write_number
_utils.py(128):     dividend = 1
_utils.py(129):     if width == 2:
_utils.py(131):     elif width == 3:
_utils.py(133):     elif width == 4:
_utils.py(135):     while dividend >= 1:
_utils.py(136):         tmp = int(number / dividend)
_utils.py(137):         out.append("%02x" % tmp)
_utils.py(138):         number -= tmp * dividend
_utils.py(139):         dividend = int(dividend / 256)
_utils.py(135):     while dividend >= 1:
_utils.py(144):     for d in data:
_utils.py(145):         _rcc_write_number(out, ord(d), 1)
 --- modulename: _utils, funcname: _rcc_write_number
_utils.py(128):     dividend = 1
_utils.py(129):     if width == 2:
_utils.py(131):     elif width == 3:
_utils.py(133):     elif width == 4:
_utils.py(135):     while dividend >= 1:
_utils.py(136):         tmp = int(number / dividend)
_utils.py(137):         out.append("%02x" % tmp)
_utils.py(138):         number -= tmp * dividend
_utils.py(139):         dividend = int(dividend / 256)
_utils.py(135):     while dividend >= 1:
_utils.py(144):     for d in data:
_utils.py(145):         _rcc_write_number(out, ord(d), 1)
 --- modulename: _utils, funcname: _rcc_write_number
_utils.py(128):     dividend = 1
_utils.py(129):     if width == 2:
_utils.py(131):     elif width == 3:
_utils.py(133):     elif width == 4:
_utils.py(135):     while dividend >= 1:
_utils.py(136):         tmp = int(number / dividend)
_utils.py(137):         out.append("%02x" % tmp)
_utils.py(138):         number -= tmp * dividend
_utils.py(139):         dividend = int(dividend / 256)
_utils.py(135):     while dividend >= 1:
_utils.py(144):     for d in data:
_utils.py(145):         _rcc_write_number(out, ord(d), 1)
 --- modulename: _utils, funcname: _rcc_write_number
_utils.py(128):     dividend = 1
_utils.py(129):     if width == 2:
_utils.py(131):     elif width == 3:
_utils.py(133):     elif width == 4:
_utils.py(135):     while dividend >= 1:
_utils.py(136):         tmp = int(number / dividend)
_utils.py(137):         out.append("%02x" % tmp)
_utils.py(138):         number -= tmp * dividend
_utils.py(139):         dividend = int(dividend / 256)
_utils.py(135):     while dividend >= 1:
_utils.py(144):     for d in data:
_utils.py(145):         _rcc_write_number(out, ord(d), 1)
 --- modulename: _utils, funcname: _rcc_write_number
_utils.py(128):     dividend = 1
_utils.py(129):     if width == 2:
_utils.py(131):     elif width == 3:
_utils.py(133):     elif width == 4:
_utils.py(135):     while dividend >= 1:
_utils.py(136):         tmp = int(number / dividend)
_utils.py(137):         out.append("%02x" % tmp)
_utils.py(138):         number -= tmp * dividend
_utils.py(139):         dividend = int(dividend / 256)
_utils.py(135):     while dividend >= 1:
_utils.py(144):     for d in data:
_utils.py(145):         _rcc_write_number(out, ord(d), 1)
 --- modulename: _utils, funcname: _rcc_write_number
_utils.py(128):     dividend = 1
_utils.py(129):     if width == 2:
_utils.py(131):     elif width == 3:
_utils.py(133):     elif width == 4:
_utils.py(135):     while dividend >= 1:
_utils.py(136):         tmp = int(number / dividend)
_utils.py(137):         out.append("%02x" % tmp)
_utils.py(138):         number -= tmp * dividend
_utils.py(139):         dividend = int(dividend / 256)
_utils.py(135):     while dividend >= 1:
_utils.py(144):     for d in data:
_utils.py(145):         _rcc_write_number(out, ord(d), 1)
 --- modulename: _utils, funcname: _rcc_write_number
_utils.py(128):     dividend = 1
_utils.py(129):     if width == 2:
_utils.py(131):     elif width == 3:
_utils.py(133):     elif width == 4:
_utils.py(135):     while dividend >= 1:
_utils.py(136):         tmp = int(number / dividend)
_utils.py(137):         out.append("%02x" % tmp)
_utils.py(138):         number -= tmp * dividend
_utils.py(139):         dividend = int(dividend / 256)
_utils.py(135):     while dividend >= 1:
_utils.py(144):     for d in data:
_utils.py(145):         _rcc_write_number(out, ord(d), 1)
 --- modulename: _utils, funcname: _rcc_write_number
_utils.py(128):     dividend = 1
_utils.py(129):     if width == 2:
_utils.py(131):     elif width == 3:
_utils.py(133):     elif width == 4:
_utils.py(135):     while dividend >= 1:
_utils.py(136):         tmp = int(number / dividend)
_utils.py(137):         out.append("%02x" % tmp)
_utils.py(138):         number -= tmp * dividend
_utils.py(139):         dividend = int(dividend / 256)
_utils.py(135):     while dividend >= 1:
_utils.py(144):     for d in data:
_utils.py(145):         _rcc_write_number(out, ord(d), 1)
 --- modulename: _utils, funcname: _rcc_write_number
_utils.py(128):     dividend = 1
_utils.py(129):     if width == 2:
_utils.py(131):     elif width == 3:
_utils.py(133):     elif width == 4:
_utils.py(135):     while dividend >= 1:
_utils.py(136):         tmp = int(number / dividend)
_utils.py(137):         out.append("%02x" % tmp)
_utils.py(138):         number -= tmp * dividend
_utils.py(139):         dividend = int(dividend / 256)
_utils.py(135):     while dividend >= 1:
_utils.py(144):     for d in data:
_utils.py(145):         _rcc_write_number(out, ord(d), 1)
 --- modulename: _utils, funcname: _rcc_write_number
_utils.py(128):     dividend = 1
_utils.py(129):     if width == 2:
_utils.py(131):     elif width == 3:
_utils.py(133):     elif width == 4:
_utils.py(135):     while dividend >= 1:
_utils.py(136):         tmp = int(number / dividend)
_utils.py(137):         out.append("%02x" % tmp)
_utils.py(138):         number -= tmp * dividend
_utils.py(139):         dividend = int(dividend / 256)
_utils.py(135):     while dividend >= 1:
_utils.py(144):     for d in data:
_utils.py(145):         _rcc_write_number(out, ord(d), 1)
 --- modulename: _utils, funcname: _rcc_write_number
_utils.py(128):     dividend = 1
_utils.py(129):     if width == 2:
_utils.py(131):     elif width == 3:
_utils.py(133):     elif width == 4:
_utils.py(135):     while dividend >= 1:
_utils.py(136):         tmp = int(number / dividend)
_utils.py(137):         out.append("%02x" % tmp)
_utils.py(138):         number -= tmp * dividend
_utils.py(139):         dividend = int(dividend / 256)
_utils.py(135):     while dividend >= 1:
_utils.py(144):     for d in data:
_utils.py(145):         _rcc_write_number(out, ord(d), 1)
 --- modulename: _utils, funcname: _rcc_write_number
_utils.py(128):     dividend = 1
_utils.py(129):     if width == 2:
_utils.py(131):     elif width == 3:
_utils.py(133):     elif width == 4:
_utils.py(135):     while dividend >= 1:
_utils.py(136):         tmp = int(number / dividend)
_utils.py(137):         out.append("%02x" % tmp)
_utils.py(138):         number -= tmp * dividend
_utils.py(139):         dividend = int(dividend / 256)
_utils.py(135):     while dividend >= 1:
_utils.py(144):     for d in data:
_utils.py(145):         _rcc_write_number(out, ord(d), 1)
 --- modulename: _utils, funcname: _rcc_write_number
_utils.py(128):     dividend = 1
_utils.py(129):     if width == 2:
_utils.py(131):     elif width == 3:
_utils.py(133):     elif width == 4:
_utils.py(135):     while dividend >= 1:
_utils.py(136):         tmp = int(number / dividend)
_utils.py(137):         out.append("%02x" % tmp)
_utils.py(138):         number -= tmp * dividend
_utils.py(139):         dividend = int(dividend / 256)
_utils.py(135):     while dividend >= 1:
_utils.py(144):     for d in data:
_utils.py(145):         _rcc_write_number(out, ord(d), 1)
 --- modulename: _utils, funcname: _rcc_write_number
_utils.py(128):     dividend = 1
_utils.py(129):     if width == 2:
_utils.py(131):     elif width == 3:
_utils.py(133):     elif width == 4:
_utils.py(135):     while dividend >= 1:
_utils.py(136):         tmp = int(number / dividend)
_utils.py(137):         out.append("%02x" % tmp)
_utils.py(138):         number -= tmp * dividend
_utils.py(139):         dividend = int(dividend / 256)
_utils.py(135):     while dividend >= 1:
_utils.py(144):     for d in data:
_utils.py(145):         _rcc_write_number(out, ord(d), 1)
 --- modulename: _utils, funcname: _rcc_write_number
_utils.py(128):     dividend = 1
_utils.py(129):     if width == 2:
_utils.py(131):     elif width == 3:
_utils.py(133):     elif width == 4:
_utils.py(135):     while dividend >= 1:
_utils.py(136):         tmp = int(number / dividend)
_utils.py(137):         out.append("%02x" % tmp)
_utils.py(138):         number -= tmp * dividend
_utils.py(139):         dividend = int(dividend / 256)
_utils.py(135):     while dividend >= 1:
_utils.py(144):     for d in data:
_utils.py(145):         _rcc_write_number(out, ord(d), 1)
 --- modulename: _utils, funcname: _rcc_write_number
_utils.py(128):     dividend = 1
_utils.py(129):     if width == 2:
_utils.py(131):     elif width == 3:
_utils.py(133):     elif width == 4:
_utils.py(135):     while dividend >= 1:
_utils.py(136):         tmp = int(number / dividend)
_utils.py(137):         out.append("%02x" % tmp)
_utils.py(138):         number -= tmp * dividend
_utils.py(139):         dividend = int(dividend / 256)
_utils.py(135):     while dividend >= 1:
_utils.py(144):     for d in data:
_utils.py(145):         _rcc_write_number(out, ord(d), 1)
 --- modulename: _utils, funcname: _rcc_write_number
_utils.py(128):     dividend = 1
_utils.py(129):     if width == 2:
_utils.py(131):     elif width == 3:
_utils.py(133):     elif width == 4:
_utils.py(135):     while dividend >= 1:
_utils.py(136):         tmp = int(number / dividend)
_utils.py(137):         out.append("%02x" % tmp)
_utils.py(138):         number -= tmp * dividend
_utils.py(139):         dividend = int(dividend / 256)
_utils.py(135):     while dividend >= 1:
_utils.py(144):     for d in data:
_utils.py(145):         _rcc_write_number(out, ord(d), 1)
 --- modulename: _utils, funcname: _rcc_write_number
_utils.py(128):     dividend = 1
_utils.py(129):     if width == 2:
_utils.py(131):     elif width == 3:
_utils.py(133):     elif width == 4:
_utils.py(135):     while dividend >= 1:
_utils.py(136):         tmp = int(number / dividend)
_utils.py(137):         out.append("%02x" % tmp)
_utils.py(138):         number -= tmp * dividend
_utils.py(139):         dividend = int(dividend / 256)
_utils.py(135):     while dividend >= 1:
_utils.py(144):     for d in data:
_utils.py(145):         _rcc_write_number(out, ord(d), 1)
 --- modulename: _utils, funcname: _rcc_write_number
_utils.py(128):     dividend = 1
_utils.py(129):     if width == 2:
_utils.py(131):     elif width == 3:
_utils.py(133):     elif width == 4:
_utils.py(135):     while dividend >= 1:
_utils.py(136):         tmp = int(number / dividend)
_utils.py(137):         out.append("%02x" % tmp)
_utils.py(138):         number -= tmp * dividend
_utils.py(139):         dividend = int(dividend / 256)
_utils.py(135):     while dividend >= 1:
_utils.py(144):     for d in data:
_utils.py(145):         _rcc_write_number(out, ord(d), 1)
 --- modulename: _utils, funcname: _rcc_write_number
_utils.py(128):     dividend = 1
_utils.py(129):     if width == 2:
_utils.py(131):     elif width == 3:
_utils.py(133):     elif width == 4:
_utils.py(135):     while dividend >= 1:
_utils.py(136):         tmp = int(number / dividend)
_utils.py(137):         out.append("%02x" % tmp)
_utils.py(138):         number -= tmp * dividend
_utils.py(139):         dividend = int(dividend / 256)
_utils.py(135):     while dividend >= 1:
_utils.py(144):     for d in data:
_utils.py(145):         _rcc_write_number(out, ord(d), 1)
 --- modulename: _utils, funcname: _rcc_write_number
_utils.py(128):     dividend = 1
_utils.py(129):     if width == 2:
_utils.py(131):     elif width == 3:
_utils.py(133):     elif width == 4:
_utils.py(135):     while dividend >= 1:
_utils.py(136):         tmp = int(number / dividend)
_utils.py(137):         out.append("%02x" % tmp)
_utils.py(138):         number -= tmp * dividend
_utils.py(139):         dividend = int(dividend / 256)
_utils.py(135):     while dividend >= 1:
_utils.py(144):     for d in data:
_utils.py(145):         _rcc_write_number(out, ord(d), 1)
 --- modulename: _utils, funcname: _rcc_write_number
_utils.py(128):     dividend = 1
_utils.py(129):     if width == 2:
_utils.py(131):     elif width == 3:
_utils.py(133):     elif width == 4:
_utils.py(135):     while dividend >= 1:
_utils.py(136):         tmp = int(number / dividend)
_utils.py(137):         out.append("%02x" % tmp)
_utils.py(138):         number -= tmp * dividend
_utils.py(139):         dividend = int(dividend / 256)
_utils.py(135):     while dividend >= 1:
_utils.py(144):     for d in data:
_utils.py(145):         _rcc_write_number(out, ord(d), 1)
 --- modulename: _utils, funcname: _rcc_write_number
_utils.py(128):     dividend = 1
_utils.py(129):     if width == 2:
_utils.py(131):     elif width == 3:
_utils.py(133):     elif width == 4:
_utils.py(135):     while dividend >= 1:
_utils.py(136):         tmp = int(number / dividend)
_utils.py(137):         out.append("%02x" % tmp)
_utils.py(138):         number -= tmp * dividend
_utils.py(139):         dividend = int(dividend / 256)
_utils.py(135):     while dividend >= 1:
_utils.py(144):     for d in data:
_utils.py(145):         _rcc_write_number(out, ord(d), 1)
 --- modulename: _utils, funcname: _rcc_write_number
_utils.py(128):     dividend = 1
_utils.py(129):     if width == 2:
_utils.py(131):     elif width == 3:
_utils.py(133):     elif width == 4:
_utils.py(135):     while dividend >= 1:
_utils.py(136):         tmp = int(number / dividend)
_utils.py(137):         out.append("%02x" % tmp)
_utils.py(138):         number -= tmp * dividend
_utils.py(139):         dividend = int(dividend / 256)
_utils.py(135):     while dividend >= 1:
_utils.py(144):     for d in data:
_utils.py(145):         _rcc_write_number(out, ord(d), 1)
 --- modulename: _utils, funcname: _rcc_write_number
_utils.py(128):     dividend = 1
_utils.py(129):     if width == 2:
_utils.py(131):     elif width == 3:
_utils.py(133):     elif width == 4:
_utils.py(135):     while dividend >= 1:
_utils.py(136):         tmp = int(number / dividend)
_utils.py(137):         out.append("%02x" % tmp)
_utils.py(138):         number -= tmp * dividend
_utils.py(139):         dividend = int(dividend / 256)
_utils.py(135):     while dividend >= 1:
_utils.py(144):     for d in data:
_utils.py(145):         _rcc_write_number(out, ord(d), 1)
 --- modulename: _utils, funcname: _rcc_write_number
_utils.py(128):     dividend = 1
_utils.py(129):     if width == 2:
_utils.py(131):     elif width == 3:
_utils.py(133):     elif width == 4:
_utils.py(135):     while dividend >= 1:
_utils.py(136):         tmp = int(number / dividend)
_utils.py(137):         out.append("%02x" % tmp)
_utils.py(138):         number -= tmp * dividend
_utils.py(139):         dividend = int(dividend / 256)
_utils.py(135):     while dividend >= 1:
_utils.py(144):     for d in data:
_utils.py(145):         _rcc_write_number(out, ord(d), 1)
 --- modulename: _utils, funcname: _rcc_write_number
_utils.py(128):     dividend = 1
_utils.py(129):     if width == 2:
_utils.py(131):     elif width == 3:
_utils.py(133):     elif width == 4:
_utils.py(135):     while dividend >= 1:
_utils.py(136):         tmp = int(number / dividend)
_utils.py(137):         out.append("%02x" % tmp)
_utils.py(138):         number -= tmp * dividend
_utils.py(139):         dividend = int(dividend / 256)
_utils.py(135):     while dividend >= 1:
_utils.py(144):     for d in data:
_utils.py(145):         _rcc_write_number(out, ord(d), 1)
 --- modulename: _utils, funcname: _rcc_write_number
_utils.py(128):     dividend = 1
_utils.py(129):     if width == 2:
_utils.py(131):     elif width == 3:
_utils.py(133):     elif width == 4:
_utils.py(135):     while dividend >= 1:
_utils.py(136):         tmp = int(number / dividend)
_utils.py(137):         out.append("%02x" % tmp)
_utils.py(138):         number -= tmp * dividend
_utils.py(139):         dividend = int(dividend / 256)
_utils.py(135):     while dividend >= 1:
_utils.py(144):     for d in data:
_utils.py(145):         _rcc_write_number(out, ord(d), 1)
 --- modulename: _utils, funcname: _rcc_write_number
_utils.py(128):     dividend = 1
_utils.py(129):     if width == 2:
_utils.py(131):     elif width == 3:
_utils.py(133):     elif width == 4:
_utils.py(135):     while dividend >= 1:
_utils.py(136):         tmp = int(number / dividend)
_utils.py(137):         out.append("%02x" % tmp)
_utils.py(138):         number -= tmp * dividend
_utils.py(139):         dividend = int(dividend / 256)
_utils.py(135):     while dividend >= 1:
_utils.py(144):     for d in data:
_utils.py(145):         _rcc_write_number(out, ord(d), 1)
 --- modulename: _utils, funcname: _rcc_write_number
_utils.py(128):     dividend = 1
_utils.py(129):     if width == 2:
_utils.py(131):     elif width == 3:
_utils.py(133):     elif width == 4:
_utils.py(135):     while dividend >= 1:
_utils.py(136):         tmp = int(number / dividend)
_utils.py(137):         out.append("%02x" % tmp)
_utils.py(138):         number -= tmp * dividend
_utils.py(139):         dividend = int(dividend / 256)
_utils.py(135):     while dividend >= 1:
_utils.py(144):     for d in data:
_utils.py(145):         _rcc_write_number(out, ord(d), 1)
 --- modulename: _utils, funcname: _rcc_write_number
_utils.py(128):     dividend = 1
_utils.py(129):     if width == 2:
_utils.py(131):     elif width == 3:
_utils.py(133):     elif width == 4:
_utils.py(135):     while dividend >= 1:
_utils.py(136):         tmp = int(number / dividend)
_utils.py(137):         out.append("%02x" % tmp)
_utils.py(138):         number -= tmp * dividend
_utils.py(139):         dividend = int(dividend / 256)
_utils.py(135):     while dividend >= 1:
_utils.py(144):     for d in data:
_utils.py(145):         _rcc_write_number(out, ord(d), 1)
 --- modulename: _utils, funcname: _rcc_write_number
_utils.py(128):     dividend = 1
_utils.py(129):     if width == 2:
_utils.py(131):     elif width == 3:
_utils.py(133):     elif width == 4:
_utils.py(135):     while dividend >= 1:
_utils.py(136):         tmp = int(number / dividend)
_utils.py(137):         out.append("%02x" % tmp)
_utils.py(138):         number -= tmp * dividend
_utils.py(139):         dividend = int(dividend / 256)
_utils.py(135):     while dividend >= 1:
_utils.py(144):     for d in data:
_utils.py(145):         _rcc_write_number(out, ord(d), 1)
 --- modulename: _utils, funcname: _rcc_write_number
_utils.py(128):     dividend = 1
_utils.py(129):     if width == 2:
_utils.py(131):     elif width == 3:
_utils.py(133):     elif width == 4:
_utils.py(135):     while dividend >= 1:
_utils.py(136):         tmp = int(number / dividend)
_utils.py(137):         out.append("%02x" % tmp)
_utils.py(138):         number -= tmp * dividend
_utils.py(139):         dividend = int(dividend / 256)
_utils.py(135):     while dividend >= 1:
_utils.py(144):     for d in data:
_utils.py(145):         _rcc_write_number(out, ord(d), 1)
 --- modulename: _utils, funcname: _rcc_write_number
_utils.py(128):     dividend = 1
_utils.py(129):     if width == 2:
_utils.py(131):     elif width == 3:
_utils.py(133):     elif width == 4:
_utils.py(135):     while dividend >= 1:
_utils.py(136):         tmp = int(number / dividend)
_utils.py(137):         out.append("%02x" % tmp)
_utils.py(138):         number -= tmp * dividend
_utils.py(139):         dividend = int(dividend / 256)
_utils.py(135):     while dividend >= 1:
_utils.py(144):     for d in data:
_utils.py(145):         _rcc_write_number(out, ord(d), 1)
 --- modulename: _utils, funcname: _rcc_write_number
_utils.py(128):     dividend = 1
_utils.py(129):     if width == 2:
_utils.py(131):     elif width == 3:
_utils.py(133):     elif width == 4:
_utils.py(135):     while dividend >= 1:
_utils.py(136):         tmp = int(number / dividend)
_utils.py(137):         out.append("%02x" % tmp)
_utils.py(138):         number -= tmp * dividend
_utils.py(139):         dividend = int(dividend / 256)
_utils.py(135):     while dividend >= 1:
_utils.py(144):     for d in data:
_utils.py(145):         _rcc_write_number(out, ord(d), 1)
 --- modulename: _utils, funcname: _rcc_write_number
_utils.py(128):     dividend = 1
_utils.py(129):     if width == 2:
_utils.py(131):     elif width == 3:
_utils.py(133):     elif width == 4:
_utils.py(135):     while dividend >= 1:
_utils.py(136):         tmp = int(number / dividend)
_utils.py(137):         out.append("%02x" % tmp)
_utils.py(138):         number -= tmp * dividend
_utils.py(139):         dividend = int(dividend / 256)
_utils.py(135):     while dividend >= 1:
_utils.py(144):     for d in data:
_utils.py(145):         _rcc_write_number(out, ord(d), 1)
 --- modulename: _utils, funcname: _rcc_write_number
_utils.py(128):     dividend = 1
_utils.py(129):     if width == 2:
_utils.py(131):     elif width == 3:
_utils.py(133):     elif width == 4:
_utils.py(135):     while dividend >= 1:
_utils.py(136):         tmp = int(number / dividend)
_utils.py(137):         out.append("%02x" % tmp)
_utils.py(138):         number -= tmp * dividend
_utils.py(139):         dividend = int(dividend / 256)
_utils.py(135):     while dividend >= 1:
_utils.py(144):     for d in data:
_utils.py(145):         _rcc_write_number(out, ord(d), 1)
 --- modulename: _utils, funcname: _rcc_write_number
_utils.py(128):     dividend = 1
_utils.py(129):     if width == 2:
_utils.py(131):     elif width == 3:
_utils.py(133):     elif width == 4:
_utils.py(135):     while dividend >= 1:
_utils.py(136):         tmp = int(number / dividend)
_utils.py(137):         out.append("%02x" % tmp)
_utils.py(138):         number -= tmp * dividend
_utils.py(139):         dividend = int(dividend / 256)
_utils.py(135):     while dividend >= 1:
_utils.py(144):     for d in data:
_utils.py(145):         _rcc_write_number(out, ord(d), 1)
 --- modulename: _utils, funcname: _rcc_write_number
_utils.py(128):     dividend = 1
_utils.py(129):     if width == 2:
_utils.py(131):     elif width == 3:
_utils.py(133):     elif width == 4:
_utils.py(135):     while dividend >= 1:
_utils.py(136):         tmp = int(number / dividend)
_utils.py(137):         out.append("%02x" % tmp)
_utils.py(138):         number -= tmp * dividend
_utils.py(139):         dividend = int(dividend / 256)
_utils.py(135):     while dividend >= 1:
_utils.py(144):     for d in data:
_utils.py(145):         _rcc_write_number(out, ord(d), 1)
 --- modulename: _utils, funcname: _rcc_write_number
_utils.py(128):     dividend = 1
_utils.py(129):     if width == 2:
_utils.py(131):     elif width == 3:
_utils.py(133):     elif width == 4:
_utils.py(135):     while dividend >= 1:
_utils.py(136):         tmp = int(number / dividend)
_utils.py(137):         out.append("%02x" % tmp)
_utils.py(138):         number -= tmp * dividend
_utils.py(139):         dividend = int(dividend / 256)
_utils.py(135):     while dividend >= 1:
_utils.py(144):     for d in data:
_utils.py(145):         _rcc_write_number(out, ord(d), 1)
 --- modulename: _utils, funcname: _rcc_write_number
_utils.py(128):     dividend = 1
_utils.py(129):     if width == 2:
_utils.py(131):     elif width == 3:
_utils.py(133):     elif width == 4:
_utils.py(135):     while dividend >= 1:
_utils.py(136):         tmp = int(number / dividend)
_utils.py(137):         out.append("%02x" % tmp)
_utils.py(138):         number -= tmp * dividend
_utils.py(139):         dividend = int(dividend / 256)
_utils.py(135):     while dividend >= 1:
_utils.py(144):     for d in data:
_utils.py(145):         _rcc_write_number(out, ord(d), 1)
 --- modulename: _utils, funcname: _rcc_write_number
_utils.py(128):     dividend = 1
_utils.py(129):     if width == 2:
_utils.py(131):     elif width == 3:
_utils.py(133):     elif width == 4:
_utils.py(135):     while dividend >= 1:
_utils.py(136):         tmp = int(number / dividend)
_utils.py(137):         out.append("%02x" % tmp)
_utils.py(138):         number -= tmp * dividend
_utils.py(139):         dividend = int(dividend / 256)
_utils.py(135):     while dividend >= 1:
_utils.py(144):     for d in data:
_utils.py(145):         _rcc_write_number(out, ord(d), 1)
 --- modulename: _utils, funcname: _rcc_write_number
_utils.py(128):     dividend = 1
_utils.py(129):     if width == 2:
_utils.py(131):     elif width == 3:
_utils.py(133):     elif width == 4:
_utils.py(135):     while dividend >= 1:
_utils.py(136):         tmp = int(number / dividend)
_utils.py(137):         out.append("%02x" % tmp)
_utils.py(138):         number -= tmp * dividend
_utils.py(139):         dividend = int(dividend / 256)
_utils.py(135):     while dividend >= 1:
_utils.py(144):     for d in data:
_utils.py(145):         _rcc_write_number(out, ord(d), 1)
 --- modulename: _utils, funcname: _rcc_write_number
_utils.py(128):     dividend = 1
_utils.py(129):     if width == 2:
_utils.py(131):     elif width == 3:
_utils.py(133):     elif width == 4:
_utils.py(135):     while dividend >= 1:
_utils.py(136):         tmp = int(number / dividend)
_utils.py(137):         out.append("%02x" % tmp)
_utils.py(138):         number -= tmp * dividend
_utils.py(139):         dividend = int(dividend / 256)
_utils.py(135):     while dividend >= 1:
_utils.py(144):     for d in data:
_utils.py(145):         _rcc_write_number(out, ord(d), 1)
 --- modulename: _utils, funcname: _rcc_write_number
_utils.py(128):     dividend = 1
_utils.py(129):     if width == 2:
_utils.py(131):     elif width == 3:
_utils.py(133):     elif width == 4:
_utils.py(135):     while dividend >= 1:
_utils.py(136):         tmp = int(number / dividend)
_utils.py(137):         out.append("%02x" % tmp)
_utils.py(138):         number -= tmp * dividend
_utils.py(139):         dividend = int(dividend / 256)
_utils.py(135):     while dividend >= 1:
_utils.py(144):     for d in data:
_utils.py(145):         _rcc_write_number(out, ord(d), 1)
 --- modulename: _utils, funcname: _rcc_write_number
_utils.py(128):     dividend = 1
_utils.py(129):     if width == 2:
_utils.py(131):     elif width == 3:
_utils.py(133):     elif width == 4:
_utils.py(135):     while dividend >= 1:
_utils.py(136):         tmp = int(number / dividend)
_utils.py(137):         out.append("%02x" % tmp)
_utils.py(138):         number -= tmp * dividend
_utils.py(139):         dividend = int(dividend / 256)
_utils.py(135):     while dividend >= 1:
_utils.py(144):     for d in data:
_utils.py(145):         _rcc_write_number(out, ord(d), 1)
 --- modulename: _utils, funcname: _rcc_write_number
_utils.py(128):     dividend = 1
_utils.py(129):     if width == 2:
_utils.py(131):     elif width == 3:
_utils.py(133):     elif width == 4:
_utils.py(135):     while dividend >= 1:
_utils.py(136):         tmp = int(number / dividend)
_utils.py(137):         out.append("%02x" % tmp)
_utils.py(138):         number -= tmp * dividend
_utils.py(139):         dividend = int(dividend / 256)
_utils.py(135):     while dividend >= 1:
_utils.py(144):     for d in data:
_utils.py(145):         _rcc_write_number(out, ord(d), 1)
 --- modulename: _utils, funcname: _rcc_write_number
_utils.py(128):     dividend = 1
_utils.py(129):     if width == 2:
_utils.py(131):     elif width == 3:
_utils.py(133):     elif width == 4:
_utils.py(135):     while dividend >= 1:
_utils.py(136):         tmp = int(number / dividend)
_utils.py(137):         out.append("%02x" % tmp)
_utils.py(138):         number -= tmp * dividend
_utils.py(139):         dividend = int(dividend / 256)
_utils.py(135):     while dividend >= 1:
_utils.py(144):     for d in data:
_utils.py(145):         _rcc_write_number(out, ord(d), 1)
 --- modulename: _utils, funcname: _rcc_write_number
_utils.py(128):     dividend = 1
_utils.py(129):     if width == 2:
_utils.py(131):     elif width == 3:
_utils.py(133):     elif width == 4:
_utils.py(135):     while dividend >= 1:
_utils.py(136):         tmp = int(number / dividend)
_utils.py(137):         out.append("%02x" % tmp)
_utils.py(138):         number -= tmp * dividend
_utils.py(139):         dividend = int(dividend / 256)
_utils.py(135):     while dividend >= 1:
_utils.py(144):     for d in data:
_utils.py(145):         _rcc_write_number(out, ord(d), 1)
 --- modulename: _utils, funcname: _rcc_write_number
_utils.py(128):     dividend = 1
_utils.py(129):     if width == 2:
_utils.py(131):     elif width == 3:
_utils.py(133):     elif width == 4:
_utils.py(135):     while dividend >= 1:
_utils.py(136):         tmp = int(number / dividend)
_utils.py(137):         out.append("%02x" % tmp)
_utils.py(138):         number -= tmp * dividend
_utils.py(139):         dividend = int(dividend / 256)
_utils.py(135):     while dividend >= 1:
_utils.py(144):     for d in data:
_utils.py(145):         _rcc_write_number(out, ord(d), 1)
 --- modulename: _utils, funcname: _rcc_write_number
_utils.py(128):     dividend = 1
_utils.py(129):     if width == 2:
_utils.py(131):     elif width == 3:
_utils.py(133):     elif width == 4:
_utils.py(135):     while dividend >= 1:
_utils.py(136):         tmp = int(number / dividend)
_utils.py(137):         out.append("%02x" % tmp)
_utils.py(138):         number -= tmp * dividend
_utils.py(139):         dividend = int(dividend / 256)
_utils.py(135):     while dividend >= 1:
_utils.py(144):     for d in data:
_utils.py(145):         _rcc_write_number(out, ord(d), 1)
 --- modulename: _utils, funcname: _rcc_write_number
_utils.py(128):     dividend = 1
_utils.py(129):     if width == 2:
_utils.py(131):     elif width == 3:
_utils.py(133):     elif width == 4:
_utils.py(135):     while dividend >= 1:
_utils.py(136):         tmp = int(number / dividend)
_utils.py(137):         out.append("%02x" % tmp)
_utils.py(138):         number -= tmp * dividend
_utils.py(139):         dividend = int(dividend / 256)
_utils.py(135):     while dividend >= 1:
_utils.py(144):     for d in data:
_utils.py(145):         _rcc_write_number(out, ord(d), 1)
 --- modulename: _utils, funcname: _rcc_write_number
_utils.py(128):     dividend = 1
_utils.py(129):     if width == 2:
_utils.py(131):     elif width == 3:
_utils.py(133):     elif width == 4:
_utils.py(135):     while dividend >= 1:
_utils.py(136):         tmp = int(number / dividend)
_utils.py(137):         out.append("%02x" % tmp)
_utils.py(138):         number -= tmp * dividend
_utils.py(139):         dividend = int(dividend / 256)
_utils.py(135):     while dividend >= 1:
_utils.py(144):     for d in data:
_utils.py(145):         _rcc_write_number(out, ord(d), 1)
 --- modulename: _utils, funcname: _rcc_write_number
_utils.py(128):     dividend = 1
_utils.py(129):     if width == 2:
_utils.py(131):     elif width == 3:
_utils.py(133):     elif width == 4:
_utils.py(135):     while dividend >= 1:
_utils.py(136):         tmp = int(number / dividend)
_utils.py(137):         out.append("%02x" % tmp)
_utils.py(138):         number -= tmp * dividend
_utils.py(139):         dividend = int(dividend / 256)
_utils.py(135):     while dividend >= 1:
_utils.py(144):     for d in data:
_utils.py(145):         _rcc_write_number(out, ord(d), 1)
 --- modulename: _utils, funcname: _rcc_write_number
_utils.py(128):     dividend = 1
_utils.py(129):     if width == 2:
_utils.py(131):     elif width == 3:
_utils.py(133):     elif width == 4:
_utils.py(135):     while dividend >= 1:
_utils.py(136):         tmp = int(number / dividend)
_utils.py(137):         out.append("%02x" % tmp)
_utils.py(138):         number -= tmp * dividend
_utils.py(139):         dividend = int(dividend / 256)
_utils.py(135):     while dividend >= 1:
_utils.py(144):     for d in data:
_utils.py(145):         _rcc_write_number(out, ord(d), 1)
 --- modulename: _utils, funcname: _rcc_write_number
_utils.py(128):     dividend = 1
_utils.py(129):     if width == 2:
_utils.py(131):     elif width == 3:
_utils.py(133):     elif width == 4:
_utils.py(135):     while dividend >= 1:
_utils.py(136):         tmp = int(number / dividend)
_utils.py(137):         out.append("%02x" % tmp)
_utils.py(138):         number -= tmp * dividend
_utils.py(139):         dividend = int(dividend / 256)
_utils.py(135):     while dividend >= 1:
_utils.py(144):     for d in data:
_utils.py(145):         _rcc_write_number(out, ord(d), 1)
 --- modulename: _utils, funcname: _rcc_write_number
_utils.py(128):     dividend = 1
_utils.py(129):     if width == 2:
_utils.py(131):     elif width == 3:
_utils.py(133):     elif width == 4:
_utils.py(135):     while dividend >= 1:
_utils.py(136):         tmp = int(number / dividend)
_utils.py(137):         out.append("%02x" % tmp)
_utils.py(138):         number -= tmp * dividend
_utils.py(139):         dividend = int(dividend / 256)
_utils.py(135):     while dividend >= 1:
_utils.py(144):     for d in data:
_utils.py(145):         _rcc_write_number(out, ord(d), 1)
 --- modulename: _utils, funcname: _rcc_write_number
_utils.py(128):     dividend = 1
_utils.py(129):     if width == 2:
_utils.py(131):     elif width == 3:
_utils.py(133):     elif width == 4:
_utils.py(135):     while dividend >= 1:
_utils.py(136):         tmp = int(number / dividend)
_utils.py(137):         out.append("%02x" % tmp)
_utils.py(138):         number -= tmp * dividend
_utils.py(139):         dividend = int(dividend / 256)
_utils.py(135):     while dividend >= 1:
_utils.py(144):     for d in data:
_utils.py(145):         _rcc_write_number(out, ord(d), 1)
 --- modulename: _utils, funcname: _rcc_write_number
_utils.py(128):     dividend = 1
_utils.py(129):     if width == 2:
_utils.py(131):     elif width == 3:
_utils.py(133):     elif width == 4:
_utils.py(135):     while dividend >= 1:
_utils.py(136):         tmp = int(number / dividend)
_utils.py(137):         out.append("%02x" % tmp)
_utils.py(138):         number -= tmp * dividend
_utils.py(139):         dividend = int(dividend / 256)
_utils.py(135):     while dividend >= 1:
_utils.py(144):     for d in data:
_utils.py(145):         _rcc_write_number(out, ord(d), 1)
 --- modulename: _utils, funcname: _rcc_write_number
_utils.py(128):     dividend = 1
_utils.py(129):     if width == 2:
_utils.py(131):     elif width == 3:
_utils.py(133):     elif width == 4:
_utils.py(135):     while dividend >= 1:
_utils.py(136):         tmp = int(number / dividend)
_utils.py(137):         out.append("%02x" % tmp)
_utils.py(138):         number -= tmp * dividend
_utils.py(139):         dividend = int(dividend / 256)
_utils.py(135):     while dividend >= 1:
_utils.py(144):     for d in data:
_utils.py(145):         _rcc_write_number(out, ord(d), 1)
 --- modulename: _utils, funcname: _rcc_write_number
_utils.py(128):     dividend = 1
_utils.py(129):     if width == 2:
_utils.py(131):     elif width == 3:
_utils.py(133):     elif width == 4:
_utils.py(135):     while dividend >= 1:
_utils.py(136):         tmp = int(number / dividend)
_utils.py(137):         out.append("%02x" % tmp)
_utils.py(138):         number -= tmp * dividend
_utils.py(139):         dividend = int(dividend / 256)
_utils.py(135):     while dividend >= 1:
_utils.py(144):     for d in data:
_utils.py(145):         _rcc_write_number(out, ord(d), 1)
 --- modulename: _utils, funcname: _rcc_write_number
_utils.py(128):     dividend = 1
_utils.py(129):     if width == 2:
_utils.py(131):     elif width == 3:
_utils.py(133):     elif width == 4:
_utils.py(135):     while dividend >= 1:
_utils.py(136):         tmp = int(number / dividend)
_utils.py(137):         out.append("%02x" % tmp)
_utils.py(138):         number -= tmp * dividend
_utils.py(139):         dividend = int(dividend / 256)
_utils.py(135):     while dividend >= 1:
_utils.py(144):     for d in data:
_utils.py(145):         _rcc_write_number(out, ord(d), 1)
 --- modulename: _utils, funcname: _rcc_write_number
_utils.py(128):     dividend = 1
_utils.py(129):     if width == 2:
_utils.py(131):     elif width == 3:
_utils.py(133):     elif width == 4:
_utils.py(135):     while dividend >= 1:
_utils.py(136):         tmp = int(number / dividend)
_utils.py(137):         out.append("%02x" % tmp)
_utils.py(138):         number -= tmp * dividend
_utils.py(139):         dividend = int(dividend / 256)
_utils.py(135):     while dividend >= 1:
_utils.py(144):     for d in data:
_utils.py(145):         _rcc_write_number(out, ord(d), 1)
 --- modulename: _utils, funcname: _rcc_write_number
_utils.py(128):     dividend = 1
_utils.py(129):     if width == 2:
_utils.py(131):     elif width == 3:
_utils.py(133):     elif width == 4:
_utils.py(135):     while dividend >= 1:
_utils.py(136):         tmp = int(number / dividend)
_utils.py(137):         out.append("%02x" % tmp)
_utils.py(138):         number -= tmp * dividend
_utils.py(139):         dividend = int(dividend / 256)
_utils.py(135):     while dividend >= 1:
_utils.py(144):     for d in data:
_utils.py(145):         _rcc_write_number(out, ord(d), 1)
 --- modulename: _utils, funcname: _rcc_write_number
_utils.py(128):     dividend = 1
_utils.py(129):     if width == 2:
_utils.py(131):     elif width == 3:
_utils.py(133):     elif width == 4:
_utils.py(135):     while dividend >= 1:
_utils.py(136):         tmp = int(number / dividend)
_utils.py(137):         out.append("%02x" % tmp)
_utils.py(138):         number -= tmp * dividend
_utils.py(139):         dividend = int(dividend / 256)
_utils.py(135):     while dividend >= 1:
_utils.py(144):     for d in data:
_utils.py(145):         _rcc_write_number(out, ord(d), 1)
 --- modulename: _utils, funcname: _rcc_write_number
_utils.py(128):     dividend = 1
_utils.py(129):     if width == 2:
_utils.py(131):     elif width == 3:
_utils.py(133):     elif width == 4:
_utils.py(135):     while dividend >= 1:
_utils.py(136):         tmp = int(number / dividend)
_utils.py(137):         out.append("%02x" % tmp)
_utils.py(138):         number -= tmp * dividend
_utils.py(139):         dividend = int(dividend / 256)
_utils.py(135):     while dividend >= 1:
_utils.py(144):     for d in data:
_utils.py(145):         _rcc_write_number(out, ord(d), 1)
 --- modulename: _utils, funcname: _rcc_write_number
_utils.py(128):     dividend = 1
_utils.py(129):     if width == 2:
_utils.py(131):     elif width == 3:
_utils.py(133):     elif width == 4:
_utils.py(135):     while dividend >= 1:
_utils.py(136):         tmp = int(number / dividend)
_utils.py(137):         out.append("%02x" % tmp)
_utils.py(138):         number -= tmp * dividend
_utils.py(139):         dividend = int(dividend / 256)
_utils.py(135):     while dividend >= 1:
_utils.py(144):     for d in data:
_utils.py(145):         _rcc_write_number(out, ord(d), 1)
 --- modulename: _utils, funcname: _rcc_write_number
_utils.py(128):     dividend = 1
_utils.py(129):     if width == 2:
_utils.py(131):     elif width == 3:
_utils.py(133):     elif width == 4:
_utils.py(135):     while dividend >= 1:
_utils.py(136):         tmp = int(number / dividend)
_utils.py(137):         out.append("%02x" % tmp)
_utils.py(138):         number -= tmp * dividend
_utils.py(139):         dividend = int(dividend / 256)
_utils.py(135):     while dividend >= 1:
_utils.py(144):     for d in data:
_utils.py(145):         _rcc_write_number(out, ord(d), 1)
 --- modulename: _utils, funcname: _rcc_write_number
_utils.py(128):     dividend = 1
_utils.py(129):     if width == 2:
_utils.py(131):     elif width == 3:
_utils.py(133):     elif width == 4:
_utils.py(135):     while dividend >= 1:
_utils.py(136):         tmp = int(number / dividend)
_utils.py(137):         out.append("%02x" % tmp)
_utils.py(138):         number -= tmp * dividend
_utils.py(139):         dividend = int(dividend / 256)
_utils.py(135):     while dividend >= 1:
_utils.py(144):     for d in data:
_utils.py(145):         _rcc_write_number(out, ord(d), 1)
 --- modulename: _utils, funcname: _rcc_write_number
_utils.py(128):     dividend = 1
_utils.py(129):     if width == 2:
_utils.py(131):     elif width == 3:
_utils.py(133):     elif width == 4:
_utils.py(135):     while dividend >= 1:
_utils.py(136):         tmp = int(number / dividend)
_utils.py(137):         out.append("%02x" % tmp)
_utils.py(138):         number -= tmp * dividend
_utils.py(139):         dividend = int(dividend / 256)
_utils.py(135):     while dividend >= 1:
_utils.py(144):     for d in data:
_utils.py(145):         _rcc_write_number(out, ord(d), 1)
 --- modulename: _utils, funcname: _rcc_write_number
_utils.py(128):     dividend = 1
_utils.py(129):     if width == 2:
_utils.py(131):     elif width == 3:
_utils.py(133):     elif width == 4:
_utils.py(135):     while dividend >= 1:
_utils.py(136):         tmp = int(number / dividend)
_utils.py(137):         out.append("%02x" % tmp)
_utils.py(138):         number -= tmp * dividend
_utils.py(139):         dividend = int(dividend / 256)
_utils.py(135):     while dividend >= 1:
_utils.py(144):     for d in data:
_utils.py(145):         _rcc_write_number(out, ord(d), 1)
 --- modulename: _utils, funcname: _rcc_write_number
_utils.py(128):     dividend = 1
_utils.py(129):     if width == 2:
_utils.py(131):     elif width == 3:
_utils.py(133):     elif width == 4:
_utils.py(135):     while dividend >= 1:
_utils.py(136):         tmp = int(number / dividend)
_utils.py(137):         out.append("%02x" % tmp)
_utils.py(138):         number -= tmp * dividend
_utils.py(139):         dividend = int(dividend / 256)
_utils.py(135):     while dividend >= 1:
_utils.py(144):     for d in data:
_utils.py(145):         _rcc_write_number(out, ord(d), 1)
 --- modulename: _utils, funcname: _rcc_write_number
_utils.py(128):     dividend = 1
_utils.py(129):     if width == 2:
_utils.py(131):     elif width == 3:
_utils.py(133):     elif width == 4:
_utils.py(135):     while dividend >= 1:
_utils.py(136):         tmp = int(number / dividend)
_utils.py(137):         out.append("%02x" % tmp)
_utils.py(138):         number -= tmp * dividend
_utils.py(139):         dividend = int(dividend / 256)
_utils.py(135):     while dividend >= 1:
_utils.py(144):     for d in data:
_utils.py(145):         _rcc_write_number(out, ord(d), 1)
 --- modulename: _utils, funcname: _rcc_write_number
_utils.py(128):     dividend = 1
_utils.py(129):     if width == 2:
_utils.py(131):     elif width == 3:
_utils.py(133):     elif width == 4:
_utils.py(135):     while dividend >= 1:
_utils.py(136):         tmp = int(number / dividend)
_utils.py(137):         out.append("%02x" % tmp)
_utils.py(138):         number -= tmp * dividend
_utils.py(139):         dividend = int(dividend / 256)
_utils.py(135):     while dividend >= 1:
_utils.py(144):     for d in data:
_utils.py(145):         _rcc_write_number(out, ord(d), 1)
 --- modulename: _utils, funcname: _rcc_write_number
_utils.py(128):     dividend = 1
_utils.py(129):     if width == 2:
_utils.py(131):     elif width == 3:
_utils.py(133):     elif width == 4:
_utils.py(135):     while dividend >= 1:
_utils.py(136):         tmp = int(number / dividend)
_utils.py(137):         out.append("%02x" % tmp)
_utils.py(138):         number -= tmp * dividend
_utils.py(139):         dividend = int(dividend / 256)
_utils.py(135):     while dividend >= 1:
_utils.py(144):     for d in data:
_utils.py(145):         _rcc_write_number(out, ord(d), 1)
 --- modulename: _utils, funcname: _rcc_write_number
_utils.py(128):     dividend = 1
_utils.py(129):     if width == 2:
_utils.py(131):     elif width == 3:
_utils.py(133):     elif width == 4:
_utils.py(135):     while dividend >= 1:
_utils.py(136):         tmp = int(number / dividend)
_utils.py(137):         out.append("%02x" % tmp)
_utils.py(138):         number -= tmp * dividend
_utils.py(139):         dividend = int(dividend / 256)
_utils.py(135):     while dividend >= 1:
_utils.py(144):     for d in data:
_utils.py(145):         _rcc_write_number(out, ord(d), 1)
 --- modulename: _utils, funcname: _rcc_write_number
_utils.py(128):     dividend = 1
_utils.py(129):     if width == 2:
_utils.py(131):     elif width == 3:
_utils.py(133):     elif width == 4:
_utils.py(135):     while dividend >= 1:
_utils.py(136):         tmp = int(number / dividend)
_utils.py(137):         out.append("%02x" % tmp)
_utils.py(138):         number -= tmp * dividend
_utils.py(139):         dividend = int(dividend / 256)
_utils.py(135):     while dividend >= 1:
_utils.py(144):     for d in data:
_utils.py(145):         _rcc_write_number(out, ord(d), 1)
 --- modulename: _utils, funcname: _rcc_write_number
_utils.py(128):     dividend = 1
_utils.py(129):     if width == 2:
_utils.py(131):     elif width == 3:
_utils.py(133):     elif width == 4:
_utils.py(135):     while dividend >= 1:
_utils.py(136):         tmp = int(number / dividend)
_utils.py(137):         out.append("%02x" % tmp)
_utils.py(138):         number -= tmp * dividend
_utils.py(139):         dividend = int(dividend / 256)
_utils.py(135):     while dividend >= 1:
_utils.py(144):     for d in data:
_utils.py(145):         _rcc_write_number(out, ord(d), 1)
 --- modulename: _utils, funcname: _rcc_write_number
_utils.py(128):     dividend = 1
_utils.py(129):     if width == 2:
_utils.py(131):     elif width == 3:
_utils.py(133):     elif width == 4:
_utils.py(135):     while dividend >= 1:
_utils.py(136):         tmp = int(number / dividend)
_utils.py(137):         out.append("%02x" % tmp)
_utils.py(138):         number -= tmp * dividend
_utils.py(139):         dividend = int(dividend / 256)
_utils.py(135):     while dividend >= 1:
_utils.py(144):     for d in data:
_utils.py(145):         _rcc_write_number(out, ord(d), 1)
 --- modulename: _utils, funcname: _rcc_write_number
_utils.py(128):     dividend = 1
_utils.py(129):     if width == 2:
_utils.py(131):     elif width == 3:
_utils.py(133):     elif width == 4:
_utils.py(135):     while dividend >= 1:
_utils.py(136):         tmp = int(number / dividend)
_utils.py(137):         out.append("%02x" % tmp)
_utils.py(138):         number -= tmp * dividend
_utils.py(139):         dividend = int(dividend / 256)
_utils.py(135):     while dividend >= 1:
_utils.py(144):     for d in data:
_utils.py(145):         _rcc_write_number(out, ord(d), 1)
 --- modulename: _utils, funcname: _rcc_write_number
_utils.py(128):     dividend = 1
_utils.py(129):     if width == 2:
_utils.py(131):     elif width == 3:
_utils.py(133):     elif width == 4:
_utils.py(135):     while dividend >= 1:
_utils.py(136):         tmp = int(number / dividend)
_utils.py(137):         out.append("%02x" % tmp)
_utils.py(138):         number -= tmp * dividend
_utils.py(139):         dividend = int(dividend / 256)
_utils.py(135):     while dividend >= 1:
_utils.py(144):     for d in data:
_utils.py(145):         _rcc_write_number(out, ord(d), 1)
 --- modulename: _utils, funcname: _rcc_write_number
_utils.py(128):     dividend = 1
_utils.py(129):     if width == 2:
_utils.py(131):     elif width == 3:
_utils.py(133):     elif width == 4:
_utils.py(135):     while dividend >= 1:
_utils.py(136):         tmp = int(number / dividend)
_utils.py(137):         out.append("%02x" % tmp)
_utils.py(138):         number -= tmp * dividend
_utils.py(139):         dividend = int(dividend / 256)
_utils.py(135):     while dividend >= 1:
_utils.py(144):     for d in data:
_utils.py(145):         _rcc_write_number(out, ord(d), 1)
 --- modulename: _utils, funcname: _rcc_write_number
_utils.py(128):     dividend = 1
_utils.py(129):     if width == 2:
_utils.py(131):     elif width == 3:
_utils.py(133):     elif width == 4:
_utils.py(135):     while dividend >= 1:
_utils.py(136):         tmp = int(number / dividend)
_utils.py(137):         out.append("%02x" % tmp)
_utils.py(138):         number -= tmp * dividend
_utils.py(139):         dividend = int(dividend / 256)
_utils.py(135):     while dividend >= 1:
_utils.py(144):     for d in data:
_utils.py(145):         _rcc_write_number(out, ord(d), 1)
 --- modulename: _utils, funcname: _rcc_write_number
_utils.py(128):     dividend = 1
_utils.py(129):     if width == 2:
_utils.py(131):     elif width == 3:
_utils.py(133):     elif width == 4:
_utils.py(135):     while dividend >= 1:
_utils.py(136):         tmp = int(number / dividend)
_utils.py(137):         out.append("%02x" % tmp)
_utils.py(138):         number -= tmp * dividend
_utils.py(139):         dividend = int(dividend / 256)
_utils.py(135):     while dividend >= 1:
_utils.py(144):     for d in data:
_utils.py(145):         _rcc_write_number(out, ord(d), 1)
 --- modulename: _utils, funcname: _rcc_write_number
_utils.py(128):     dividend = 1
_utils.py(129):     if width == 2:
_utils.py(131):     elif width == 3:
_utils.py(133):     elif width == 4:
_utils.py(135):     while dividend >= 1:
_utils.py(136):         tmp = int(number / dividend)
_utils.py(137):         out.append("%02x" % tmp)
_utils.py(138):         number -= tmp * dividend
_utils.py(139):         dividend = int(dividend / 256)
_utils.py(135):     while dividend >= 1:
_utils.py(144):     for d in data:
_utils.py(145):         _rcc_write_number(out, ord(d), 1)
 --- modulename: _utils, funcname: _rcc_write_number
_utils.py(128):     dividend = 1
_utils.py(129):     if width == 2:
_utils.py(131):     elif width == 3:
_utils.py(133):     elif width == 4:
_utils.py(135):     while dividend >= 1:
_utils.py(136):         tmp = int(number / dividend)
_utils.py(137):         out.append("%02x" % tmp)
_utils.py(138):         number -= tmp * dividend
_utils.py(139):         dividend = int(dividend / 256)
_utils.py(135):     while dividend >= 1:
_utils.py(144):     for d in data:
_utils.py(145):         _rcc_write_number(out, ord(d), 1)
 --- modulename: _utils, funcname: _rcc_write_number
_utils.py(128):     dividend = 1
_utils.py(129):     if width == 2:
_utils.py(131):     elif width == 3:
_utils.py(133):     elif width == 4:
_utils.py(135):     while dividend >= 1:
_utils.py(136):         tmp = int(number / dividend)
_utils.py(137):         out.append("%02x" % tmp)
_utils.py(138):         number -= tmp * dividend
_utils.py(139):         dividend = int(dividend / 256)
_utils.py(135):     while dividend >= 1:
_utils.py(144):     for d in data:
_utils.py(145):         _rcc_write_number(out, ord(d), 1)
 --- modulename: _utils, funcname: _rcc_write_number
_utils.py(128):     dividend = 1
_utils.py(129):     if width == 2:
_utils.py(131):     elif width == 3:
_utils.py(133):     elif width == 4:
_utils.py(135):     while dividend >= 1:
_utils.py(136):         tmp = int(number / dividend)
_utils.py(137):         out.append("%02x" % tmp)
_utils.py(138):         number -= tmp * dividend
_utils.py(139):         dividend = int(dividend / 256)
_utils.py(135):     while dividend >= 1:
_utils.py(144):     for d in data:
_utils.py(145):         _rcc_write_number(out, ord(d), 1)
 --- modulename: _utils, funcname: _rcc_write_number
_utils.py(128):     dividend = 1
_utils.py(129):     if width == 2:
_utils.py(131):     elif width == 3:
_utils.py(133):     elif width == 4:
_utils.py(135):     while dividend >= 1:
_utils.py(136):         tmp = int(number / dividend)
_utils.py(137):         out.append("%02x" % tmp)
_utils.py(138):         number -= tmp * dividend
_utils.py(139):         dividend = int(dividend / 256)
_utils.py(135):     while dividend >= 1:
_utils.py(144):     for d in data:
_utils.py(145):         _rcc_write_number(out, ord(d), 1)
 --- modulename: _utils, funcname: _rcc_write_number
_utils.py(128):     dividend = 1
_utils.py(129):     if width == 2:
_utils.py(131):     elif width == 3:
_utils.py(133):     elif width == 4:
_utils.py(135):     while dividend >= 1:
_utils.py(136):         tmp = int(number / dividend)
_utils.py(137):         out.append("%02x" % tmp)
_utils.py(138):         number -= tmp * dividend
_utils.py(139):         dividend = int(dividend / 256)
_utils.py(135):     while dividend >= 1:
_utils.py(144):     for d in data:
_utils.py(145):         _rcc_write_number(out, ord(d), 1)
 --- modulename: _utils, funcname: _rcc_write_number
_utils.py(128):     dividend = 1
_utils.py(129):     if width == 2:
_utils.py(131):     elif width == 3:
_utils.py(133):     elif width == 4:
_utils.py(135):     while dividend >= 1:
_utils.py(136):         tmp = int(number / dividend)
_utils.py(137):         out.append("%02x" % tmp)
_utils.py(138):         number -= tmp * dividend
_utils.py(139):         dividend = int(dividend / 256)
_utils.py(135):     while dividend >= 1:
_utils.py(144):     for d in data:
_utils.py(145):         _rcc_write_number(out, ord(d), 1)
 --- modulename: _utils, funcname: _rcc_write_number
_utils.py(128):     dividend = 1
_utils.py(129):     if width == 2:
_utils.py(131):     elif width == 3:
_utils.py(133):     elif width == 4:
_utils.py(135):     while dividend >= 1:
_utils.py(136):         tmp = int(number / dividend)
_utils.py(137):         out.append("%02x" % tmp)
_utils.py(138):         number -= tmp * dividend
_utils.py(139):         dividend = int(dividend / 256)
_utils.py(135):     while dividend >= 1:
_utils.py(144):     for d in data:
_utils.py(145):         _rcc_write_number(out, ord(d), 1)
 --- modulename: _utils, funcname: _rcc_write_number
_utils.py(128):     dividend = 1
_utils.py(129):     if width == 2:
_utils.py(131):     elif width == 3:
_utils.py(133):     elif width == 4:
_utils.py(135):     while dividend >= 1:
_utils.py(136):         tmp = int(number / dividend)
_utils.py(137):         out.append("%02x" % tmp)
_utils.py(138):         number -= tmp * dividend
_utils.py(139):         dividend = int(dividend / 256)
_utils.py(135):     while dividend >= 1:
_utils.py(144):     for d in data:
_utils.py(145):         _rcc_write_number(out, ord(d), 1)
 --- modulename: _utils, funcname: _rcc_write_number
_utils.py(128):     dividend = 1
_utils.py(129):     if width == 2:
_utils.py(131):     elif width == 3:
_utils.py(133):     elif width == 4:
_utils.py(135):     while dividend >= 1:
_utils.py(136):         tmp = int(number / dividend)
_utils.py(137):         out.append("%02x" % tmp)
_utils.py(138):         number -= tmp * dividend
_utils.py(139):         dividend = int(dividend / 256)
_utils.py(135):     while dividend >= 1:
_utils.py(144):     for d in data:
_utils.py(145):         _rcc_write_number(out, ord(d), 1)
 --- modulename: _utils, funcname: _rcc_write_number
_utils.py(128):     dividend = 1
_utils.py(129):     if width == 2:
_utils.py(131):     elif width == 3:
_utils.py(133):     elif width == 4:
_utils.py(135):     while dividend >= 1:
_utils.py(136):         tmp = int(number / dividend)
_utils.py(137):         out.append("%02x" % tmp)
_utils.py(138):         number -= tmp * dividend
_utils.py(139):         dividend = int(dividend / 256)
_utils.py(135):     while dividend >= 1:
_utils.py(144):     for d in data:
_utils.py(145):         _rcc_write_number(out, ord(d), 1)
 --- modulename: _utils, funcname: _rcc_write_number
_utils.py(128):     dividend = 1
_utils.py(129):     if width == 2:
_utils.py(131):     elif width == 3:
_utils.py(133):     elif width == 4:
_utils.py(135):     while dividend >= 1:
_utils.py(136):         tmp = int(number / dividend)
_utils.py(137):         out.append("%02x" % tmp)
_utils.py(138):         number -= tmp * dividend
_utils.py(139):         dividend = int(dividend / 256)
_utils.py(135):     while dividend >= 1:
_utils.py(144):     for d in data:
_utils.py(145):         _rcc_write_number(out, ord(d), 1)
 --- modulename: _utils, funcname: _rcc_write_number
_utils.py(128):     dividend = 1
_utils.py(129):     if width == 2:
_utils.py(131):     elif width == 3:
_utils.py(133):     elif width == 4:
_utils.py(135):     while dividend >= 1:
_utils.py(136):         tmp = int(number / dividend)
_utils.py(137):         out.append("%02x" % tmp)
_utils.py(138):         number -= tmp * dividend
_utils.py(139):         dividend = int(dividend / 256)
_utils.py(135):     while dividend >= 1:
_utils.py(144):     for d in data:
_utils.py(145):         _rcc_write_number(out, ord(d), 1)
 --- modulename: _utils, funcname: _rcc_write_number
_utils.py(128):     dividend = 1
_utils.py(129):     if width == 2:
_utils.py(131):     elif width == 3:
_utils.py(133):     elif width == 4:
_utils.py(135):     while dividend >= 1:
_utils.py(136):         tmp = int(number / dividend)
_utils.py(137):         out.append("%02x" % tmp)
_utils.py(138):         number -= tmp * dividend
_utils.py(139):         dividend = int(dividend / 256)
_utils.py(135):     while dividend >= 1:
_utils.py(144):     for d in data:
_utils.py(145):         _rcc_write_number(out, ord(d), 1)
 --- modulename: _utils, funcname: _rcc_write_number
_utils.py(128):     dividend = 1
_utils.py(129):     if width == 2:
_utils.py(131):     elif width == 3:
_utils.py(133):     elif width == 4:
_utils.py(135):     while dividend >= 1:
_utils.py(136):         tmp = int(number / dividend)
_utils.py(137):         out.append("%02x" % tmp)
_utils.py(138):         number -= tmp * dividend
_utils.py(139):         dividend = int(dividend / 256)
_utils.py(135):     while dividend >= 1:
_utils.py(144):     for d in data:
_utils.py(145):         _rcc_write_number(out, ord(d), 1)
 --- modulename: _utils, funcname: _rcc_write_number
_utils.py(128):     dividend = 1
_utils.py(129):     if width == 2:
_utils.py(131):     elif width == 3:
_utils.py(133):     elif width == 4:
_utils.py(135):     while dividend >= 1:
_utils.py(136):         tmp = int(number / dividend)
_utils.py(137):         out.append("%02x" % tmp)
_utils.py(138):         number -= tmp * dividend
_utils.py(139):         dividend = int(dividend / 256)
_utils.py(135):     while dividend >= 1:
_utils.py(144):     for d in data:
_utils.py(145):         _rcc_write_number(out, ord(d), 1)
 --- modulename: _utils, funcname: _rcc_write_number
_utils.py(128):     dividend = 1
_utils.py(129):     if width == 2:
_utils.py(131):     elif width == 3:
_utils.py(133):     elif width == 4:
_utils.py(135):     while dividend >= 1:
_utils.py(136):         tmp = int(number / dividend)
_utils.py(137):         out.append("%02x" % tmp)
_utils.py(138):         number -= tmp * dividend
_utils.py(139):         dividend = int(dividend / 256)
_utils.py(135):     while dividend >= 1:
_utils.py(144):     for d in data:
_utils.py(145):         _rcc_write_number(out, ord(d), 1)
 --- modulename: _utils, funcname: _rcc_write_number
_utils.py(128):     dividend = 1
_utils.py(129):     if width == 2:
_utils.py(131):     elif width == 3:
_utils.py(133):     elif width == 4:
_utils.py(135):     while dividend >= 1:
_utils.py(136):         tmp = int(number / dividend)
_utils.py(137):         out.append("%02x" % tmp)
_utils.py(138):         number -= tmp * dividend
_utils.py(139):         dividend = int(dividend / 256)
_utils.py(135):     while dividend >= 1:
_utils.py(144):     for d in data:
_utils.py(145):         _rcc_write_number(out, ord(d), 1)
 --- modulename: _utils, funcname: _rcc_write_number
_utils.py(128):     dividend = 1
_utils.py(129):     if width == 2:
_utils.py(131):     elif width == 3:
_utils.py(133):     elif width == 4:
_utils.py(135):     while dividend >= 1:
_utils.py(136):         tmp = int(number / dividend)
_utils.py(137):         out.append("%02x" % tmp)
_utils.py(138):         number -= tmp * dividend
_utils.py(139):         dividend = int(dividend / 256)
_utils.py(135):     while dividend >= 1:
_utils.py(144):     for d in data:
_utils.py(145):         _rcc_write_number(out, ord(d), 1)
 --- modulename: _utils, funcname: _rcc_write_number
_utils.py(128):     dividend = 1
_utils.py(129):     if width == 2:
_utils.py(131):     elif width == 3:
_utils.py(133):     elif width == 4:
_utils.py(135):     while dividend >= 1:
_utils.py(136):         tmp = int(number / dividend)
_utils.py(137):         out.append("%02x" % tmp)
_utils.py(138):         number -= tmp * dividend
_utils.py(139):         dividend = int(dividend / 256)
_utils.py(135):     while dividend >= 1:
_utils.py(144):     for d in data:
_utils.py(145):         _rcc_write_number(out, ord(d), 1)
 --- modulename: _utils, funcname: _rcc_write_number
_utils.py(128):     dividend = 1
_utils.py(129):     if width == 2:
_utils.py(131):     elif width == 3:
_utils.py(133):     elif width == 4:
_utils.py(135):     while dividend >= 1:
_utils.py(136):         tmp = int(number / dividend)
_utils.py(137):         out.append("%02x" % tmp)
_utils.py(138):         number -= tmp * dividend
_utils.py(139):         dividend = int(dividend / 256)
_utils.py(135):     while dividend >= 1:
_utils.py(144):     for d in data:
_utils.py(145):         _rcc_write_number(out, ord(d), 1)
 --- modulename: _utils, funcname: _rcc_write_number
_utils.py(128):     dividend = 1
_utils.py(129):     if width == 2:
_utils.py(131):     elif width == 3:
_utils.py(133):     elif width == 4:
_utils.py(135):     while dividend >= 1:
_utils.py(136):         tmp = int(number / dividend)
_utils.py(137):         out.append("%02x" % tmp)
_utils.py(138):         number -= tmp * dividend
_utils.py(139):         dividend = int(dividend / 256)
_utils.py(135):     while dividend >= 1:
_utils.py(144):     for d in data:
_utils.py(145):         _rcc_write_number(out, ord(d), 1)
 --- modulename: _utils, funcname: _rcc_write_number
_utils.py(128):     dividend = 1
_utils.py(129):     if width == 2:
_utils.py(131):     elif width == 3:
_utils.py(133):     elif width == 4:
_utils.py(135):     while dividend >= 1:
_utils.py(136):         tmp = int(number / dividend)
_utils.py(137):         out.append("%02x" % tmp)
_utils.py(138):         number -= tmp * dividend
_utils.py(139):         dividend = int(dividend / 256)
_utils.py(135):     while dividend >= 1:
_utils.py(144):     for d in data:
_utils.py(145):         _rcc_write_number(out, ord(d), 1)
 --- modulename: _utils, funcname: _rcc_write_number
_utils.py(128):     dividend = 1
_utils.py(129):     if width == 2:
_utils.py(131):     elif width == 3:
_utils.py(133):     elif width == 4:
_utils.py(135):     while dividend >= 1:
_utils.py(136):         tmp = int(number / dividend)
_utils.py(137):         out.append("%02x" % tmp)
_utils.py(138):         number -= tmp * dividend
_utils.py(139):         dividend = int(dividend / 256)
_utils.py(135):     while dividend >= 1:
_utils.py(144):     for d in data:
_utils.py(145):         _rcc_write_number(out, ord(d), 1)
 --- modulename: _utils, funcname: _rcc_write_number
_utils.py(128):     dividend = 1
_utils.py(129):     if width == 2:
_utils.py(131):     elif width == 3:
_utils.py(133):     elif width == 4:
_utils.py(135):     while dividend >= 1:
_utils.py(136):         tmp = int(number / dividend)
_utils.py(137):         out.append("%02x" % tmp)
_utils.py(138):         number -= tmp * dividend
_utils.py(139):         dividend = int(dividend / 256)
_utils.py(135):     while dividend >= 1:
_utils.py(144):     for d in data:
_utils.py(145):         _rcc_write_number(out, ord(d), 1)
 --- modulename: _utils, funcname: _rcc_write_number
_utils.py(128):     dividend = 1
_utils.py(129):     if width == 2:
_utils.py(131):     elif width == 3:
_utils.py(133):     elif width == 4:
_utils.py(135):     while dividend >= 1:
_utils.py(136):         tmp = int(number / dividend)
_utils.py(137):         out.append("%02x" % tmp)
_utils.py(138):         number -= tmp * dividend
_utils.py(139):         dividend = int(dividend / 256)
_utils.py(135):     while dividend >= 1:
_utils.py(144):     for d in data:
_utils.py(145):         _rcc_write_number(out, ord(d), 1)
 --- modulename: _utils, funcname: _rcc_write_number
_utils.py(128):     dividend = 1
_utils.py(129):     if width == 2:
_utils.py(131):     elif width == 3:
_utils.py(133):     elif width == 4:
_utils.py(135):     while dividend >= 1:
_utils.py(136):         tmp = int(number / dividend)
_utils.py(137):         out.append("%02x" % tmp)
_utils.py(138):         number -= tmp * dividend
_utils.py(139):         dividend = int(dividend / 256)
_utils.py(135):     while dividend >= 1:
_utils.py(144):     for d in data:
_utils.py(145):         _rcc_write_number(out, ord(d), 1)
 --- modulename: _utils, funcname: _rcc_write_number
_utils.py(128):     dividend = 1
_utils.py(129):     if width == 2:
_utils.py(131):     elif width == 3:
_utils.py(133):     elif width == 4:
_utils.py(135):     while dividend >= 1:
_utils.py(136):         tmp = int(number / dividend)
_utils.py(137):         out.append("%02x" % tmp)
_utils.py(138):         number -= tmp * dividend
_utils.py(139):         dividend = int(dividend / 256)
_utils.py(135):     while dividend >= 1:
_utils.py(144):     for d in data:
_utils.py(145):         _rcc_write_number(out, ord(d), 1)
 --- modulename: _utils, funcname: _rcc_write_number
_utils.py(128):     dividend = 1
_utils.py(129):     if width == 2:
_utils.py(131):     elif width == 3:
_utils.py(133):     elif width == 4:
_utils.py(135):     while dividend >= 1:
_utils.py(136):         tmp = int(number / dividend)
_utils.py(137):         out.append("%02x" % tmp)
_utils.py(138):         number -= tmp * dividend
_utils.py(139):         dividend = int(dividend / 256)
_utils.py(135):     while dividend >= 1:
_utils.py(144):     for d in data:
_utils.py(145):         _rcc_write_number(out, ord(d), 1)
 --- modulename: _utils, funcname: _rcc_write_number
_utils.py(128):     dividend = 1
_utils.py(129):     if width == 2:
_utils.py(131):     elif width == 3:
_utils.py(133):     elif width == 4:
_utils.py(135):     while dividend >= 1:
_utils.py(136):         tmp = int(number / dividend)
_utils.py(137):         out.append("%02x" % tmp)
_utils.py(138):         number -= tmp * dividend
_utils.py(139):         dividend = int(dividend / 256)
_utils.py(135):     while dividend >= 1:
_utils.py(144):     for d in data:
_utils.py(145):         _rcc_write_number(out, ord(d), 1)
 --- modulename: _utils, funcname: _rcc_write_number
_utils.py(128):     dividend = 1
_utils.py(129):     if width == 2:
_utils.py(131):     elif width == 3:
_utils.py(133):     elif width == 4:
_utils.py(135):     while dividend >= 1:
_utils.py(136):         tmp = int(number / dividend)
_utils.py(137):         out.append("%02x" % tmp)
_utils.py(138):         number -= tmp * dividend
_utils.py(139):         dividend = int(dividend / 256)
_utils.py(135):     while dividend >= 1:
_utils.py(144):     for d in data:
_utils.py(145):         _rcc_write_number(out, ord(d), 1)
 --- modulename: _utils, funcname: _rcc_write_number
_utils.py(128):     dividend = 1
_utils.py(129):     if width == 2:
_utils.py(131):     elif width == 3:
_utils.py(133):     elif width == 4:
_utils.py(135):     while dividend >= 1:
_utils.py(136):         tmp = int(number / dividend)
_utils.py(137):         out.append("%02x" % tmp)
_utils.py(138):         number -= tmp * dividend
_utils.py(139):         dividend = int(dividend / 256)
_utils.py(135):     while dividend >= 1:
_utils.py(144):     for d in data:
_utils.py(145):         _rcc_write_number(out, ord(d), 1)
 --- modulename: _utils, funcname: _rcc_write_number
_utils.py(128):     dividend = 1
_utils.py(129):     if width == 2:
_utils.py(131):     elif width == 3:
_utils.py(133):     elif width == 4:
_utils.py(135):     while dividend >= 1:
_utils.py(136):         tmp = int(number / dividend)
_utils.py(137):         out.append("%02x" % tmp)
_utils.py(138):         number -= tmp * dividend
_utils.py(139):         dividend = int(dividend / 256)
_utils.py(135):     while dividend >= 1:
_utils.py(144):     for d in data:
_utils.py(145):         _rcc_write_number(out, ord(d), 1)
 --- modulename: _utils, funcname: _rcc_write_number
_utils.py(128):     dividend = 1
_utils.py(129):     if width == 2:
_utils.py(131):     elif width == 3:
_utils.py(133):     elif width == 4:
_utils.py(135):     while dividend >= 1:
_utils.py(136):         tmp = int(number / dividend)
_utils.py(137):         out.append("%02x" % tmp)
_utils.py(138):         number -= tmp * dividend
_utils.py(139):         dividend = int(dividend / 256)
_utils.py(135):     while dividend >= 1:
_utils.py(144):     for d in data:
_utils.py(145):         _rcc_write_number(out, ord(d), 1)
 --- modulename: _utils, funcname: _rcc_write_number
_utils.py(128):     dividend = 1
_utils.py(129):     if width == 2:
_utils.py(131):     elif width == 3:
_utils.py(133):     elif width == 4:
_utils.py(135):     while dividend >= 1:
_utils.py(136):         tmp = int(number / dividend)
_utils.py(137):         out.append("%02x" % tmp)
_utils.py(138):         number -= tmp * dividend
_utils.py(139):         dividend = int(dividend / 256)
_utils.py(135):     while dividend >= 1:
_utils.py(144):     for d in data:
_utils.py(145):         _rcc_write_number(out, ord(d), 1)
 --- modulename: _utils, funcname: _rcc_write_number
_utils.py(128):     dividend = 1
_utils.py(129):     if width == 2:
_utils.py(131):     elif width == 3:
_utils.py(133):     elif width == 4:
_utils.py(135):     while dividend >= 1:
_utils.py(136):         tmp = int(number / dividend)
_utils.py(137):         out.append("%02x" % tmp)
_utils.py(138):         number -= tmp * dividend
_utils.py(139):         dividend = int(dividend / 256)
_utils.py(135):     while dividend >= 1:
_utils.py(144):     for d in data:
_utils.py(145):         _rcc_write_number(out, ord(d), 1)
 --- modulename: _utils, funcname: _rcc_write_number
_utils.py(128):     dividend = 1
_utils.py(129):     if width == 2:
_utils.py(131):     elif width == 3:
_utils.py(133):     elif width == 4:
_utils.py(135):     while dividend >= 1:
_utils.py(136):         tmp = int(number / dividend)
_utils.py(137):         out.append("%02x" % tmp)
_utils.py(138):         number -= tmp * dividend
_utils.py(139):         dividend = int(dividend / 256)
_utils.py(135):     while dividend >= 1:
_utils.py(144):     for d in data:
_utils.py(145):         _rcc_write_number(out, ord(d), 1)
 --- modulename: _utils, funcname: _rcc_write_number
_utils.py(128):     dividend = 1
_utils.py(129):     if width == 2:
_utils.py(131):     elif width == 3:
_utils.py(133):     elif width == 4:
_utils.py(135):     while dividend >= 1:
_utils.py(136):         tmp = int(number / dividend)
_utils.py(137):         out.append("%02x" % tmp)
_utils.py(138):         number -= tmp * dividend
_utils.py(139):         dividend = int(dividend / 256)
_utils.py(135):     while dividend >= 1:
_utils.py(144):     for d in data:
_utils.py(145):         _rcc_write_number(out, ord(d), 1)
 --- modulename: _utils, funcname: _rcc_write_number
_utils.py(128):     dividend = 1
_utils.py(129):     if width == 2:
_utils.py(131):     elif width == 3:
_utils.py(133):     elif width == 4:
_utils.py(135):     while dividend >= 1:
_utils.py(136):         tmp = int(number / dividend)
_utils.py(137):         out.append("%02x" % tmp)
_utils.py(138):         number -= tmp * dividend
_utils.py(139):         dividend = int(dividend / 256)
_utils.py(135):     while dividend >= 1:
_utils.py(144):     for d in data:
_utils.py(145):         _rcc_write_number(out, ord(d), 1)
 --- modulename: _utils, funcname: _rcc_write_number
_utils.py(128):     dividend = 1
_utils.py(129):     if width == 2:
_utils.py(131):     elif width == 3:
_utils.py(133):     elif width == 4:
_utils.py(135):     while dividend >= 1:
_utils.py(136):         tmp = int(number / dividend)
_utils.py(137):         out.append("%02x" % tmp)
_utils.py(138):         number -= tmp * dividend
_utils.py(139):         dividend = int(dividend / 256)
_utils.py(135):     while dividend >= 1:
_utils.py(144):     for d in data:
_utils.py(145):         _rcc_write_number(out, ord(d), 1)
 --- modulename: _utils, funcname: _rcc_write_number
_utils.py(128):     dividend = 1
_utils.py(129):     if width == 2:
_utils.py(131):     elif width == 3:
_utils.py(133):     elif width == 4:
_utils.py(135):     while dividend >= 1:
_utils.py(136):         tmp = int(number / dividend)
_utils.py(137):         out.append("%02x" % tmp)
_utils.py(138):         number -= tmp * dividend
_utils.py(139):         dividend = int(dividend / 256)
_utils.py(135):     while dividend >= 1:
_utils.py(144):     for d in data:
_utils.py(145):         _rcc_write_number(out, ord(d), 1)
 --- modulename: _utils, funcname: _rcc_write_number
_utils.py(128):     dividend = 1
_utils.py(129):     if width == 2:
_utils.py(131):     elif width == 3:
_utils.py(133):     elif width == 4:
_utils.py(135):     while dividend >= 1:
_utils.py(136):         tmp = int(number / dividend)
_utils.py(137):         out.append("%02x" % tmp)
_utils.py(138):         number -= tmp * dividend
_utils.py(139):         dividend = int(dividend / 256)
_utils.py(135):     while dividend >= 1:
_utils.py(144):     for d in data:
_utils.py(145):         _rcc_write_number(out, ord(d), 1)
 --- modulename: _utils, funcname: _rcc_write_number
_utils.py(128):     dividend = 1
_utils.py(129):     if width == 2:
_utils.py(131):     elif width == 3:
_utils.py(133):     elif width == 4:
_utils.py(135):     while dividend >= 1:
_utils.py(136):         tmp = int(number / dividend)
_utils.py(137):         out.append("%02x" % tmp)
_utils.py(138):         number -= tmp * dividend
_utils.py(139):         dividend = int(dividend / 256)
_utils.py(135):     while dividend >= 1:
_utils.py(144):     for d in data:
_utils.py(145):         _rcc_write_number(out, ord(d), 1)
 --- modulename: _utils, funcname: _rcc_write_number
_utils.py(128):     dividend = 1
_utils.py(129):     if width == 2:
_utils.py(131):     elif width == 3:
_utils.py(133):     elif width == 4:
_utils.py(135):     while dividend >= 1:
_utils.py(136):         tmp = int(number / dividend)
_utils.py(137):         out.append("%02x" % tmp)
_utils.py(138):         number -= tmp * dividend
_utils.py(139):         dividend = int(dividend / 256)
_utils.py(135):     while dividend >= 1:
_utils.py(144):     for d in data:
_utils.py(145):         _rcc_write_number(out, ord(d), 1)
 --- modulename: _utils, funcname: _rcc_write_number
_utils.py(128):     dividend = 1
_utils.py(129):     if width == 2:
_utils.py(131):     elif width == 3:
_utils.py(133):     elif width == 4:
_utils.py(135):     while dividend >= 1:
_utils.py(136):         tmp = int(number / dividend)
_utils.py(137):         out.append("%02x" % tmp)
_utils.py(138):         number -= tmp * dividend
_utils.py(139):         dividend = int(dividend / 256)
_utils.py(135):     while dividend >= 1:
_utils.py(144):     for d in data:
_utils.py(145):         _rcc_write_number(out, ord(d), 1)
 --- modulename: _utils, funcname: _rcc_write_number
_utils.py(128):     dividend = 1
_utils.py(129):     if width == 2:
_utils.py(131):     elif width == 3:
_utils.py(133):     elif width == 4:
_utils.py(135):     while dividend >= 1:
_utils.py(136):         tmp = int(number / dividend)
_utils.py(137):         out.append("%02x" % tmp)
_utils.py(138):         number -= tmp * dividend
_utils.py(139):         dividend = int(dividend / 256)
_utils.py(135):     while dividend >= 1:
_utils.py(144):     for d in data:
_utils.py(145):         _rcc_write_number(out, ord(d), 1)
 --- modulename: _utils, funcname: _rcc_write_number
_utils.py(128):     dividend = 1
_utils.py(129):     if width == 2:
_utils.py(131):     elif width == 3:
_utils.py(133):     elif width == 4:
_utils.py(135):     while dividend >= 1:
_utils.py(136):         tmp = int(number / dividend)
_utils.py(137):         out.append("%02x" % tmp)
_utils.py(138):         number -= tmp * dividend
_utils.py(139):         dividend = int(dividend / 256)
_utils.py(135):     while dividend >= 1:
_utils.py(144):     for d in data:
_utils.py(145):         _rcc_write_number(out, ord(d), 1)
 --- modulename: _utils, funcname: _rcc_write_number
_utils.py(128):     dividend = 1
_utils.py(129):     if width == 2:
_utils.py(131):     elif width == 3:
_utils.py(133):     elif width == 4:
_utils.py(135):     while dividend >= 1:
_utils.py(136):         tmp = int(number / dividend)
_utils.py(137):         out.append("%02x" % tmp)
_utils.py(138):         number -= tmp * dividend
_utils.py(139):         dividend = int(dividend / 256)
_utils.py(135):     while dividend >= 1:
_utils.py(144):     for d in data:
_utils.py(145):         _rcc_write_number(out, ord(d), 1)
 --- modulename: _utils, funcname: _rcc_write_number
_utils.py(128):     dividend = 1
_utils.py(129):     if width == 2:
_utils.py(131):     elif width == 3:
_utils.py(133):     elif width == 4:
_utils.py(135):     while dividend >= 1:
_utils.py(136):         tmp = int(number / dividend)
_utils.py(137):         out.append("%02x" % tmp)
_utils.py(138):         number -= tmp * dividend
_utils.py(139):         dividend = int(dividend / 256)
_utils.py(135):     while dividend >= 1:
_utils.py(144):     for d in data:
_utils.py(145):         _rcc_write_number(out, ord(d), 1)
 --- modulename: _utils, funcname: _rcc_write_number
_utils.py(128):     dividend = 1
_utils.py(129):     if width == 2:
_utils.py(131):     elif width == 3:
_utils.py(133):     elif width == 4:
_utils.py(135):     while dividend >= 1:
_utils.py(136):         tmp = int(number / dividend)
_utils.py(137):         out.append("%02x" % tmp)
_utils.py(138):         number -= tmp * dividend
_utils.py(139):         dividend = int(dividend / 256)
_utils.py(135):     while dividend >= 1:
_utils.py(144):     for d in data:
_utils.py(145):         _rcc_write_number(out, ord(d), 1)
 --- modulename: _utils, funcname: _rcc_write_number
_utils.py(128):     dividend = 1
_utils.py(129):     if width == 2:
_utils.py(131):     elif width == 3:
_utils.py(133):     elif width == 4:
_utils.py(135):     while dividend >= 1:
_utils.py(136):         tmp = int(number / dividend)
_utils.py(137):         out.append("%02x" % tmp)
_utils.py(138):         number -= tmp * dividend
_utils.py(139):         dividend = int(dividend / 256)
_utils.py(135):     while dividend >= 1:
_utils.py(144):     for d in data:
_utils.py(145):         _rcc_write_number(out, ord(d), 1)
 --- modulename: _utils, funcname: _rcc_write_number
_utils.py(128):     dividend = 1
_utils.py(129):     if width == 2:
_utils.py(131):     elif width == 3:
_utils.py(133):     elif width == 4:
_utils.py(135):     while dividend >= 1:
_utils.py(136):         tmp = int(number / dividend)
_utils.py(137):         out.append("%02x" % tmp)
_utils.py(138):         number -= tmp * dividend
_utils.py(139):         dividend = int(dividend / 256)
_utils.py(135):     while dividend >= 1:
_utils.py(144):     for d in data:
_utils.py(145):         _rcc_write_number(out, ord(d), 1)
 --- modulename: _utils, funcname: _rcc_write_number
_utils.py(128):     dividend = 1
_utils.py(129):     if width == 2:
_utils.py(131):     elif width == 3:
_utils.py(133):     elif width == 4:
_utils.py(135):     while dividend >= 1:
_utils.py(136):         tmp = int(number / dividend)
_utils.py(137):         out.append("%02x" % tmp)
_utils.py(138):         number -= tmp * dividend
_utils.py(139):         dividend = int(dividend / 256)
_utils.py(135):     while dividend >= 1:
_utils.py(144):     for d in data:
_utils.py(145):         _rcc_write_number(out, ord(d), 1)
 --- modulename: _utils, funcname: _rcc_write_number
_utils.py(128):     dividend = 1
_utils.py(129):     if width == 2:
_utils.py(131):     elif width == 3:
_utils.py(133):     elif width == 4:
_utils.py(135):     while dividend >= 1:
_utils.py(136):         tmp = int(number / dividend)
_utils.py(137):         out.append("%02x" % tmp)
_utils.py(138):         number -= tmp * dividend
_utils.py(139):         dividend = int(dividend / 256)
_utils.py(135):     while dividend >= 1:
_utils.py(144):     for d in data:
_utils.py(145):         _rcc_write_number(out, ord(d), 1)
 --- modulename: _utils, funcname: _rcc_write_number
_utils.py(128):     dividend = 1
_utils.py(129):     if width == 2:
_utils.py(131):     elif width == 3:
_utils.py(133):     elif width == 4:
_utils.py(135):     while dividend >= 1:
_utils.py(136):         tmp = int(number / dividend)
_utils.py(137):         out.append("%02x" % tmp)
_utils.py(138):         number -= tmp * dividend
_utils.py(139):         dividend = int(dividend / 256)
_utils.py(135):     while dividend >= 1:
_utils.py(144):     for d in data:
_utils.py(145):         _rcc_write_number(out, ord(d), 1)
 --- modulename: _utils, funcname: _rcc_write_number
_utils.py(128):     dividend = 1
_utils.py(129):     if width == 2:
_utils.py(131):     elif width == 3:
_utils.py(133):     elif width == 4:
_utils.py(135):     while dividend >= 1:
_utils.py(136):         tmp = int(number / dividend)
_utils.py(137):         out.append("%02x" % tmp)
_utils.py(138):         number -= tmp * dividend
_utils.py(139):         dividend = int(dividend / 256)
_utils.py(135):     while dividend >= 1:
_utils.py(144):     for d in data:
_utils.py(145):         _rcc_write_number(out, ord(d), 1)
 --- modulename: _utils, funcname: _rcc_write_number
_utils.py(128):     dividend = 1
_utils.py(129):     if width == 2:
_utils.py(131):     elif width == 3:
_utils.py(133):     elif width == 4:
_utils.py(135):     while dividend >= 1:
_utils.py(136):         tmp = int(number / dividend)
_utils.py(137):         out.append("%02x" % tmp)
_utils.py(138):         number -= tmp * dividend
_utils.py(139):         dividend = int(dividend / 256)
_utils.py(135):     while dividend >= 1:
_utils.py(144):     for d in data:
_utils.py(145):         _rcc_write_number(out, ord(d), 1)
 --- modulename: _utils, funcname: _rcc_write_number
_utils.py(128):     dividend = 1
_utils.py(129):     if width == 2:
_utils.py(131):     elif width == 3:
_utils.py(133):     elif width == 4:
_utils.py(135):     while dividend >= 1:
_utils.py(136):         tmp = int(number / dividend)
_utils.py(137):         out.append("%02x" % tmp)
_utils.py(138):         number -= tmp * dividend
_utils.py(139):         dividend = int(dividend / 256)
_utils.py(135):     while dividend >= 1:
_utils.py(144):     for d in data:
_utils.py(145):         _rcc_write_number(out, ord(d), 1)
 --- modulename: _utils, funcname: _rcc_write_number
_utils.py(128):     dividend = 1
_utils.py(129):     if width == 2:
_utils.py(131):     elif width == 3:
_utils.py(133):     elif width == 4:
_utils.py(135):     while dividend >= 1:
_utils.py(136):         tmp = int(number / dividend)
_utils.py(137):         out.append("%02x" % tmp)
_utils.py(138):         number -= tmp * dividend
_utils.py(139):         dividend = int(dividend / 256)
_utils.py(135):     while dividend >= 1:
_utils.py(144):     for d in data:
_utils.py(145):         _rcc_write_number(out, ord(d), 1)
 --- modulename: _utils, funcname: _rcc_write_number
_utils.py(128):     dividend = 1
_utils.py(129):     if width == 2:
_utils.py(131):     elif width == 3:
_utils.py(133):     elif width == 4:
_utils.py(135):     while dividend >= 1:
_utils.py(136):         tmp = int(number / dividend)
_utils.py(137):         out.append("%02x" % tmp)
_utils.py(138):         number -= tmp * dividend
_utils.py(139):         dividend = int(dividend / 256)
_utils.py(135):     while dividend >= 1:
_utils.py(144):     for d in data:
_utils.py(145):         _rcc_write_number(out, ord(d), 1)
 --- modulename: _utils, funcname: _rcc_write_number
_utils.py(128):     dividend = 1
_utils.py(129):     if width == 2:
_utils.py(131):     elif width == 3:
_utils.py(133):     elif width == 4:
_utils.py(135):     while dividend >= 1:
_utils.py(136):         tmp = int(number / dividend)
_utils.py(137):         out.append("%02x" % tmp)
_utils.py(138):         number -= tmp * dividend
_utils.py(139):         dividend = int(dividend / 256)
_utils.py(135):     while dividend >= 1:
_utils.py(144):     for d in data:
_utils.py(145):         _rcc_write_number(out, ord(d), 1)
 --- modulename: _utils, funcname: _rcc_write_number
_utils.py(128):     dividend = 1
_utils.py(129):     if width == 2:
_utils.py(131):     elif width == 3:
_utils.py(133):     elif width == 4:
_utils.py(135):     while dividend >= 1:
_utils.py(136):         tmp = int(number / dividend)
_utils.py(137):         out.append("%02x" % tmp)
_utils.py(138):         number -= tmp * dividend
_utils.py(139):         dividend = int(dividend / 256)
_utils.py(135):     while dividend >= 1:
_utils.py(144):     for d in data:
_utils.py(145):         _rcc_write_number(out, ord(d), 1)
 --- modulename: _utils, funcname: _rcc_write_number
_utils.py(128):     dividend = 1
_utils.py(129):     if width == 2:
_utils.py(131):     elif width == 3:
_utils.py(133):     elif width == 4:
_utils.py(135):     while dividend >= 1:
_utils.py(136):         tmp = int(number / dividend)
_utils.py(137):         out.append("%02x" % tmp)
_utils.py(138):         number -= tmp * dividend
_utils.py(139):         dividend = int(dividend / 256)
_utils.py(135):     while dividend >= 1:
_utils.py(144):     for d in data:
_utils.py(145):         _rcc_write_number(out, ord(d), 1)
 --- modulename: _utils, funcname: _rcc_write_number
_utils.py(128):     dividend = 1
_utils.py(129):     if width == 2:
_utils.py(131):     elif width == 3:
_utils.py(133):     elif width == 4:
_utils.py(135):     while dividend >= 1:
_utils.py(136):         tmp = int(number / dividend)
_utils.py(137):         out.append("%02x" % tmp)
_utils.py(138):         number -= tmp * dividend
_utils.py(139):         dividend = int(dividend / 256)
_utils.py(135):     while dividend >= 1:
_utils.py(144):     for d in data:
_utils.py(145):         _rcc_write_number(out, ord(d), 1)
 --- modulename: _utils, funcname: _rcc_write_number
_utils.py(128):     dividend = 1
_utils.py(129):     if width == 2:
_utils.py(131):     elif width == 3:
_utils.py(133):     elif width == 4:
_utils.py(135):     while dividend >= 1:
_utils.py(136):         tmp = int(number / dividend)
_utils.py(137):         out.append("%02x" % tmp)
_utils.py(138):         number -= tmp * dividend
_utils.py(139):         dividend = int(dividend / 256)
_utils.py(135):     while dividend >= 1:
_utils.py(144):     for d in data:
_utils.py(145):         _rcc_write_number(out, ord(d), 1)
 --- modulename: _utils, funcname: _rcc_write_number
_utils.py(128):     dividend = 1
_utils.py(129):     if width == 2:
_utils.py(131):     elif width == 3:
_utils.py(133):     elif width == 4:
_utils.py(135):     while dividend >= 1:
_utils.py(136):         tmp = int(number / dividend)
_utils.py(137):         out.append("%02x" % tmp)
_utils.py(138):         number -= tmp * dividend
_utils.py(139):         dividend = int(dividend / 256)
_utils.py(135):     while dividend >= 1:
_utils.py(144):     for d in data:
_utils.py(145):         _rcc_write_number(out, ord(d), 1)
 --- modulename: _utils, funcname: _rcc_write_number
_utils.py(128):     dividend = 1
_utils.py(129):     if width == 2:
_utils.py(131):     elif width == 3:
_utils.py(133):     elif width == 4:
_utils.py(135):     while dividend >= 1:
_utils.py(136):         tmp = int(number / dividend)
_utils.py(137):         out.append("%02x" % tmp)
_utils.py(138):         number -= tmp * dividend
_utils.py(139):         dividend = int(dividend / 256)
_utils.py(135):     while dividend >= 1:
_utils.py(144):     for d in data:
_utils.py(145):         _rcc_write_number(out, ord(d), 1)
 --- modulename: _utils, funcname: _rcc_write_number
_utils.py(128):     dividend = 1
_utils.py(129):     if width == 2:
_utils.py(131):     elif width == 3:
_utils.py(133):     elif width == 4:
_utils.py(135):     while dividend >= 1:
_utils.py(136):         tmp = int(number / dividend)
_utils.py(137):         out.append("%02x" % tmp)
_utils.py(138):         number -= tmp * dividend
_utils.py(139):         dividend = int(dividend / 256)
_utils.py(135):     while dividend >= 1:
_utils.py(144):     for d in data:
_utils.py(145):         _rcc_write_number(out, ord(d), 1)
 --- modulename: _utils, funcname: _rcc_write_number
_utils.py(128):     dividend = 1
_utils.py(129):     if width == 2:
_utils.py(131):     elif width == 3:
_utils.py(133):     elif width == 4:
_utils.py(135):     while dividend >= 1:
_utils.py(136):         tmp = int(number / dividend)
_utils.py(137):         out.append("%02x" % tmp)
_utils.py(138):         number -= tmp * dividend
_utils.py(139):         dividend = int(dividend / 256)
_utils.py(135):     while dividend >= 1:
_utils.py(144):     for d in data:
_utils.py(145):         _rcc_write_number(out, ord(d), 1)
 --- modulename: _utils, funcname: _rcc_write_number
_utils.py(128):     dividend = 1
_utils.py(129):     if width == 2:
_utils.py(131):     elif width == 3:
_utils.py(133):     elif width == 4:
_utils.py(135):     while dividend >= 1:
_utils.py(136):         tmp = int(number / dividend)
_utils.py(137):         out.append("%02x" % tmp)
_utils.py(138):         number -= tmp * dividend
_utils.py(139):         dividend = int(dividend / 256)
_utils.py(135):     while dividend >= 1:
_utils.py(144):     for d in data:
_utils.py(145):         _rcc_write_number(out, ord(d), 1)
 --- modulename: _utils, funcname: _rcc_write_number
_utils.py(128):     dividend = 1
_utils.py(129):     if width == 2:
_utils.py(131):     elif width == 3:
_utils.py(133):     elif width == 4:
_utils.py(135):     while dividend >= 1:
_utils.py(136):         tmp = int(number / dividend)
_utils.py(137):         out.append("%02x" % tmp)
_utils.py(138):         number -= tmp * dividend
_utils.py(139):         dividend = int(dividend / 256)
_utils.py(135):     while dividend >= 1:
_utils.py(144):     for d in data:
_utils.py(145):         _rcc_write_number(out, ord(d), 1)
 --- modulename: _utils, funcname: _rcc_write_number
_utils.py(128):     dividend = 1
_utils.py(129):     if width == 2:
_utils.py(131):     elif width == 3:
_utils.py(133):     elif width == 4:
_utils.py(135):     while dividend >= 1:
_utils.py(136):         tmp = int(number / dividend)
_utils.py(137):         out.append("%02x" % tmp)
_utils.py(138):         number -= tmp * dividend
_utils.py(139):         dividend = int(dividend / 256)
_utils.py(135):     while dividend >= 1:
_utils.py(144):     for d in data:
_utils.py(145):         _rcc_write_number(out, ord(d), 1)
 --- modulename: _utils, funcname: _rcc_write_number
_utils.py(128):     dividend = 1
_utils.py(129):     if width == 2:
_utils.py(131):     elif width == 3:
_utils.py(133):     elif width == 4:
_utils.py(135):     while dividend >= 1:
_utils.py(136):         tmp = int(number / dividend)
_utils.py(137):         out.append("%02x" % tmp)
_utils.py(138):         number -= tmp * dividend
_utils.py(139):         dividend = int(dividend / 256)
_utils.py(135):     while dividend >= 1:
_utils.py(144):     for d in data:
_utils.py(145):         _rcc_write_number(out, ord(d), 1)
 --- modulename: _utils, funcname: _rcc_write_number
_utils.py(128):     dividend = 1
_utils.py(129):     if width == 2:
_utils.py(131):     elif width == 3:
_utils.py(133):     elif width == 4:
_utils.py(135):     while dividend >= 1:
_utils.py(136):         tmp = int(number / dividend)
_utils.py(137):         out.append("%02x" % tmp)
_utils.py(138):         number -= tmp * dividend
_utils.py(139):         dividend = int(dividend / 256)
_utils.py(135):     while dividend >= 1:
_utils.py(144):     for d in data:
_utils.py(145):         _rcc_write_number(out, ord(d), 1)
 --- modulename: _utils, funcname: _rcc_write_number
_utils.py(128):     dividend = 1
_utils.py(129):     if width == 2:
_utils.py(131):     elif width == 3:
_utils.py(133):     elif width == 4:
_utils.py(135):     while dividend >= 1:
_utils.py(136):         tmp = int(number / dividend)
_utils.py(137):         out.append("%02x" % tmp)
_utils.py(138):         number -= tmp * dividend
_utils.py(139):         dividend = int(dividend / 256)
_utils.py(135):     while dividend >= 1:
_utils.py(144):     for d in data:
_utils.py(145):         _rcc_write_number(out, ord(d), 1)
 --- modulename: _utils, funcname: _rcc_write_number
_utils.py(128):     dividend = 1
_utils.py(129):     if width == 2:
_utils.py(131):     elif width == 3:
_utils.py(133):     elif width == 4:
_utils.py(135):     while dividend >= 1:
_utils.py(136):         tmp = int(number / dividend)
_utils.py(137):         out.append("%02x" % tmp)
_utils.py(138):         number -= tmp * dividend
_utils.py(139):         dividend = int(dividend / 256)
_utils.py(135):     while dividend >= 1:
_utils.py(144):     for d in data:
_utils.py(145):         _rcc_write_number(out, ord(d), 1)
 --- modulename: _utils, funcname: _rcc_write_number
_utils.py(128):     dividend = 1
_utils.py(129):     if width == 2:
_utils.py(131):     elif width == 3:
_utils.py(133):     elif width == 4:
_utils.py(135):     while dividend >= 1:
_utils.py(136):         tmp = int(number / dividend)
_utils.py(137):         out.append("%02x" % tmp)
_utils.py(138):         number -= tmp * dividend
_utils.py(139):         dividend = int(dividend / 256)
_utils.py(135):     while dividend >= 1:
_utils.py(144):     for d in data:
_utils.py(145):         _rcc_write_number(out, ord(d), 1)
 --- modulename: _utils, funcname: _rcc_write_number
_utils.py(128):     dividend = 1
_utils.py(129):     if width == 2:
_utils.py(131):     elif width == 3:
_utils.py(133):     elif width == 4:
_utils.py(135):     while dividend >= 1:
_utils.py(136):         tmp = int(number / dividend)
_utils.py(137):         out.append("%02x" % tmp)
_utils.py(138):         number -= tmp * dividend
_utils.py(139):         dividend = int(dividend / 256)
_utils.py(135):     while dividend >= 1:
_utils.py(144):     for d in data:
_utils.py(145):         _rcc_write_number(out, ord(d), 1)
 --- modulename: _utils, funcname: _rcc_write_number
_utils.py(128):     dividend = 1
_utils.py(129):     if width == 2:
_utils.py(131):     elif width == 3:
_utils.py(133):     elif width == 4:
_utils.py(135):     while dividend >= 1:
_utils.py(136):         tmp = int(number / dividend)
_utils.py(137):         out.append("%02x" % tmp)
_utils.py(138):         number -= tmp * dividend
_utils.py(139):         dividend = int(dividend / 256)
_utils.py(135):     while dividend >= 1:
_utils.py(144):     for d in data:
_utils.py(145):         _rcc_write_number(out, ord(d), 1)
 --- modulename: _utils, funcname: _rcc_write_number
_utils.py(128):     dividend = 1
_utils.py(129):     if width == 2:
_utils.py(131):     elif width == 3:
_utils.py(133):     elif width == 4:
_utils.py(135):     while dividend >= 1:
_utils.py(136):         tmp = int(number / dividend)
_utils.py(137):         out.append("%02x" % tmp)
_utils.py(138):         number -= tmp * dividend
_utils.py(139):         dividend = int(dividend / 256)
_utils.py(135):     while dividend >= 1:
_utils.py(144):     for d in data:
_utils.py(145):         _rcc_write_number(out, ord(d), 1)
 --- modulename: _utils, funcname: _rcc_write_number
_utils.py(128):     dividend = 1
_utils.py(129):     if width == 2:
_utils.py(131):     elif width == 3:
_utils.py(133):     elif width == 4:
_utils.py(135):     while dividend >= 1:
_utils.py(136):         tmp = int(number / dividend)
_utils.py(137):         out.append("%02x" % tmp)
_utils.py(138):         number -= tmp * dividend
_utils.py(139):         dividend = int(dividend / 256)
_utils.py(135):     while dividend >= 1:
_utils.py(144):     for d in data:
_utils.py(145):         _rcc_write_number(out, ord(d), 1)
 --- modulename: _utils, funcname: _rcc_write_number
_utils.py(128):     dividend = 1
_utils.py(129):     if width == 2:
_utils.py(131):     elif width == 3:
_utils.py(133):     elif width == 4:
_utils.py(135):     while dividend >= 1:
_utils.py(136):         tmp = int(number / dividend)
_utils.py(137):         out.append("%02x" % tmp)
_utils.py(138):         number -= tmp * dividend
_utils.py(139):         dividend = int(dividend / 256)
_utils.py(135):     while dividend >= 1:
_utils.py(144):     for d in data:
_utils.py(145):         _rcc_write_number(out, ord(d), 1)
 --- modulename: _utils, funcname: _rcc_write_number
_utils.py(128):     dividend = 1
_utils.py(129):     if width == 2:
_utils.py(131):     elif width == 3:
_utils.py(133):     elif width == 4:
_utils.py(135):     while dividend >= 1:
_utils.py(136):         tmp = int(number / dividend)
_utils.py(137):         out.append("%02x" % tmp)
_utils.py(138):         number -= tmp * dividend
_utils.py(139):         dividend = int(dividend / 256)
_utils.py(135):     while dividend >= 1:
_utils.py(144):     for d in data:
_utils.py(145):         _rcc_write_number(out, ord(d), 1)
 --- modulename: _utils, funcname: _rcc_write_number
_utils.py(128):     dividend = 1
_utils.py(129):     if width == 2:
_utils.py(131):     elif width == 3:
_utils.py(133):     elif width == 4:
_utils.py(135):     while dividend >= 1:
_utils.py(136):         tmp = int(number / dividend)
_utils.py(137):         out.append("%02x" % tmp)
_utils.py(138):         number -= tmp * dividend
_utils.py(139):         dividend = int(dividend / 256)
_utils.py(135):     while dividend >= 1:
_utils.py(144):     for d in data:
_utils.py(145):         _rcc_write_number(out, ord(d), 1)
 --- modulename: _utils, funcname: _rcc_write_number
_utils.py(128):     dividend = 1
_utils.py(129):     if width == 2:
_utils.py(131):     elif width == 3:
_utils.py(133):     elif width == 4:
_utils.py(135):     while dividend >= 1:
_utils.py(136):         tmp = int(number / dividend)
_utils.py(137):         out.append("%02x" % tmp)
_utils.py(138):         number -= tmp * dividend
_utils.py(139):         dividend = int(dividend / 256)
_utils.py(135):     while dividend >= 1:
_utils.py(144):     for d in data:
_utils.py(145):         _rcc_write_number(out, ord(d), 1)
 --- modulename: _utils, funcname: _rcc_write_number
_utils.py(128):     dividend = 1
_utils.py(129):     if width == 2:
_utils.py(131):     elif width == 3:
_utils.py(133):     elif width == 4:
_utils.py(135):     while dividend >= 1:
_utils.py(136):         tmp = int(number / dividend)
_utils.py(137):         out.append("%02x" % tmp)
_utils.py(138):         number -= tmp * dividend
_utils.py(139):         dividend = int(dividend / 256)
_utils.py(135):     while dividend >= 1:
_utils.py(144):     for d in data:
_utils.py(145):         _rcc_write_number(out, ord(d), 1)
 --- modulename: _utils, funcname: _rcc_write_number
_utils.py(128):     dividend = 1
_utils.py(129):     if width == 2:
_utils.py(131):     elif width == 3:
_utils.py(133):     elif width == 4:
_utils.py(135):     while dividend >= 1:
_utils.py(136):         tmp = int(number / dividend)
_utils.py(137):         out.append("%02x" % tmp)
_utils.py(138):         number -= tmp * dividend
_utils.py(139):         dividend = int(dividend / 256)
_utils.py(135):     while dividend >= 1:
_utils.py(144):     for d in data:
_utils.py(145):         _rcc_write_number(out, ord(d), 1)
 --- modulename: _utils, funcname: _rcc_write_number
_utils.py(128):     dividend = 1
_utils.py(129):     if width == 2:
_utils.py(131):     elif width == 3:
_utils.py(133):     elif width == 4:
_utils.py(135):     while dividend >= 1:
_utils.py(136):         tmp = int(number / dividend)
_utils.py(137):         out.append("%02x" % tmp)
_utils.py(138):         number -= tmp * dividend
_utils.py(139):         dividend = int(dividend / 256)
_utils.py(135):     while dividend >= 1:
_utils.py(144):     for d in data:
_utils.py(145):         _rcc_write_number(out, ord(d), 1)
 --- modulename: _utils, funcname: _rcc_write_number
_utils.py(128):     dividend = 1
_utils.py(129):     if width == 2:
_utils.py(131):     elif width == 3:
_utils.py(133):     elif width == 4:
_utils.py(135):     while dividend >= 1:
_utils.py(136):         tmp = int(number / dividend)
_utils.py(137):         out.append("%02x" % tmp)
_utils.py(138):         number -= tmp * dividend
_utils.py(139):         dividend = int(dividend / 256)
_utils.py(135):     while dividend >= 1:
_utils.py(144):     for d in data:
_utils.py(145):         _rcc_write_number(out, ord(d), 1)
 --- modulename: _utils, funcname: _rcc_write_number
_utils.py(128):     dividend = 1
_utils.py(129):     if width == 2:
_utils.py(131):     elif width == 3:
_utils.py(133):     elif width == 4:
_utils.py(135):     while dividend >= 1:
_utils.py(136):         tmp = int(number / dividend)
_utils.py(137):         out.append("%02x" % tmp)
_utils.py(138):         number -= tmp * dividend
_utils.py(139):         dividend = int(dividend / 256)
_utils.py(135):     while dividend >= 1:
_utils.py(144):     for d in data:
_utils.py(145):         _rcc_write_number(out, ord(d), 1)
 --- modulename: _utils, funcname: _rcc_write_number
_utils.py(128):     dividend = 1
_utils.py(129):     if width == 2:
_utils.py(131):     elif width == 3:
_utils.py(133):     elif width == 4:
_utils.py(135):     while dividend >= 1:
_utils.py(136):         tmp = int(number / dividend)
_utils.py(137):         out.append("%02x" % tmp)
_utils.py(138):         number -= tmp * dividend
_utils.py(139):         dividend = int(dividend / 256)
_utils.py(135):     while dividend >= 1:
_utils.py(144):     for d in data:
_utils.py(145):         _rcc_write_number(out, ord(d), 1)
 --- modulename: _utils, funcname: _rcc_write_number
_utils.py(128):     dividend = 1
_utils.py(129):     if width == 2:
_utils.py(131):     elif width == 3:
_utils.py(133):     elif width == 4:
_utils.py(135):     while dividend >= 1:
_utils.py(136):         tmp = int(number / dividend)
_utils.py(137):         out.append("%02x" % tmp)
_utils.py(138):         number -= tmp * dividend
_utils.py(139):         dividend = int(dividend / 256)
_utils.py(135):     while dividend >= 1:
_utils.py(144):     for d in data:
_utils.py(145):         _rcc_write_number(out, ord(d), 1)
 --- modulename: _utils, funcname: _rcc_write_number
_utils.py(128):     dividend = 1
_utils.py(129):     if width == 2:
_utils.py(131):     elif width == 3:
_utils.py(133):     elif width == 4:
_utils.py(135):     while dividend >= 1:
_utils.py(136):         tmp = int(number / dividend)
_utils.py(137):         out.append("%02x" % tmp)
_utils.py(138):         number -= tmp * dividend
_utils.py(139):         dividend = int(dividend / 256)
_utils.py(135):     while dividend >= 1:
_utils.py(144):     for d in data:
_utils.py(145):         _rcc_write_number(out, ord(d), 1)
 --- modulename: _utils, funcname: _rcc_write_number
_utils.py(128):     dividend = 1
_utils.py(129):     if width == 2:
_utils.py(131):     elif width == 3:
_utils.py(133):     elif width == 4:
_utils.py(135):     while dividend >= 1:
_utils.py(136):         tmp = int(number / dividend)
_utils.py(137):         out.append("%02x" % tmp)
_utils.py(138):         number -= tmp * dividend
_utils.py(139):         dividend = int(dividend / 256)
_utils.py(135):     while dividend >= 1:
_utils.py(144):     for d in data:
_utils.py(145):         _rcc_write_number(out, ord(d), 1)
 --- modulename: _utils, funcname: _rcc_write_number
_utils.py(128):     dividend = 1
_utils.py(129):     if width == 2:
_utils.py(131):     elif width == 3:
_utils.py(133):     elif width == 4:
_utils.py(135):     while dividend >= 1:
_utils.py(136):         tmp = int(number / dividend)
_utils.py(137):         out.append("%02x" % tmp)
_utils.py(138):         number -= tmp * dividend
_utils.py(139):         dividend = int(dividend / 256)
_utils.py(135):     while dividend >= 1:
_utils.py(144):     for d in data:
_utils.py(145):         _rcc_write_number(out, ord(d), 1)
 --- modulename: _utils, funcname: _rcc_write_number
_utils.py(128):     dividend = 1
_utils.py(129):     if width == 2:
_utils.py(131):     elif width == 3:
_utils.py(133):     elif width == 4:
_utils.py(135):     while dividend >= 1:
_utils.py(136):         tmp = int(number / dividend)
_utils.py(137):         out.append("%02x" % tmp)
_utils.py(138):         number -= tmp * dividend
_utils.py(139):         dividend = int(dividend / 256)
_utils.py(135):     while dividend >= 1:
_utils.py(144):     for d in data:
_utils.py(145):         _rcc_write_number(out, ord(d), 1)
 --- modulename: _utils, funcname: _rcc_write_number
_utils.py(128):     dividend = 1
_utils.py(129):     if width == 2:
_utils.py(131):     elif width == 3:
_utils.py(133):     elif width == 4:
_utils.py(135):     while dividend >= 1:
_utils.py(136):         tmp = int(number / dividend)
_utils.py(137):         out.append("%02x" % tmp)
_utils.py(138):         number -= tmp * dividend
_utils.py(139):         dividend = int(dividend / 256)
_utils.py(135):     while dividend >= 1:
_utils.py(144):     for d in data:
_utils.py(145):         _rcc_write_number(out, ord(d), 1)
 --- modulename: _utils, funcname: _rcc_write_number
_utils.py(128):     dividend = 1
_utils.py(129):     if width == 2:
_utils.py(131):     elif width == 3:
_utils.py(133):     elif width == 4:
_utils.py(135):     while dividend >= 1:
_utils.py(136):         tmp = int(number / dividend)
_utils.py(137):         out.append("%02x" % tmp)
_utils.py(138):         number -= tmp * dividend
_utils.py(139):         dividend = int(dividend / 256)
_utils.py(135):     while dividend >= 1:
_utils.py(144):     for d in data:
_utils.py(145):         _rcc_write_number(out, ord(d), 1)
 --- modulename: _utils, funcname: _rcc_write_number
_utils.py(128):     dividend = 1
_utils.py(129):     if width == 2:
_utils.py(131):     elif width == 3:
_utils.py(133):     elif width == 4:
_utils.py(135):     while dividend >= 1:
_utils.py(136):         tmp = int(number / dividend)
_utils.py(137):         out.append("%02x" % tmp)
_utils.py(138):         number -= tmp * dividend
_utils.py(139):         dividend = int(dividend / 256)
_utils.py(135):     while dividend >= 1:
_utils.py(144):     for d in data:
_utils.py(145):         _rcc_write_number(out, ord(d), 1)
 --- modulename: _utils, funcname: _rcc_write_number
_utils.py(128):     dividend = 1
_utils.py(129):     if width == 2:
_utils.py(131):     elif width == 3:
_utils.py(133):     elif width == 4:
_utils.py(135):     while dividend >= 1:
_utils.py(136):         tmp = int(number / dividend)
_utils.py(137):         out.append("%02x" % tmp)
_utils.py(138):         number -= tmp * dividend
_utils.py(139):         dividend = int(dividend / 256)
_utils.py(135):     while dividend >= 1:
_utils.py(144):     for d in data:
_utils.py(145):         _rcc_write_number(out, ord(d), 1)
 --- modulename: _utils, funcname: _rcc_write_number
_utils.py(128):     dividend = 1
_utils.py(129):     if width == 2:
_utils.py(131):     elif width == 3:
_utils.py(133):     elif width == 4:
_utils.py(135):     while dividend >= 1:
_utils.py(136):         tmp = int(number / dividend)
_utils.py(137):         out.append("%02x" % tmp)
_utils.py(138):         number -= tmp * dividend
_utils.py(139):         dividend = int(dividend / 256)
_utils.py(135):     while dividend >= 1:
_utils.py(144):     for d in data:
_utils.py(145):         _rcc_write_number(out, ord(d), 1)
 --- modulename: _utils, funcname: _rcc_write_number
_utils.py(128):     dividend = 1
_utils.py(129):     if width == 2:
_utils.py(131):     elif width == 3:
_utils.py(133):     elif width == 4:
_utils.py(135):     while dividend >= 1:
_utils.py(136):         tmp = int(number / dividend)
_utils.py(137):         out.append("%02x" % tmp)
_utils.py(138):         number -= tmp * dividend
_utils.py(139):         dividend = int(dividend / 256)
_utils.py(135):     while dividend >= 1:
_utils.py(144):     for d in data:
_utils.py(145):         _rcc_write_number(out, ord(d), 1)
 --- modulename: _utils, funcname: _rcc_write_number
_utils.py(128):     dividend = 1
_utils.py(129):     if width == 2:
_utils.py(131):     elif width == 3:
_utils.py(133):     elif width == 4:
_utils.py(135):     while dividend >= 1:
_utils.py(136):         tmp = int(number / dividend)
_utils.py(137):         out.append("%02x" % tmp)
_utils.py(138):         number -= tmp * dividend
_utils.py(139):         dividend = int(dividend / 256)
_utils.py(135):     while dividend >= 1:
_utils.py(144):     for d in data:
_utils.py(145):         _rcc_write_number(out, ord(d), 1)
 --- modulename: _utils, funcname: _rcc_write_number
_utils.py(128):     dividend = 1
_utils.py(129):     if width == 2:
_utils.py(131):     elif width == 3:
_utils.py(133):     elif width == 4:
_utils.py(135):     while dividend >= 1:
_utils.py(136):         tmp = int(number / dividend)
_utils.py(137):         out.append("%02x" % tmp)
_utils.py(138):         number -= tmp * dividend
_utils.py(139):         dividend = int(dividend / 256)
_utils.py(135):     while dividend >= 1:
_utils.py(144):     for d in data:
_utils.py(145):         _rcc_write_number(out, ord(d), 1)
 --- modulename: _utils, funcname: _rcc_write_number
_utils.py(128):     dividend = 1
_utils.py(129):     if width == 2:
_utils.py(131):     elif width == 3:
_utils.py(133):     elif width == 4:
_utils.py(135):     while dividend >= 1:
_utils.py(136):         tmp = int(number / dividend)
_utils.py(137):         out.append("%02x" % tmp)
_utils.py(138):         number -= tmp * dividend
_utils.py(139):         dividend = int(dividend / 256)
_utils.py(135):     while dividend >= 1:
_utils.py(144):     for d in data:
_utils.py(145):         _rcc_write_number(out, ord(d), 1)
 --- modulename: _utils, funcname: _rcc_write_number
_utils.py(128):     dividend = 1
_utils.py(129):     if width == 2:
_utils.py(131):     elif width == 3:
_utils.py(133):     elif width == 4:
_utils.py(135):     while dividend >= 1:
_utils.py(136):         tmp = int(number / dividend)
_utils.py(137):         out.append("%02x" % tmp)
_utils.py(138):         number -= tmp * dividend
_utils.py(139):         dividend = int(dividend / 256)
_utils.py(135):     while dividend >= 1:
_utils.py(144):     for d in data:
_utils.py(145):         _rcc_write_number(out, ord(d), 1)
 --- modulename: _utils, funcname: _rcc_write_number
_utils.py(128):     dividend = 1
_utils.py(129):     if width == 2:
_utils.py(131):     elif width == 3:
_utils.py(133):     elif width == 4:
_utils.py(135):     while dividend >= 1:
_utils.py(136):         tmp = int(number / dividend)
_utils.py(137):         out.append("%02x" % tmp)
_utils.py(138):         number -= tmp * dividend
_utils.py(139):         dividend = int(dividend / 256)
_utils.py(135):     while dividend >= 1:
_utils.py(144):     for d in data:
_utils.py(145):         _rcc_write_number(out, ord(d), 1)
 --- modulename: _utils, funcname: _rcc_write_number
_utils.py(128):     dividend = 1
_utils.py(129):     if width == 2:
_utils.py(131):     elif width == 3:
_utils.py(133):     elif width == 4:
_utils.py(135):     while dividend >= 1:
_utils.py(136):         tmp = int(number / dividend)
_utils.py(137):         out.append("%02x" % tmp)
_utils.py(138):         number -= tmp * dividend
_utils.py(139):         dividend = int(dividend / 256)
_utils.py(135):     while dividend >= 1:
_utils.py(144):     for d in data:
_utils.py(145):         _rcc_write_number(out, ord(d), 1)
 --- modulename: _utils, funcname: _rcc_write_number
_utils.py(128):     dividend = 1
_utils.py(129):     if width == 2:
_utils.py(131):     elif width == 3:
_utils.py(133):     elif width == 4:
_utils.py(135):     while dividend >= 1:
_utils.py(136):         tmp = int(number / dividend)
_utils.py(137):         out.append("%02x" % tmp)
_utils.py(138):         number -= tmp * dividend
_utils.py(139):         dividend = int(dividend / 256)
_utils.py(135):     while dividend >= 1:
_utils.py(144):     for d in data:
_utils.py(145):         _rcc_write_number(out, ord(d), 1)
 --- modulename: _utils, funcname: _rcc_write_number
_utils.py(128):     dividend = 1
_utils.py(129):     if width == 2:
_utils.py(131):     elif width == 3:
_utils.py(133):     elif width == 4:
_utils.py(135):     while dividend >= 1:
_utils.py(136):         tmp = int(number / dividend)
_utils.py(137):         out.append("%02x" % tmp)
_utils.py(138):         number -= tmp * dividend
_utils.py(139):         dividend = int(dividend / 256)
_utils.py(135):     while dividend >= 1:
_utils.py(144):     for d in data:
_utils.py(145):         _rcc_write_number(out, ord(d), 1)
 --- modulename: _utils, funcname: _rcc_write_number
_utils.py(128):     dividend = 1
_utils.py(129):     if width == 2:
_utils.py(131):     elif width == 3:
_utils.py(133):     elif width == 4:
_utils.py(135):     while dividend >= 1:
_utils.py(136):         tmp = int(number / dividend)
_utils.py(137):         out.append("%02x" % tmp)
_utils.py(138):         number -= tmp * dividend
_utils.py(139):         dividend = int(dividend / 256)
_utils.py(135):     while dividend >= 1:
_utils.py(144):     for d in data:
_utils.py(145):         _rcc_write_number(out, ord(d), 1)
 --- modulename: _utils, funcname: _rcc_write_number
_utils.py(128):     dividend = 1
_utils.py(129):     if width == 2:
_utils.py(131):     elif width == 3:
_utils.py(133):     elif width == 4:
_utils.py(135):     while dividend >= 1:
_utils.py(136):         tmp = int(number / dividend)
_utils.py(137):         out.append("%02x" % tmp)
_utils.py(138):         number -= tmp * dividend
_utils.py(139):         dividend = int(dividend / 256)
_utils.py(135):     while dividend >= 1:
_utils.py(144):     for d in data:
_utils.py(145):         _rcc_write_number(out, ord(d), 1)
 --- modulename: _utils, funcname: _rcc_write_number
_utils.py(128):     dividend = 1
_utils.py(129):     if width == 2:
_utils.py(131):     elif width == 3:
_utils.py(133):     elif width == 4:
_utils.py(135):     while dividend >= 1:
_utils.py(136):         tmp = int(number / dividend)
_utils.py(137):         out.append("%02x" % tmp)
_utils.py(138):         number -= tmp * dividend
_utils.py(139):         dividend = int(dividend / 256)
_utils.py(135):     while dividend >= 1:
_utils.py(144):     for d in data:
_utils.py(145):         _rcc_write_number(out, ord(d), 1)
 --- modulename: _utils, funcname: _rcc_write_number
_utils.py(128):     dividend = 1
_utils.py(129):     if width == 2:
_utils.py(131):     elif width == 3:
_utils.py(133):     elif width == 4:
_utils.py(135):     while dividend >= 1:
_utils.py(136):         tmp = int(number / dividend)
_utils.py(137):         out.append("%02x" % tmp)
_utils.py(138):         number -= tmp * dividend
_utils.py(139):         dividend = int(dividend / 256)
_utils.py(135):     while dividend >= 1:
_utils.py(144):     for d in data:
_utils.py(145):         _rcc_write_number(out, ord(d), 1)
 --- modulename: _utils, funcname: _rcc_write_number
_utils.py(128):     dividend = 1
_utils.py(129):     if width == 2:
_utils.py(131):     elif width == 3:
_utils.py(133):     elif width == 4:
_utils.py(135):     while dividend >= 1:
_utils.py(136):         tmp = int(number / dividend)
_utils.py(137):         out.append("%02x" % tmp)
_utils.py(138):         number -= tmp * dividend
_utils.py(139):         dividend = int(dividend / 256)
_utils.py(135):     while dividend >= 1:
_utils.py(144):     for d in data:
_utils.py(145):         _rcc_write_number(out, ord(d), 1)
 --- modulename: _utils, funcname: _rcc_write_number
_utils.py(128):     dividend = 1
_utils.py(129):     if width == 2:
_utils.py(131):     elif width == 3:
_utils.py(133):     elif width == 4:
_utils.py(135):     while dividend >= 1:
_utils.py(136):         tmp = int(number / dividend)
_utils.py(137):         out.append("%02x" % tmp)
_utils.py(138):         number -= tmp * dividend
_utils.py(139):         dividend = int(dividend / 256)
_utils.py(135):     while dividend >= 1:
_utils.py(144):     for d in data:
_utils.py(145):         _rcc_write_number(out, ord(d), 1)
 --- modulename: _utils, funcname: _rcc_write_number
_utils.py(128):     dividend = 1
_utils.py(129):     if width == 2:
_utils.py(131):     elif width == 3:
_utils.py(133):     elif width == 4:
_utils.py(135):     while dividend >= 1:
_utils.py(136):         tmp = int(number / dividend)
_utils.py(137):         out.append("%02x" % tmp)
_utils.py(138):         number -= tmp * dividend
_utils.py(139):         dividend = int(dividend / 256)
_utils.py(135):     while dividend >= 1:
_utils.py(144):     for d in data:
_utils.py(145):         _rcc_write_number(out, ord(d), 1)
 --- modulename: _utils, funcname: _rcc_write_number
_utils.py(128):     dividend = 1
_utils.py(129):     if width == 2:
_utils.py(131):     elif width == 3:
_utils.py(133):     elif width == 4:
_utils.py(135):     while dividend >= 1:
_utils.py(136):         tmp = int(number / dividend)
_utils.py(137):         out.append("%02x" % tmp)
_utils.py(138):         number -= tmp * dividend
_utils.py(139):         dividend = int(dividend / 256)
_utils.py(135):     while dividend >= 1:
_utils.py(144):     for d in data:
_utils.py(145):         _rcc_write_number(out, ord(d), 1)
 --- modulename: _utils, funcname: _rcc_write_number
_utils.py(128):     dividend = 1
_utils.py(129):     if width == 2:
_utils.py(131):     elif width == 3:
_utils.py(133):     elif width == 4:
_utils.py(135):     while dividend >= 1:
_utils.py(136):         tmp = int(number / dividend)
_utils.py(137):         out.append("%02x" % tmp)
_utils.py(138):         number -= tmp * dividend
_utils.py(139):         dividend = int(dividend / 256)
_utils.py(135):     while dividend >= 1:
_utils.py(144):     for d in data:
_utils.py(145):         _rcc_write_number(out, ord(d), 1)
 --- modulename: _utils, funcname: _rcc_write_number
_utils.py(128):     dividend = 1
_utils.py(129):     if width == 2:
_utils.py(131):     elif width == 3:
_utils.py(133):     elif width == 4:
_utils.py(135):     while dividend >= 1:
_utils.py(136):         tmp = int(number / dividend)
_utils.py(137):         out.append("%02x" % tmp)
_utils.py(138):         number -= tmp * dividend
_utils.py(139):         dividend = int(dividend / 256)
_utils.py(135):     while dividend >= 1:
_utils.py(144):     for d in data:
_utils.py(145):         _rcc_write_number(out, ord(d), 1)
 --- modulename: _utils, funcname: _rcc_write_number
_utils.py(128):     dividend = 1
_utils.py(129):     if width == 2:
_utils.py(131):     elif width == 3:
_utils.py(133):     elif width == 4:
_utils.py(135):     while dividend >= 1:
_utils.py(136):         tmp = int(number / dividend)
_utils.py(137):         out.append("%02x" % tmp)
_utils.py(138):         number -= tmp * dividend
_utils.py(139):         dividend = int(dividend / 256)
_utils.py(135):     while dividend >= 1:
_utils.py(144):     for d in data:
_utils.py(145):         _rcc_write_number(out, ord(d), 1)
 --- modulename: _utils, funcname: _rcc_write_number
_utils.py(128):     dividend = 1
_utils.py(129):     if width == 2:
_utils.py(131):     elif width == 3:
_utils.py(133):     elif width == 4:
_utils.py(135):     while dividend >= 1:
_utils.py(136):         tmp = int(number / dividend)
_utils.py(137):         out.append("%02x" % tmp)
_utils.py(138):         number -= tmp * dividend
_utils.py(139):         dividend = int(dividend / 256)
_utils.py(135):     while dividend >= 1:
_utils.py(144):     for d in data:
_utils.py(145):         _rcc_write_number(out, ord(d), 1)
 --- modulename: _utils, funcname: _rcc_write_number
_utils.py(128):     dividend = 1
_utils.py(129):     if width == 2:
_utils.py(131):     elif width == 3:
_utils.py(133):     elif width == 4:
_utils.py(135):     while dividend >= 1:
_utils.py(136):         tmp = int(number / dividend)
_utils.py(137):         out.append("%02x" % tmp)
_utils.py(138):         number -= tmp * dividend
_utils.py(139):         dividend = int(dividend / 256)
_utils.py(135):     while dividend >= 1:
_utils.py(144):     for d in data:
_utils.py(145):         _rcc_write_number(out, ord(d), 1)
 --- modulename: _utils, funcname: _rcc_write_number
_utils.py(128):     dividend = 1
_utils.py(129):     if width == 2:
_utils.py(131):     elif width == 3:
_utils.py(133):     elif width == 4:
_utils.py(135):     while dividend >= 1:
_utils.py(136):         tmp = int(number / dividend)
_utils.py(137):         out.append("%02x" % tmp)
_utils.py(138):         number -= tmp * dividend
_utils.py(139):         dividend = int(dividend / 256)
_utils.py(135):     while dividend >= 1:
_utils.py(144):     for d in data:
_utils.py(145):         _rcc_write_number(out, ord(d), 1)
 --- modulename: _utils, funcname: _rcc_write_number
_utils.py(128):     dividend = 1
_utils.py(129):     if width == 2:
_utils.py(131):     elif width == 3:
_utils.py(133):     elif width == 4:
_utils.py(135):     while dividend >= 1:
_utils.py(136):         tmp = int(number / dividend)
_utils.py(137):         out.append("%02x" % tmp)
_utils.py(138):         number -= tmp * dividend
_utils.py(139):         dividend = int(dividend / 256)
_utils.py(135):     while dividend >= 1:
_utils.py(144):     for d in data:
_utils.py(145):         _rcc_write_number(out, ord(d), 1)
 --- modulename: _utils, funcname: _rcc_write_number
_utils.py(128):     dividend = 1
_utils.py(129):     if width == 2:
_utils.py(131):     elif width == 3:
_utils.py(133):     elif width == 4:
_utils.py(135):     while dividend >= 1:
_utils.py(136):         tmp = int(number / dividend)
_utils.py(137):         out.append("%02x" % tmp)
_utils.py(138):         number -= tmp * dividend
_utils.py(139):         dividend = int(dividend / 256)
_utils.py(135):     while dividend >= 1:
_utils.py(144):     for d in data:
_utils.py(145):         _rcc_write_number(out, ord(d), 1)
 --- modulename: _utils, funcname: _rcc_write_number
_utils.py(128):     dividend = 1
_utils.py(129):     if width == 2:
_utils.py(131):     elif width == 3:
_utils.py(133):     elif width == 4:
_utils.py(135):     while dividend >= 1:
_utils.py(136):         tmp = int(number / dividend)
_utils.py(137):         out.append("%02x" % tmp)
_utils.py(138):         number -= tmp * dividend
_utils.py(139):         dividend = int(dividend / 256)
_utils.py(135):     while dividend >= 1:
_utils.py(144):     for d in data:
_utils.py(145):         _rcc_write_number(out, ord(d), 1)
 --- modulename: _utils, funcname: _rcc_write_number
_utils.py(128):     dividend = 1
_utils.py(129):     if width == 2:
_utils.py(131):     elif width == 3:
_utils.py(133):     elif width == 4:
_utils.py(135):     while dividend >= 1:
_utils.py(136):         tmp = int(number / dividend)
_utils.py(137):         out.append("%02x" % tmp)
_utils.py(138):         number -= tmp * dividend
_utils.py(139):         dividend = int(dividend / 256)
_utils.py(135):     while dividend >= 1:
_utils.py(144):     for d in data:
_utils.py(145):         _rcc_write_number(out, ord(d), 1)
 --- modulename: _utils, funcname: _rcc_write_number
_utils.py(128):     dividend = 1
_utils.py(129):     if width == 2:
_utils.py(131):     elif width == 3:
_utils.py(133):     elif width == 4:
_utils.py(135):     while dividend >= 1:
_utils.py(136):         tmp = int(number / dividend)
_utils.py(137):         out.append("%02x" % tmp)
_utils.py(138):         number -= tmp * dividend
_utils.py(139):         dividend = int(dividend / 256)
_utils.py(135):     while dividend >= 1:
_utils.py(144):     for d in data:
_utils.py(145):         _rcc_write_number(out, ord(d), 1)
 --- modulename: _utils, funcname: _rcc_write_number
_utils.py(128):     dividend = 1
_utils.py(129):     if width == 2:
_utils.py(131):     elif width == 3:
_utils.py(133):     elif width == 4:
_utils.py(135):     while dividend >= 1:
_utils.py(136):         tmp = int(number / dividend)
_utils.py(137):         out.append("%02x" % tmp)
_utils.py(138):         number -= tmp * dividend
_utils.py(139):         dividend = int(dividend / 256)
_utils.py(135):     while dividend >= 1:
_utils.py(144):     for d in data:
_utils.py(145):         _rcc_write_number(out, ord(d), 1)
 --- modulename: _utils, funcname: _rcc_write_number
_utils.py(128):     dividend = 1
_utils.py(129):     if width == 2:
_utils.py(131):     elif width == 3:
_utils.py(133):     elif width == 4:
_utils.py(135):     while dividend >= 1:
_utils.py(136):         tmp = int(number / dividend)
_utils.py(137):         out.append("%02x" % tmp)
_utils.py(138):         number -= tmp * dividend
_utils.py(139):         dividend = int(dividend / 256)
_utils.py(135):     while dividend >= 1:
_utils.py(144):     for d in data:
_utils.py(145):         _rcc_write_number(out, ord(d), 1)
 --- modulename: _utils, funcname: _rcc_write_number
_utils.py(128):     dividend = 1
_utils.py(129):     if width == 2:
_utils.py(131):     elif width == 3:
_utils.py(133):     elif width == 4:
_utils.py(135):     while dividend >= 1:
_utils.py(136):         tmp = int(number / dividend)
_utils.py(137):         out.append("%02x" % tmp)
_utils.py(138):         number -= tmp * dividend
_utils.py(139):         dividend = int(dividend / 256)
_utils.py(135):     while dividend >= 1:
_utils.py(144):     for d in data:
_utils.py(145):         _rcc_write_number(out, ord(d), 1)
 --- modulename: _utils, funcname: _rcc_write_number
_utils.py(128):     dividend = 1
_utils.py(129):     if width == 2:
_utils.py(131):     elif width == 3:
_utils.py(133):     elif width == 4:
_utils.py(135):     while dividend >= 1:
_utils.py(136):         tmp = int(number / dividend)
_utils.py(137):         out.append("%02x" % tmp)
_utils.py(138):         number -= tmp * dividend
_utils.py(139):         dividend = int(dividend / 256)
_utils.py(135):     while dividend >= 1:
_utils.py(144):     for d in data:
_utils.py(145):         _rcc_write_number(out, ord(d), 1)
 --- modulename: _utils, funcname: _rcc_write_number
_utils.py(128):     dividend = 1
_utils.py(129):     if width == 2:
_utils.py(131):     elif width == 3:
_utils.py(133):     elif width == 4:
_utils.py(135):     while dividend >= 1:
_utils.py(136):         tmp = int(number / dividend)
_utils.py(137):         out.append("%02x" % tmp)
_utils.py(138):         number -= tmp * dividend
_utils.py(139):         dividend = int(dividend / 256)
_utils.py(135):     while dividend >= 1:
_utils.py(144):     for d in data:
_utils.py(174):     PY_2 = sys.version_info[0] < 3
_utils.py(175):     if PY_2:
_utils.py(180): \x00\x00"
_utils.py(183): \x07\x08t\xa6\xa6\x00q\x00t\x00.\x00c\x00o\x00n\x00f"
_utils.py(184):         rc_data = "".join(rc_data_ouput).decode('hex')
 --- modulename: __init__, funcname: search_function
__init__.py(74):     entry = _cache.get(encoding, _unknown)
__init__.py(75):     if entry is not _unknown:
__init__.py(85):     norm_encoding = normalize_encoding(encoding)
 --- modulename: __init__, funcname: normalize_encoding
__init__.py(64):     if hasattr(__builtin__, "unicode") and isinstance(encoding, unicode):
__init__.py(69):     return '_'.join(encoding.translate(_norm_encoding_map).split())
__init__.py(86):     aliased_encoding = _aliases.get(norm_encoding) or \
__init__.py(88):     if aliased_encoding is not None:
__init__.py(89):         modnames = [aliased_encoding,
__init__.py(90):                     norm_encoding]
__init__.py(93):     for modname in modnames:
__init__.py(94):         if not modname or '.' in modname:
__init__.py(96):         try:
__init__.py(99):             mod = __import__('encodings.' + modname, fromlist=_import_tail,
__init__.py(100):                              level=0)
 --- modulename: hex_codec, funcname: <module>
hex_codec.py(8): """
hex_codec.py(9): import codecs, binascii
hex_codec.py(13): def hex_encode(input,errors='strict'):
hex_codec.py(27): def hex_decode(input,errors='strict'):
hex_codec.py(45): class Codec(codecs.Codec):
 --- modulename: hex_codec, funcname: Codec
hex_codec.py(45): class Codec(codecs.Codec):
hex_codec.py(47):     def encode(self, input,errors='strict'):
hex_codec.py(49):     def decode(self, input,errors='strict'):
hex_codec.py(52): class IncrementalEncoder(codecs.IncrementalEncoder):
 --- modulename: hex_codec, funcname: IncrementalEncoder
hex_codec.py(52): class IncrementalEncoder(codecs.IncrementalEncoder):
hex_codec.py(53):     def encode(self, input, final=False):
hex_codec.py(57): class IncrementalDecoder(codecs.IncrementalDecoder):
 --- modulename: hex_codec, funcname: IncrementalDecoder
hex_codec.py(57): class IncrementalDecoder(codecs.IncrementalDecoder):
hex_codec.py(58):     def decode(self, input, final=False):
hex_codec.py(62): class StreamWriter(Codec,codecs.StreamWriter):
 --- modulename: hex_codec, funcname: StreamWriter
hex_codec.py(62): class StreamWriter(Codec,codecs.StreamWriter):
hex_codec.py(63):     pass
hex_codec.py(65): class StreamReader(Codec,codecs.StreamReader):
 --- modulename: hex_codec, funcname: StreamReader
hex_codec.py(65): class StreamReader(Codec,codecs.StreamReader):
hex_codec.py(66):     pass
hex_codec.py(70): def getregentry():
__init__.py(104):             break
__init__.py(108):     try:
__init__.py(109):         getregentry = mod.getregentry
__init__.py(114):     if mod is None:
__init__.py(120):     entry = getregentry()
 --- modulename: hex_codec, funcname: getregentry
hex_codec.py(71):     return codecs.CodecInfo(
hex_codec.py(72):         name='hex',
hex_codec.py(73):         encode=hex_encode,
hex_codec.py(74):         decode=hex_decode,
hex_codec.py(75):         incrementalencoder=IncrementalEncoder,
hex_codec.py(76):         incrementaldecoder=IncrementalDecoder,
hex_codec.py(77):         streamwriter=StreamWriter,
hex_codec.py(78):         streamreader=StreamReader,
hex_codec.py(79):         _is_text_encoding=False,
 --- modulename: codecs, funcname: __new__
codecs.py(95):         self = tuple.__new__(cls, (encode, decode, streamreader, streamwriter))
codecs.py(96):         self.name = name
codecs.py(97):         self.encode = encode
codecs.py(98):         self.decode = decode
codecs.py(99):         self.incrementalencoder = incrementalencoder
codecs.py(100):         self.incrementaldecoder = incrementaldecoder
codecs.py(101):         self.streamwriter = streamwriter
codecs.py(102):         self.streamreader = streamreader
codecs.py(103):         if _is_text_encoding is not None:
codecs.py(104):             self._is_text_encoding = _is_text_encoding
codecs.py(105):         return self
__init__.py(121):     if not isinstance(entry, codecs.CodecInfo):
__init__.py(140):     _cache[encoding] = entry
__init__.py(144):     try:
__init__.py(145):         codecaliases = mod.getaliases()
__init__.py(146):     except AttributeError:
__init__.py(147):         pass
__init__.py(154):     return entry
 --- modulename: hex_codec, funcname: hex_decode
hex_codec.py(41):     assert errors == 'strict'
hex_codec.py(42):     output = binascii.a2b_hex(input)
hex_codec.py(43):     return (output, len(input))
_utils.py(196):     return rc_struct, rc_name, rc_data
_utils.py(265):     QtCore.qRegisterResourceData(0x01, rc_struct, rc_name, rc_data)
_utils.py(268):     prefixPath = QtCore.QLibraryInfo.location(QtCore.QLibraryInfo.PrefixPath)
__init__.py(26):     if sys.platform == 'win32':
__init__.py(27):         opensslDir = os.path.join(pysideDir, 'openssl')
 --- modulename: ntpath, funcname: join
ntpath.py(65):     result_drive, result_path = splitdrive(path)
 --- modulename: ntpath, funcname: splitdrive
ntpath.py(115):     if len(p) > 1:
ntpath.py(116):         normp = p.replace(altsep, sep)
ntpath.py(117):         if (normp[0:2] == sep*2) and (normp[2:3] != sep):
ntpath.py(133):         if normp[1] == ':':
ntpath.py(134):             return p[:2], p[2:]
ntpath.py(66):     for p in paths:
ntpath.py(67):         p_drive, p_path = splitdrive(p)
 --- modulename: ntpath, funcname: splitdrive
ntpath.py(115):     if len(p) > 1:
ntpath.py(116):         normp = p.replace(altsep, sep)
ntpath.py(117):         if (normp[0:2] == sep*2) and (normp[2:3] != sep):
ntpath.py(133):         if normp[1] == ':':
ntpath.py(135):     return '', p
ntpath.py(68):         if p_path and p_path[0] in '\\/':
ntpath.py(74):         elif p_drive and p_drive != result_drive:
ntpath.py(83):         if result_path and result_path[-1] not in '\\/':
ntpath.py(84):             result_path = result_path + '\\'
ntpath.py(85):         result_path = result_path + p_path
ntpath.py(66):     for p in paths:
ntpath.py(87):     if (result_path and result_path[0] not in '\\/' and
ntpath.py(90):     return result_drive + result_path
__init__.py(28):         if os.path.exists(opensslDir):
 --- modulename: genericpath, funcname: exists
genericpath.py(25):     try:
genericpath.py(26):         os.stat(path)
genericpath.py(29):     return True
__init__.py(29):             path = os.environ['PATH']
 --- modulename: os, funcname: __getitem__
os.py(425):                 return self.data[key.upper()]
__init__.py(30):             try:
__init__.py(31):                 os.environ['PATH'] = opensslDir + os.pathsep + path
 --- modulename: os, funcname: __setitem__
os.py(422):                 putenv(key, item)
os.py(423):                 self.data[key.upper()] = item
__init__.py(32):                 try:
__init__.py(33):                     from . import QtNetwork
__init__.py(37):                     QtNetwork.QSslSocket.supportsSsl()
__init__.py(39):                 os.environ['PATH'] = path
 --- modulename: os, funcname: __setitem__
os.py(422):                 putenv(key, item)
os.py(423):                 self.data[key.upper()] = item
__init__.py(4): from PySide import QtGui
__init__.py(5): p = os.path.abspath('..')
 --- modulename: ntpath, funcname: abspath
ntpath.py(486):         if path: # Empty path must return current working directory.
ntpath.py(487):             try:
ntpath.py(488):                 path = _getfullpathname(path)
ntpath.py(495):         return normpath(path)
 --- modulename: ntpath, funcname: normpath
ntpath.py(418):     backslash, dot = (u'\\', u'.') if isinstance(path, _unicode) else ('\\', '.')
ntpath.py(419):     if path.startswith(('\\\\.\\', '\\\\?\\')):
ntpath.py(425):     path = path.replace("/", "\\")
ntpath.py(426):     prefix, path = splitdrive(path)
 --- modulename: ntpath, funcname: splitdrive
ntpath.py(115):     if len(p) > 1:
ntpath.py(116):         normp = p.replace(altsep, sep)
ntpath.py(117):         if (normp[0:2] == sep*2) and (normp[2:3] != sep):
ntpath.py(133):         if normp[1] == ':':
ntpath.py(134):             return p[:2], p[2:]
ntpath.py(436):     if prefix == '':
ntpath.py(443):         if path.startswith("\\"):
ntpath.py(444):             prefix = prefix + backslash
ntpath.py(445):             path = path.lstrip("\\")
ntpath.py(446):     comps = path.split("\\")
ntpath.py(447):     i = 0
ntpath.py(448):     while i < len(comps):
ntpath.py(449):         if comps[i] in ('.', ''):
ntpath.py(451):         elif comps[i] == '..':
ntpath.py(460):             i += 1
ntpath.py(448):     while i < len(comps):
ntpath.py(462):     if not prefix and not comps:
ntpath.py(464):     return prefix + backslash.join(comps)
__init__.py(6): if p not in sys.path:
__init__.py(7):     sys.path.append(p)
__init__.py(8): from Nodes import *
 --- modulename: __init__, funcname: <module>
__init__.py(1): import os
__init__.py(2): for n in os.listdir(os.path.dirname(__file__)):
 --- modulename: ntpath, funcname: dirname
ntpath.py(215):     return split(p)[0]
 --- modulename: ntpath, funcname: split
ntpath.py(180):     d, p = splitdrive(p)
 --- modulename: ntpath, funcname: splitdrive
ntpath.py(115):     if len(p) > 1:
ntpath.py(116):         normp = p.replace(altsep, sep)
ntpath.py(117):         if (normp[0:2] == sep*2) and (normp[2:3] != sep):
ntpath.py(133):         if normp[1] == ':':
ntpath.py(134):             return p[:2], p[2:]
ntpath.py(182):     i = len(p)
ntpath.py(183):     while i and p[i-1] not in '/\\':
ntpath.py(184):         i = i - 1
ntpath.py(183):     while i and p[i-1] not in '/\\':
ntpath.py(184):         i = i - 1
ntpath.py(183):     while i and p[i-1] not in '/\\':
ntpath.py(184):         i = i - 1
ntpath.py(183):     while i and p[i-1] not in '/\\':
ntpath.py(184):         i = i - 1
ntpath.py(183):     while i and p[i-1] not in '/\\':
ntpath.py(184):         i = i - 1
ntpath.py(183):     while i and p[i-1] not in '/\\':
ntpath.py(184):         i = i - 1
ntpath.py(183):     while i and p[i-1] not in '/\\':
ntpath.py(184):         i = i - 1
ntpath.py(183):     while i and p[i-1] not in '/\\':
ntpath.py(184):         i = i - 1
ntpath.py(183):     while i and p[i-1] not in '/\\':
ntpath.py(184):         i = i - 1
ntpath.py(183):     while i and p[i-1] not in '/\\':
ntpath.py(184):         i = i - 1
ntpath.py(183):     while i and p[i-1] not in '/\\':
ntpath.py(184):         i = i - 1
ntpath.py(183):     while i and p[i-1] not in '/\\':
ntpath.py(184):         i = i - 1
ntpath.py(183):     while i and p[i-1] not in '/\\':
ntpath.py(185):     head, tail = p[:i], p[i:]  # now tail has no slashes
ntpath.py(187):     head2 = head
ntpath.py(188):     while head2 and head2[-1] in '/\\':
ntpath.py(189):         head2 = head2[:-1]
ntpath.py(188):     while head2 and head2[-1] in '/\\':
ntpath.py(190):     head = head2 or head
ntpath.py(191):     return d + head, tail
__init__.py(3):     if n.endswith(".py") and "__init__" not in n:
__init__.py(4):         nodeName = n.split(".")[0]
__init__.py(5):         exec("from {0} import *".format(nodeName))
 --- modulename: __init__, funcname: <module>
<string>(1):   --- modulename: Abs, funcname: <module>
Abs.py(1): from AbstractGraph import *
 --- modulename: __init__, funcname: <module>
__init__.py(1): from AbstractGraph import *
 --- modulename: AbstractGraph, funcname: <module>
AbstractGraph.py(1): from threading import Thread
AbstractGraph.py(2): from AGraphCommon import *
 --- modulename: AGraphCommon, funcname: <module>
AGraphCommon.py(3): '''
AGraphCommon.py(4): import math
AGraphCommon.py(7): FLAG_SYMBOL = "~"
AGraphCommon.py(10): def roundup(x, to):
AGraphCommon.py(14): def portAffects(affects_port, affected_port):
AGraphCommon.py(23): def calc_multithreaded(ls, debug=False):
AGraphCommon.py(46): def cycle_check(src, dst):
AGraphCommon.py(59): def find_ports_behind(start_from):
AGraphCommon.py(71): def push(start_from):
AGraphCommon.py(79): class AGPortDataTypes(object):
 --- modulename: AGraphCommon, funcname: AGPortDataTypes
AGraphCommon.py(79): class AGPortDataTypes(object):
AGraphCommon.py(81):     tNumeric = 'numeric_data'
AGraphCommon.py(82):     tString = 'string_data'
AGraphCommon.py(83):     tBool = 'boolean_data'
AGraphCommon.py(84):     tArray = 'array_data'
AGraphCommon.py(85):     tAny = 'all'
AGraphCommon.py(86):     tReroute = 'reroute'
AGraphCommon.py(87):     tExec = 'exec'
AGraphCommon.py(89):     def __init__(self):
AGraphCommon.py(93): class AGObjectTypes(object):
 --- modulename: AGraphCommon, funcname: AGObjectTypes
AGraphCommon.py(93): class AGObjectTypes(object):
AGraphCommon.py(95):     tPort = 'port_object'
AGraphCommon.py(96):     tNode = 'node_object'
AGraphCommon.py(97):     tGraph = 'graph_object'
AGraphCommon.py(98):     tGrouper = 'group_object'
AGraphCommon.py(99):     tConnectionLine = 'connection_line_object'
AGraphCommon.py(100):     tGridLine = 'grid_line_object'
AGraphCommon.py(101):     tNodeName = 'node_name_object'
AGraphCommon.py(103):     def __init__(self):
AGraphCommon.py(107): class AGPortTypes(object):
 --- modulename: AGraphCommon, funcname: AGPortTypes
AGraphCommon.py(107): class AGPortTypes(object):
AGraphCommon.py(109):     kInput = 'input_port'
AGraphCommon.py(110):     kOutput = 'output_port'
AGraphCommon.py(112):     def __init__(self, arg):
AbstractGraph.py(3): import weakref
 --- modulename: weakref, funcname: <module>
weakref.py(6): """
weakref.py(12): import UserDict
weakref.py(14): from _weakref import (
weakref.py(23): from _weakrefset import WeakSet, _IterationGuard
weakref.py(25): from exceptions import ReferenceError
weakref.py(28): ProxyTypes = (ProxyType, CallableProxyType)
weakref.py(30): __all__ = ["ref", "proxy", "getweakrefcount", "getweakrefs",
weakref.py(31):            "WeakKeyDictionary", "ReferenceError", "ReferenceType", "ProxyType",
weakref.py(32):            "CallableProxyType", "ProxyTypes", "WeakValueDictionary", 'WeakSet']
weakref.py(35): class WeakValueDictionary(UserDict.UserDict):
 --- modulename: weakref, funcname: WeakValueDictionary
weakref.py(35): class WeakValueDictionary(UserDict.UserDict):
weakref.py(40):     """
weakref.py(47):     def __init__(*args, **kw):
weakref.py(68):     def _commit_removals(self):
weakref.py(76):     def __getitem__(self, key):
weakref.py(83):     def __delitem__(self, key):
weakref.py(88):     def __contains__(self, key):
weakref.py(95):     def has_key(self, key):
weakref.py(102):     def __repr__(self):
weakref.py(105):     def __setitem__(self, key, value):
weakref.py(110):     def clear(self):
weakref.py(115):     def copy(self):
weakref.py(123):     __copy__ = copy
weakref.py(125):     def __deepcopy__(self, memo):
weakref.py(134):     def get(self, key, default=None):
weakref.py(147):     def items(self):
weakref.py(155):     def iteritems(self):
weakref.py(162):     def iterkeys(self):
weakref.py(167):     __iter__ = iterkeys
weakref.py(169):     def itervaluerefs(self):
weakref.py(183):     def itervalues(self):
weakref.py(190):     def popitem(self):
weakref.py(199):     def pop(self, key, *args):
weakref.py(213):     def setdefault(self, key, default=None):
weakref.py(224):     def update(*args, **kwargs):
weakref.py(244):     def valuerefs(self):
weakref.py(256):     def values(self):
weakref.py(265): class KeyedRef(ref):
 --- modulename: weakref, funcname: KeyedRef
weakref.py(265): class KeyedRef(ref):
weakref.py(273):     """
weakref.py(275):     __slots__ = "key",
weakref.py(277):     def __new__(type, ob, callback, key):
weakref.py(282):     def __init__(self, ob, callback, key):
weakref.py(286): class WeakKeyDictionary(UserDict.UserDict):
 --- modulename: weakref, funcname: WeakKeyDictionary
weakref.py(286): class WeakKeyDictionary(UserDict.UserDict):
weakref.py(295):     """
weakref.py(297):     def __init__(self, dict=None):
weakref.py(313):     def _commit_removals(self):
weakref.py(326):     def __delitem__(self, key):
weakref.py(329):     def __getitem__(self, key):
weakref.py(332):     def __repr__(self):
weakref.py(335):     def __setitem__(self, key, value):
weakref.py(338):     def copy(self):
weakref.py(346):     __copy__ = copy
weakref.py(348):     def __deepcopy__(self, memo):
weakref.py(357):     def get(self, key, default=None):
weakref.py(360):     def has_key(self, key):
weakref.py(367):     def __contains__(self, key):
weakref.py(374):     def items(self):
weakref.py(382):     def iteritems(self):
weakref.py(389):     def iterkeyrefs(self):
weakref.py(403):     def iterkeys(self):
weakref.py(410):     __iter__ = iterkeys
weakref.py(412):     def itervalues(self):
weakref.py(417):     def keyrefs(self):
weakref.py(429):     def keys(self):
weakref.py(437):     def popitem(self):
weakref.py(444):     def pop(self, key, *args):
weakref.py(447):     def setdefault(self, key, default=None):
weakref.py(450):     def update(self, dict=None, **kwargs):
AbstractGraph.py(6): class AGPort(object):
 --- modulename: AbstractGraph, funcname: AGPort
AbstractGraph.py(6): class AGPort(object):
AbstractGraph.py(8):     def __init__(self, name, parent, data_type):
AbstractGraph.py(23):     def getDefaultDataValue(self):
AbstractGraph.py(37):     def set_data_overload(self, data, dirty_propagate=True):
AbstractGraph.py(40):     def port_name(self):
AbstractGraph.py(43):     def current_data(self):
AbstractGraph.py(48):     def port_connected(self):
AbstractGraph.py(51):     def port_disconnected(self):
AbstractGraph.py(54):     def set_clean(self):
AbstractGraph.py(57):     def hasConnections(self):
AbstractGraph.py(63):     def set_dirty(self):
AbstractGraph.py(68):     def get_data(self, debug=False):
AbstractGraph.py(116):     @staticmethod
AbstractGraph.py(120):     def set_data(self, data, dirty_propagate=True):
AbstractGraph.py(145): class AGNode(object):
 --- modulename: AbstractGraph, funcname: AGNode
AbstractGraph.py(145): class AGNode(object):
AbstractGraph.py(146):     def __init__(self, name, graph):
AbstractGraph.py(156):     def set_pos(self, x, y):
AbstractGraph.py(160):     def get_name(self):
AbstractGraph.py(163):     def set_name(self, name):
AbstractGraph.py(166):     def add_input_port(self, port_name, data_type):
AbstractGraph.py(172):     def add_output_port(self, port_name, data_type):
AbstractGraph.py(178):     def get_port_by_name(self, name):
AbstractGraph.py(184):     def compute(self):
AbstractGraph.py(196): class AGraph(object):
 --- modulename: AbstractGraph, funcname: AGraph
AbstractGraph.py(196): class AGraph(object):
AbstractGraph.py(198):     def __init__(self, name):
AbstractGraph.py(209):     def get_uniq_node_name(self, name):
AbstractGraph.py(221):     def is_debug(self):
AbstractGraph.py(225):     def set_debug(self, state):
AbstractGraph.py(231):     def is_multithreaded(self):
AbstractGraph.py(235):     def set_multithreaded(self, state):
AbstractGraph.py(241):     def get_evaluation_order(self, node, dirty_only=True):
AbstractGraph.py(264):     @staticmethod
AbstractGraph.py(265):     def get_next_layer_nodes(node, direction=AGPortTypes.kInput, dirty_only=False):
AbstractGraph.py(290):     def get_nodes(self):
AbstractGraph.py(294):     def get_node_by_name(self, name):
AbstractGraph.py(301):     def add_node(self, node, x=0.0, y=0.0):
AbstractGraph.py(311):     def remove_node(self, node):
AbstractGraph.py(315):     def remove_node_by_name(self, name):
AbstractGraph.py(319):     def count(self):
AbstractGraph.py(323):     def add_edge(self, src, dst):
AbstractGraph.py(362):     def remove_edge(self, edge, call_connection_functions=True):
AbstractGraph.py(371):     def plot(self):
__init__.py(2): from AGSumNode import *
 --- modulename: AGSumNode, funcname: <module>
AGSumNode.py(1): from AbstractGraph import *
AGSumNode.py(4): class AGSumNode(AGNode):
 --- modulename: AGSumNode, funcname: AGSumNode
AGSumNode.py(4): class AGSumNode(AGNode):
AGSumNode.py(5):     def __init__(self, name, graph):
AGSumNode.py(15):     def compute(self):
__init__.py(3): from AGSubstractNode import *
 --- modulename: AGSubstractNode, funcname: <module>
AGSubstractNode.py(1): from AbstractGraph import *
AGSubstractNode.py(4): class AGMultNode(AGNode):
 --- modulename: AGSubstractNode, funcname: AGMultNode
AGSubstractNode.py(4): class AGMultNode(AGNode):
AGSubstractNode.py(5):     def __init__(self, name):
AGSubstractNode.py(14):     def compute(self):
__init__.py(4): from AGMultNode import *
 --- modulename: AGMultNode, funcname: <module>
AGMultNode.py(1): from AbstractGraph import *
AGMultNode.py(4): class AGMultNode(AGNode):
 --- modulename: AGMultNode, funcname: AGMultNode
AGMultNode.py(4): class AGMultNode(AGNode):
AGMultNode.py(5):     def __init__(self, name):
AGMultNode.py(14):     def compute(self):
__init__.py(5): from AGDevideNode import *
 --- modulename: AGDevideNode, funcname: <module>
AGDevideNode.py(1): from AbstractGraph import *
AGDevideNode.py(4): class AGMultNode(AGNode):
 --- modulename: AGDevideNode, funcname: AGMultNode
AGDevideNode.py(4): class AGMultNode(AGNode):
AGDevideNode.py(5):     def __init__(self, name):
AGDevideNode.py(14):     def compute(self):
__init__.py(6): from AGIntNode import *
 --- modulename: AGIntNode, funcname: <module>
AGIntNode.py(1): from AbstractGraph import *
AGIntNode.py(4): class AGIntNode(AGNode):
 --- modulename: AGIntNode, funcname: AGIntNode
AGIntNode.py(4): class AGIntNode(AGNode):
AGIntNode.py(5):     def __init__(self, name, graph):
AGIntNode.py(13):     def set_data(self, data, dirty_propagate=True):
AGIntNode.py(17):     def compute(self):
__init__.py(7): from AGDiscriminantNode import *
 --- modulename: AGDiscriminantNode, funcname: <module>
AGDiscriminantNode.py(1): from AbstractGraph import *
AGDiscriminantNode.py(4): class AGDiscriminantNode(AGNode):
 --- modulename: AGDiscriminantNode, funcname: AGDiscriminantNode
AGDiscriminantNode.py(4): class AGDiscriminantNode(AGNode):
AGDiscriminantNode.py(5):     def __init__(self, name):
AGDiscriminantNode.py(15):     def compute(self):
__init__.py(8): from AGPowNode import *
 --- modulename: AGPowNode, funcname: <module>
AGPowNode.py(1): from AbstractGraph import *
AGPowNode.py(4): class AGMultNode(AGNode):
 --- modulename: AGPowNode, funcname: AGMultNode
AGPowNode.py(4): class AGMultNode(AGNode):
AGPowNode.py(5):     def __init__(self, name):
AGPowNode.py(14):     def compute(self):
Abs.py(2): from AGraphPySide.Settings import *
 --- modulename: Settings, funcname: <module>
Settings.py(1): from PySide import QtGui, QtCore
Settings.py(4): class Spacings(object):
 --- modulename: Settings, funcname: Spacings
Settings.py(4): class Spacings(object):
Settings.py(6):     kPortSpacing = 4
Settings.py(7):     kPortOffset = 12
Settings.py(8):     kSplitterHandleWidth = 5
Settings.py(10):     def __init__(self):
Settings.py(14): class LineTypes(object):
 --- modulename: Settings, funcname: LineTypes
Settings.py(14): class LineTypes(object):
Settings.py(16):     lDotLine = 'lDotLine'
Settings.py(17):     lSolidLine = 'lSolidLine'
Settings.py(18):     lDashLine = 'lDashLine'
Settings.py(19):     lDashDotDotLine = 'lDashDotDotLine'
Settings.py(20):     lDashDotLine = 'lDashDotLine'
Settings.py(22):     def __init__(self):
Settings.py(26): def get_line_type(name):
Settings.py(40): class Colors(object):
 --- modulename: Settings, funcname: Colors
Settings.py(40): class Colors(object):
Settings.py(42):     kNodeBackgrounds = QtGui.QColor(20, 20, 20, 255)
Settings.py(43):     kNodeSelectedPenColor = QtGui.QColor(255, 255, 255, 255)
Settings.py(44):     kWhite = QtGui.QColor(255, 255, 255, 200)
Settings.py(45):     kSceneBackground = QtGui.QColor(35, 35, 35)
Settings.py(46):     kInteger = QtGui.QColor(45, 48, 99, 255)
Settings.py(47):     kIntNodeBackground = QtGui.QColor(0, 0, 170, 100)
Settings.py(48):     kGridColor = QtGui.QColor(100, 100, 100, 100)
Settings.py(49):     kGridColorDarker = QtGui.QColor(20, 20, 20)
Settings.py(50):     kConnectors = QtGui.QColor(0, 100, 0, 255)
Settings.py(51):     kPortLinesA = QtGui.QColor(0, 90, 0, 0)
Settings.py(52):     kPortLinesB = QtGui.QColor(0, 0, 90, 0)
Settings.py(53):     kNodeNameRect = QtGui.QColor(100, 100, 100, 100)
Settings.py(54):     kRed = QtGui.QColor(255, 0, 0, 255)
Settings.py(55):     kGreen = QtGui.QColor(0, 255, 0, 255)
Settings.py(56):     kBlue = QtGui.QColor(0, 0, 255, 255)
Settings.py(57):     kBlack = QtGui.QColor(50, 50, 50, 255)
Settings.py(58):     kConnectionLines = QtGui.QColor(255, 255, 255, 255)
Settings.py(59):     kDirtyPen = QtGui.QColor(250, 250, 250, 200)
Settings.py(60):     kShadow = QtGui.QColor(20, 20, 20, 150)
Settings.py(61):     kRubberRect = QtGui.QColor(255, 255, 255, 50)
Settings.py(62):     kCommentNodeBrush = QtGui.QColor(100, 100, 100, 40)
Settings.py(63):     kCommentNodeNameBackground = QtGui.QColor(100, 100, 100, 40)
Settings.py(64):     kCommentNodePen = QtGui.QColor(0, 0, 0, 100)
Settings.py(65):     kCommentNodeResizer = QtGui.QColor(255, 255, 255, 20)
Settings.py(66):     kSplitterHandleColor = QtGui.QColor(255, 255, 255, 20)
Settings.py(67):     kPortNameColor = QtGui.QColor(255, 255, 255, 255)
Settings.py(69):     def __init__(self):
Abs.py(3): from AGraphPySide import BaseNode
 --- modulename: BaseNode, funcname: <module>
BaseNode.py(1): from Settings import *
BaseNode.py(2): from PySide import QtGui
BaseNode.py(3): from PySide import QtCore
BaseNode.py(4): from Port import Port
 --- modulename: Port, funcname: <module>
Port.py(1): from PySide import QtCore
Port.py(2): from AbstractGraph import *
Port.py(3): from Settings import *
Port.py(6): def update_ports(start_from):
Port.py(15): class Port(QtGui.QGraphicsWidget, AGPort):
 --- modulename: Port, funcname: Port
Port.py(15): class Port(QtGui.QGraphicsWidget, AGPort):
Port.py(17):     def __init__(self, name, parent, data_type, width, height, color=Colors.kConnectors):
Port.py(47):     def boundingRect(self):
Port.py(51):     def sizeHint(self, which, constraint):
Port.py(55):     def disconnect_all(self):
Port.py(71):     def shape(self):
Port.py(77):     def kill_reroutes(self):
Port.py(81):     def paint(self, painter, option, widget):
Port.py(112):     def contextMenuEvent(self, event):
Port.py(116):     def write_to_console(self, data):
Port.py(120):     def getLayout(self):
Port.py(126):     def hoverEnterEvent(self, *args, **kwargs):
Port.py(134):     def hoverLeaveEvent(self, *args, **kwargs):
Port.py(139):     def set_data(self, data, dirty_propagate=True):
BaseNode.py(5): from AbstractGraph import *
BaseNode.py(8): class NodeName(QtGui.QGraphicsTextItem):
 --- modulename: BaseNode, funcname: NodeName
BaseNode.py(8): class NodeName(QtGui.QGraphicsTextItem):
BaseNode.py(9):     def __init__(self, name, parent, color=Colors.kNodeNameRect):
BaseNode.py(29):     def keyPressEvent(self, event):
BaseNode.py(38):     def paint(self, painter, option, widget):
BaseNode.py(45):     def focusInEvent(self, event):
BaseNode.py(48):     def focusOutEvent(self, event):
BaseNode.py(73): class Node(QtGui.QGraphicsItem, AGNode):
 --- modulename: BaseNode, funcname: Node
BaseNode.py(73): class Node(QtGui.QGraphicsItem, AGNode):
BaseNode.py(76):     """
BaseNode.py(77):     def __init__(self, name, graph, w=120, colors=Colors, spacings=Spacings, port_types=AGPortTypes, addHeader=True):
BaseNode.py(138):     def tweakPosition(self):
BaseNode.py(143):     def boundingRect(self):
BaseNode.py(146):     def itemChange(self, change, value):
BaseNode.py(154):     @staticmethod
BaseNode.py(158):     def post_create(self):
BaseNode.py(163):     def save_command(self):
BaseNode.py(166):     def property_view(self):
BaseNode.py(169):     def set_name(self, name):
BaseNode.py(173):     def set_shadows_enabled(self, state):
BaseNode.py(177):     def clone(self):
BaseNode.py(193):     def update_ports(self):
BaseNode.py(197):     def paint(self, painter, option, widget):
BaseNode.py(227):     def get_input_edges(self):
BaseNode.py(234):     def get_output_edges(self):
BaseNode.py(241):     def mousePressEvent(self, event):
BaseNode.py(247):     def mouseReleaseEvent(self, event):
BaseNode.py(276):     def add_input_port(self, port_name, data_type):
BaseNode.py(281):     @staticmethod
BaseNode.py(285):     def add_output_port(self, port_name, data_type):
BaseNode.py(290):     def add_layout(self, portType, head=False):
BaseNode.py(306):     def kill(self, call_connection_functions=False):
BaseNode.py(320):     def set_pos(self, x, y):
BaseNode.py(325):     def _add_port(self, port_type, data_type, name, color=QtGui.QColor(0, 100, 0, 255)):
Abs.py(6): '''
Abs.py(9): class Abs(BaseNode.Node, AGNode):
 --- modulename: Abs, funcname: Abs
Abs.py(9): class Abs(BaseNode.Node, AGNode):
Abs.py(10):     def __init__(self, name, graph):
Abs.py(17):     @staticmethod
Abs.py(21):     @staticmethod
Abs.py(25):     def compute(self):
__init__.py(2): for n in os.listdir(os.path.dirname(__file__)):
__init__.py(3):     if n.endswith(".py") and "__init__" not in n:
__init__.py(2): for n in os.listdir(os.path.dirname(__file__)):
__init__.py(3):     if n.endswith(".py") and "__init__" not in n:
__init__.py(4):         nodeName = n.split(".")[0]
__init__.py(5):         exec("from {0} import *".format(nodeName))
 --- modulename: __init__, funcname: <module>
<string>(1):   --- modulename: ArrayAppend, funcname: <module>
ArrayAppend.py(1): from AbstractGraph import *
ArrayAppend.py(2): from AGraphPySide.Settings import *
ArrayAppend.py(3): from AGraphPySide import BaseNode
ArrayAppend.py(6): class ArrayAppend(BaseNode.Node, AGNode):
 --- modulename: ArrayAppend, funcname: ArrayAppend
ArrayAppend.py(6): class ArrayAppend(BaseNode.Node, AGNode):
ArrayAppend.py(7):     def __init__(self, name, graph):
ArrayAppend.py(21):     @staticmethod
ArrayAppend.py(25):     def compute(self):
__init__.py(2): for n in os.listdir(os.path.dirname(__file__)):
__init__.py(3):     if n.endswith(".py") and "__init__" not in n:
__init__.py(2): for n in os.listdir(os.path.dirname(__file__)):
__init__.py(3):     if n.endswith(".py") and "__init__" not in n:
__init__.py(4):         nodeName = n.split(".")[0]
__init__.py(5):         exec("from {0} import *".format(nodeName))
 --- modulename: __init__, funcname: <module>
<string>(1):   --- modulename: ArrayConcat, funcname: <module>
ArrayConcat.py(1): from AbstractGraph import *
ArrayConcat.py(2): from AGraphPySide.Settings import *
ArrayConcat.py(3): from AGraphPySide import BaseNode
ArrayConcat.py(6): class ArrayConcat(BaseNode.Node, AGNode):
 --- modulename: ArrayConcat, funcname: ArrayConcat
ArrayConcat.py(6): class ArrayConcat(BaseNode.Node, AGNode):
ArrayConcat.py(7):     def __init__(self, name, graph):
ArrayConcat.py(17):     @staticmethod
ArrayConcat.py(21):     def compute(self):
__init__.py(2): for n in os.listdir(os.path.dirname(__file__)):
__init__.py(3):     if n.endswith(".py") and "__init__" not in n:
__init__.py(2): for n in os.listdir(os.path.dirname(__file__)):
__init__.py(3):     if n.endswith(".py") and "__init__" not in n:
__init__.py(4):         nodeName = n.split(".")[0]
__init__.py(5):         exec("from {0} import *".format(nodeName))
 --- modulename: __init__, funcname: <module>
<string>(1):   --- modulename: BoolNode, funcname: <module>
BoolNode.py(1): from AbstractGraph import *
BoolNode.py(2): from AGraphPySide.Settings import *
BoolNode.py(3): from AGraphPySide import BaseNode
BoolNode.py(6): Boolean type."""
BoolNode.py(8): class BoolNode(BaseNode.Node, AGNode):
 --- modulename: BoolNode, funcname: BoolNode
BoolNode.py(8): class BoolNode(BaseNode.Node, AGNode):
BoolNode.py(9):     def __init__(self, name, graph):
BoolNode.py(31):     @staticmethod
BoolNode.py(35):     @staticmethod
BoolNode.py(39):     def on_set_cb_state(self, state):
BoolNode.py(42):     def compute(self):
__init__.py(2): for n in os.listdir(os.path.dirname(__file__)):
__init__.py(3):     if n.endswith(".py") and "__init__" not in n:
__init__.py(2): for n in os.listdir(os.path.dirname(__file__)):
__init__.py(3):     if n.endswith(".py") and "__init__" not in n:
__init__.py(4):         nodeName = n.split(".")[0]
__init__.py(5):         exec("from {0} import *".format(nodeName))
 --- modulename: __init__, funcname: <module>
<string>(1):   --- modulename: ConditionalValue, funcname: <module>
ConditionalValue.py(1): from AbstractGraph import *
ConditionalValue.py(2): from AGraphPySide.Settings import *
ConditionalValue.py(3): from AGraphPySide import BaseNode
ConditionalValue.py(6): class ConditionalValue(BaseNode.Node, AGNode):
 --- modulename: ConditionalValue, funcname: ConditionalValue
ConditionalValue.py(6): class ConditionalValue(BaseNode.Node, AGNode):
ConditionalValue.py(7):     def __init__(self, name, graph):
ConditionalValue.py(21):     @staticmethod
ConditionalValue.py(25):     def compute(self):
__init__.py(2): for n in os.listdir(os.path.dirname(__file__)):
__init__.py(3):     if n.endswith(".py") and "__init__" not in n:
__init__.py(2): for n in os.listdir(os.path.dirname(__file__)):
__init__.py(3):     if n.endswith(".py") and "__init__" not in n:
__init__.py(4):         nodeName = n.split(".")[0]
__init__.py(5):         exec("from {0} import *".format(nodeName))
 --- modulename: __init__, funcname: <module>
<string>(1):   --- modulename: Cos, funcname: <module>
Cos.py(1): from AbstractGraph import *
Cos.py(2): from AGraphPySide.Settings import *
Cos.py(3): from AGraphPySide import BaseNode
Cos.py(4): import math
Cos.py(7): '''
Cos.py(9): class Cos(BaseNode.Node, AGNode):
 --- modulename: Cos, funcname: Cos
Cos.py(9): class Cos(BaseNode.Node, AGNode):
Cos.py(10):     def __init__(self, name, graph):
Cos.py(17):     @staticmethod
Cos.py(21):     @staticmethod
Cos.py(25):     def compute(self):
__init__.py(2): for n in os.listdir(os.path.dirname(__file__)):
__init__.py(3):     if n.endswith(".py") and "__init__" not in n:
__init__.py(2): for n in os.listdir(os.path.dirname(__file__)):
__init__.py(3):     if n.endswith(".py") and "__init__" not in n:
__init__.py(4):         nodeName = n.split(".")[0]
__init__.py(5):         exec("from {0} import *".format(nodeName))
 --- modulename: __init__, funcname: <module>
<string>(1):   --- modulename: DegToRad, funcname: <module>
DegToRad.py(1): from AbstractGraph import *
DegToRad.py(2): from AGraphPySide.Settings import *
DegToRad.py(3): from AGraphPySide import BaseNode
DegToRad.py(4): import math
DegToRad.py(8): '''
DegToRad.py(10): class DegToRad(BaseNode.Node, AGNode):
 --- modulename: DegToRad, funcname: DegToRad
DegToRad.py(10): class DegToRad(BaseNode.Node, AGNode):
DegToRad.py(11):     def __init__(self, name, graph):
DegToRad.py(18):     @staticmethod
DegToRad.py(22):     @staticmethod
DegToRad.py(26):     def compute(self):
__init__.py(2): for n in os.listdir(os.path.dirname(__file__)):
__init__.py(3):     if n.endswith(".py") and "__init__" not in n:
__init__.py(2): for n in os.listdir(os.path.dirname(__file__)):
__init__.py(3):     if n.endswith(".py") and "__init__" not in n:
__init__.py(4):         nodeName = n.split(".")[0]
__init__.py(5):         exec("from {0} import *".format(nodeName))
 --- modulename: __init__, funcname: <module>
<string>(1):   --- modulename: DevideNode, funcname: <module>
DevideNode.py(1): from AGraphPySide import BaseNode
DevideNode.py(2): from AbstractGraph import *
DevideNode.py(5): class DevideNode(BaseNode.Node, AGNode):
 --- modulename: DevideNode, funcname: DevideNode
DevideNode.py(5): class DevideNode(BaseNode.Node, AGNode):
DevideNode.py(6):     def __init__(self, name, graph):
DevideNode.py(22):     def number_port_connected(self):
DevideNode.py(26):     @staticmethod
DevideNode.py(30):     def number_port_disconnected(self):
DevideNode.py(34):     def devider_port_connected(self):
DevideNode.py(38):     def devider_port_disconnected(self):
DevideNode.py(42):     def compute(self):
__init__.py(2): for n in os.listdir(os.path.dirname(__file__)):
__init__.py(3):     if n.endswith(".py") and "__init__" not in n:
__init__.py(2): for n in os.listdir(os.path.dirname(__file__)):
__init__.py(3):     if n.endswith(".py") and "__init__" not in n:
__init__.py(4):         nodeName = n.split(".")[0]
__init__.py(5):         exec("from {0} import *".format(nodeName))
 --- modulename: __init__, funcname: <module>
<string>(1):   --- modulename: DiscriminantNode, funcname: <module>
DiscriminantNode.py(1): from AGraphPySide import BaseNode
DiscriminantNode.py(2): from AbstractGraph import *
DiscriminantNode.py(5): class DiscriminantNode(BaseNode.Node, AGNode):
 --- modulename: DiscriminantNode, funcname: DiscriminantNode
DiscriminantNode.py(5): class DiscriminantNode(BaseNode.Node, AGNode):
DiscriminantNode.py(6):     def __init__(self, name, graph):
DiscriminantNode.py(17):     @staticmethod
DiscriminantNode.py(21):     def compute(self):
__init__.py(2): for n in os.listdir(os.path.dirname(__file__)):
__init__.py(3):     if n.endswith(".py") and "__init__" not in n:
__init__.py(2): for n in os.listdir(os.path.dirname(__file__)):
__init__.py(3):     if n.endswith(".py") and "__init__" not in n:
__init__.py(4):         nodeName = n.split(".")[0]
__init__.py(5):         exec("from {0} import *".format(nodeName))
 --- modulename: __init__, funcname: <module>
<string>(1):   --- modulename: FloatNode, funcname: <module>
FloatNode.py(1): from AbstractGraph import *
FloatNode.py(2): from AGraphPySide.Settings import *
FloatNode.py(3): from AGraphPySide import BaseNode
FloatNode.py(6): class DSBox(QtGui.QDoubleSpinBox):
 --- modulename: FloatNode, funcname: DSBox
FloatNode.py(6): class DSBox(QtGui.QDoubleSpinBox):
FloatNode.py(7):     def __init__(self, foo):
FloatNode.py(15): class FloatNode(BaseNode.Node, AGNode):
 --- modulename: FloatNode, funcname: FloatNode
FloatNode.py(15): class FloatNode(BaseNode.Node, AGNode):
FloatNode.py(16):     def __init__(self, name, graph):
FloatNode.py(33):     @staticmethod
FloatNode.py(37):     def set_data(self):
FloatNode.py(41):     def compute(self):
__init__.py(2): for n in os.listdir(os.path.dirname(__file__)):
__init__.py(3):     if n.endswith(".py") and "__init__" not in n:
__init__.py(2): for n in os.listdir(os.path.dirname(__file__)):
__init__.py(3):     if n.endswith(".py") and "__init__" not in n:
__init__.py(4):         nodeName = n.split(".")[0]
__init__.py(5):         exec("from {0} import *".format(nodeName))
 --- modulename: __init__, funcname: <module>
<string>(1):   --- modulename: FloatToInt, funcname: <module>
FloatToInt.py(1): from AbstractGraph import *
FloatToInt.py(2): from AGraphPySide.Settings import *
FloatToInt.py(3): from AGraphPySide import BaseNode
FloatToInt.py(6): class FloatToInt(BaseNode.Node, AGNode):
 --- modulename: FloatToInt, funcname: FloatToInt
FloatToInt.py(6): class FloatToInt(BaseNode.Node, AGNode):
FloatToInt.py(7):     def __init__(self, name, graph):
FloatToInt.py(14):     @staticmethod
FloatToInt.py(18):     @staticmethod
FloatToInt.py(22):     def compute(self):
__init__.py(2): for n in os.listdir(os.path.dirname(__file__)):
__init__.py(3):     if n.endswith(".py") and "__init__" not in n:
__init__.py(2): for n in os.listdir(os.path.dirname(__file__)):
__init__.py(3):     if n.endswith(".py") and "__init__" not in n:
__init__.py(4):         nodeName = n.split(".")[0]
__init__.py(5):         exec("from {0} import *".format(nodeName))
 --- modulename: __init__, funcname: <module>
<string>(1):   --- modulename: Index, funcname: <module>
Index.py(1): from AbstractGraph import *
Index.py(2): from AGraphPySide.Settings import *
Index.py(3): from AGraphPySide import BaseNode
Index.py(6): class Index(BaseNode.Node, AGNode):
 --- modulename: Index, funcname: Index
Index.py(6): class Index(BaseNode.Node, AGNode):
Index.py(7):     def __init__(self, name, graph):
Index.py(17):     @staticmethod
Index.py(21):     def compute(self):
__init__.py(2): for n in os.listdir(os.path.dirname(__file__)):
__init__.py(3):     if n.endswith(".py") and "__init__" not in n:
__init__.py(2): for n in os.listdir(os.path.dirname(__file__)):
__init__.py(3):     if n.endswith(".py") and "__init__" not in n:
__init__.py(4):         nodeName = n.split(".")[0]
__init__.py(5):         exec("from {0} import *".format(nodeName))
 --- modulename: __init__, funcname: <module>
<string>(1):   --- modulename: IntNode, funcname: <module>
IntNode.py(1): from AbstractGraph import *
IntNode.py(2): from AGraphPySide.Settings import *
IntNode.py(3): from AGraphPySide import BaseNode
IntNode.py(6): class SBox(QtGui.QSpinBox):
 --- modulename: IntNode, funcname: SBox
IntNode.py(6): class SBox(QtGui.QSpinBox):
IntNode.py(7):     def __init__(self, foo):
IntNode.py(15): class IntNode(BaseNode.Node, AGNode):
 --- modulename: IntNode, funcname: IntNode
IntNode.py(15): class IntNode(BaseNode.Node, AGNode):
IntNode.py(16):     def __init__(self, name, graph):
IntNode.py(34):     @staticmethod
IntNode.py(38):     def set_data(self):
IntNode.py(42):     def compute(self):
__init__.py(2): for n in os.listdir(os.path.dirname(__file__)):
__init__.py(3):     if n.endswith(".py") and "__init__" not in n:
__init__.py(2): for n in os.listdir(os.path.dirname(__file__)):
__init__.py(3):     if n.endswith(".py") and "__init__" not in n:
__init__.py(4):         nodeName = n.split(".")[0]
__init__.py(5):         exec("from {0} import *".format(nodeName))
 --- modulename: __init__, funcname: <module>
<string>(1):   --- modulename: IsArray, funcname: <module>
IsArray.py(1): from AbstractGraph import *
IsArray.py(2): from AGraphPySide.Settings import *
IsArray.py(3): from AGraphPySide import BaseNode
IsArray.py(6): class IsArray(BaseNode.Node, AGNode):
 --- modulename: IsArray, funcname: IsArray
IsArray.py(6): class IsArray(BaseNode.Node, AGNode):
IsArray.py(7):     def __init__(self, name, graph):
IsArray.py(14):     @staticmethod
IsArray.py(18):     def compute(self):
__init__.py(2): for n in os.listdir(os.path.dirname(__file__)):
__init__.py(3):     if n.endswith(".py") and "__init__" not in n:
__init__.py(2): for n in os.listdir(os.path.dirname(__file__)):
__init__.py(3):     if n.endswith(".py") and "__init__" not in n:
__init__.py(4):         nodeName = n.split(".")[0]
__init__.py(5):         exec("from {0} import *".format(nodeName))
 --- modulename: __init__, funcname: <module>
<string>(1):   --- modulename: IsEqual, funcname: <module>
IsEqual.py(1): from AGraphPySide import BaseNode
IsEqual.py(2): from AbstractGraph import *
IsEqual.py(5): class IsEqual(BaseNode.Node, AGNode):
 --- modulename: IsEqual, funcname: IsEqual
IsEqual.py(5): class IsEqual(BaseNode.Node, AGNode):
IsEqual.py(6):     def __init__(self, name, graph):
IsEqual.py(15):     @staticmethod
IsEqual.py(19):     def compute(self):
__init__.py(2): for n in os.listdir(os.path.dirname(__file__)):
__init__.py(3):     if n.endswith(".py") and "__init__" not in n:
__init__.py(2): for n in os.listdir(os.path.dirname(__file__)):
__init__.py(3):     if n.endswith(".py") and "__init__" not in n:
__init__.py(4):         nodeName = n.split(".")[0]
__init__.py(5):         exec("from {0} import *".format(nodeName))
 --- modulename: __init__, funcname: <module>
<string>(1):   --- modulename: IsGreaterThan, funcname: <module>
IsGreaterThan.py(1): from AGraphPySide import BaseNode
IsGreaterThan.py(2): from AbstractGraph import *
IsGreaterThan.py(5): class IsGreaterThan(BaseNode.Node, AGNode):
 --- modulename: IsGreaterThan, funcname: IsGreaterThan
IsGreaterThan.py(5): class IsGreaterThan(BaseNode.Node, AGNode):
IsGreaterThan.py(6):     def __init__(self, name, graph):
IsGreaterThan.py(15):     @staticmethod
IsGreaterThan.py(19):     def compute(self):
__init__.py(2): for n in os.listdir(os.path.dirname(__file__)):
__init__.py(3):     if n.endswith(".py") and "__init__" not in n:
__init__.py(2): for n in os.listdir(os.path.dirname(__file__)):
__init__.py(3):     if n.endswith(".py") and "__init__" not in n:
__init__.py(4):         nodeName = n.split(".")[0]
__init__.py(5):         exec("from {0} import *".format(nodeName))
 --- modulename: __init__, funcname: <module>
<string>(1):   --- modulename: IsLessThan, funcname: <module>
IsLessThan.py(1): from AGraphPySide import BaseNode
IsLessThan.py(2): from AbstractGraph import *
IsLessThan.py(5): class IsLessThan(BaseNode.Node, AGNode):
 --- modulename: IsLessThan, funcname: IsLessThan
IsLessThan.py(5): class IsLessThan(BaseNode.Node, AGNode):
IsLessThan.py(6):     def __init__(self, name, graph):
IsLessThan.py(15):     @staticmethod
IsLessThan.py(19):     def compute(self):
__init__.py(2): for n in os.listdir(os.path.dirname(__file__)):
__init__.py(3):     if n.endswith(".py") and "__init__" not in n:
__init__.py(2): for n in os.listdir(os.path.dirname(__file__)):
__init__.py(3):     if n.endswith(".py") and "__init__" not in n:
__init__.py(4):         nodeName = n.split(".")[0]
__init__.py(5):         exec("from {0} import *".format(nodeName))
 --- modulename: __init__, funcname: <module>
<string>(1):   --- modulename: Len, funcname: <module>
Len.py(1): from AbstractGraph import *
Len.py(2): from AGraphPySide.Settings import *
Len.py(3): from AGraphPySide import BaseNode
Len.py(6): class Len(BaseNode.Node, AGNode):
 --- modulename: Len, funcname: Len
Len.py(6): class Len(BaseNode.Node, AGNode):
Len.py(7):     def __init__(self, name, graph):
Len.py(18):     @staticmethod
Len.py(22):     def compute(self):
__init__.py(2): for n in os.listdir(os.path.dirname(__file__)):
__init__.py(3):     if n.endswith(".py") and "__init__" not in n:
__init__.py(2): for n in os.listdir(os.path.dirname(__file__)):
__init__.py(3):     if n.endswith(".py") and "__init__" not in n:
__init__.py(4):         nodeName = n.split(".")[0]
__init__.py(5):         exec("from {0} import *".format(nodeName))
 --- modulename: __init__, funcname: <module>
<string>(1):   --- modulename: MakeArray, funcname: <module>
MakeArray.py(1): from AbstractGraph import *
MakeArray.py(2): from AGraphPySide.Settings import *
MakeArray.py(3): from AGraphPySide import BaseNode
MakeArray.py(6): class MakeArray(BaseNode.Node, AGNode):
 --- modulename: MakeArray, funcname: MakeArray
MakeArray.py(6): class MakeArray(BaseNode.Node, AGNode):
MakeArray.py(7):     def __init__(self, name, graph, ports_number=0):
MakeArray.py(27):     def post_create(self):
MakeArray.py(33):     def save_command(self):
MakeArray.py(36):     def addInPort(self):
MakeArray.py(44):     @staticmethod
MakeArray.py(48):     def compute(self):
__init__.py(2): for n in os.listdir(os.path.dirname(__file__)):
__init__.py(3):     if n.endswith(".py") and "__init__" not in n:
__init__.py(2): for n in os.listdir(os.path.dirname(__file__)):
__init__.py(3):     if n.endswith(".py") and "__init__" not in n:
__init__.py(4):         nodeName = n.split(".")[0]
__init__.py(5):         exec("from {0} import *".format(nodeName))
 --- modulename: __init__, funcname: <module>
<string>(1):   --- modulename: Max, funcname: <module>
Max.py(1): from AbstractGraph import *
Max.py(2): from AGraphPySide.Settings import *
Max.py(3): from AGraphPySide import BaseNode
Max.py(6): '''
Max.py(8): class Max(BaseNode.Node, AGNode):
 --- modulename: Max, funcname: Max
Max.py(8): class Max(BaseNode.Node, AGNode):
Max.py(9):     def __init__(self, name, graph):
Max.py(16):     @staticmethod
Max.py(20):     @staticmethod
Max.py(24):     def compute(self):
__init__.py(2): for n in os.listdir(os.path.dirname(__file__)):
__init__.py(3):     if n.endswith(".py") and "__init__" not in n:
__init__.py(2): for n in os.listdir(os.path.dirname(__file__)):
__init__.py(3):     if n.endswith(".py") and "__init__" not in n:
__init__.py(4):         nodeName = n.split(".")[0]
__init__.py(5):         exec("from {0} import *".format(nodeName))
 --- modulename: __init__, funcname: <module>
<string>(1):   --- modulename: Min, funcname: <module>
Min.py(1): from AbstractGraph import *
Min.py(2): from AGraphPySide.Settings import *
Min.py(3): from AGraphPySide import BaseNode
Min.py(7): '''
Min.py(9): class Min(BaseNode.Node, AGNode):
 --- modulename: Min, funcname: Min
Min.py(9): class Min(BaseNode.Node, AGNode):
Min.py(10):     def __init__(self, name, graph):
Min.py(17):     @staticmethod
Min.py(21):     @staticmethod
Min.py(25):     def compute(self):
__init__.py(2): for n in os.listdir(os.path.dirname(__file__)):
__init__.py(3):     if n.endswith(".py") and "__init__" not in n:
__init__.py(2): for n in os.listdir(os.path.dirname(__file__)):
__init__.py(3):     if n.endswith(".py") and "__init__" not in n:
__init__.py(4):         nodeName = n.split(".")[0]
__init__.py(5):         exec("from {0} import *".format(nodeName))
 --- modulename: __init__, funcname: <module>
<string>(1):   --- modulename: MultNode, funcname: <module>
MultNode.py(1): from AGraphPySide import BaseNode
MultNode.py(2): from AbstractGraph import *
MultNode.py(5): class MultNode(BaseNode.Node, AGNode):
 --- modulename: MultNode, funcname: MultNode
MultNode.py(5): class MultNode(BaseNode.Node, AGNode):
MultNode.py(6):     def __init__(self, name, graph):
MultNode.py(15):     @staticmethod
MultNode.py(19):     def compute(self):
__init__.py(2): for n in os.listdir(os.path.dirname(__file__)):
__init__.py(3):     if n.endswith(".py") and "__init__" not in n:
__init__.py(2): for n in os.listdir(os.path.dirname(__file__)):
__init__.py(3):     if n.endswith(".py") and "__init__" not in n:
__init__.py(4):         nodeName = n.split(".")[0]
__init__.py(5):         exec("from {0} import *".format(nodeName))
 --- modulename: __init__, funcname: <module>
<string>(1):   --- modulename: Not, funcname: <module>
Not.py(1): from AbstractGraph import *
Not.py(2): from AGraphPySide.Settings import *
Not.py(3): from AGraphPySide import BaseNode
Not.py(7): """
Not.py(10): class Not(BaseNode.Node, AGNode):
 --- modulename: Not, funcname: Not
Not.py(10): class Not(BaseNode.Node, AGNode):
Not.py(11):     def __init__(self, name, graph):
Not.py(18):     @staticmethod
Not.py(22):     @staticmethod
Not.py(26):     def compute(self):
__init__.py(2): for n in os.listdir(os.path.dirname(__file__)):
__init__.py(3):     if n.endswith(".py") and "__init__" not in n:
__init__.py(2): for n in os.listdir(os.path.dirname(__file__)):
__init__.py(3):     if n.endswith(".py") and "__init__" not in n:
__init__.py(4):         nodeName = n.split(".")[0]
__init__.py(5):         exec("from {0} import *".format(nodeName))
 --- modulename: __init__, funcname: <module>
<string>(1):   --- modulename: PowNode, funcname: <module>
PowNode.py(1): from AGraphPySide import BaseNode
PowNode.py(2): from AbstractGraph import *
PowNode.py(5): class PowNode(BaseNode.Node, AGNode):
 --- modulename: PowNode, funcname: PowNode
PowNode.py(5): class PowNode(BaseNode.Node, AGNode):
PowNode.py(6):     def __init__(self, name, graph):
PowNode.py(15):     @staticmethod
PowNode.py(19):     def compute(self):
__init__.py(2): for n in os.listdir(os.path.dirname(__file__)):
__init__.py(3):     if n.endswith(".py") and "__init__" not in n:
__init__.py(2): for n in os.listdir(os.path.dirname(__file__)):
__init__.py(3):     if n.endswith(".py") and "__init__" not in n:
__init__.py(4):         nodeName = n.split(".")[0]
__init__.py(5):         exec("from {0} import *".format(nodeName))
 --- modulename: __init__, funcname: <module>
<string>(1):   --- modulename: RadToDeg, funcname: <module>
RadToDeg.py(1): from AbstractGraph import *
RadToDeg.py(2): from AGraphPySide.Settings import *
RadToDeg.py(3): from AGraphPySide import BaseNode
RadToDeg.py(4): import math
RadToDeg.py(8): '''
RadToDeg.py(10): class RadToDeg(BaseNode.Node, AGNode):
 --- modulename: RadToDeg, funcname: RadToDeg
RadToDeg.py(10): class RadToDeg(BaseNode.Node, AGNode):
RadToDeg.py(11):     def __init__(self, name, graph):
RadToDeg.py(18):     @staticmethod
RadToDeg.py(22):     @staticmethod
RadToDeg.py(26):     def compute(self):
__init__.py(2): for n in os.listdir(os.path.dirname(__file__)):
__init__.py(3):     if n.endswith(".py") and "__init__" not in n:
__init__.py(2): for n in os.listdir(os.path.dirname(__file__)):
__init__.py(3):     if n.endswith(".py") and "__init__" not in n:
__init__.py(4):         nodeName = n.split(".")[0]
__init__.py(5):         exec("from {0} import *".format(nodeName))
 --- modulename: __init__, funcname: <module>
<string>(1):   --- modulename: RandInt, funcname: <module>
RandInt.py(1): from AbstractGraph import *
RandInt.py(2): from AGraphPySide.Settings import *
RandInt.py(3): from AGraphPySide import BaseNode
RandInt.py(4): from random import randint
 --- modulename: random, funcname: <module>
random.py(40): """
random.py(42): from __future__ import division
 --- modulename: __future__, funcname: <module>
__future__.py(48): """
__future__.py(51):     "nested_scopes",
__future__.py(52):     "generators",
__future__.py(53):     "division",
__future__.py(54):     "absolute_import",
__future__.py(55):     "with_statement",
__future__.py(56):     "print_function",
__future__.py(57):     "unicode_literals",
__future__.py(60): __all__ = ["all_feature_names"] + all_feature_names
__future__.py(66): CO_NESTED            = 0x0010   # nested_scopes
__future__.py(67): CO_GENERATOR_ALLOWED = 0        # generators (obsolete, was 0x1000)
__future__.py(68): CO_FUTURE_DIVISION   = 0x2000   # division
__future__.py(69): CO_FUTURE_ABSOLUTE_IMPORT = 0x4000 # perform absolute imports by default
__future__.py(70): CO_FUTURE_WITH_STATEMENT  = 0x8000   # with statement
__future__.py(71): CO_FUTURE_PRINT_FUNCTION  = 0x10000   # print function
__future__.py(72): CO_FUTURE_UNICODE_LITERALS = 0x20000 # unicode string literals
__future__.py(74): class _Feature:
 --- modulename: __future__, funcname: _Feature
__future__.py(74): class _Feature:
__future__.py(75):     def __init__(self, optionalRelease, mandatoryRelease, compiler_flag):
__future__.py(80):     def getOptionalRelease(self):
__future__.py(88):     def getMandatoryRelease(self):
__future__.py(97):     def __repr__(self):
__future__.py(102): nested_scopes = _Feature((2, 1, 0, "beta",  1),
__future__.py(103):                          (2, 2, 0, "alpha", 0),
__future__.py(104):                          CO_NESTED)
 --- modulename: __future__, funcname: __init__
__future__.py(76):         self.optional = optionalRelease
__future__.py(77):         self.mandatory = mandatoryRelease
__future__.py(78):         self.compiler_flag = compiler_flag
__future__.py(106): generators = _Feature((2, 2, 0, "alpha", 1),
__future__.py(107):                       (2, 3, 0, "final", 0),
__future__.py(108):                       CO_GENERATOR_ALLOWED)
 --- modulename: __future__, funcname: __init__
__future__.py(76):         self.optional = optionalRelease
__future__.py(77):         self.mandatory = mandatoryRelease
__future__.py(78):         self.compiler_flag = compiler_flag
__future__.py(110): division = _Feature((2, 2, 0, "alpha", 2),
__future__.py(111):                     (3, 0, 0, "alpha", 0),
__future__.py(112):                     CO_FUTURE_DIVISION)
 --- modulename: __future__, funcname: __init__
__future__.py(76):         self.optional = optionalRelease
__future__.py(77):         self.mandatory = mandatoryRelease
__future__.py(78):         self.compiler_flag = compiler_flag
__future__.py(114): absolute_import = _Feature((2, 5, 0, "alpha", 1),
__future__.py(115):                            (3, 0, 0, "alpha", 0),
__future__.py(116):                            CO_FUTURE_ABSOLUTE_IMPORT)
 --- modulename: __future__, funcname: __init__
__future__.py(76):         self.optional = optionalRelease
__future__.py(77):         self.mandatory = mandatoryRelease
__future__.py(78):         self.compiler_flag = compiler_flag
__future__.py(118): with_statement = _Feature((2, 5, 0, "alpha", 1),
__future__.py(119):                           (2, 6, 0, "alpha", 0),
__future__.py(120):                           CO_FUTURE_WITH_STATEMENT)
 --- modulename: __future__, funcname: __init__
__future__.py(76):         self.optional = optionalRelease
__future__.py(77):         self.mandatory = mandatoryRelease
__future__.py(78):         self.compiler_flag = compiler_flag
__future__.py(122): print_function = _Feature((2, 6, 0, "alpha", 2),
__future__.py(123):                           (3, 0, 0, "alpha", 0),
__future__.py(124):                           CO_FUTURE_PRINT_FUNCTION)
 --- modulename: __future__, funcname: __init__
__future__.py(76):         self.optional = optionalRelease
__future__.py(77):         self.mandatory = mandatoryRelease
__future__.py(78):         self.compiler_flag = compiler_flag
__future__.py(126): unicode_literals = _Feature((2, 6, 0, "alpha", 2),
__future__.py(127):                             (3, 0, 0, "alpha", 0),
__future__.py(128):                             CO_FUTURE_UNICODE_LITERALS)
 --- modulename: __future__, funcname: __init__
__future__.py(76):         self.optional = optionalRelease
__future__.py(77):         self.mandatory = mandatoryRelease
__future__.py(78):         self.compiler_flag = compiler_flag
random.py(43): from warnings import warn as _warn
random.py(44): from types import MethodType as _MethodType, BuiltinMethodType as _BuiltinMethodType
random.py(45): from math import log as _log, exp as _exp, pi as _pi, e as _e, ceil as _ceil
random.py(46): from math import sqrt as _sqrt, acos as _acos, cos as _cos, sin as _sin
random.py(47): from os import urandom as _urandom
random.py(48): from binascii import hexlify as _hexlify
random.py(49): import hashlib as _hashlib
 --- modulename: hashlib, funcname: <module>
hashlib.py(56): """
hashlib.py(60): __always_supported = ('md5', 'sha1', 'sha224', 'sha256', 'sha384', 'sha512')
hashlib.py(62): algorithms_guaranteed = set(__always_supported)
hashlib.py(63): algorithms_available = set(__always_supported)
hashlib.py(65): algorithms = __always_supported
hashlib.py(67): __all__ = __always_supported + ('new', 'algorithms_guaranteed',
hashlib.py(69):                                 'pbkdf2_hmac')
hashlib.py(72): def __get_builtin_constructor(name):
hashlib.py(100): def __get_openssl_constructor(name):
hashlib.py(112): def __py_new(name, string=''):
hashlib.py(119): def __hash_new(name, string=''):
hashlib.py(133): try:
hashlib.py(134):     import _hashlib
hashlib.py(135):     new = __hash_new
hashlib.py(136):     __get_hash = __get_openssl_constructor
hashlib.py(137):     algorithms_available = algorithms_available.union(
hashlib.py(138):         _hashlib.openssl_md_meth_names)
hashlib.py(143): for __func_name in __always_supported:
hashlib.py(146):     try:
hashlib.py(147):         globals()[__func_name] = __get_hash(__func_name)
 --- modulename: hashlib, funcname: __get_openssl_constructor
hashlib.py(101):     try:
hashlib.py(102):         f = getattr(_hashlib, 'openssl_' + name)
hashlib.py(105):         f()
hashlib.py(107):         return f
hashlib.py(143): for __func_name in __always_supported:
hashlib.py(146):     try:
hashlib.py(147):         globals()[__func_name] = __get_hash(__func_name)
 --- modulename: hashlib, funcname: __get_openssl_constructor
hashlib.py(101):     try:
hashlib.py(102):         f = getattr(_hashlib, 'openssl_' + name)
hashlib.py(105):         f()
hashlib.py(107):         return f
hashlib.py(143): for __func_name in __always_supported:
hashlib.py(146):     try:
hashlib.py(147):         globals()[__func_name] = __get_hash(__func_name)
 --- modulename: hashlib, funcname: __get_openssl_constructor
hashlib.py(101):     try:
hashlib.py(102):         f = getattr(_hashlib, 'openssl_' + name)
hashlib.py(105):         f()
hashlib.py(107):         return f
hashlib.py(143): for __func_name in __always_supported:
hashlib.py(146):     try:
hashlib.py(147):         globals()[__func_name] = __get_hash(__func_name)
 --- modulename: hashlib, funcname: __get_openssl_constructor
hashlib.py(101):     try:
hashlib.py(102):         f = getattr(_hashlib, 'openssl_' + name)
hashlib.py(105):         f()
hashlib.py(107):         return f
hashlib.py(143): for __func_name in __always_supported:
hashlib.py(146):     try:
hashlib.py(147):         globals()[__func_name] = __get_hash(__func_name)
 --- modulename: hashlib, funcname: __get_openssl_constructor
hashlib.py(101):     try:
hashlib.py(102):         f = getattr(_hashlib, 'openssl_' + name)
hashlib.py(105):         f()
hashlib.py(107):         return f
hashlib.py(143): for __func_name in __always_supported:
hashlib.py(146):     try:
hashlib.py(147):         globals()[__func_name] = __get_hash(__func_name)
 --- modulename: hashlib, funcname: __get_openssl_constructor
hashlib.py(101):     try:
hashlib.py(102):         f = getattr(_hashlib, 'openssl_' + name)
hashlib.py(105):         f()
hashlib.py(107):         return f
hashlib.py(143): for __func_name in __always_supported:
hashlib.py(153): try:
hashlib.py(155):     from _hashlib import pbkdf2_hmac
hashlib.py(220): del __always_supported, __func_name, __get_hash
hashlib.py(221): del __py_new, __hash_new, __get_openssl_constructor
random.py(51): __all__ = ["Random","seed","random","uniform","randint","choice","sample",
random.py(52):            "randrange","shuffle","normalvariate","lognormvariate",
random.py(53):            "expovariate","vonmisesvariate","gammavariate","triangular",
random.py(54):            "gauss","betavariate","paretovariate","weibullvariate",
random.py(55):            "getstate","setstate","jumpahead", "WichmannHill", "getrandbits",
random.py(56):            "SystemRandom"]
random.py(58): NV_MAGICCONST = 4 * _exp(-0.5)/_sqrt(2.0)
random.py(59): TWOPI = 2.0*_pi
random.py(60): LOG4 = _log(4.0)
random.py(61): SG_MAGICCONST = 1.0 + _log(4.5)
random.py(62): BPF = 53        # Number of bits in a float
random.py(63): RECIP_BPF = 2**-BPF
random.py(70): import _random
random.py(72): class Random(_random.Random):
 --- modulename: random, funcname: Random
random.py(72): class Random(_random.Random):
random.py(87):     """
random.py(89):     VERSION = 3     # used by getstate/setstate
random.py(91):     def __init__(self, x=None):
random.py(100):     def seed(self, a=None):
random.py(121):     def getstate(self):
random.py(125):     def setstate(self, state):
random.py(147):     def jumpahead(self, n):
random.py(164):     def __getstate__(self): # for pickle
random.py(167):     def __setstate__(self, state):  # for pickle
random.py(170):     def __reduce__(self):
random.py(175):     def randrange(self, start, stop=None, step=1, _int=int, _maxwidth=1L<<BPF):
random.py(238):     def randint(self, a, b):
random.py(244):     def _randbelow(self, n, _log=_log, _int=int, _maxwidth=1L<<BPF,
random.py(245):                    _Method=_MethodType, _BuiltinMethod=_BuiltinMethodType):
random.py(273):     def choice(self, seq):
random.py(277):     def shuffle(self, x, random=None):
random.py(293):     def sample(self, population, k):
random.py(358):     def uniform(self, a, b):
random.py(364):     def triangular(self, low=0.0, high=1.0, mode=None):
random.py(386):     def normalvariate(self, mu, sigma):
random.py(411):     def lognormvariate(self, mu, sigma):
random.py(423):     def expovariate(self, lambd):
random.py(442):     def vonmisesvariate(self, mu, kappa):
random.py(490):     def gammavariate(self, alpha, beta):
random.py(562):     def gauss(self, mu, sigma):
random.py(615):     def betavariate(self, alpha, beta):
random.py(633):     def paretovariate(self, alpha):
random.py(642):     def weibullvariate(self, alpha, beta):
random.py(655): class WichmannHill(Random):
 --- modulename: random, funcname: WichmannHill
random.py(655): class WichmannHill(Random):
random.py(657):     VERSION = 1     # used by getstate/setstate
random.py(659):     def seed(self, a=None):
random.py(690):     def random(self):
random.py(721):     def getstate(self):
random.py(725):     def setstate(self, state):
random.py(735):     def jumpahead(self, n):
random.py(757):     def __whseed(self, x=0, y=0, z=0):
random.py(780):     def whseed(self, a=None):
random.py(805): class SystemRandom(Random):
 --- modulename: random, funcname: SystemRandom
random.py(805): class SystemRandom(Random):
random.py(811):     """
random.py(813):     def random(self):
random.py(817):     def getrandbits(self, k):
random.py(827):     def _stub(self, *args, **kwds):
random.py(830):     seed = jumpahead = _stub
random.py(832):     def _notimplemented(self, *args, **kwds):
random.py(835):     getstate = setstate = _notimplemented
random.py(839): def _test_generator(n, func, args):
random.py(861): def _test(N=2000):
random.py(885): _inst = Random()
 --- modulename: random, funcname: __init__
random.py(97):         self.seed(x)
 --- modulename: random, funcname: seed
random.py(109):         if a is None:
random.py(110):             try:
random.py(113):                 a = long(_hexlify(_urandom(2500)), 16)
random.py(118):         super(Random, self).seed(a)
random.py(119):         self.gauss_next = None
random.py(98):         self.gauss_next = None
random.py(886): seed = _inst.seed
random.py(887): random = _inst.random
random.py(888): uniform = _inst.uniform
random.py(889): triangular = _inst.triangular
random.py(890): randint = _inst.randint
random.py(891): choice = _inst.choice
random.py(892): randrange = _inst.randrange
random.py(893): sample = _inst.sample
random.py(894): shuffle = _inst.shuffle
random.py(895): normalvariate = _inst.normalvariate
random.py(896): lognormvariate = _inst.lognormvariate
random.py(897): expovariate = _inst.expovariate
random.py(898): vonmisesvariate = _inst.vonmisesvariate
random.py(899): gammavariate = _inst.gammavariate
random.py(900): gauss = _inst.gauss
random.py(901): betavariate = _inst.betavariate
random.py(902): paretovariate = _inst.paretovariate
random.py(903): weibullvariate = _inst.weibullvariate
random.py(904): getstate = _inst.getstate
random.py(905): setstate = _inst.setstate
random.py(906): jumpahead = _inst.jumpahead
random.py(907): getrandbits = _inst.getrandbits
random.py(909): if __name__ == '__main__':
RandInt.py(7): '''
RandInt.py(9): class RandInt(BaseNode.Node, AGNode):
 --- modulename: RandInt, funcname: RandInt
RandInt.py(9): class RandInt(BaseNode.Node, AGNode):
RandInt.py(10):     def __init__(self, name, graph):
RandInt.py(19):     @staticmethod
RandInt.py(23):     @staticmethod
RandInt.py(27):     def compute(self):
__init__.py(2): for n in os.listdir(os.path.dirname(__file__)):
__init__.py(3):     if n.endswith(".py") and "__init__" not in n:
__init__.py(2): for n in os.listdir(os.path.dirname(__file__)):
__init__.py(3):     if n.endswith(".py") and "__init__" not in n:
__init__.py(4):         nodeName = n.split(".")[0]
__init__.py(5):         exec("from {0} import *".format(nodeName))
 --- modulename: __init__, funcname: <module>
<string>(1):   --- modulename: RequestNode, funcname: <module>
RequestNode.py(1): from PySide import QtCore
RequestNode.py(2): from AbstractGraph import *
RequestNode.py(3): from AGraphPySide.Settings import *
RequestNode.py(4): from AGraphPySide import BaseNode
RequestNode.py(7): class RequestNode(BaseNode.Node, AGNode):
 --- modulename: RequestNode, funcname: RequestNode
RequestNode.py(7): class RequestNode(BaseNode.Node, AGNode):
RequestNode.py(8):     def __init__(self, name, graph, colors=Colors):
RequestNode.py(41):     @staticmethod
RequestNode.py(45):     def startEval(self, deltatime):
RequestNode.py(51):     def kill(self, call_connection_functions=False):
RequestNode.py(56):     def compute(self):
__init__.py(2): for n in os.listdir(os.path.dirname(__file__)):
__init__.py(3):     if n.endswith(".py") and "__init__" not in n:
__init__.py(2): for n in os.listdir(os.path.dirname(__file__)):
__init__.py(3):     if n.endswith(".py") and "__init__" not in n:
__init__.py(4):         nodeName = n.split(".")[0]
__init__.py(5):         exec("from {0} import *".format(nodeName))
 --- modulename: __init__, funcname: <module>
<string>(1):   --- modulename: Reroute, funcname: <module>
Reroute.py(1): from AbstractGraph import *
Reroute.py(2): from AGraphPySide.Settings import *
Reroute.py(3): from AGraphPySide import BaseNode
Reroute.py(6): '''
Reroute.py(8): class Reroute(BaseNode.Node, AGNode):
 --- modulename: Reroute, funcname: Reroute
Reroute.py(8): class Reroute(BaseNode.Node, AGNode):
Reroute.py(9):     def __init__(self, name, graph):
Reroute.py(33):     @staticmethod
Reroute.py(37):     @staticmethod
Reroute.py(41):     def compute(self):
__init__.py(2): for n in os.listdir(os.path.dirname(__file__)):
__init__.py(3):     if n.endswith(".py") and "__init__" not in n:
__init__.py(2): for n in os.listdir(os.path.dirname(__file__)):
__init__.py(3):     if n.endswith(".py") and "__init__" not in n:
__init__.py(4):         nodeName = n.split(".")[0]
__init__.py(5):         exec("from {0} import *".format(nodeName))
 --- modulename: __init__, funcname: <module>
<string>(1):   --- modulename: Sin, funcname: <module>
Sin.py(1): from AbstractGraph import *
Sin.py(2): from AGraphPySide.Settings import *
Sin.py(3): from AGraphPySide import BaseNode
Sin.py(4): import math
Sin.py(7): '''
Sin.py(9): class Sin(BaseNode.Node, AGNode):
 --- modulename: Sin, funcname: Sin
Sin.py(9): class Sin(BaseNode.Node, AGNode):
Sin.py(10):     def __init__(self, name, graph):
Sin.py(17):     @staticmethod
Sin.py(21):     @staticmethod
Sin.py(25):     def compute(self):
__init__.py(2): for n in os.listdir(os.path.dirname(__file__)):
__init__.py(3):     if n.endswith(".py") and "__init__" not in n:
__init__.py(2): for n in os.listdir(os.path.dirname(__file__)):
__init__.py(3):     if n.endswith(".py") and "__init__" not in n:
__init__.py(4):         nodeName = n.split(".")[0]
__init__.py(5):         exec("from {0} import *".format(nodeName))
 --- modulename: __init__, funcname: <module>
<string>(1):   --- modulename: StringAppend, funcname: <module>
StringAppend.py(1): from AGraphPySide import BaseNode
StringAppend.py(2): from AbstractGraph import *
StringAppend.py(5): class StringAppend(BaseNode.Node, AGNode):
 --- modulename: StringAppend, funcname: StringAppend
StringAppend.py(5): class StringAppend(BaseNode.Node, AGNode):
StringAppend.py(6):     def __init__(self, name, graph):
StringAppend.py(15):     @staticmethod
StringAppend.py(19):     def compute(self):
__init__.py(2): for n in os.listdir(os.path.dirname(__file__)):
__init__.py(3):     if n.endswith(".py") and "__init__" not in n:
__init__.py(2): for n in os.listdir(os.path.dirname(__file__)):
__init__.py(3):     if n.endswith(".py") and "__init__" not in n:
__init__.py(4):         nodeName = n.split(".")[0]
__init__.py(5):         exec("from {0} import *".format(nodeName))
 --- modulename: __init__, funcname: <module>
<string>(1):   --- modulename: StringCapitalize, funcname: <module>
StringCapitalize.py(1): from AbstractGraph import *
StringCapitalize.py(2): from AGraphPySide.Settings import *
StringCapitalize.py(3): from AGraphPySide import BaseNode
StringCapitalize.py(6): class StringCapitalize(BaseNode.Node, AGNode):
 --- modulename: StringCapitalize, funcname: StringCapitalize
StringCapitalize.py(6): class StringCapitalize(BaseNode.Node, AGNode):
StringCapitalize.py(7):     def __init__(self, name, graph):
StringCapitalize.py(16):     @staticmethod
StringCapitalize.py(20):     def compute(self):
__init__.py(2): for n in os.listdir(os.path.dirname(__file__)):
__init__.py(3):     if n.endswith(".py") and "__init__" not in n:
__init__.py(2): for n in os.listdir(os.path.dirname(__file__)):
__init__.py(3):     if n.endswith(".py") and "__init__" not in n:
__init__.py(4):         nodeName = n.split(".")[0]
__init__.py(5):         exec("from {0} import *".format(nodeName))
 --- modulename: __init__, funcname: <module>
<string>(1):   --- modulename: StringContains, funcname: <module>
StringContains.py(1): from AGraphPySide import BaseNode
StringContains.py(2): from AbstractGraph import *
StringContains.py(5): class StringContains(BaseNode.Node, AGNode):
 --- modulename: StringContains, funcname: StringContains
StringContains.py(5): class StringContains(BaseNode.Node, AGNode):
StringContains.py(6):     def __init__(self, name, graph):
StringContains.py(15):     @staticmethod
StringContains.py(19):     def compute(self):
__init__.py(2): for n in os.listdir(os.path.dirname(__file__)):
__init__.py(3):     if n.endswith(".py") and "__init__" not in n:
__init__.py(2): for n in os.listdir(os.path.dirname(__file__)):
__init__.py(3):     if n.endswith(".py") and "__init__" not in n:
__init__.py(4):         nodeName = n.split(".")[0]
__init__.py(5):         exec("from {0} import *".format(nodeName))
 --- modulename: __init__, funcname: <module>
<string>(1):   --- modulename: StringLower, funcname: <module>
StringLower.py(1): from AbstractGraph import *
StringLower.py(2): from AGraphPySide.Settings import *
StringLower.py(3): from AGraphPySide import BaseNode
StringLower.py(6): class StringLower(BaseNode.Node, AGNode):
 --- modulename: StringLower, funcname: StringLower
StringLower.py(6): class StringLower(BaseNode.Node, AGNode):
StringLower.py(7):     def __init__(self, name, graph):
StringLower.py(16):     @staticmethod
StringLower.py(20):     def compute(self):
__init__.py(2): for n in os.listdir(os.path.dirname(__file__)):
__init__.py(3):     if n.endswith(".py") and "__init__" not in n:
__init__.py(2): for n in os.listdir(os.path.dirname(__file__)):
__init__.py(3):     if n.endswith(".py") and "__init__" not in n:
__init__.py(4):         nodeName = n.split(".")[0]
__init__.py(5):         exec("from {0} import *".format(nodeName))
 --- modulename: __init__, funcname: <module>
<string>(1):   --- modulename: StringNode, funcname: <module>
StringNode.py(1): from AbstractGraph import *
StringNode.py(2): from AGraphPySide.Settings import *
StringNode.py(3): from AGraphPySide import BaseNode
StringNode.py(6): class LEdit(QtGui.QLineEdit):
 --- modulename: StringNode, funcname: LEdit
StringNode.py(6): class LEdit(QtGui.QLineEdit):
StringNode.py(7):     def __init__(self, foo):
StringNode.py(13): class StringNode(BaseNode.Node, AGNode):
 --- modulename: StringNode, funcname: StringNode
StringNode.py(13): class StringNode(BaseNode.Node, AGNode):
StringNode.py(14):     def __init__(self, name, graph):
StringNode.py(35):     @staticmethod
StringNode.py(39):     def set_data(self):
StringNode.py(42):     def compute(self):
__init__.py(2): for n in os.listdir(os.path.dirname(__file__)):
__init__.py(3):     if n.endswith(".py") and "__init__" not in n:
__init__.py(2): for n in os.listdir(os.path.dirname(__file__)):
__init__.py(3):     if n.endswith(".py") and "__init__" not in n:
__init__.py(4):         nodeName = n.split(".")[0]
__init__.py(5):         exec("from {0} import *".format(nodeName))
 --- modulename: __init__, funcname: <module>
<string>(1):   --- modulename: StringReplace, funcname: <module>
StringReplace.py(1): from AGraphPySide import BaseNode
StringReplace.py(2): from AbstractGraph import *
StringReplace.py(5): class StringReplace(BaseNode.Node, AGNode):
 --- modulename: StringReplace, funcname: StringReplace
StringReplace.py(5): class StringReplace(BaseNode.Node, AGNode):
StringReplace.py(6):     def __init__(self, name, graph):
StringReplace.py(16):     @staticmethod
StringReplace.py(20):     def compute(self):
__init__.py(2): for n in os.listdir(os.path.dirname(__file__)):
__init__.py(3):     if n.endswith(".py") and "__init__" not in n:
__init__.py(2): for n in os.listdir(os.path.dirname(__file__)):
__init__.py(3):     if n.endswith(".py") and "__init__" not in n:
__init__.py(4):         nodeName = n.split(".")[0]
__init__.py(5):         exec("from {0} import *".format(nodeName))
 --- modulename: __init__, funcname: <module>
<string>(1):   --- modulename: StringToFloat, funcname: <module>
StringToFloat.py(1): from AbstractGraph import *
StringToFloat.py(2): from AGraphPySide.Settings import *
StringToFloat.py(3): from AGraphPySide import BaseNode
StringToFloat.py(6): class StringToFloat(BaseNode.Node, AGNode):
 --- modulename: StringToFloat, funcname: StringToFloat
StringToFloat.py(6): class StringToFloat(BaseNode.Node, AGNode):
StringToFloat.py(7):     def __init__(self, name, graph):
StringToFloat.py(16):     @staticmethod
StringToFloat.py(20):     def compute(self):
__init__.py(2): for n in os.listdir(os.path.dirname(__file__)):
__init__.py(3):     if n.endswith(".py") and "__init__" not in n:
__init__.py(2): for n in os.listdir(os.path.dirname(__file__)):
__init__.py(3):     if n.endswith(".py") and "__init__" not in n:
__init__.py(4):         nodeName = n.split(".")[0]
__init__.py(5):         exec("from {0} import *".format(nodeName))
 --- modulename: __init__, funcname: <module>
<string>(1):   --- modulename: StringToInt, funcname: <module>
StringToInt.py(1): from AbstractGraph import *
StringToInt.py(2): from AGraphPySide.Settings import *
StringToInt.py(3): from AGraphPySide import BaseNode
StringToInt.py(6): class StringToInt(BaseNode.Node, AGNode):
 --- modulename: StringToInt, funcname: StringToInt
StringToInt.py(6): class StringToInt(BaseNode.Node, AGNode):
StringToInt.py(7):     def __init__(self, name, graph):
StringToInt.py(16):     @staticmethod
StringToInt.py(20):     def compute(self):
__init__.py(2): for n in os.listdir(os.path.dirname(__file__)):
__init__.py(3):     if n.endswith(".py") and "__init__" not in n:
__init__.py(2): for n in os.listdir(os.path.dirname(__file__)):
__init__.py(3):     if n.endswith(".py") and "__init__" not in n:
__init__.py(4):         nodeName = n.split(".")[0]
__init__.py(5):         exec("from {0} import *".format(nodeName))
 --- modulename: __init__, funcname: <module>
<string>(1):   --- modulename: StringUpper, funcname: <module>
StringUpper.py(1): from AbstractGraph import *
StringUpper.py(2): from AGraphPySide.Settings import *
StringUpper.py(3): from AGraphPySide import BaseNode
StringUpper.py(6): class StringUpper(BaseNode.Node, AGNode):
 --- modulename: StringUpper, funcname: StringUpper
StringUpper.py(6): class StringUpper(BaseNode.Node, AGNode):
StringUpper.py(7):     def __init__(self, name, graph):
StringUpper.py(16):     @staticmethod
StringUpper.py(20):     def compute(self):
__init__.py(2): for n in os.listdir(os.path.dirname(__file__)):
__init__.py(3):     if n.endswith(".py") and "__init__" not in n:
__init__.py(2): for n in os.listdir(os.path.dirname(__file__)):
__init__.py(3):     if n.endswith(".py") and "__init__" not in n:
__init__.py(4):         nodeName = n.split(".")[0]
__init__.py(5):         exec("from {0} import *".format(nodeName))
 --- modulename: __init__, funcname: <module>
<string>(1):   --- modulename: SubstractNode, funcname: <module>
SubstractNode.py(1): from AGraphPySide import BaseNode
SubstractNode.py(2): from AbstractGraph import *
SubstractNode.py(5): class SubstractNode(BaseNode.Node, AGNode):
 --- modulename: SubstractNode, funcname: SubstractNode
SubstractNode.py(5): class SubstractNode(BaseNode.Node, AGNode):
SubstractNode.py(6):     def __init__(self, name, graph):
SubstractNode.py(15):     @staticmethod
SubstractNode.py(19):     def compute(self):
__init__.py(2): for n in os.listdir(os.path.dirname(__file__)):
__init__.py(3):     if n.endswith(".py") and "__init__" not in n:
__init__.py(2): for n in os.listdir(os.path.dirname(__file__)):
__init__.py(3):     if n.endswith(".py") and "__init__" not in n:
__init__.py(4):         nodeName = n.split(".")[0]
__init__.py(5):         exec("from {0} import *".format(nodeName))
 --- modulename: __init__, funcname: <module>
<string>(1):   --- modulename: SumNode, funcname: <module>
SumNode.py(1): from AGraphPySide import BaseNode
SumNode.py(2): from AbstractGraph import *
SumNode.py(5): class SumNode(BaseNode.Node, AGNode):
 --- modulename: SumNode, funcname: SumNode
SumNode.py(5): class SumNode(BaseNode.Node, AGNode):
SumNode.py(6):     def __init__(self, name, graph):
SumNode.py(14):     @staticmethod
SumNode.py(18):     def compute(self):
__init__.py(2): for n in os.listdir(os.path.dirname(__file__)):
__init__.py(3):     if n.endswith(".py") and "__init__" not in n:
__init__.py(2): for n in os.listdir(os.path.dirname(__file__)):
__init__.py(3):     if n.endswith(".py") and "__init__" not in n:
__init__.py(2): for n in os.listdir(os.path.dirname(__file__)):
__init__.py(3):     if n.endswith(".py") and "__init__" not in n:
__init__.py(4):         nodeName = n.split(".")[0]
__init__.py(5):         exec("from {0} import *".format(nodeName))
 --- modulename: __init__, funcname: <module>
<string>(1):   --- modulename: ToString, funcname: <module>
ToString.py(1): from AbstractGraph import *
ToString.py(2): from AGraphPySide.Settings import *
ToString.py(3): from AGraphPySide import BaseNode
ToString.py(6): class ToString(BaseNode.Node, AGNode):
 --- modulename: ToString, funcname: ToString
ToString.py(6): class ToString(BaseNode.Node, AGNode):
ToString.py(7):     def __init__(self, name, graph):
ToString.py(16):     @staticmethod
ToString.py(20):     def compute(self):
__init__.py(2): for n in os.listdir(os.path.dirname(__file__)):
__init__.py(3):     if n.endswith(".py") and "__init__" not in n:
__init__.py(2): for n in os.listdir(os.path.dirname(__file__)):
__init__.py(3):     if n.endswith(".py") and "__init__" not in n:
__init__.py(2): for n in os.listdir(os.path.dirname(__file__)):
__init__.py(3):     if n.endswith(".py") and "__init__" not in n:
__init__.py(2): for n in os.listdir(os.path.dirname(__file__)):
__init__.py(9): from Commands import *
 --- modulename: __init__, funcname: <module>
__init__.py(1): import os
__init__.py(2): for n in os.listdir(os.path.dirname(__file__)):
 --- modulename: ntpath, funcname: dirname
ntpath.py(215):     return split(p)[0]
 --- modulename: ntpath, funcname: split
ntpath.py(180):     d, p = splitdrive(p)
 --- modulename: ntpath, funcname: splitdrive
ntpath.py(115):     if len(p) > 1:
ntpath.py(116):         normp = p.replace(altsep, sep)
ntpath.py(117):         if (normp[0:2] == sep*2) and (normp[2:3] != sep):
ntpath.py(133):         if normp[1] == ':':
ntpath.py(134):             return p[:2], p[2:]
ntpath.py(182):     i = len(p)
ntpath.py(183):     while i and p[i-1] not in '/\\':
ntpath.py(184):         i = i - 1
ntpath.py(183):     while i and p[i-1] not in '/\\':
ntpath.py(184):         i = i - 1
ntpath.py(183):     while i and p[i-1] not in '/\\':
ntpath.py(184):         i = i - 1
ntpath.py(183):     while i and p[i-1] not in '/\\':
ntpath.py(184):         i = i - 1
ntpath.py(183):     while i and p[i-1] not in '/\\':
ntpath.py(184):         i = i - 1
ntpath.py(183):     while i and p[i-1] not in '/\\':
ntpath.py(184):         i = i - 1
ntpath.py(183):     while i and p[i-1] not in '/\\':
ntpath.py(184):         i = i - 1
ntpath.py(183):     while i and p[i-1] not in '/\\':
ntpath.py(184):         i = i - 1
ntpath.py(183):     while i and p[i-1] not in '/\\':
ntpath.py(184):         i = i - 1
ntpath.py(183):     while i and p[i-1] not in '/\\':
ntpath.py(184):         i = i - 1
ntpath.py(183):     while i and p[i-1] not in '/\\':
ntpath.py(184):         i = i - 1
ntpath.py(183):     while i and p[i-1] not in '/\\':
ntpath.py(184):         i = i - 1
ntpath.py(183):     while i and p[i-1] not in '/\\':
ntpath.py(185):     head, tail = p[:i], p[i:]  # now tail has no slashes
ntpath.py(187):     head2 = head
ntpath.py(188):     while head2 and head2[-1] in '/\\':
ntpath.py(189):         head2 = head2[:-1]
ntpath.py(188):     while head2 and head2[-1] in '/\\':
ntpath.py(190):     head = head2 or head
ntpath.py(191):     return d + head, tail
__init__.py(3):     if n.endswith(".py") and "__init__" not in n:
__init__.py(4):         commandName = n.split(".")[0]
__init__.py(5):         exec("from {0} import *".format(commandName))
 --- modulename: __init__, funcname: <module>
<string>(1):   --- modulename: enableShadows, funcname: <module>
enableShadows.py(1): from AGraphPySide import Command
 --- modulename: Command, funcname: <module>
Command.py(3): """
Command.py(5): import re
Command.py(6): from AbstractGraph import FLAG_SYMBOL
Command.py(9): class Command(object):
 --- modulename: Command, funcname: Command
Command.py(9): class Command(object):
Command.py(11):     def __init__(self, graph):
Command.py(15):     def parse(self, line):
Command.py(30):     def usage(self):
Command.py(35):     def execute(self, line):
enableShadows.py(4): class enableShadows(Command.Command):
 --- modulename: enableShadows, funcname: enableShadows
enableShadows.py(4): class enableShadows(Command.Command):
enableShadows.py(6):     def __init__(self, graph):
enableShadows.py(9):     def usage(self):
enableShadows.py(13):     def execute(self, line):
__init__.py(2): for n in os.listdir(os.path.dirname(__file__)):
__init__.py(3):     if n.endswith(".py") and "__init__" not in n:
__init__.py(2): for n in os.listdir(os.path.dirname(__file__)):
__init__.py(3):     if n.endswith(".py") and "__init__" not in n:
__init__.py(4):         commandName = n.split(".")[0]
__init__.py(5):         exec("from {0} import *".format(commandName))
 --- modulename: __init__, funcname: <module>
<string>(1):   --- modulename: helloWorld, funcname: <module>
helloWorld.py(1): from AGraphPySide import Command
helloWorld.py(2): from AbstractGraph import FLAG_SYMBOL
helloWorld.py(4): class helloWorld(Command.Command):
 --- modulename: helloWorld, funcname: helloWorld
helloWorld.py(4): class helloWorld(Command.Command):
helloWorld.py(6):     def __init__(self, graph):
helloWorld.py(9):     def usage(self):
helloWorld.py(14):     def execute(self, line):
__init__.py(2): for n in os.listdir(os.path.dirname(__file__)):
__init__.py(3):     if n.endswith(".py") and "__init__" not in n:
__init__.py(2): for n in os.listdir(os.path.dirname(__file__)):
__init__.py(3):     if n.endswith(".py") and "__init__" not in n:
__init__.py(2): for n in os.listdir(os.path.dirname(__file__)):
__init__.py(3):     if n.endswith(".py") and "__init__" not in n:
__init__.py(4):         commandName = n.split(".")[0]
__init__.py(5):         exec("from {0} import *".format(commandName))
 --- modulename: __init__, funcname: <module>
<string>(1):   --- modulename: playSound, funcname: <module>
playSound.py(1): from AGraphPySide import Command
playSound.py(2): import winsound
playSound.py(3): from threading import Thread
playSound.py(6): class playSound(Command.Command):
 --- modulename: playSound, funcname: playSound
playSound.py(6): class playSound(Command.Command):
playSound.py(8):     def __init__(self, graph):
playSound.py(11):     def usage(self):
playSound.py(15):     def execute(self, line):
__init__.py(2): for n in os.listdir(os.path.dirname(__file__)):
__init__.py(3):     if n.endswith(".py") and "__init__" not in n:
__init__.py(2): for n in os.listdir(os.path.dirname(__file__)):
__init__.py(3):     if n.endswith(".py") and "__init__" not in n:
__init__.py(2): for n in os.listdir(os.path.dirname(__file__)):
__init__.py(3):     if n.endswith(".py") and "__init__" not in n:
__init__.py(2): for n in os.listdir(os.path.dirname(__file__)):
__init__.py(10): from AbstractGraph import *
__init__.py(11): from Settings import *
__init__.py(12): from Port import *
__init__.py(13): from BaseNode import *
__init__.py(14): from Edge import *
 --- modulename: Edge, funcname: <module>
Edge.py(1): from PySide import QtCore
Edge.py(2): from PySide import QtGui
Edge.py(3): from Settings import Colors
Edge.py(4): from Settings import get_line_type
Edge.py(5): from AbstractGraph import *
Edge.py(6): import weakref
Edge.py(9): class Edge(QtGui.QGraphicsPathItem, Colors):
 --- modulename: Edge, funcname: Edge
Edge.py(9): class Edge(QtGui.QGraphicsPathItem, Colors):
Edge.py(11):     def __init__(self, source, destination, graph):
Edge.py(39):     def __str__(self):
Edge.py(45):     def hoverEnterEvent(self, event):
Edge.py(52):     def getEndPoints(self):
Edge.py(58):     def mousePressEvent(self, event):
Edge.py(62):     def kill(self):
Edge.py(65):     def mouseReleaseEvent(self, event):
Edge.py(69):     def mouseMoveEvent(self, event):
Edge.py(73):     def hoverLeaveEvent(self, event):
Edge.py(79):     def source_port_name(self):
Edge.py(83):     def updateCurve(self, p1, p2):
Edge.py(96):     def destination_port_name(self):
Edge.py(100):     def paint(self, painter, option, widget):
Edge.py(110): class RealTimeLine(QtGui.QGraphicsLineItem, Colors):
 --- modulename: Edge, funcname: RealTimeLine
Edge.py(110): class RealTimeLine(QtGui.QGraphicsLineItem, Colors):
Edge.py(111):     def __init__(self, graph):
Edge.py(119):     def paint(self, painter, option, widget):
Edge.py(127):     def boundingRect(self):
__init__.py(15): from Widget import *
 --- modulename: Widget, funcname: <module>
Widget.py(1): from PySide import QtCore
Widget.py(2): from PySide import QtGui
Widget.py(3): import math
Widget.py(4): import platform
 --- modulename: platform, funcname: <module>
platform.py(10): """
platform.py(114): """
platform.py(116): __version__ = '1.0.7'
platform.py(118): import sys,string,os,re
platform.py(123): try:
platform.py(124):     DEV_NULL = os.devnull
platform.py(137): _libc_search = re.compile(r'(__libc_init)'
 --- modulename: re, funcname: compile
re.py(194):     return _compile(pattern, flags)
 --- modulename: re, funcname: _compile
re.py(232):     pattern, flags = key
re.py(233):     bypass_cache = flags & DEBUG
re.py(234):     if not bypass_cache:
re.py(235):         cachekey = (type(key[0]),) + key
re.py(236):         try:
re.py(237):             p, loc = _cache[cachekey]
re.py(240):         except KeyError:
re.py(241):             pass
re.py(242):     if isinstance(pattern, _pattern_type):
re.py(246):     if not sre_compile.isstring(pattern):
 --- modulename: sre_compile, funcname: isstring
sre_compile.py(547):     for tp in STRING_TYPES:
sre_compile.py(548):         if isinstance(obj, tp):
sre_compile.py(549):             return 1
re.py(248):     try:
re.py(249):         p = sre_compile.compile(pattern, flags)
 --- modulename: sre_compile, funcname: compile
sre_compile.py(570):     if isstring(p):
 --- modulename: sre_compile, funcname: isstring
sre_compile.py(547):     for tp in STRING_TYPES:
sre_compile.py(548):         if isinstance(obj, tp):
sre_compile.py(549):             return 1
sre_compile.py(571):         pattern = p
sre_compile.py(572):         p = sre_parse.parse(p, flags)
 --- modulename: sre_parse, funcname: parse
sre_parse.py(709):     source = Tokenizer(str)
 --- modulename: sre_parse, funcname: __init__
sre_parse.py(190):         self.string = string
sre_parse.py(191):         self.index = 0
sre_parse.py(192):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(711):     if pattern is None:
sre_parse.py(712):         pattern = Pattern()
 --- modulename: sre_parse, funcname: __init__
sre_parse.py(68):         self.flags = 0
sre_parse.py(69):         self.open = []
sre_parse.py(70):         self.groups = 1
sre_parse.py(71):         self.groupdict = {}
sre_parse.py(72):         self.lookbehind = 0
sre_parse.py(713):     pattern.flags = flags
sre_parse.py(714):     pattern.str = str
sre_parse.py(716):     p = _parse_sub(source, pattern, 0)
 --- modulename: sre_parse, funcname: _parse_sub
sre_parse.py(320):     items = []
sre_parse.py(321):     itemsappend = items.append
sre_parse.py(322):     sourcematch = source.match
sre_parse.py(323):     while 1:
sre_parse.py(324):         itemsappend(_parse(source, state))
 --- modulename: sre_parse, funcname: _parse
sre_parse.py(397):     subpattern = SubPattern(state)
 --- modulename: sre_parse, funcname: __init__
sre_parse.py(93):         self.pattern = pattern
sre_parse.py(94):         if data is None:
sre_parse.py(95):             data = []
sre_parse.py(96):         self.data = data
sre_parse.py(97):         self.width = None
sre_parse.py(400):     subpatternappend = subpattern.append
sre_parse.py(401):     sourceget = source.get
sre_parse.py(402):     sourcematch = source.match
sre_parse.py(403):     _len = len
sre_parse.py(404):     PATTERNENDERS = _PATTERNENDERS
sre_parse.py(405):     ASSERTCHARS = _ASSERTCHARS
sre_parse.py(406):     LOOKBEHINDASSERTCHARS = _LOOKBEHINDASSERTCHARS
sre_parse.py(407):     REPEATCODES = _REPEATCODES
sre_parse.py(409):     while 1:
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(413):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(414):         if this is None:
sre_parse.py(417):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(428):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(431):         elif this == "[":
sre_parse.py(488):         elif this and this[0] in REPEAT_CHARS:
sre_parse.py(541):         elif this == ".":
sre_parse.py(544):         elif this == "(":
sre_parse.py(545):             group = 1
sre_parse.py(546):             name = None
sre_parse.py(547):             condgroup = None
sre_parse.py(548):             if sourcematch("?"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(211):         return 0
sre_parse.py(666):             if group:
sre_parse.py(668):                 if group == 2:
sre_parse.py(672):                     group = state.opengroup(name)
 --- modulename: sre_parse, funcname: opengroup
sre_parse.py(75):         gid = self.groups
sre_parse.py(76):         self.groups = gid + 1
sre_parse.py(77):         if name is not None:
sre_parse.py(83):         self.open.append(gid)
sre_parse.py(84):         return gid
sre_parse.py(673):                 if condgroup:
sre_parse.py(676):                     p = _parse_sub(source, state)
 --- modulename: sre_parse, funcname: _parse_sub
sre_parse.py(320):     items = []
sre_parse.py(321):     itemsappend = items.append
sre_parse.py(322):     sourcematch = source.match
sre_parse.py(323):     while 1:
sre_parse.py(324):         itemsappend(_parse(source, state))
 --- modulename: sre_parse, funcname: _parse
sre_parse.py(397):     subpattern = SubPattern(state)
 --- modulename: sre_parse, funcname: __init__
sre_parse.py(93):         self.pattern = pattern
sre_parse.py(94):         if data is None:
sre_parse.py(95):             data = []
sre_parse.py(96):         self.data = data
sre_parse.py(97):         self.width = None
sre_parse.py(400):     subpatternappend = subpattern.append
sre_parse.py(401):     sourceget = source.get
sre_parse.py(402):     sourcematch = source.match
sre_parse.py(403):     _len = len
sre_parse.py(404):     PATTERNENDERS = _PATTERNENDERS
sre_parse.py(405):     ASSERTCHARS = _ASSERTCHARS
sre_parse.py(406):     LOOKBEHINDASSERTCHARS = _LOOKBEHINDASSERTCHARS
sre_parse.py(407):     REPEATCODES = _REPEATCODES
sre_parse.py(409):     while 1:
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(413):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(414):         if this is None:
sre_parse.py(417):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(428):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(429):             subpatternappend((LITERAL, ord(this)))
 --- modulename: sre_parse, funcname: append
sre_parse.py(150):         self.data.append(code)
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(413):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(414):         if this is None:
sre_parse.py(417):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(428):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(429):             subpatternappend((LITERAL, ord(this)))
 --- modulename: sre_parse, funcname: append
sre_parse.py(150):         self.data.append(code)
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(413):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(414):         if this is None:
sre_parse.py(417):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(428):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(429):             subpatternappend((LITERAL, ord(this)))
 --- modulename: sre_parse, funcname: append
sre_parse.py(150):         self.data.append(code)
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(413):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(414):         if this is None:
sre_parse.py(417):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(428):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(429):             subpatternappend((LITERAL, ord(this)))
 --- modulename: sre_parse, funcname: append
sre_parse.py(150):         self.data.append(code)
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(413):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(414):         if this is None:
sre_parse.py(417):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(428):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(429):             subpatternappend((LITERAL, ord(this)))
 --- modulename: sre_parse, funcname: append
sre_parse.py(150):         self.data.append(code)
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(413):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(414):         if this is None:
sre_parse.py(417):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(428):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(429):             subpatternappend((LITERAL, ord(this)))
 --- modulename: sre_parse, funcname: append
sre_parse.py(150):         self.data.append(code)
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(413):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(414):         if this is None:
sre_parse.py(417):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(428):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(429):             subpatternappend((LITERAL, ord(this)))
 --- modulename: sre_parse, funcname: append
sre_parse.py(150):         self.data.append(code)
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(413):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(414):         if this is None:
sre_parse.py(417):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(428):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(429):             subpatternappend((LITERAL, ord(this)))
 --- modulename: sre_parse, funcname: append
sre_parse.py(150):         self.data.append(code)
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(413):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(414):         if this is None:
sre_parse.py(417):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(428):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(429):             subpatternappend((LITERAL, ord(this)))
 --- modulename: sre_parse, funcname: append
sre_parse.py(150):         self.data.append(code)
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(413):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(414):         if this is None:
sre_parse.py(417):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(428):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(429):             subpatternappend((LITERAL, ord(this)))
 --- modulename: sre_parse, funcname: append
sre_parse.py(150):         self.data.append(code)
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(413):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(414):         if this is None:
sre_parse.py(417):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(428):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(429):             subpatternappend((LITERAL, ord(this)))
 --- modulename: sre_parse, funcname: append
sre_parse.py(150):         self.data.append(code)
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(412):             break # end of subpattern
sre_parse.py(704):     return subpattern
sre_parse.py(325):         if sourcematch("|"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(211):         return 0
sre_parse.py(327):         if not nested:
sre_parse.py(329):         if not source.next or sourcematch(")", 0):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(208):             if skip:
sre_parse.py(210):             return 1
sre_parse.py(330):             break
sre_parse.py(334):     if len(items) == 1:
sre_parse.py(335):         return items[0]
sre_parse.py(677):                 if not sourcematch(")"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(208):             if skip:
sre_parse.py(209):                 self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(210):             return 1
sre_parse.py(679):                 if group is not None:
sre_parse.py(680):                     state.closegroup(group)
 --- modulename: sre_parse, funcname: closegroup
sre_parse.py(86):         self.open.remove(gid)
sre_parse.py(681):                 subpatternappend((SUBPATTERN, (group, p)))
 --- modulename: sre_parse, funcname: append
sre_parse.py(150):         self.data.append(code)
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(412):             break # end of subpattern
sre_parse.py(704):     return subpattern
sre_parse.py(325):         if sourcematch("|"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(208):             if skip:
sre_parse.py(209):                 self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(210):             return 1
sre_parse.py(326):             continue
sre_parse.py(324):         itemsappend(_parse(source, state))
 --- modulename: sre_parse, funcname: _parse
sre_parse.py(397):     subpattern = SubPattern(state)
 --- modulename: sre_parse, funcname: __init__
sre_parse.py(93):         self.pattern = pattern
sre_parse.py(94):         if data is None:
sre_parse.py(95):             data = []
sre_parse.py(96):         self.data = data
sre_parse.py(97):         self.width = None
sre_parse.py(400):     subpatternappend = subpattern.append
sre_parse.py(401):     sourceget = source.get
sre_parse.py(402):     sourcematch = source.match
sre_parse.py(403):     _len = len
sre_parse.py(404):     PATTERNENDERS = _PATTERNENDERS
sre_parse.py(405):     ASSERTCHARS = _ASSERTCHARS
sre_parse.py(406):     LOOKBEHINDASSERTCHARS = _LOOKBEHINDASSERTCHARS
sre_parse.py(407):     REPEATCODES = _REPEATCODES
sre_parse.py(409):     while 1:
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(413):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(414):         if this is None:
sre_parse.py(417):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(428):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(431):         elif this == "[":
sre_parse.py(488):         elif this and this[0] in REPEAT_CHARS:
sre_parse.py(541):         elif this == ".":
sre_parse.py(544):         elif this == "(":
sre_parse.py(545):             group = 1
sre_parse.py(546):             name = None
sre_parse.py(547):             condgroup = None
sre_parse.py(548):             if sourcematch("?"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(211):         return 0
sre_parse.py(666):             if group:
sre_parse.py(668):                 if group == 2:
sre_parse.py(672):                     group = state.opengroup(name)
 --- modulename: sre_parse, funcname: opengroup
sre_parse.py(75):         gid = self.groups
sre_parse.py(76):         self.groups = gid + 1
sre_parse.py(77):         if name is not None:
sre_parse.py(83):         self.open.append(gid)
sre_parse.py(84):         return gid
sre_parse.py(673):                 if condgroup:
sre_parse.py(676):                     p = _parse_sub(source, state)
 --- modulename: sre_parse, funcname: _parse_sub
sre_parse.py(320):     items = []
sre_parse.py(321):     itemsappend = items.append
sre_parse.py(322):     sourcematch = source.match
sre_parse.py(323):     while 1:
sre_parse.py(324):         itemsappend(_parse(source, state))
 --- modulename: sre_parse, funcname: _parse
sre_parse.py(397):     subpattern = SubPattern(state)
 --- modulename: sre_parse, funcname: __init__
sre_parse.py(93):         self.pattern = pattern
sre_parse.py(94):         if data is None:
sre_parse.py(95):             data = []
sre_parse.py(96):         self.data = data
sre_parse.py(97):         self.width = None
sre_parse.py(400):     subpatternappend = subpattern.append
sre_parse.py(401):     sourceget = source.get
sre_parse.py(402):     sourcematch = source.match
sre_parse.py(403):     _len = len
sre_parse.py(404):     PATTERNENDERS = _PATTERNENDERS
sre_parse.py(405):     ASSERTCHARS = _ASSERTCHARS
sre_parse.py(406):     LOOKBEHINDASSERTCHARS = _LOOKBEHINDASSERTCHARS
sre_parse.py(407):     REPEATCODES = _REPEATCODES
sre_parse.py(409):     while 1:
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(413):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(414):         if this is None:
sre_parse.py(417):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(428):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(429):             subpatternappend((LITERAL, ord(this)))
 --- modulename: sre_parse, funcname: append
sre_parse.py(150):         self.data.append(code)
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(413):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(414):         if this is None:
sre_parse.py(417):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(428):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(429):             subpatternappend((LITERAL, ord(this)))
 --- modulename: sre_parse, funcname: append
sre_parse.py(150):         self.data.append(code)
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(413):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(414):         if this is None:
sre_parse.py(417):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(428):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(429):             subpatternappend((LITERAL, ord(this)))
 --- modulename: sre_parse, funcname: append
sre_parse.py(150):         self.data.append(code)
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(413):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(414):         if this is None:
sre_parse.py(417):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(428):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(429):             subpatternappend((LITERAL, ord(this)))
 --- modulename: sre_parse, funcname: append
sre_parse.py(150):         self.data.append(code)
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(413):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(414):         if this is None:
sre_parse.py(417):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(428):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(429):             subpatternappend((LITERAL, ord(this)))
 --- modulename: sre_parse, funcname: append
sre_parse.py(150):         self.data.append(code)
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(413):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(414):         if this is None:
sre_parse.py(417):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(428):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(429):             subpatternappend((LITERAL, ord(this)))
 --- modulename: sre_parse, funcname: append
sre_parse.py(150):         self.data.append(code)
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(413):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(414):         if this is None:
sre_parse.py(417):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(428):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(431):         elif this == "[":
sre_parse.py(488):         elif this and this[0] in REPEAT_CHARS:
sre_parse.py(541):         elif this == ".":
sre_parse.py(544):         elif this == "(":
sre_parse.py(545):             group = 1
sre_parse.py(546):             name = None
sre_parse.py(547):             condgroup = None
sre_parse.py(548):             if sourcematch("?"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(211):         return 0
sre_parse.py(666):             if group:
sre_parse.py(668):                 if group == 2:
sre_parse.py(672):                     group = state.opengroup(name)
 --- modulename: sre_parse, funcname: opengroup
sre_parse.py(75):         gid = self.groups
sre_parse.py(76):         self.groups = gid + 1
sre_parse.py(77):         if name is not None:
sre_parse.py(83):         self.open.append(gid)
sre_parse.py(84):         return gid
sre_parse.py(673):                 if condgroup:
sre_parse.py(676):                     p = _parse_sub(source, state)
 --- modulename: sre_parse, funcname: _parse_sub
sre_parse.py(320):     items = []
sre_parse.py(321):     itemsappend = items.append
sre_parse.py(322):     sourcematch = source.match
sre_parse.py(323):     while 1:
sre_parse.py(324):         itemsappend(_parse(source, state))
 --- modulename: sre_parse, funcname: _parse
sre_parse.py(397):     subpattern = SubPattern(state)
 --- modulename: sre_parse, funcname: __init__
sre_parse.py(93):         self.pattern = pattern
sre_parse.py(94):         if data is None:
sre_parse.py(95):             data = []
sre_parse.py(96):         self.data = data
sre_parse.py(97):         self.width = None
sre_parse.py(400):     subpatternappend = subpattern.append
sre_parse.py(401):     sourceget = source.get
sre_parse.py(402):     sourcematch = source.match
sre_parse.py(403):     _len = len
sre_parse.py(404):     PATTERNENDERS = _PATTERNENDERS
sre_parse.py(405):     ASSERTCHARS = _ASSERTCHARS
sre_parse.py(406):     LOOKBEHINDASSERTCHARS = _LOOKBEHINDASSERTCHARS
sre_parse.py(407):     REPEATCODES = _REPEATCODES
sre_parse.py(409):     while 1:
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(413):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(414):         if this is None:
sre_parse.py(417):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(428):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(431):         elif this == "[":
sre_parse.py(433):             set = []
sre_parse.py(434):             setappend = set.append
sre_parse.py(437):             if sourcematch("^"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(211):         return 0
sre_parse.py(440):             start = set[:]
sre_parse.py(441):             while 1:
sre_parse.py(442):                 this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(443):                 if this == "]" and set != start:
sre_parse.py(445):                 elif this and this[0] == "\\":
sre_parse.py(447):                 elif this:
sre_parse.py(448):                     code1 = LITERAL, ord(this)
sre_parse.py(451):                 if sourcematch("-"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(208):             if skip:
sre_parse.py(209):                 self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(210):             return 1
sre_parse.py(453):                     this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(454):                     if this == "]":
sre_parse.py(460):                     elif this:
sre_parse.py(461):                         if this[0] == "\\":
sre_parse.py(464):                             code2 = LITERAL, ord(this)
sre_parse.py(465):                         if code1[0] != LITERAL or code2[0] != LITERAL:
sre_parse.py(467):                         lo = code1[1]
sre_parse.py(468):                         hi = code2[1]
sre_parse.py(469):                         if hi < lo:
sre_parse.py(471):                         setappend((RANGE, (lo, hi)))
sre_parse.py(442):                 this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(443):                 if this == "]" and set != start:
sre_parse.py(445):                 elif this and this[0] == "\\":
sre_parse.py(447):                 elif this:
sre_parse.py(448):                     code1 = LITERAL, ord(this)
sre_parse.py(451):                 if sourcematch("-"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(211):         return 0
sre_parse.py(475):                     if code1[0] is IN:
sre_parse.py(477):                     setappend(code1)
sre_parse.py(442):                 this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(443):                 if this == "]" and set != start:
sre_parse.py(444):                     break
sre_parse.py(480):             if _len(set)==1 and set[0][0] is LITERAL:
sre_parse.py(482):             elif _len(set)==2 and set[0][0] is NEGATE and set[1][0] is LITERAL:
sre_parse.py(486):                 subpatternappend((IN, set))
 --- modulename: sre_parse, funcname: append
sre_parse.py(150):         self.data.append(code)
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(413):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(414):         if this is None:
sre_parse.py(417):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(428):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(431):         elif this == "[":
sre_parse.py(488):         elif this and this[0] in REPEAT_CHARS:
sre_parse.py(490):             if this == "?":
sre_parse.py(492):             elif this == "*":
sre_parse.py(495):             elif this == "+":
sre_parse.py(496):                 min, max = 1, MAXREPEAT
sre_parse.py(528):             if subpattern:
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(138):         return len(self.data)
sre_parse.py(529):                 item = subpattern[-1:]
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(138):         return len(self.data)
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(143):             return SubPattern(self.pattern, self.data[index])
 --- modulename: sre_parse, funcname: __init__
sre_parse.py(93):         self.pattern = pattern
sre_parse.py(94):         if data is None:
sre_parse.py(96):         self.data = data
sre_parse.py(97):         self.width = None
sre_parse.py(532):             if not item or (_len(item) == 1 and item[0][0] == AT):
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(138):         return len(self.data)
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(138):         return len(self.data)
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_parse.py(534):             if item[0][0] in REPEATCODES:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_parse.py(536):             if sourcematch("?"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(211):         return 0
sre_parse.py(539):                 subpattern[-1] = (MAX_REPEAT, (min, max, item))
 --- modulename: sre_parse, funcname: __setitem__
sre_parse.py(146):         self.data[index] = code
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(412):             break # end of subpattern
sre_parse.py(704):     return subpattern
sre_parse.py(325):         if sourcematch("|"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(211):         return 0
sre_parse.py(327):         if not nested:
sre_parse.py(329):         if not source.next or sourcematch(")", 0):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(208):             if skip:
sre_parse.py(210):             return 1
sre_parse.py(330):             break
sre_parse.py(334):     if len(items) == 1:
sre_parse.py(335):         return items[0]
sre_parse.py(677):                 if not sourcematch(")"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(208):             if skip:
sre_parse.py(209):                 self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(210):             return 1
sre_parse.py(679):                 if group is not None:
sre_parse.py(680):                     state.closegroup(group)
 --- modulename: sre_parse, funcname: closegroup
sre_parse.py(86):         self.open.remove(gid)
sre_parse.py(681):                 subpatternappend((SUBPATTERN, (group, p)))
 --- modulename: sre_parse, funcname: append
sre_parse.py(150):         self.data.append(code)
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(412):             break # end of subpattern
sre_parse.py(704):     return subpattern
sre_parse.py(325):         if sourcematch("|"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(211):         return 0
sre_parse.py(327):         if not nested:
sre_parse.py(329):         if not source.next or sourcematch(")", 0):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(208):             if skip:
sre_parse.py(210):             return 1
sre_parse.py(330):             break
sre_parse.py(334):     if len(items) == 1:
sre_parse.py(335):         return items[0]
sre_parse.py(677):                 if not sourcematch(")"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(208):             if skip:
sre_parse.py(209):                 self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(210):             return 1
sre_parse.py(679):                 if group is not None:
sre_parse.py(680):                     state.closegroup(group)
 --- modulename: sre_parse, funcname: closegroup
sre_parse.py(86):         self.open.remove(gid)
sre_parse.py(681):                 subpatternappend((SUBPATTERN, (group, p)))
 --- modulename: sre_parse, funcname: append
sre_parse.py(150):         self.data.append(code)
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(412):             break # end of subpattern
sre_parse.py(704):     return subpattern
sre_parse.py(325):         if sourcematch("|"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(208):             if skip:
sre_parse.py(209):                 self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(210):             return 1
sre_parse.py(326):             continue
sre_parse.py(324):         itemsappend(_parse(source, state))
 --- modulename: sre_parse, funcname: _parse
sre_parse.py(397):     subpattern = SubPattern(state)
 --- modulename: sre_parse, funcname: __init__
sre_parse.py(93):         self.pattern = pattern
sre_parse.py(94):         if data is None:
sre_parse.py(95):             data = []
sre_parse.py(96):         self.data = data
sre_parse.py(97):         self.width = None
sre_parse.py(400):     subpatternappend = subpattern.append
sre_parse.py(401):     sourceget = source.get
sre_parse.py(402):     sourcematch = source.match
sre_parse.py(403):     _len = len
sre_parse.py(404):     PATTERNENDERS = _PATTERNENDERS
sre_parse.py(405):     ASSERTCHARS = _ASSERTCHARS
sre_parse.py(406):     LOOKBEHINDASSERTCHARS = _LOOKBEHINDASSERTCHARS
sre_parse.py(407):     REPEATCODES = _REPEATCODES
sre_parse.py(409):     while 1:
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(413):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(414):         if this is None:
sre_parse.py(417):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(428):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(431):         elif this == "[":
sre_parse.py(488):         elif this and this[0] in REPEAT_CHARS:
sre_parse.py(541):         elif this == ".":
sre_parse.py(544):         elif this == "(":
sre_parse.py(545):             group = 1
sre_parse.py(546):             name = None
sre_parse.py(547):             condgroup = None
sre_parse.py(548):             if sourcematch("?"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(211):         return 0
sre_parse.py(666):             if group:
sre_parse.py(668):                 if group == 2:
sre_parse.py(672):                     group = state.opengroup(name)
 --- modulename: sre_parse, funcname: opengroup
sre_parse.py(75):         gid = self.groups
sre_parse.py(76):         self.groups = gid + 1
sre_parse.py(77):         if name is not None:
sre_parse.py(83):         self.open.append(gid)
sre_parse.py(84):         return gid
sre_parse.py(673):                 if condgroup:
sre_parse.py(676):                     p = _parse_sub(source, state)
 --- modulename: sre_parse, funcname: _parse_sub
sre_parse.py(320):     items = []
sre_parse.py(321):     itemsappend = items.append
sre_parse.py(322):     sourcematch = source.match
sre_parse.py(323):     while 1:
sre_parse.py(324):         itemsappend(_parse(source, state))
 --- modulename: sre_parse, funcname: _parse
sre_parse.py(397):     subpattern = SubPattern(state)
 --- modulename: sre_parse, funcname: __init__
sre_parse.py(93):         self.pattern = pattern
sre_parse.py(94):         if data is None:
sre_parse.py(95):             data = []
sre_parse.py(96):         self.data = data
sre_parse.py(97):         self.width = None
sre_parse.py(400):     subpatternappend = subpattern.append
sre_parse.py(401):     sourceget = source.get
sre_parse.py(402):     sourcematch = source.match
sre_parse.py(403):     _len = len
sre_parse.py(404):     PATTERNENDERS = _PATTERNENDERS
sre_parse.py(405):     ASSERTCHARS = _ASSERTCHARS
sre_parse.py(406):     LOOKBEHINDASSERTCHARS = _LOOKBEHINDASSERTCHARS
sre_parse.py(407):     REPEATCODES = _REPEATCODES
sre_parse.py(409):     while 1:
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(413):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(414):         if this is None:
sre_parse.py(417):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(428):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(429):             subpatternappend((LITERAL, ord(this)))
 --- modulename: sre_parse, funcname: append
sre_parse.py(150):         self.data.append(code)
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(413):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(414):         if this is None:
sre_parse.py(417):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(428):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(429):             subpatternappend((LITERAL, ord(this)))
 --- modulename: sre_parse, funcname: append
sre_parse.py(150):         self.data.append(code)
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(413):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(414):         if this is None:
sre_parse.py(417):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(428):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(429):             subpatternappend((LITERAL, ord(this)))
 --- modulename: sre_parse, funcname: append
sre_parse.py(150):         self.data.append(code)
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(413):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(414):         if this is None:
sre_parse.py(417):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(428):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(429):             subpatternappend((LITERAL, ord(this)))
 --- modulename: sre_parse, funcname: append
sre_parse.py(150):         self.data.append(code)
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(413):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(414):         if this is None:
sre_parse.py(417):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(428):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(431):         elif this == "[":
sre_parse.py(488):         elif this and this[0] in REPEAT_CHARS:
sre_parse.py(541):         elif this == ".":
sre_parse.py(544):         elif this == "(":
sre_parse.py(545):             group = 1
sre_parse.py(546):             name = None
sre_parse.py(547):             condgroup = None
sre_parse.py(548):             if sourcematch("?"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(211):         return 0
sre_parse.py(666):             if group:
sre_parse.py(668):                 if group == 2:
sre_parse.py(672):                     group = state.opengroup(name)
 --- modulename: sre_parse, funcname: opengroup
sre_parse.py(75):         gid = self.groups
sre_parse.py(76):         self.groups = gid + 1
sre_parse.py(77):         if name is not None:
sre_parse.py(83):         self.open.append(gid)
sre_parse.py(84):         return gid
sre_parse.py(673):                 if condgroup:
sre_parse.py(676):                     p = _parse_sub(source, state)
 --- modulename: sre_parse, funcname: _parse_sub
sre_parse.py(320):     items = []
sre_parse.py(321):     itemsappend = items.append
sre_parse.py(322):     sourcematch = source.match
sre_parse.py(323):     while 1:
sre_parse.py(324):         itemsappend(_parse(source, state))
 --- modulename: sre_parse, funcname: _parse
sre_parse.py(397):     subpattern = SubPattern(state)
 --- modulename: sre_parse, funcname: __init__
sre_parse.py(93):         self.pattern = pattern
sre_parse.py(94):         if data is None:
sre_parse.py(95):             data = []
sre_parse.py(96):         self.data = data
sre_parse.py(97):         self.width = None
sre_parse.py(400):     subpatternappend = subpattern.append
sre_parse.py(401):     sourceget = source.get
sre_parse.py(402):     sourcematch = source.match
sre_parse.py(403):     _len = len
sre_parse.py(404):     PATTERNENDERS = _PATTERNENDERS
sre_parse.py(405):     ASSERTCHARS = _ASSERTCHARS
sre_parse.py(406):     LOOKBEHINDASSERTCHARS = _LOOKBEHINDASSERTCHARS
sre_parse.py(407):     REPEATCODES = _REPEATCODES
sre_parse.py(409):     while 1:
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(413):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(199):             try:
sre_parse.py(200):                 c = self.string[self.index + 1]
sre_parse.py(203):             char = char + c
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(414):         if this is None:
sre_parse.py(417):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(428):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(429):             subpatternappend((LITERAL, ord(this)))
 --- modulename: sre_parse, funcname: append
sre_parse.py(150):         self.data.append(code)
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(413):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(414):         if this is None:
sre_parse.py(417):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(428):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(431):         elif this == "[":
sre_parse.py(488):         elif this and this[0] in REPEAT_CHARS:
sre_parse.py(541):         elif this == ".":
sre_parse.py(544):         elif this == "(":
sre_parse.py(691):         elif this == "^":
sre_parse.py(694):         elif this == "$":
sre_parse.py(697):         elif this and this[0] == "\\":
sre_parse.py(698):             code = _escape(source, this, state)
 --- modulename: sre_parse, funcname: _escape
sre_parse.py(270):     code = CATEGORIES.get(escape)
sre_parse.py(271):     if code:
sre_parse.py(272):         return code
sre_parse.py(699):             subpatternappend(code)
 --- modulename: sre_parse, funcname: append
sre_parse.py(150):         self.data.append(code)
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(413):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(414):         if this is None:
sre_parse.py(417):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(428):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(431):         elif this == "[":
sre_parse.py(488):         elif this and this[0] in REPEAT_CHARS:
sre_parse.py(490):             if this == "?":
sre_parse.py(492):             elif this == "*":
sre_parse.py(495):             elif this == "+":
sre_parse.py(496):                 min, max = 1, MAXREPEAT
sre_parse.py(528):             if subpattern:
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(138):         return len(self.data)
sre_parse.py(529):                 item = subpattern[-1:]
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(138):         return len(self.data)
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(143):             return SubPattern(self.pattern, self.data[index])
 --- modulename: sre_parse, funcname: __init__
sre_parse.py(93):         self.pattern = pattern
sre_parse.py(94):         if data is None:
sre_parse.py(96):         self.data = data
sre_parse.py(97):         self.width = None
sre_parse.py(532):             if not item or (_len(item) == 1 and item[0][0] == AT):
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(138):         return len(self.data)
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(138):         return len(self.data)
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_parse.py(534):             if item[0][0] in REPEATCODES:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_parse.py(536):             if sourcematch("?"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(211):         return 0
sre_parse.py(539):                 subpattern[-1] = (MAX_REPEAT, (min, max, item))
 --- modulename: sre_parse, funcname: __setitem__
sre_parse.py(146):         self.data[index] = code
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(412):             break # end of subpattern
sre_parse.py(704):     return subpattern
sre_parse.py(325):         if sourcematch("|"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(211):         return 0
sre_parse.py(327):         if not nested:
sre_parse.py(329):         if not source.next or sourcematch(")", 0):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(208):             if skip:
sre_parse.py(210):             return 1
sre_parse.py(330):             break
sre_parse.py(334):     if len(items) == 1:
sre_parse.py(335):         return items[0]
sre_parse.py(677):                 if not sourcematch(")"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(208):             if skip:
sre_parse.py(209):                 self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(210):             return 1
sre_parse.py(679):                 if group is not None:
sre_parse.py(680):                     state.closegroup(group)
 --- modulename: sre_parse, funcname: closegroup
sre_parse.py(86):         self.open.remove(gid)
sre_parse.py(681):                 subpatternappend((SUBPATTERN, (group, p)))
 --- modulename: sre_parse, funcname: append
sre_parse.py(150):         self.data.append(code)
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(413):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(199):             try:
sre_parse.py(200):                 c = self.string[self.index + 1]
sre_parse.py(203):             char = char + c
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(414):         if this is None:
sre_parse.py(417):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(428):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(431):         elif this == "[":
sre_parse.py(488):         elif this and this[0] in REPEAT_CHARS:
sre_parse.py(490):             if this == "?":
sre_parse.py(491):                 min, max = 0, 1
sre_parse.py(528):             if subpattern:
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(138):         return len(self.data)
sre_parse.py(529):                 item = subpattern[-1:]
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(138):         return len(self.data)
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(143):             return SubPattern(self.pattern, self.data[index])
 --- modulename: sre_parse, funcname: __init__
sre_parse.py(93):         self.pattern = pattern
sre_parse.py(94):         if data is None:
sre_parse.py(96):         self.data = data
sre_parse.py(97):         self.width = None
sre_parse.py(532):             if not item or (_len(item) == 1 and item[0][0] == AT):
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(138):         return len(self.data)
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(138):         return len(self.data)
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_parse.py(534):             if item[0][0] in REPEATCODES:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_parse.py(536):             if sourcematch("?"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(211):         return 0
sre_parse.py(539):                 subpattern[-1] = (MAX_REPEAT, (min, max, item))
 --- modulename: sre_parse, funcname: __setitem__
sre_parse.py(146):         self.data[index] = code
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(413):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(414):         if this is None:
sre_parse.py(417):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(428):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(431):         elif this == "[":
sre_parse.py(488):         elif this and this[0] in REPEAT_CHARS:
sre_parse.py(541):         elif this == ".":
sre_parse.py(544):         elif this == "(":
sre_parse.py(691):         elif this == "^":
sre_parse.py(694):         elif this == "$":
sre_parse.py(697):         elif this and this[0] == "\\":
sre_parse.py(698):             code = _escape(source, this, state)
 --- modulename: sre_parse, funcname: _escape
sre_parse.py(270):     code = CATEGORIES.get(escape)
sre_parse.py(271):     if code:
sre_parse.py(273):     code = ESCAPES.get(escape)
sre_parse.py(274):     if code:
sre_parse.py(276):     try:
sre_parse.py(277):         c = escape[1:2]
sre_parse.py(278):         if c == "x":
sre_parse.py(285):         elif c == "0":
sre_parse.py(290):         elif c in DIGITS:
sre_parse.py(311):         if len(escape) == 2:
sre_parse.py(312):             return LITERAL, ord(escape[1])
sre_parse.py(699):             subpatternappend(code)
 --- modulename: sre_parse, funcname: append
sre_parse.py(150):         self.data.append(code)
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(413):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(414):         if this is None:
sre_parse.py(417):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(428):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(429):             subpatternappend((LITERAL, ord(this)))
 --- modulename: sre_parse, funcname: append
sre_parse.py(150):         self.data.append(code)
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(413):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(414):         if this is None:
sre_parse.py(417):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(428):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(429):             subpatternappend((LITERAL, ord(this)))
 --- modulename: sre_parse, funcname: append
sre_parse.py(150):         self.data.append(code)
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(413):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(414):         if this is None:
sre_parse.py(417):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(428):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(431):         elif this == "[":
sre_parse.py(488):         elif this and this[0] in REPEAT_CHARS:
sre_parse.py(541):         elif this == ".":
sre_parse.py(544):         elif this == "(":
sre_parse.py(545):             group = 1
sre_parse.py(546):             name = None
sre_parse.py(547):             condgroup = None
sre_parse.py(548):             if sourcematch("?"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(208):             if skip:
sre_parse.py(209):                 self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(210):             return 1
sre_parse.py(549):                 group = 0
sre_parse.py(551):                 if sourcematch("P"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(211):         return 0
sre_parse.py(600):                 elif sourcematch(":"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(208):             if skip:
sre_parse.py(209):                 self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(199):             try:
sre_parse.py(200):                 c = self.string[self.index + 1]
sre_parse.py(203):             char = char + c
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(210):             return 1
sre_parse.py(602):                     group = 2
sre_parse.py(666):             if group:
sre_parse.py(668):                 if group == 2:
sre_parse.py(670):                     group = None
sre_parse.py(673):                 if condgroup:
sre_parse.py(676):                     p = _parse_sub(source, state)
 --- modulename: sre_parse, funcname: _parse_sub
sre_parse.py(320):     items = []
sre_parse.py(321):     itemsappend = items.append
sre_parse.py(322):     sourcematch = source.match
sre_parse.py(323):     while 1:
sre_parse.py(324):         itemsappend(_parse(source, state))
 --- modulename: sre_parse, funcname: _parse
sre_parse.py(397):     subpattern = SubPattern(state)
 --- modulename: sre_parse, funcname: __init__
sre_parse.py(93):         self.pattern = pattern
sre_parse.py(94):         if data is None:
sre_parse.py(95):             data = []
sre_parse.py(96):         self.data = data
sre_parse.py(97):         self.width = None
sre_parse.py(400):     subpatternappend = subpattern.append
sre_parse.py(401):     sourceget = source.get
sre_parse.py(402):     sourcematch = source.match
sre_parse.py(403):     _len = len
sre_parse.py(404):     PATTERNENDERS = _PATTERNENDERS
sre_parse.py(405):     ASSERTCHARS = _ASSERTCHARS
sre_parse.py(406):     LOOKBEHINDASSERTCHARS = _LOOKBEHINDASSERTCHARS
sre_parse.py(407):     REPEATCODES = _REPEATCODES
sre_parse.py(409):     while 1:
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(413):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(414):         if this is None:
sre_parse.py(417):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(428):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(431):         elif this == "[":
sre_parse.py(488):         elif this and this[0] in REPEAT_CHARS:
sre_parse.py(541):         elif this == ".":
sre_parse.py(544):         elif this == "(":
sre_parse.py(691):         elif this == "^":
sre_parse.py(694):         elif this == "$":
sre_parse.py(697):         elif this and this[0] == "\\":
sre_parse.py(698):             code = _escape(source, this, state)
 --- modulename: sre_parse, funcname: _escape
sre_parse.py(270):     code = CATEGORIES.get(escape)
sre_parse.py(271):     if code:
sre_parse.py(273):     code = ESCAPES.get(escape)
sre_parse.py(274):     if code:
sre_parse.py(276):     try:
sre_parse.py(277):         c = escape[1:2]
sre_parse.py(278):         if c == "x":
sre_parse.py(285):         elif c == "0":
sre_parse.py(290):         elif c in DIGITS:
sre_parse.py(311):         if len(escape) == 2:
sre_parse.py(312):             return LITERAL, ord(escape[1])
sre_parse.py(699):             subpatternappend(code)
 --- modulename: sre_parse, funcname: append
sre_parse.py(150):         self.data.append(code)
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(413):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(199):             try:
sre_parse.py(200):                 c = self.string[self.index + 1]
sre_parse.py(203):             char = char + c
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(414):         if this is None:
sre_parse.py(417):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(428):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(431):         elif this == "[":
sre_parse.py(488):         elif this and this[0] in REPEAT_CHARS:
sre_parse.py(541):         elif this == ".":
sre_parse.py(544):         elif this == "(":
sre_parse.py(545):             group = 1
sre_parse.py(546):             name = None
sre_parse.py(547):             condgroup = None
sre_parse.py(548):             if sourcematch("?"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(211):         return 0
sre_parse.py(666):             if group:
sre_parse.py(668):                 if group == 2:
sre_parse.py(672):                     group = state.opengroup(name)
 --- modulename: sre_parse, funcname: opengroup
sre_parse.py(75):         gid = self.groups
sre_parse.py(76):         self.groups = gid + 1
sre_parse.py(77):         if name is not None:
sre_parse.py(83):         self.open.append(gid)
sre_parse.py(84):         return gid
sre_parse.py(673):                 if condgroup:
sre_parse.py(676):                     p = _parse_sub(source, state)
 --- modulename: sre_parse, funcname: _parse_sub
sre_parse.py(320):     items = []
sre_parse.py(321):     itemsappend = items.append
sre_parse.py(322):     sourcematch = source.match
sre_parse.py(323):     while 1:
sre_parse.py(324):         itemsappend(_parse(source, state))
 --- modulename: sre_parse, funcname: _parse
sre_parse.py(397):     subpattern = SubPattern(state)
 --- modulename: sre_parse, funcname: __init__
sre_parse.py(93):         self.pattern = pattern
sre_parse.py(94):         if data is None:
sre_parse.py(95):             data = []
sre_parse.py(96):         self.data = data
sre_parse.py(97):         self.width = None
sre_parse.py(400):     subpatternappend = subpattern.append
sre_parse.py(401):     sourceget = source.get
sre_parse.py(402):     sourcematch = source.match
sre_parse.py(403):     _len = len
sre_parse.py(404):     PATTERNENDERS = _PATTERNENDERS
sre_parse.py(405):     ASSERTCHARS = _ASSERTCHARS
sre_parse.py(406):     LOOKBEHINDASSERTCHARS = _LOOKBEHINDASSERTCHARS
sre_parse.py(407):     REPEATCODES = _REPEATCODES
sre_parse.py(409):     while 1:
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(413):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(414):         if this is None:
sre_parse.py(417):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(428):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(431):         elif this == "[":
sre_parse.py(488):         elif this and this[0] in REPEAT_CHARS:
sre_parse.py(541):         elif this == ".":
sre_parse.py(544):         elif this == "(":
sre_parse.py(691):         elif this == "^":
sre_parse.py(694):         elif this == "$":
sre_parse.py(697):         elif this and this[0] == "\\":
sre_parse.py(698):             code = _escape(source, this, state)
 --- modulename: sre_parse, funcname: _escape
sre_parse.py(270):     code = CATEGORIES.get(escape)
sre_parse.py(271):     if code:
sre_parse.py(272):         return code
sre_parse.py(699):             subpatternappend(code)
 --- modulename: sre_parse, funcname: append
sre_parse.py(150):         self.data.append(code)
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(413):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(414):         if this is None:
sre_parse.py(417):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(428):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(431):         elif this == "[":
sre_parse.py(433):             set = []
sre_parse.py(434):             setappend = set.append
sre_parse.py(437):             if sourcematch("^"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(211):         return 0
sre_parse.py(440):             start = set[:]
sre_parse.py(441):             while 1:
sre_parse.py(442):                 this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(443):                 if this == "]" and set != start:
sre_parse.py(445):                 elif this and this[0] == "\\":
sre_parse.py(447):                 elif this:
sre_parse.py(448):                     code1 = LITERAL, ord(this)
sre_parse.py(451):                 if sourcematch("-"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(208):             if skip:
sre_parse.py(209):                 self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(210):             return 1
sre_parse.py(453):                     this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(454):                     if this == "]":
sre_parse.py(460):                     elif this:
sre_parse.py(461):                         if this[0] == "\\":
sre_parse.py(464):                             code2 = LITERAL, ord(this)
sre_parse.py(465):                         if code1[0] != LITERAL or code2[0] != LITERAL:
sre_parse.py(467):                         lo = code1[1]
sre_parse.py(468):                         hi = code2[1]
sre_parse.py(469):                         if hi < lo:
sre_parse.py(471):                         setappend((RANGE, (lo, hi)))
sre_parse.py(442):                 this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(443):                 if this == "]" and set != start:
sre_parse.py(445):                 elif this and this[0] == "\\":
sre_parse.py(447):                 elif this:
sre_parse.py(448):                     code1 = LITERAL, ord(this)
sre_parse.py(451):                 if sourcematch("-"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(211):         return 0
sre_parse.py(475):                     if code1[0] is IN:
sre_parse.py(477):                     setappend(code1)
sre_parse.py(442):                 this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(443):                 if this == "]" and set != start:
sre_parse.py(444):                     break
sre_parse.py(480):             if _len(set)==1 and set[0][0] is LITERAL:
sre_parse.py(482):             elif _len(set)==2 and set[0][0] is NEGATE and set[1][0] is LITERAL:
sre_parse.py(486):                 subpatternappend((IN, set))
 --- modulename: sre_parse, funcname: append
sre_parse.py(150):         self.data.append(code)
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(413):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(414):         if this is None:
sre_parse.py(417):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(428):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(431):         elif this == "[":
sre_parse.py(488):         elif this and this[0] in REPEAT_CHARS:
sre_parse.py(490):             if this == "?":
sre_parse.py(492):             elif this == "*":
sre_parse.py(493):                 min, max = 0, MAXREPEAT
sre_parse.py(528):             if subpattern:
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(138):         return len(self.data)
sre_parse.py(529):                 item = subpattern[-1:]
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(138):         return len(self.data)
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(143):             return SubPattern(self.pattern, self.data[index])
 --- modulename: sre_parse, funcname: __init__
sre_parse.py(93):         self.pattern = pattern
sre_parse.py(94):         if data is None:
sre_parse.py(96):         self.data = data
sre_parse.py(97):         self.width = None
sre_parse.py(532):             if not item or (_len(item) == 1 and item[0][0] == AT):
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(138):         return len(self.data)
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(138):         return len(self.data)
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_parse.py(534):             if item[0][0] in REPEATCODES:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_parse.py(536):             if sourcematch("?"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(211):         return 0
sre_parse.py(539):                 subpattern[-1] = (MAX_REPEAT, (min, max, item))
 --- modulename: sre_parse, funcname: __setitem__
sre_parse.py(146):         self.data[index] = code
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(412):             break # end of subpattern
sre_parse.py(704):     return subpattern
sre_parse.py(325):         if sourcematch("|"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(211):         return 0
sre_parse.py(327):         if not nested:
sre_parse.py(329):         if not source.next or sourcematch(")", 0):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(208):             if skip:
sre_parse.py(210):             return 1
sre_parse.py(330):             break
sre_parse.py(334):     if len(items) == 1:
sre_parse.py(335):         return items[0]
sre_parse.py(677):                 if not sourcematch(")"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(208):             if skip:
sre_parse.py(209):                 self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(210):             return 1
sre_parse.py(679):                 if group is not None:
sre_parse.py(680):                     state.closegroup(group)
 --- modulename: sre_parse, funcname: closegroup
sre_parse.py(86):         self.open.remove(gid)
sre_parse.py(681):                 subpatternappend((SUBPATTERN, (group, p)))
 --- modulename: sre_parse, funcname: append
sre_parse.py(150):         self.data.append(code)
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(412):             break # end of subpattern
sre_parse.py(704):     return subpattern
sre_parse.py(325):         if sourcematch("|"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(211):         return 0
sre_parse.py(327):         if not nested:
sre_parse.py(329):         if not source.next or sourcematch(")", 0):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(208):             if skip:
sre_parse.py(210):             return 1
sre_parse.py(330):             break
sre_parse.py(334):     if len(items) == 1:
sre_parse.py(335):         return items[0]
sre_parse.py(677):                 if not sourcematch(")"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(208):             if skip:
sre_parse.py(209):                 self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(210):             return 1
sre_parse.py(679):                 if group is not None:
sre_parse.py(681):                 subpatternappend((SUBPATTERN, (group, p)))
 --- modulename: sre_parse, funcname: append
sre_parse.py(150):         self.data.append(code)
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(413):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(414):         if this is None:
sre_parse.py(417):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(428):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(431):         elif this == "[":
sre_parse.py(488):         elif this and this[0] in REPEAT_CHARS:
sre_parse.py(490):             if this == "?":
sre_parse.py(491):                 min, max = 0, 1
sre_parse.py(528):             if subpattern:
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(138):         return len(self.data)
sre_parse.py(529):                 item = subpattern[-1:]
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(138):         return len(self.data)
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(143):             return SubPattern(self.pattern, self.data[index])
 --- modulename: sre_parse, funcname: __init__
sre_parse.py(93):         self.pattern = pattern
sre_parse.py(94):         if data is None:
sre_parse.py(96):         self.data = data
sre_parse.py(97):         self.width = None
sre_parse.py(532):             if not item or (_len(item) == 1 and item[0][0] == AT):
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(138):         return len(self.data)
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(138):         return len(self.data)
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_parse.py(534):             if item[0][0] in REPEATCODES:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_parse.py(536):             if sourcematch("?"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(211):         return 0
sre_parse.py(539):                 subpattern[-1] = (MAX_REPEAT, (min, max, item))
 --- modulename: sre_parse, funcname: __setitem__
sre_parse.py(146):         self.data[index] = code
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(412):             break # end of subpattern
sre_parse.py(704):     return subpattern
sre_parse.py(325):         if sourcematch("|"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(211):         return 0
sre_parse.py(327):         if not nested:
sre_parse.py(329):         if not source.next or sourcematch(")", 0):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(208):             if skip:
sre_parse.py(210):             return 1
sre_parse.py(330):             break
sre_parse.py(334):     if len(items) == 1:
sre_parse.py(335):         return items[0]
sre_parse.py(677):                 if not sourcematch(")"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(208):             if skip:
sre_parse.py(209):                 self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(195):             self.next = None
sre_parse.py(196):             return
sre_parse.py(210):             return 1
sre_parse.py(679):                 if group is not None:
sre_parse.py(680):                     state.closegroup(group)
 --- modulename: sre_parse, funcname: closegroup
sre_parse.py(86):         self.open.remove(gid)
sre_parse.py(681):                 subpatternappend((SUBPATTERN, (group, p)))
 --- modulename: sre_parse, funcname: append
sre_parse.py(150):         self.data.append(code)
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(413):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(195):             self.next = None
sre_parse.py(196):             return
sre_parse.py(215):         return this
sre_parse.py(414):         if this is None:
sre_parse.py(415):             break # end of pattern
sre_parse.py(704):     return subpattern
sre_parse.py(325):         if sourcematch("|"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(211):         return 0
sre_parse.py(327):         if not nested:
sre_parse.py(328):             break
sre_parse.py(334):     if len(items) == 1:
sre_parse.py(337):     subpattern = SubPattern(state)
 --- modulename: sre_parse, funcname: __init__
sre_parse.py(93):         self.pattern = pattern
sre_parse.py(94):         if data is None:
sre_parse.py(95):             data = []
sre_parse.py(96):         self.data = data
sre_parse.py(97):         self.width = None
sre_parse.py(338):     subpatternappend = subpattern.append
sre_parse.py(341):     while 1:
sre_parse.py(342):         prefix = None
sre_parse.py(343):         for item in items:
sre_parse.py(344):             if not item:
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(138):         return len(self.data)
sre_parse.py(346):             if prefix is None:
sre_parse.py(347):                 prefix = item[0]
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_parse.py(343):         for item in items:
sre_parse.py(344):             if not item:
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(138):         return len(self.data)
sre_parse.py(346):             if prefix is None:
sre_parse.py(348):             elif item[0] != prefix:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_parse.py(349):                 break
sre_parse.py(357):         break
sre_parse.py(360):     for item in items:
sre_parse.py(361):         if len(item) != 1 or item[0][0] != LITERAL:
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(138):         return len(self.data)
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_parse.py(362):             break
sre_parse.py(373):     subpattern.append((BRANCH, (None, items)))
 --- modulename: sre_parse, funcname: append
sre_parse.py(150):         self.data.append(code)
sre_parse.py(374):     return subpattern
sre_parse.py(718):     tail = source.get()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(195):             self.next = None
sre_parse.py(196):             return
sre_parse.py(215):         return this
sre_parse.py(719):     if tail == ")":
sre_parse.py(721):     elif tail:
sre_parse.py(724):     if not (flags & SRE_FLAG_VERBOSE) and p.pattern.flags & SRE_FLAG_VERBOSE:
sre_parse.py(729):     if flags & SRE_FLAG_DEBUG:
sre_parse.py(732):     return p
sre_compile.py(576):     code = _code(p, flags)
 --- modulename: sre_compile, funcname: _code
sre_compile.py(554):     flags = p.pattern.flags | flags
sre_compile.py(555):     code = []
sre_compile.py(558):     _compile_info(code, p, flags)
 --- modulename: sre_compile, funcname: _compile_info
sre_compile.py(437):     lo, hi = pattern.getwidth()
 --- modulename: sre_parse, funcname: getwidth
sre_parse.py(153):         if self.width:
sre_parse.py(155):         lo = hi = 0
sre_parse.py(156):         UNITCODES = (ANY, RANGE, IN, LITERAL, NOT_LITERAL, CATEGORY)
sre_parse.py(157):         REPEATCODES = (MIN_REPEAT, MAX_REPEAT)
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(159):             if op is BRANCH:
sre_parse.py(160):                 i = MAXREPEAT - 1
sre_parse.py(161):                 j = 0
sre_parse.py(162):                 for av in av[1]:
sre_parse.py(163):                     l, h = av.getwidth()
 --- modulename: sre_parse, funcname: getwidth
sre_parse.py(153):         if self.width:
sre_parse.py(155):         lo = hi = 0
sre_parse.py(156):         UNITCODES = (ANY, RANGE, IN, LITERAL, NOT_LITERAL, CATEGORY)
sre_parse.py(157):         REPEATCODES = (MIN_REPEAT, MAX_REPEAT)
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(159):             if op is BRANCH:
sre_parse.py(168):             elif op is CALL:
sre_parse.py(172):             elif op is SUBPATTERN:
sre_parse.py(173):                 i, j = av[1].getwidth()
 --- modulename: sre_parse, funcname: getwidth
sre_parse.py(153):         if self.width:
sre_parse.py(155):         lo = hi = 0
sre_parse.py(156):         UNITCODES = (ANY, RANGE, IN, LITERAL, NOT_LITERAL, CATEGORY)
sre_parse.py(157):         REPEATCODES = (MIN_REPEAT, MAX_REPEAT)
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(159):             if op is BRANCH:
sre_parse.py(168):             elif op is CALL:
sre_parse.py(172):             elif op is SUBPATTERN:
sre_parse.py(176):             elif op in REPEATCODES:
sre_parse.py(180):             elif op in UNITCODES:
sre_parse.py(181):                 lo = lo + 1
sre_parse.py(182):                 hi = hi + 1
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(159):             if op is BRANCH:
sre_parse.py(168):             elif op is CALL:
sre_parse.py(172):             elif op is SUBPATTERN:
sre_parse.py(176):             elif op in REPEATCODES:
sre_parse.py(180):             elif op in UNITCODES:
sre_parse.py(181):                 lo = lo + 1
sre_parse.py(182):                 hi = hi + 1
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(159):             if op is BRANCH:
sre_parse.py(168):             elif op is CALL:
sre_parse.py(172):             elif op is SUBPATTERN:
sre_parse.py(176):             elif op in REPEATCODES:
sre_parse.py(180):             elif op in UNITCODES:
sre_parse.py(181):                 lo = lo + 1
sre_parse.py(182):                 hi = hi + 1
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(159):             if op is BRANCH:
sre_parse.py(168):             elif op is CALL:
sre_parse.py(172):             elif op is SUBPATTERN:
sre_parse.py(176):             elif op in REPEATCODES:
sre_parse.py(180):             elif op in UNITCODES:
sre_parse.py(181):                 lo = lo + 1
sre_parse.py(182):                 hi = hi + 1
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(159):             if op is BRANCH:
sre_parse.py(168):             elif op is CALL:
sre_parse.py(172):             elif op is SUBPATTERN:
sre_parse.py(176):             elif op in REPEATCODES:
sre_parse.py(180):             elif op in UNITCODES:
sre_parse.py(181):                 lo = lo + 1
sre_parse.py(182):                 hi = hi + 1
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(159):             if op is BRANCH:
sre_parse.py(168):             elif op is CALL:
sre_parse.py(172):             elif op is SUBPATTERN:
sre_parse.py(176):             elif op in REPEATCODES:
sre_parse.py(180):             elif op in UNITCODES:
sre_parse.py(181):                 lo = lo + 1
sre_parse.py(182):                 hi = hi + 1
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(159):             if op is BRANCH:
sre_parse.py(168):             elif op is CALL:
sre_parse.py(172):             elif op is SUBPATTERN:
sre_parse.py(176):             elif op in REPEATCODES:
sre_parse.py(180):             elif op in UNITCODES:
sre_parse.py(181):                 lo = lo + 1
sre_parse.py(182):                 hi = hi + 1
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(159):             if op is BRANCH:
sre_parse.py(168):             elif op is CALL:
sre_parse.py(172):             elif op is SUBPATTERN:
sre_parse.py(176):             elif op in REPEATCODES:
sre_parse.py(180):             elif op in UNITCODES:
sre_parse.py(181):                 lo = lo + 1
sre_parse.py(182):                 hi = hi + 1
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(159):             if op is BRANCH:
sre_parse.py(168):             elif op is CALL:
sre_parse.py(172):             elif op is SUBPATTERN:
sre_parse.py(176):             elif op in REPEATCODES:
sre_parse.py(180):             elif op in UNITCODES:
sre_parse.py(181):                 lo = lo + 1
sre_parse.py(182):                 hi = hi + 1
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(159):             if op is BRANCH:
sre_parse.py(168):             elif op is CALL:
sre_parse.py(172):             elif op is SUBPATTERN:
sre_parse.py(176):             elif op in REPEATCODES:
sre_parse.py(180):             elif op in UNITCODES:
sre_parse.py(181):                 lo = lo + 1
sre_parse.py(182):                 hi = hi + 1
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(159):             if op is BRANCH:
sre_parse.py(168):             elif op is CALL:
sre_parse.py(172):             elif op is SUBPATTERN:
sre_parse.py(176):             elif op in REPEATCODES:
sre_parse.py(180):             elif op in UNITCODES:
sre_parse.py(181):                 lo = lo + 1
sre_parse.py(182):                 hi = hi + 1
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(185):         self.width = min(lo, MAXREPEAT - 1), min(hi, MAXREPEAT)
sre_parse.py(186):         return self.width
sre_parse.py(174):                 lo = lo + i
sre_parse.py(175):                 hi = hi + j
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(185):         self.width = min(lo, MAXREPEAT - 1), min(hi, MAXREPEAT)
sre_parse.py(186):         return self.width
sre_parse.py(164):                     i = min(i, l)
sre_parse.py(165):                     j = max(j, h)
sre_parse.py(162):                 for av in av[1]:
sre_parse.py(163):                     l, h = av.getwidth()
 --- modulename: sre_parse, funcname: getwidth
sre_parse.py(153):         if self.width:
sre_parse.py(155):         lo = hi = 0
sre_parse.py(156):         UNITCODES = (ANY, RANGE, IN, LITERAL, NOT_LITERAL, CATEGORY)
sre_parse.py(157):         REPEATCODES = (MIN_REPEAT, MAX_REPEAT)
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(159):             if op is BRANCH:
sre_parse.py(168):             elif op is CALL:
sre_parse.py(172):             elif op is SUBPATTERN:
sre_parse.py(173):                 i, j = av[1].getwidth()
 --- modulename: sre_parse, funcname: getwidth
sre_parse.py(153):         if self.width:
sre_parse.py(155):         lo = hi = 0
sre_parse.py(156):         UNITCODES = (ANY, RANGE, IN, LITERAL, NOT_LITERAL, CATEGORY)
sre_parse.py(157):         REPEATCODES = (MIN_REPEAT, MAX_REPEAT)
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(159):             if op is BRANCH:
sre_parse.py(168):             elif op is CALL:
sre_parse.py(172):             elif op is SUBPATTERN:
sre_parse.py(176):             elif op in REPEATCODES:
sre_parse.py(180):             elif op in UNITCODES:
sre_parse.py(181):                 lo = lo + 1
sre_parse.py(182):                 hi = hi + 1
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(159):             if op is BRANCH:
sre_parse.py(168):             elif op is CALL:
sre_parse.py(172):             elif op is SUBPATTERN:
sre_parse.py(176):             elif op in REPEATCODES:
sre_parse.py(180):             elif op in UNITCODES:
sre_parse.py(181):                 lo = lo + 1
sre_parse.py(182):                 hi = hi + 1
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(159):             if op is BRANCH:
sre_parse.py(168):             elif op is CALL:
sre_parse.py(172):             elif op is SUBPATTERN:
sre_parse.py(176):             elif op in REPEATCODES:
sre_parse.py(180):             elif op in UNITCODES:
sre_parse.py(181):                 lo = lo + 1
sre_parse.py(182):                 hi = hi + 1
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(159):             if op is BRANCH:
sre_parse.py(168):             elif op is CALL:
sre_parse.py(172):             elif op is SUBPATTERN:
sre_parse.py(176):             elif op in REPEATCODES:
sre_parse.py(180):             elif op in UNITCODES:
sre_parse.py(181):                 lo = lo + 1
sre_parse.py(182):                 hi = hi + 1
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(159):             if op is BRANCH:
sre_parse.py(168):             elif op is CALL:
sre_parse.py(172):             elif op is SUBPATTERN:
sre_parse.py(176):             elif op in REPEATCODES:
sre_parse.py(180):             elif op in UNITCODES:
sre_parse.py(181):                 lo = lo + 1
sre_parse.py(182):                 hi = hi + 1
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(159):             if op is BRANCH:
sre_parse.py(168):             elif op is CALL:
sre_parse.py(172):             elif op is SUBPATTERN:
sre_parse.py(176):             elif op in REPEATCODES:
sre_parse.py(180):             elif op in UNITCODES:
sre_parse.py(181):                 lo = lo + 1
sre_parse.py(182):                 hi = hi + 1
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(159):             if op is BRANCH:
sre_parse.py(168):             elif op is CALL:
sre_parse.py(172):             elif op is SUBPATTERN:
sre_parse.py(173):                 i, j = av[1].getwidth()
 --- modulename: sre_parse, funcname: getwidth
sre_parse.py(153):         if self.width:
sre_parse.py(155):         lo = hi = 0
sre_parse.py(156):         UNITCODES = (ANY, RANGE, IN, LITERAL, NOT_LITERAL, CATEGORY)
sre_parse.py(157):         REPEATCODES = (MIN_REPEAT, MAX_REPEAT)
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(159):             if op is BRANCH:
sre_parse.py(168):             elif op is CALL:
sre_parse.py(172):             elif op is SUBPATTERN:
sre_parse.py(176):             elif op in REPEATCODES:
sre_parse.py(177):                 i, j = av[2].getwidth()
 --- modulename: sre_parse, funcname: getwidth
sre_parse.py(153):         if self.width:
sre_parse.py(155):         lo = hi = 0
sre_parse.py(156):         UNITCODES = (ANY, RANGE, IN, LITERAL, NOT_LITERAL, CATEGORY)
sre_parse.py(157):         REPEATCODES = (MIN_REPEAT, MAX_REPEAT)
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(159):             if op is BRANCH:
sre_parse.py(168):             elif op is CALL:
sre_parse.py(172):             elif op is SUBPATTERN:
sre_parse.py(176):             elif op in REPEATCODES:
sre_parse.py(180):             elif op in UNITCODES:
sre_parse.py(181):                 lo = lo + 1
sre_parse.py(182):                 hi = hi + 1
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(185):         self.width = min(lo, MAXREPEAT - 1), min(hi, MAXREPEAT)
sre_parse.py(186):         return self.width
sre_parse.py(178):                 lo = lo + i * av[0]
sre_parse.py(179):                 hi = hi + j * av[1]
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(185):         self.width = min(lo, MAXREPEAT - 1), min(hi, MAXREPEAT)
sre_parse.py(186):         return self.width
sre_parse.py(174):                 lo = lo + i
sre_parse.py(175):                 hi = hi + j
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(185):         self.width = min(lo, MAXREPEAT - 1), min(hi, MAXREPEAT)
sre_parse.py(186):         return self.width
sre_parse.py(174):                 lo = lo + i
sre_parse.py(175):                 hi = hi + j
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(185):         self.width = min(lo, MAXREPEAT - 1), min(hi, MAXREPEAT)
sre_parse.py(186):         return self.width
sre_parse.py(164):                     i = min(i, l)
sre_parse.py(165):                     j = max(j, h)
sre_parse.py(162):                 for av in av[1]:
sre_parse.py(163):                     l, h = av.getwidth()
 --- modulename: sre_parse, funcname: getwidth
sre_parse.py(153):         if self.width:
sre_parse.py(155):         lo = hi = 0
sre_parse.py(156):         UNITCODES = (ANY, RANGE, IN, LITERAL, NOT_LITERAL, CATEGORY)
sre_parse.py(157):         REPEATCODES = (MIN_REPEAT, MAX_REPEAT)
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(159):             if op is BRANCH:
sre_parse.py(168):             elif op is CALL:
sre_parse.py(172):             elif op is SUBPATTERN:
sre_parse.py(173):                 i, j = av[1].getwidth()
 --- modulename: sre_parse, funcname: getwidth
sre_parse.py(153):         if self.width:
sre_parse.py(155):         lo = hi = 0
sre_parse.py(156):         UNITCODES = (ANY, RANGE, IN, LITERAL, NOT_LITERAL, CATEGORY)
sre_parse.py(157):         REPEATCODES = (MIN_REPEAT, MAX_REPEAT)
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(159):             if op is BRANCH:
sre_parse.py(168):             elif op is CALL:
sre_parse.py(172):             elif op is SUBPATTERN:
sre_parse.py(176):             elif op in REPEATCODES:
sre_parse.py(180):             elif op in UNITCODES:
sre_parse.py(181):                 lo = lo + 1
sre_parse.py(182):                 hi = hi + 1
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(159):             if op is BRANCH:
sre_parse.py(168):             elif op is CALL:
sre_parse.py(172):             elif op is SUBPATTERN:
sre_parse.py(176):             elif op in REPEATCODES:
sre_parse.py(180):             elif op in UNITCODES:
sre_parse.py(181):                 lo = lo + 1
sre_parse.py(182):                 hi = hi + 1
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(159):             if op is BRANCH:
sre_parse.py(168):             elif op is CALL:
sre_parse.py(172):             elif op is SUBPATTERN:
sre_parse.py(176):             elif op in REPEATCODES:
sre_parse.py(180):             elif op in UNITCODES:
sre_parse.py(181):                 lo = lo + 1
sre_parse.py(182):                 hi = hi + 1
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(159):             if op is BRANCH:
sre_parse.py(168):             elif op is CALL:
sre_parse.py(172):             elif op is SUBPATTERN:
sre_parse.py(176):             elif op in REPEATCODES:
sre_parse.py(180):             elif op in UNITCODES:
sre_parse.py(181):                 lo = lo + 1
sre_parse.py(182):                 hi = hi + 1
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(159):             if op is BRANCH:
sre_parse.py(168):             elif op is CALL:
sre_parse.py(172):             elif op is SUBPATTERN:
sre_parse.py(176):             elif op in REPEATCODES:
sre_parse.py(177):                 i, j = av[2].getwidth()
 --- modulename: sre_parse, funcname: getwidth
sre_parse.py(153):         if self.width:
sre_parse.py(155):         lo = hi = 0
sre_parse.py(156):         UNITCODES = (ANY, RANGE, IN, LITERAL, NOT_LITERAL, CATEGORY)
sre_parse.py(157):         REPEATCODES = (MIN_REPEAT, MAX_REPEAT)
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(159):             if op is BRANCH:
sre_parse.py(168):             elif op is CALL:
sre_parse.py(172):             elif op is SUBPATTERN:
sre_parse.py(173):                 i, j = av[1].getwidth()
 --- modulename: sre_parse, funcname: getwidth
sre_parse.py(153):         if self.width:
sre_parse.py(155):         lo = hi = 0
sre_parse.py(156):         UNITCODES = (ANY, RANGE, IN, LITERAL, NOT_LITERAL, CATEGORY)
sre_parse.py(157):         REPEATCODES = (MIN_REPEAT, MAX_REPEAT)
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(159):             if op is BRANCH:
sre_parse.py(168):             elif op is CALL:
sre_parse.py(172):             elif op is SUBPATTERN:
sre_parse.py(176):             elif op in REPEATCODES:
sre_parse.py(180):             elif op in UNITCODES:
sre_parse.py(181):                 lo = lo + 1
sre_parse.py(182):                 hi = hi + 1
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(159):             if op is BRANCH:
sre_parse.py(168):             elif op is CALL:
sre_parse.py(172):             elif op is SUBPATTERN:
sre_parse.py(176):             elif op in REPEATCODES:
sre_parse.py(177):                 i, j = av[2].getwidth()
 --- modulename: sre_parse, funcname: getwidth
sre_parse.py(153):         if self.width:
sre_parse.py(155):         lo = hi = 0
sre_parse.py(156):         UNITCODES = (ANY, RANGE, IN, LITERAL, NOT_LITERAL, CATEGORY)
sre_parse.py(157):         REPEATCODES = (MIN_REPEAT, MAX_REPEAT)
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(159):             if op is BRANCH:
sre_parse.py(168):             elif op is CALL:
sre_parse.py(172):             elif op is SUBPATTERN:
sre_parse.py(176):             elif op in REPEATCODES:
sre_parse.py(180):             elif op in UNITCODES:
sre_parse.py(181):                 lo = lo + 1
sre_parse.py(182):                 hi = hi + 1
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(185):         self.width = min(lo, MAXREPEAT - 1), min(hi, MAXREPEAT)
sre_parse.py(186):         return self.width
sre_parse.py(178):                 lo = lo + i * av[0]
sre_parse.py(179):                 hi = hi + j * av[1]
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(185):         self.width = min(lo, MAXREPEAT - 1), min(hi, MAXREPEAT)
sre_parse.py(186):         return self.width
sre_parse.py(174):                 lo = lo + i
sre_parse.py(175):                 hi = hi + j
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(185):         self.width = min(lo, MAXREPEAT - 1), min(hi, MAXREPEAT)
sre_parse.py(186):         return self.width
sre_parse.py(178):                 lo = lo + i * av[0]
sre_parse.py(179):                 hi = hi + j * av[1]
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(159):             if op is BRANCH:
sre_parse.py(168):             elif op is CALL:
sre_parse.py(172):             elif op is SUBPATTERN:
sre_parse.py(176):             elif op in REPEATCODES:
sre_parse.py(180):             elif op in UNITCODES:
sre_parse.py(181):                 lo = lo + 1
sre_parse.py(182):                 hi = hi + 1
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(159):             if op is BRANCH:
sre_parse.py(168):             elif op is CALL:
sre_parse.py(172):             elif op is SUBPATTERN:
sre_parse.py(176):             elif op in REPEATCODES:
sre_parse.py(180):             elif op in UNITCODES:
sre_parse.py(181):                 lo = lo + 1
sre_parse.py(182):                 hi = hi + 1
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(159):             if op is BRANCH:
sre_parse.py(168):             elif op is CALL:
sre_parse.py(172):             elif op is SUBPATTERN:
sre_parse.py(176):             elif op in REPEATCODES:
sre_parse.py(180):             elif op in UNITCODES:
sre_parse.py(181):                 lo = lo + 1
sre_parse.py(182):                 hi = hi + 1
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(159):             if op is BRANCH:
sre_parse.py(168):             elif op is CALL:
sre_parse.py(172):             elif op is SUBPATTERN:
sre_parse.py(176):             elif op in REPEATCODES:
sre_parse.py(177):                 i, j = av[2].getwidth()
 --- modulename: sre_parse, funcname: getwidth
sre_parse.py(153):         if self.width:
sre_parse.py(155):         lo = hi = 0
sre_parse.py(156):         UNITCODES = (ANY, RANGE, IN, LITERAL, NOT_LITERAL, CATEGORY)
sre_parse.py(157):         REPEATCODES = (MIN_REPEAT, MAX_REPEAT)
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(159):             if op is BRANCH:
sre_parse.py(168):             elif op is CALL:
sre_parse.py(172):             elif op is SUBPATTERN:
sre_parse.py(173):                 i, j = av[1].getwidth()
 --- modulename: sre_parse, funcname: getwidth
sre_parse.py(153):         if self.width:
sre_parse.py(155):         lo = hi = 0
sre_parse.py(156):         UNITCODES = (ANY, RANGE, IN, LITERAL, NOT_LITERAL, CATEGORY)
sre_parse.py(157):         REPEATCODES = (MIN_REPEAT, MAX_REPEAT)
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(159):             if op is BRANCH:
sre_parse.py(168):             elif op is CALL:
sre_parse.py(172):             elif op is SUBPATTERN:
sre_parse.py(176):             elif op in REPEATCODES:
sre_parse.py(180):             elif op in UNITCODES:
sre_parse.py(181):                 lo = lo + 1
sre_parse.py(182):                 hi = hi + 1
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(159):             if op is BRANCH:
sre_parse.py(168):             elif op is CALL:
sre_parse.py(172):             elif op is SUBPATTERN:
sre_parse.py(173):                 i, j = av[1].getwidth()
 --- modulename: sre_parse, funcname: getwidth
sre_parse.py(153):         if self.width:
sre_parse.py(155):         lo = hi = 0
sre_parse.py(156):         UNITCODES = (ANY, RANGE, IN, LITERAL, NOT_LITERAL, CATEGORY)
sre_parse.py(157):         REPEATCODES = (MIN_REPEAT, MAX_REPEAT)
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(159):             if op is BRANCH:
sre_parse.py(168):             elif op is CALL:
sre_parse.py(172):             elif op is SUBPATTERN:
sre_parse.py(176):             elif op in REPEATCODES:
sre_parse.py(180):             elif op in UNITCODES:
sre_parse.py(181):                 lo = lo + 1
sre_parse.py(182):                 hi = hi + 1
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(159):             if op is BRANCH:
sre_parse.py(168):             elif op is CALL:
sre_parse.py(172):             elif op is SUBPATTERN:
sre_parse.py(176):             elif op in REPEATCODES:
sre_parse.py(177):                 i, j = av[2].getwidth()
 --- modulename: sre_parse, funcname: getwidth
sre_parse.py(153):         if self.width:
sre_parse.py(155):         lo = hi = 0
sre_parse.py(156):         UNITCODES = (ANY, RANGE, IN, LITERAL, NOT_LITERAL, CATEGORY)
sre_parse.py(157):         REPEATCODES = (MIN_REPEAT, MAX_REPEAT)
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(159):             if op is BRANCH:
sre_parse.py(168):             elif op is CALL:
sre_parse.py(172):             elif op is SUBPATTERN:
sre_parse.py(176):             elif op in REPEATCODES:
sre_parse.py(180):             elif op in UNITCODES:
sre_parse.py(181):                 lo = lo + 1
sre_parse.py(182):                 hi = hi + 1
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(185):         self.width = min(lo, MAXREPEAT - 1), min(hi, MAXREPEAT)
sre_parse.py(186):         return self.width
sre_parse.py(178):                 lo = lo + i * av[0]
sre_parse.py(179):                 hi = hi + j * av[1]
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(185):         self.width = min(lo, MAXREPEAT - 1), min(hi, MAXREPEAT)
sre_parse.py(186):         return self.width
sre_parse.py(174):                 lo = lo + i
sre_parse.py(175):                 hi = hi + j
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(185):         self.width = min(lo, MAXREPEAT - 1), min(hi, MAXREPEAT)
sre_parse.py(186):         return self.width
sre_parse.py(174):                 lo = lo + i
sre_parse.py(175):                 hi = hi + j
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(185):         self.width = min(lo, MAXREPEAT - 1), min(hi, MAXREPEAT)
sre_parse.py(186):         return self.width
sre_parse.py(178):                 lo = lo + i * av[0]
sre_parse.py(179):                 hi = hi + j * av[1]
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(185):         self.width = min(lo, MAXREPEAT - 1), min(hi, MAXREPEAT)
sre_parse.py(186):         return self.width
sre_parse.py(174):                 lo = lo + i
sre_parse.py(175):                 hi = hi + j
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(185):         self.width = min(lo, MAXREPEAT - 1), min(hi, MAXREPEAT)
sre_parse.py(186):         return self.width
sre_parse.py(164):                     i = min(i, l)
sre_parse.py(165):                     j = max(j, h)
sre_parse.py(162):                 for av in av[1]:
sre_parse.py(166):                 lo = lo + i
sre_parse.py(167):                 hi = hi + j
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(185):         self.width = min(lo, MAXREPEAT - 1), min(hi, MAXREPEAT)
sre_parse.py(186):         return self.width
sre_compile.py(438):     if lo == 0:
sre_compile.py(441):     prefix = []
sre_compile.py(442):     prefixappend = prefix.append
sre_compile.py(443):     prefix_skip = 0
sre_compile.py(444):     charset = [] # not used
sre_compile.py(445):     charsetappend = charset.append
sre_compile.py(446):     if not (flags & SRE_FLAG_IGNORECASE):
sre_compile.py(448):         for op, av in pattern.data:
sre_compile.py(449):             if op is LITERAL:
sre_compile.py(453):             elif op is SUBPATTERN and len(av[1]) == 1:
sre_compile.py(460):                 break
sre_compile.py(462):         if not prefix and pattern.data:
sre_compile.py(463):             op, av = pattern.data[0]
sre_compile.py(464):             if op is SUBPATTERN and av[1]:
sre_compile.py(481):             elif op is BRANCH:
sre_compile.py(482):                 c = []
sre_compile.py(483):                 cappend = c.append
sre_compile.py(484):                 for p in av[1]:
sre_compile.py(485):                     if not p:
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(138):         return len(self.data)
sre_compile.py(487):                     op, av = p[0]
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(488):                     if op is LITERAL:
sre_compile.py(491):                         break
sre_compile.py(501):     emit = code.append
sre_compile.py(502):     emit(OPCODES[INFO])
sre_compile.py(503):     skip = len(code); emit(0)
sre_compile.py(505):     mask = 0
sre_compile.py(506):     if prefix:
sre_compile.py(510):     elif charset:
sre_compile.py(512):     emit(mask)
sre_compile.py(514):     if lo < MAXCODE:
sre_compile.py(515):         emit(lo)
sre_compile.py(519):     if hi < MAXCODE:
sre_compile.py(520):         emit(hi)
sre_compile.py(524):     if prefix:
sre_compile.py(535):     elif charset:
sre_compile.py(537):     code[skip] = len(code) - skip
sre_compile.py(561):     _compile(code, p.data, flags)
 --- modulename: sre_compile, funcname: _compile
sre_compile.py(66):     emit = code.append
sre_compile.py(67):     _len = len
sre_compile.py(68):     LITERAL_CODES = _LITERAL_CODES
sre_compile.py(69):     REPEATING_CODES = _REPEATING_CODES
sre_compile.py(70):     SUCCESS_CODES = _SUCCESS_CODES
sre_compile.py(71):     ASSERT_CODES = _ASSERT_CODES
sre_compile.py(72):     if (flags & SRE_FLAG_IGNORECASE and
sre_compile.py(77):         fixes = None
sre_compile.py(78):     for op, av in pattern:
sre_compile.py(79):         if op in LITERAL_CODES:
sre_compile.py(98):         elif op is IN:
sre_compile.py(109):         elif op is ANY:
sre_compile.py(114):         elif op in REPEATING_CODES:
sre_compile.py(146):         elif op is SUBPATTERN:
sre_compile.py(155):         elif op in SUCCESS_CODES:
sre_compile.py(157):         elif op in ASSERT_CODES:
sre_compile.py(170):         elif op is CALL:
sre_compile.py(176):         elif op is AT:
sre_compile.py(185):         elif op is BRANCH:
sre_compile.py(186):             emit(OPCODES[op])
sre_compile.py(187):             tail = []
sre_compile.py(188):             tailappend = tail.append
sre_compile.py(189):             for av in av[1]:
sre_compile.py(190):                 skip = _len(code); emit(0)
sre_compile.py(192):                 _compile(code, av, flags)
 --- modulename: sre_compile, funcname: _compile
sre_compile.py(66):     emit = code.append
sre_compile.py(67):     _len = len
sre_compile.py(68):     LITERAL_CODES = _LITERAL_CODES
sre_compile.py(69):     REPEATING_CODES = _REPEATING_CODES
sre_compile.py(70):     SUCCESS_CODES = _SUCCESS_CODES
sre_compile.py(71):     ASSERT_CODES = _ASSERT_CODES
sre_compile.py(72):     if (flags & SRE_FLAG_IGNORECASE and
sre_compile.py(77):         fixes = None
sre_compile.py(78):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(79):         if op in LITERAL_CODES:
sre_compile.py(98):         elif op is IN:
sre_compile.py(109):         elif op is ANY:
sre_compile.py(114):         elif op in REPEATING_CODES:
sre_compile.py(146):         elif op is SUBPATTERN:
sre_compile.py(147):             if av[0]:
sre_compile.py(148):                 emit(OPCODES[MARK])
sre_compile.py(149):                 emit((av[0]-1)*2)
sre_compile.py(151):             _compile(code, av[1], flags)
 --- modulename: sre_compile, funcname: _compile
sre_compile.py(66):     emit = code.append
sre_compile.py(67):     _len = len
sre_compile.py(68):     LITERAL_CODES = _LITERAL_CODES
sre_compile.py(69):     REPEATING_CODES = _REPEATING_CODES
sre_compile.py(70):     SUCCESS_CODES = _SUCCESS_CODES
sre_compile.py(71):     ASSERT_CODES = _ASSERT_CODES
sre_compile.py(72):     if (flags & SRE_FLAG_IGNORECASE and
sre_compile.py(77):         fixes = None
sre_compile.py(78):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(79):         if op in LITERAL_CODES:
sre_compile.py(80):             if flags & SRE_FLAG_IGNORECASE:
sre_compile.py(96):                 emit(OPCODES[op])
sre_compile.py(97):                 emit(av)
sre_compile.py(78):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(79):         if op in LITERAL_CODES:
sre_compile.py(80):             if flags & SRE_FLAG_IGNORECASE:
sre_compile.py(96):                 emit(OPCODES[op])
sre_compile.py(97):                 emit(av)
sre_compile.py(78):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(79):         if op in LITERAL_CODES:
sre_compile.py(80):             if flags & SRE_FLAG_IGNORECASE:
sre_compile.py(96):                 emit(OPCODES[op])
sre_compile.py(97):                 emit(av)
sre_compile.py(78):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(79):         if op in LITERAL_CODES:
sre_compile.py(80):             if flags & SRE_FLAG_IGNORECASE:
sre_compile.py(96):                 emit(OPCODES[op])
sre_compile.py(97):                 emit(av)
sre_compile.py(78):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(79):         if op in LITERAL_CODES:
sre_compile.py(80):             if flags & SRE_FLAG_IGNORECASE:
sre_compile.py(96):                 emit(OPCODES[op])
sre_compile.py(97):                 emit(av)
sre_compile.py(78):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(79):         if op in LITERAL_CODES:
sre_compile.py(80):             if flags & SRE_FLAG_IGNORECASE:
sre_compile.py(96):                 emit(OPCODES[op])
sre_compile.py(97):                 emit(av)
sre_compile.py(78):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(79):         if op in LITERAL_CODES:
sre_compile.py(80):             if flags & SRE_FLAG_IGNORECASE:
sre_compile.py(96):                 emit(OPCODES[op])
sre_compile.py(97):                 emit(av)
sre_compile.py(78):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(79):         if op in LITERAL_CODES:
sre_compile.py(80):             if flags & SRE_FLAG_IGNORECASE:
sre_compile.py(96):                 emit(OPCODES[op])
sre_compile.py(97):                 emit(av)
sre_compile.py(78):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(79):         if op in LITERAL_CODES:
sre_compile.py(80):             if flags & SRE_FLAG_IGNORECASE:
sre_compile.py(96):                 emit(OPCODES[op])
sre_compile.py(97):                 emit(av)
sre_compile.py(78):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(79):         if op in LITERAL_CODES:
sre_compile.py(80):             if flags & SRE_FLAG_IGNORECASE:
sre_compile.py(96):                 emit(OPCODES[op])
sre_compile.py(97):                 emit(av)
sre_compile.py(78):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(79):         if op in LITERAL_CODES:
sre_compile.py(80):             if flags & SRE_FLAG_IGNORECASE:
sre_compile.py(96):                 emit(OPCODES[op])
sre_compile.py(97):                 emit(av)
sre_compile.py(78):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(152):             if av[0]:
sre_compile.py(153):                 emit(OPCODES[MARK])
sre_compile.py(154):                 emit((av[0]-1)*2+1)
sre_compile.py(78):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(193):                 emit(OPCODES[JUMP])
sre_compile.py(194):                 tailappend(_len(code)); emit(0)
sre_compile.py(195):                 code[skip] = _len(code) - skip
sre_compile.py(189):             for av in av[1]:
sre_compile.py(190):                 skip = _len(code); emit(0)
sre_compile.py(192):                 _compile(code, av, flags)
 --- modulename: sre_compile, funcname: _compile
sre_compile.py(66):     emit = code.append
sre_compile.py(67):     _len = len
sre_compile.py(68):     LITERAL_CODES = _LITERAL_CODES
sre_compile.py(69):     REPEATING_CODES = _REPEATING_CODES
sre_compile.py(70):     SUCCESS_CODES = _SUCCESS_CODES
sre_compile.py(71):     ASSERT_CODES = _ASSERT_CODES
sre_compile.py(72):     if (flags & SRE_FLAG_IGNORECASE and
sre_compile.py(77):         fixes = None
sre_compile.py(78):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(79):         if op in LITERAL_CODES:
sre_compile.py(98):         elif op is IN:
sre_compile.py(109):         elif op is ANY:
sre_compile.py(114):         elif op in REPEATING_CODES:
sre_compile.py(146):         elif op is SUBPATTERN:
sre_compile.py(147):             if av[0]:
sre_compile.py(148):                 emit(OPCODES[MARK])
sre_compile.py(149):                 emit((av[0]-1)*2)
sre_compile.py(151):             _compile(code, av[1], flags)
 --- modulename: sre_compile, funcname: _compile
sre_compile.py(66):     emit = code.append
sre_compile.py(67):     _len = len
sre_compile.py(68):     LITERAL_CODES = _LITERAL_CODES
sre_compile.py(69):     REPEATING_CODES = _REPEATING_CODES
sre_compile.py(70):     SUCCESS_CODES = _SUCCESS_CODES
sre_compile.py(71):     ASSERT_CODES = _ASSERT_CODES
sre_compile.py(72):     if (flags & SRE_FLAG_IGNORECASE and
sre_compile.py(77):         fixes = None
sre_compile.py(78):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(79):         if op in LITERAL_CODES:
sre_compile.py(80):             if flags & SRE_FLAG_IGNORECASE:
sre_compile.py(96):                 emit(OPCODES[op])
sre_compile.py(97):                 emit(av)
sre_compile.py(78):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(79):         if op in LITERAL_CODES:
sre_compile.py(80):             if flags & SRE_FLAG_IGNORECASE:
sre_compile.py(96):                 emit(OPCODES[op])
sre_compile.py(97):                 emit(av)
sre_compile.py(78):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(79):         if op in LITERAL_CODES:
sre_compile.py(80):             if flags & SRE_FLAG_IGNORECASE:
sre_compile.py(96):                 emit(OPCODES[op])
sre_compile.py(97):                 emit(av)
sre_compile.py(78):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(79):         if op in LITERAL_CODES:
sre_compile.py(80):             if flags & SRE_FLAG_IGNORECASE:
sre_compile.py(96):                 emit(OPCODES[op])
sre_compile.py(97):                 emit(av)
sre_compile.py(78):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(79):         if op in LITERAL_CODES:
sre_compile.py(80):             if flags & SRE_FLAG_IGNORECASE:
sre_compile.py(96):                 emit(OPCODES[op])
sre_compile.py(97):                 emit(av)
sre_compile.py(78):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(79):         if op in LITERAL_CODES:
sre_compile.py(80):             if flags & SRE_FLAG_IGNORECASE:
sre_compile.py(96):                 emit(OPCODES[op])
sre_compile.py(97):                 emit(av)
sre_compile.py(78):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(79):         if op in LITERAL_CODES:
sre_compile.py(98):         elif op is IN:
sre_compile.py(109):         elif op is ANY:
sre_compile.py(114):         elif op in REPEATING_CODES:
sre_compile.py(146):         elif op is SUBPATTERN:
sre_compile.py(147):             if av[0]:
sre_compile.py(148):                 emit(OPCODES[MARK])
sre_compile.py(149):                 emit((av[0]-1)*2)
sre_compile.py(151):             _compile(code, av[1], flags)
 --- modulename: sre_compile, funcname: _compile
sre_compile.py(66):     emit = code.append
sre_compile.py(67):     _len = len
sre_compile.py(68):     LITERAL_CODES = _LITERAL_CODES
sre_compile.py(69):     REPEATING_CODES = _REPEATING_CODES
sre_compile.py(70):     SUCCESS_CODES = _SUCCESS_CODES
sre_compile.py(71):     ASSERT_CODES = _ASSERT_CODES
sre_compile.py(72):     if (flags & SRE_FLAG_IGNORECASE and
sre_compile.py(77):         fixes = None
sre_compile.py(78):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(79):         if op in LITERAL_CODES:
sre_compile.py(98):         elif op is IN:
sre_compile.py(109):         elif op is ANY:
sre_compile.py(114):         elif op in REPEATING_CODES:
sre_compile.py(115):             if flags & SRE_FLAG_TEMPLATE:
sre_compile.py(124):             elif _simple(av) and op is not REPEAT:
 --- modulename: sre_compile, funcname: _simple
sre_compile.py(430):     lo, hi = av[2].getwidth()
 --- modulename: sre_parse, funcname: getwidth
sre_parse.py(153):         if self.width:
sre_parse.py(154):             return self.width
sre_compile.py(431):     return lo == hi == 1 and av[2][0][0] != SUBPATTERN
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(125):                 if op is MAX_REPEAT:
sre_compile.py(126):                     emit(OPCODES[REPEAT_ONE])
sre_compile.py(129):                 skip = _len(code); emit(0)
sre_compile.py(130):                 emit(av[0])
sre_compile.py(131):                 emit(av[1])
sre_compile.py(132):                 _compile(code, av[2], flags)
 --- modulename: sre_compile, funcname: _compile
sre_compile.py(66):     emit = code.append
sre_compile.py(67):     _len = len
sre_compile.py(68):     LITERAL_CODES = _LITERAL_CODES
sre_compile.py(69):     REPEATING_CODES = _REPEATING_CODES
sre_compile.py(70):     SUCCESS_CODES = _SUCCESS_CODES
sre_compile.py(71):     ASSERT_CODES = _ASSERT_CODES
sre_compile.py(72):     if (flags & SRE_FLAG_IGNORECASE and
sre_compile.py(77):         fixes = None
sre_compile.py(78):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(79):         if op in LITERAL_CODES:
sre_compile.py(98):         elif op is IN:
sre_compile.py(99):             if flags & SRE_FLAG_IGNORECASE:
sre_compile.py(104):                 emit(OPCODES[op])
sre_compile.py(105):                 fixup = None
sre_compile.py(106):             skip = _len(code); emit(0)
sre_compile.py(107):             _compile_charset(av, flags, code, fixup, fixes)
 --- modulename: sre_compile, funcname: _compile_charset
sre_compile.py(230):     emit = code.append
sre_compile.py(231):     for op, av in _optimize_charset(charset, fixup, fixes,
sre_compile.py(232):                                     flags & SRE_FLAG_UNICODE):
 --- modulename: sre_compile, funcname: _optimize_charset
sre_compile.py(258):     out = []
sre_compile.py(259):     tail = []
sre_compile.py(260):     charmap = bytearray(256)
sre_compile.py(261):     for op, av in charset:
sre_compile.py(262):         while True:
sre_compile.py(263):             try:
sre_compile.py(264):                 if op is LITERAL:
sre_compile.py(273):                 elif op is RANGE:
sre_compile.py(274):                     r = range(av[0], av[1]+1)
sre_compile.py(275):                     if fixup:
sre_compile.py(277):                     if fixup and fixes:
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(310):             break
sre_compile.py(261):     for op, av in charset:
sre_compile.py(262):         while True:
sre_compile.py(263):             try:
sre_compile.py(264):                 if op is LITERAL:
sre_compile.py(265):                     if fixup:
sre_compile.py(272):                         charmap[av] = 1
sre_compile.py(310):             break
sre_compile.py(261):     for op, av in charset:
sre_compile.py(313):     runs = []
sre_compile.py(314):     q = 0
sre_compile.py(315):     while True:
sre_compile.py(316):         p = charmap.find(b'\1', q)
sre_compile.py(317):         if p < 0:
sre_compile.py(319):         if len(runs) >= 2:
sre_compile.py(322):         q = charmap.find(b'\0', p)
sre_compile.py(323):         if q < 0:
sre_compile.py(326):         runs.append((p, q))
sre_compile.py(315):     while True:
sre_compile.py(316):         p = charmap.find(b'\1', q)
sre_compile.py(317):         if p < 0:
sre_compile.py(319):         if len(runs) >= 2:
sre_compile.py(322):         q = charmap.find(b'\0', p)
sre_compile.py(323):         if q < 0:
sre_compile.py(326):         runs.append((p, q))
sre_compile.py(315):     while True:
sre_compile.py(316):         p = charmap.find(b'\1', q)
sre_compile.py(317):         if p < 0:
sre_compile.py(318):             break
sre_compile.py(327):     if runs is not None:
sre_compile.py(329):         for p, q in runs:
sre_compile.py(330):             if q - p == 1:
sre_compile.py(331):                 out.append((LITERAL, p))
sre_compile.py(329):         for p, q in runs:
sre_compile.py(330):             if q - p == 1:
sre_compile.py(333):                 out.append((RANGE, (p, q - 1)))
sre_compile.py(329):         for p, q in runs:
sre_compile.py(334):         out += tail
sre_compile.py(336):         if fixup or len(out) < len(charset):
sre_compile.py(339):         return charset
sre_compile.py(233):         emit(OPCODES[op])
sre_compile.py(234):         if op is NEGATE:
sre_compile.py(236):         elif op is LITERAL:
sre_compile.py(238):         elif op is RANGE:
sre_compile.py(239):             emit(av[0])
sre_compile.py(240):             emit(av[1])
sre_compile.py(232):                                     flags & SRE_FLAG_UNICODE):
sre_compile.py(233):         emit(OPCODES[op])
sre_compile.py(234):         if op is NEGATE:
sre_compile.py(236):         elif op is LITERAL:
sre_compile.py(237):             emit(av)
sre_compile.py(232):                                     flags & SRE_FLAG_UNICODE):
sre_compile.py(254):     emit(OPCODES[FAILURE])
sre_compile.py(108):             code[skip] = _len(code) - skip
sre_compile.py(78):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(133):                 emit(OPCODES[SUCCESS])
sre_compile.py(134):                 code[skip] = _len(code) - skip
sre_compile.py(78):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(152):             if av[0]:
sre_compile.py(153):                 emit(OPCODES[MARK])
sre_compile.py(154):                 emit((av[0]-1)*2+1)
sre_compile.py(78):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(152):             if av[0]:
sre_compile.py(153):                 emit(OPCODES[MARK])
sre_compile.py(154):                 emit((av[0]-1)*2+1)
sre_compile.py(78):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(193):                 emit(OPCODES[JUMP])
sre_compile.py(194):                 tailappend(_len(code)); emit(0)
sre_compile.py(195):                 code[skip] = _len(code) - skip
sre_compile.py(189):             for av in av[1]:
sre_compile.py(190):                 skip = _len(code); emit(0)
sre_compile.py(192):                 _compile(code, av, flags)
 --- modulename: sre_compile, funcname: _compile
sre_compile.py(66):     emit = code.append
sre_compile.py(67):     _len = len
sre_compile.py(68):     LITERAL_CODES = _LITERAL_CODES
sre_compile.py(69):     REPEATING_CODES = _REPEATING_CODES
sre_compile.py(70):     SUCCESS_CODES = _SUCCESS_CODES
sre_compile.py(71):     ASSERT_CODES = _ASSERT_CODES
sre_compile.py(72):     if (flags & SRE_FLAG_IGNORECASE and
sre_compile.py(77):         fixes = None
sre_compile.py(78):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(79):         if op in LITERAL_CODES:
sre_compile.py(98):         elif op is IN:
sre_compile.py(109):         elif op is ANY:
sre_compile.py(114):         elif op in REPEATING_CODES:
sre_compile.py(146):         elif op is SUBPATTERN:
sre_compile.py(147):             if av[0]:
sre_compile.py(148):                 emit(OPCODES[MARK])
sre_compile.py(149):                 emit((av[0]-1)*2)
sre_compile.py(151):             _compile(code, av[1], flags)
 --- modulename: sre_compile, funcname: _compile
sre_compile.py(66):     emit = code.append
sre_compile.py(67):     _len = len
sre_compile.py(68):     LITERAL_CODES = _LITERAL_CODES
sre_compile.py(69):     REPEATING_CODES = _REPEATING_CODES
sre_compile.py(70):     SUCCESS_CODES = _SUCCESS_CODES
sre_compile.py(71):     ASSERT_CODES = _ASSERT_CODES
sre_compile.py(72):     if (flags & SRE_FLAG_IGNORECASE and
sre_compile.py(77):         fixes = None
sre_compile.py(78):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(79):         if op in LITERAL_CODES:
sre_compile.py(80):             if flags & SRE_FLAG_IGNORECASE:
sre_compile.py(96):                 emit(OPCODES[op])
sre_compile.py(97):                 emit(av)
sre_compile.py(78):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(79):         if op in LITERAL_CODES:
sre_compile.py(80):             if flags & SRE_FLAG_IGNORECASE:
sre_compile.py(96):                 emit(OPCODES[op])
sre_compile.py(97):                 emit(av)
sre_compile.py(78):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(79):         if op in LITERAL_CODES:
sre_compile.py(80):             if flags & SRE_FLAG_IGNORECASE:
sre_compile.py(96):                 emit(OPCODES[op])
sre_compile.py(97):                 emit(av)
sre_compile.py(78):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(79):         if op in LITERAL_CODES:
sre_compile.py(80):             if flags & SRE_FLAG_IGNORECASE:
sre_compile.py(96):                 emit(OPCODES[op])
sre_compile.py(97):                 emit(av)
sre_compile.py(78):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(79):         if op in LITERAL_CODES:
sre_compile.py(98):         elif op is IN:
sre_compile.py(109):         elif op is ANY:
sre_compile.py(114):         elif op in REPEATING_CODES:
sre_compile.py(115):             if flags & SRE_FLAG_TEMPLATE:
sre_compile.py(124):             elif _simple(av) and op is not REPEAT:
 --- modulename: sre_compile, funcname: _simple
sre_compile.py(430):     lo, hi = av[2].getwidth()
 --- modulename: sre_parse, funcname: getwidth
sre_parse.py(153):         if self.width:
sre_parse.py(154):             return self.width
sre_compile.py(431):     return lo == hi == 1 and av[2][0][0] != SUBPATTERN
sre_compile.py(136):                 emit(OPCODES[REPEAT])
sre_compile.py(137):                 skip = _len(code); emit(0)
sre_compile.py(138):                 emit(av[0])
sre_compile.py(139):                 emit(av[1])
sre_compile.py(140):                 _compile(code, av[2], flags)
 --- modulename: sre_compile, funcname: _compile
sre_compile.py(66):     emit = code.append
sre_compile.py(67):     _len = len
sre_compile.py(68):     LITERAL_CODES = _LITERAL_CODES
sre_compile.py(69):     REPEATING_CODES = _REPEATING_CODES
sre_compile.py(70):     SUCCESS_CODES = _SUCCESS_CODES
sre_compile.py(71):     ASSERT_CODES = _ASSERT_CODES
sre_compile.py(72):     if (flags & SRE_FLAG_IGNORECASE and
sre_compile.py(77):         fixes = None
sre_compile.py(78):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(79):         if op in LITERAL_CODES:
sre_compile.py(98):         elif op is IN:
sre_compile.py(109):         elif op is ANY:
sre_compile.py(114):         elif op in REPEATING_CODES:
sre_compile.py(146):         elif op is SUBPATTERN:
sre_compile.py(147):             if av[0]:
sre_compile.py(148):                 emit(OPCODES[MARK])
sre_compile.py(149):                 emit((av[0]-1)*2)
sre_compile.py(151):             _compile(code, av[1], flags)
 --- modulename: sre_compile, funcname: _compile
sre_compile.py(66):     emit = code.append
sre_compile.py(67):     _len = len
sre_compile.py(68):     LITERAL_CODES = _LITERAL_CODES
sre_compile.py(69):     REPEATING_CODES = _REPEATING_CODES
sre_compile.py(70):     SUCCESS_CODES = _SUCCESS_CODES
sre_compile.py(71):     ASSERT_CODES = _ASSERT_CODES
sre_compile.py(72):     if (flags & SRE_FLAG_IGNORECASE and
sre_compile.py(77):         fixes = None
sre_compile.py(78):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(79):         if op in LITERAL_CODES:
sre_compile.py(80):             if flags & SRE_FLAG_IGNORECASE:
sre_compile.py(96):                 emit(OPCODES[op])
sre_compile.py(97):                 emit(av)
sre_compile.py(78):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(79):         if op in LITERAL_CODES:
sre_compile.py(98):         elif op is IN:
sre_compile.py(109):         elif op is ANY:
sre_compile.py(114):         elif op in REPEATING_CODES:
sre_compile.py(115):             if flags & SRE_FLAG_TEMPLATE:
sre_compile.py(124):             elif _simple(av) and op is not REPEAT:
 --- modulename: sre_compile, funcname: _simple
sre_compile.py(430):     lo, hi = av[2].getwidth()
 --- modulename: sre_parse, funcname: getwidth
sre_parse.py(153):         if self.width:
sre_parse.py(154):             return self.width
sre_compile.py(431):     return lo == hi == 1 and av[2][0][0] != SUBPATTERN
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(125):                 if op is MAX_REPEAT:
sre_compile.py(126):                     emit(OPCODES[REPEAT_ONE])
sre_compile.py(129):                 skip = _len(code); emit(0)
sre_compile.py(130):                 emit(av[0])
sre_compile.py(131):                 emit(av[1])
sre_compile.py(132):                 _compile(code, av[2], flags)
 --- modulename: sre_compile, funcname: _compile
sre_compile.py(66):     emit = code.append
sre_compile.py(67):     _len = len
sre_compile.py(68):     LITERAL_CODES = _LITERAL_CODES
sre_compile.py(69):     REPEATING_CODES = _REPEATING_CODES
sre_compile.py(70):     SUCCESS_CODES = _SUCCESS_CODES
sre_compile.py(71):     ASSERT_CODES = _ASSERT_CODES
sre_compile.py(72):     if (flags & SRE_FLAG_IGNORECASE and
sre_compile.py(77):         fixes = None
sre_compile.py(78):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(79):         if op in LITERAL_CODES:
sre_compile.py(98):         elif op is IN:
sre_compile.py(99):             if flags & SRE_FLAG_IGNORECASE:
sre_compile.py(104):                 emit(OPCODES[op])
sre_compile.py(105):                 fixup = None
sre_compile.py(106):             skip = _len(code); emit(0)
sre_compile.py(107):             _compile_charset(av, flags, code, fixup, fixes)
 --- modulename: sre_compile, funcname: _compile_charset
sre_compile.py(230):     emit = code.append
sre_compile.py(231):     for op, av in _optimize_charset(charset, fixup, fixes,
sre_compile.py(232):                                     flags & SRE_FLAG_UNICODE):
 --- modulename: sre_compile, funcname: _optimize_charset
sre_compile.py(258):     out = []
sre_compile.py(259):     tail = []
sre_compile.py(260):     charmap = bytearray(256)
sre_compile.py(261):     for op, av in charset:
sre_compile.py(262):         while True:
sre_compile.py(263):             try:
sre_compile.py(264):                 if op is LITERAL:
sre_compile.py(273):                 elif op is RANGE:
sre_compile.py(286):                 elif op is NEGATE:
sre_compile.py(289):                     tail.append((op, av))
sre_compile.py(310):             break
sre_compile.py(261):     for op, av in charset:
sre_compile.py(313):     runs = []
sre_compile.py(314):     q = 0
sre_compile.py(315):     while True:
sre_compile.py(316):         p = charmap.find(b'\1', q)
sre_compile.py(317):         if p < 0:
sre_compile.py(318):             break
sre_compile.py(327):     if runs is not None:
sre_compile.py(329):         for p, q in runs:
sre_compile.py(334):         out += tail
sre_compile.py(336):         if fixup or len(out) < len(charset):
sre_compile.py(339):         return charset
sre_compile.py(233):         emit(OPCODES[op])
sre_compile.py(234):         if op is NEGATE:
sre_compile.py(236):         elif op is LITERAL:
sre_compile.py(238):         elif op is RANGE:
sre_compile.py(241):         elif op is CHARSET:
sre_compile.py(243):         elif op is BIGCHARSET:
sre_compile.py(245):         elif op is CATEGORY:
sre_compile.py(246):             if flags & SRE_FLAG_LOCALE:
sre_compile.py(248):             elif flags & SRE_FLAG_UNICODE:
sre_compile.py(251):                 emit(CHCODES[av])
sre_compile.py(232):                                     flags & SRE_FLAG_UNICODE):
sre_compile.py(254):     emit(OPCODES[FAILURE])
sre_compile.py(108):             code[skip] = _len(code) - skip
sre_compile.py(78):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(133):                 emit(OPCODES[SUCCESS])
sre_compile.py(134):                 code[skip] = _len(code) - skip
sre_compile.py(78):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(152):             if av[0]:
sre_compile.py(153):                 emit(OPCODES[MARK])
sre_compile.py(154):                 emit((av[0]-1)*2+1)
sre_compile.py(78):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(141):                 code[skip] = _len(code) - skip
sre_compile.py(142):                 if op is MAX_REPEAT:
sre_compile.py(143):                     emit(OPCODES[MAX_UNTIL])
sre_compile.py(78):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(79):         if op in LITERAL_CODES:
sre_compile.py(80):             if flags & SRE_FLAG_IGNORECASE:
sre_compile.py(96):                 emit(OPCODES[op])
sre_compile.py(97):                 emit(av)
sre_compile.py(78):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(79):         if op in LITERAL_CODES:
sre_compile.py(80):             if flags & SRE_FLAG_IGNORECASE:
sre_compile.py(96):                 emit(OPCODES[op])
sre_compile.py(97):                 emit(av)
sre_compile.py(78):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(79):         if op in LITERAL_CODES:
sre_compile.py(80):             if flags & SRE_FLAG_IGNORECASE:
sre_compile.py(96):                 emit(OPCODES[op])
sre_compile.py(97):                 emit(av)
sre_compile.py(78):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(79):         if op in LITERAL_CODES:
sre_compile.py(98):         elif op is IN:
sre_compile.py(109):         elif op is ANY:
sre_compile.py(114):         elif op in REPEATING_CODES:
sre_compile.py(115):             if flags & SRE_FLAG_TEMPLATE:
sre_compile.py(124):             elif _simple(av) and op is not REPEAT:
 --- modulename: sre_compile, funcname: _simple
sre_compile.py(430):     lo, hi = av[2].getwidth()
 --- modulename: sre_parse, funcname: getwidth
sre_parse.py(153):         if self.width:
sre_parse.py(154):             return self.width
sre_compile.py(431):     return lo == hi == 1 and av[2][0][0] != SUBPATTERN
sre_compile.py(136):                 emit(OPCODES[REPEAT])
sre_compile.py(137):                 skip = _len(code); emit(0)
sre_compile.py(138):                 emit(av[0])
sre_compile.py(139):                 emit(av[1])
sre_compile.py(140):                 _compile(code, av[2], flags)
 --- modulename: sre_compile, funcname: _compile
sre_compile.py(66):     emit = code.append
sre_compile.py(67):     _len = len
sre_compile.py(68):     LITERAL_CODES = _LITERAL_CODES
sre_compile.py(69):     REPEATING_CODES = _REPEATING_CODES
sre_compile.py(70):     SUCCESS_CODES = _SUCCESS_CODES
sre_compile.py(71):     ASSERT_CODES = _ASSERT_CODES
sre_compile.py(72):     if (flags & SRE_FLAG_IGNORECASE and
sre_compile.py(77):         fixes = None
sre_compile.py(78):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(79):         if op in LITERAL_CODES:
sre_compile.py(98):         elif op is IN:
sre_compile.py(109):         elif op is ANY:
sre_compile.py(114):         elif op in REPEATING_CODES:
sre_compile.py(146):         elif op is SUBPATTERN:
sre_compile.py(147):             if av[0]:
sre_compile.py(151):             _compile(code, av[1], flags)
 --- modulename: sre_compile, funcname: _compile
sre_compile.py(66):     emit = code.append
sre_compile.py(67):     _len = len
sre_compile.py(68):     LITERAL_CODES = _LITERAL_CODES
sre_compile.py(69):     REPEATING_CODES = _REPEATING_CODES
sre_compile.py(70):     SUCCESS_CODES = _SUCCESS_CODES
sre_compile.py(71):     ASSERT_CODES = _ASSERT_CODES
sre_compile.py(72):     if (flags & SRE_FLAG_IGNORECASE and
sre_compile.py(77):         fixes = None
sre_compile.py(78):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(79):         if op in LITERAL_CODES:
sre_compile.py(80):             if flags & SRE_FLAG_IGNORECASE:
sre_compile.py(96):                 emit(OPCODES[op])
sre_compile.py(97):                 emit(av)
sre_compile.py(78):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(79):         if op in LITERAL_CODES:
sre_compile.py(98):         elif op is IN:
sre_compile.py(109):         elif op is ANY:
sre_compile.py(114):         elif op in REPEATING_CODES:
sre_compile.py(146):         elif op is SUBPATTERN:
sre_compile.py(147):             if av[0]:
sre_compile.py(148):                 emit(OPCODES[MARK])
sre_compile.py(149):                 emit((av[0]-1)*2)
sre_compile.py(151):             _compile(code, av[1], flags)
 --- modulename: sre_compile, funcname: _compile
sre_compile.py(66):     emit = code.append
sre_compile.py(67):     _len = len
sre_compile.py(68):     LITERAL_CODES = _LITERAL_CODES
sre_compile.py(69):     REPEATING_CODES = _REPEATING_CODES
sre_compile.py(70):     SUCCESS_CODES = _SUCCESS_CODES
sre_compile.py(71):     ASSERT_CODES = _ASSERT_CODES
sre_compile.py(72):     if (flags & SRE_FLAG_IGNORECASE and
sre_compile.py(77):         fixes = None
sre_compile.py(78):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(79):         if op in LITERAL_CODES:
sre_compile.py(98):         elif op is IN:
sre_compile.py(99):             if flags & SRE_FLAG_IGNORECASE:
sre_compile.py(104):                 emit(OPCODES[op])
sre_compile.py(105):                 fixup = None
sre_compile.py(106):             skip = _len(code); emit(0)
sre_compile.py(107):             _compile_charset(av, flags, code, fixup, fixes)
 --- modulename: sre_compile, funcname: _compile_charset
sre_compile.py(230):     emit = code.append
sre_compile.py(231):     for op, av in _optimize_charset(charset, fixup, fixes,
sre_compile.py(232):                                     flags & SRE_FLAG_UNICODE):
 --- modulename: sre_compile, funcname: _optimize_charset
sre_compile.py(258):     out = []
sre_compile.py(259):     tail = []
sre_compile.py(260):     charmap = bytearray(256)
sre_compile.py(261):     for op, av in charset:
sre_compile.py(262):         while True:
sre_compile.py(263):             try:
sre_compile.py(264):                 if op is LITERAL:
sre_compile.py(273):                 elif op is RANGE:
sre_compile.py(286):                 elif op is NEGATE:
sre_compile.py(289):                     tail.append((op, av))
sre_compile.py(310):             break
sre_compile.py(261):     for op, av in charset:
sre_compile.py(313):     runs = []
sre_compile.py(314):     q = 0
sre_compile.py(315):     while True:
sre_compile.py(316):         p = charmap.find(b'\1', q)
sre_compile.py(317):         if p < 0:
sre_compile.py(318):             break
sre_compile.py(327):     if runs is not None:
sre_compile.py(329):         for p, q in runs:
sre_compile.py(334):         out += tail
sre_compile.py(336):         if fixup or len(out) < len(charset):
sre_compile.py(339):         return charset
sre_compile.py(233):         emit(OPCODES[op])
sre_compile.py(234):         if op is NEGATE:
sre_compile.py(236):         elif op is LITERAL:
sre_compile.py(238):         elif op is RANGE:
sre_compile.py(241):         elif op is CHARSET:
sre_compile.py(243):         elif op is BIGCHARSET:
sre_compile.py(245):         elif op is CATEGORY:
sre_compile.py(246):             if flags & SRE_FLAG_LOCALE:
sre_compile.py(248):             elif flags & SRE_FLAG_UNICODE:
sre_compile.py(251):                 emit(CHCODES[av])
sre_compile.py(232):                                     flags & SRE_FLAG_UNICODE):
sre_compile.py(254):     emit(OPCODES[FAILURE])
sre_compile.py(108):             code[skip] = _len(code) - skip
sre_compile.py(78):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(79):         if op in LITERAL_CODES:
sre_compile.py(98):         elif op is IN:
sre_compile.py(109):         elif op is ANY:
sre_compile.py(114):         elif op in REPEATING_CODES:
sre_compile.py(115):             if flags & SRE_FLAG_TEMPLATE:
sre_compile.py(124):             elif _simple(av) and op is not REPEAT:
 --- modulename: sre_compile, funcname: _simple
sre_compile.py(430):     lo, hi = av[2].getwidth()
 --- modulename: sre_parse, funcname: getwidth
sre_parse.py(153):         if self.width:
sre_parse.py(154):             return self.width
sre_compile.py(431):     return lo == hi == 1 and av[2][0][0] != SUBPATTERN
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(125):                 if op is MAX_REPEAT:
sre_compile.py(126):                     emit(OPCODES[REPEAT_ONE])
sre_compile.py(129):                 skip = _len(code); emit(0)
sre_compile.py(130):                 emit(av[0])
sre_compile.py(131):                 emit(av[1])
sre_compile.py(132):                 _compile(code, av[2], flags)
 --- modulename: sre_compile, funcname: _compile
sre_compile.py(66):     emit = code.append
sre_compile.py(67):     _len = len
sre_compile.py(68):     LITERAL_CODES = _LITERAL_CODES
sre_compile.py(69):     REPEATING_CODES = _REPEATING_CODES
sre_compile.py(70):     SUCCESS_CODES = _SUCCESS_CODES
sre_compile.py(71):     ASSERT_CODES = _ASSERT_CODES
sre_compile.py(72):     if (flags & SRE_FLAG_IGNORECASE and
sre_compile.py(77):         fixes = None
sre_compile.py(78):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(79):         if op in LITERAL_CODES:
sre_compile.py(98):         elif op is IN:
sre_compile.py(99):             if flags & SRE_FLAG_IGNORECASE:
sre_compile.py(104):                 emit(OPCODES[op])
sre_compile.py(105):                 fixup = None
sre_compile.py(106):             skip = _len(code); emit(0)
sre_compile.py(107):             _compile_charset(av, flags, code, fixup, fixes)
 --- modulename: sre_compile, funcname: _compile_charset
sre_compile.py(230):     emit = code.append
sre_compile.py(231):     for op, av in _optimize_charset(charset, fixup, fixes,
sre_compile.py(232):                                     flags & SRE_FLAG_UNICODE):
 --- modulename: sre_compile, funcname: _optimize_charset
sre_compile.py(258):     out = []
sre_compile.py(259):     tail = []
sre_compile.py(260):     charmap = bytearray(256)
sre_compile.py(261):     for op, av in charset:
sre_compile.py(262):         while True:
sre_compile.py(263):             try:
sre_compile.py(264):                 if op is LITERAL:
sre_compile.py(273):                 elif op is RANGE:
sre_compile.py(274):                     r = range(av[0], av[1]+1)
sre_compile.py(275):                     if fixup:
sre_compile.py(277):                     if fixup and fixes:
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(310):             break
sre_compile.py(261):     for op, av in charset:
sre_compile.py(262):         while True:
sre_compile.py(263):             try:
sre_compile.py(264):                 if op is LITERAL:
sre_compile.py(265):                     if fixup:
sre_compile.py(272):                         charmap[av] = 1
sre_compile.py(310):             break
sre_compile.py(261):     for op, av in charset:
sre_compile.py(313):     runs = []
sre_compile.py(314):     q = 0
sre_compile.py(315):     while True:
sre_compile.py(316):         p = charmap.find(b'\1', q)
sre_compile.py(317):         if p < 0:
sre_compile.py(319):         if len(runs) >= 2:
sre_compile.py(322):         q = charmap.find(b'\0', p)
sre_compile.py(323):         if q < 0:
sre_compile.py(326):         runs.append((p, q))
sre_compile.py(315):     while True:
sre_compile.py(316):         p = charmap.find(b'\1', q)
sre_compile.py(317):         if p < 0:
sre_compile.py(319):         if len(runs) >= 2:
sre_compile.py(322):         q = charmap.find(b'\0', p)
sre_compile.py(323):         if q < 0:
sre_compile.py(326):         runs.append((p, q))
sre_compile.py(315):     while True:
sre_compile.py(316):         p = charmap.find(b'\1', q)
sre_compile.py(317):         if p < 0:
sre_compile.py(318):             break
sre_compile.py(327):     if runs is not None:
sre_compile.py(329):         for p, q in runs:
sre_compile.py(330):             if q - p == 1:
sre_compile.py(331):                 out.append((LITERAL, p))
sre_compile.py(329):         for p, q in runs:
sre_compile.py(330):             if q - p == 1:
sre_compile.py(333):                 out.append((RANGE, (p, q - 1)))
sre_compile.py(329):         for p, q in runs:
sre_compile.py(334):         out += tail
sre_compile.py(336):         if fixup or len(out) < len(charset):
sre_compile.py(339):         return charset
sre_compile.py(233):         emit(OPCODES[op])
sre_compile.py(234):         if op is NEGATE:
sre_compile.py(236):         elif op is LITERAL:
sre_compile.py(238):         elif op is RANGE:
sre_compile.py(239):             emit(av[0])
sre_compile.py(240):             emit(av[1])
sre_compile.py(232):                                     flags & SRE_FLAG_UNICODE):
sre_compile.py(233):         emit(OPCODES[op])
sre_compile.py(234):         if op is NEGATE:
sre_compile.py(236):         elif op is LITERAL:
sre_compile.py(237):             emit(av)
sre_compile.py(232):                                     flags & SRE_FLAG_UNICODE):
sre_compile.py(254):     emit(OPCODES[FAILURE])
sre_compile.py(108):             code[skip] = _len(code) - skip
sre_compile.py(78):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(133):                 emit(OPCODES[SUCCESS])
sre_compile.py(134):                 code[skip] = _len(code) - skip
sre_compile.py(78):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(152):             if av[0]:
sre_compile.py(153):                 emit(OPCODES[MARK])
sre_compile.py(154):                 emit((av[0]-1)*2+1)
sre_compile.py(78):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(152):             if av[0]:
sre_compile.py(78):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(141):                 code[skip] = _len(code) - skip
sre_compile.py(142):                 if op is MAX_REPEAT:
sre_compile.py(143):                     emit(OPCODES[MAX_UNTIL])
sre_compile.py(78):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(152):             if av[0]:
sre_compile.py(153):                 emit(OPCODES[MARK])
sre_compile.py(154):                 emit((av[0]-1)*2+1)
sre_compile.py(78):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(193):                 emit(OPCODES[JUMP])
sre_compile.py(194):                 tailappend(_len(code)); emit(0)
sre_compile.py(195):                 code[skip] = _len(code) - skip
sre_compile.py(189):             for av in av[1]:
sre_compile.py(196):             emit(0) # end of branch
sre_compile.py(197):             for tail in tail:
sre_compile.py(198):                 code[tail] = _len(code) - tail
sre_compile.py(197):             for tail in tail:
sre_compile.py(198):                 code[tail] = _len(code) - tail
sre_compile.py(197):             for tail in tail:
sre_compile.py(198):                 code[tail] = _len(code) - tail
sre_compile.py(197):             for tail in tail:
sre_compile.py(78):     for op, av in pattern:
sre_compile.py(563):     code.append(OPCODES[SUCCESS])
sre_compile.py(565):     return code
sre_compile.py(581):     if p.pattern.groups > 100:
sre_compile.py(587):     groupindex = p.pattern.groupdict
sre_compile.py(588):     indexgroup = [None] * p.pattern.groups
sre_compile.py(589):     for k, i in groupindex.items():
sre_compile.py(592):     return _sre.compile(
sre_compile.py(593):         pattern, flags | p.pattern.flags, code,
sre_compile.py(594):         p.pattern.groups-1,
sre_compile.py(595):         groupindex, indexgroup
re.py(252):     if not bypass_cache:
re.py(253):         if len(_cache) >= _MAXCACHE:
re.py(255):         if p.flags & LOCALE:
re.py(260):             loc = None
re.py(261):         _cache[cachekey] = p, loc
re.py(262):     return p
platform.py(143): def libc_ver(executable=sys.executable,lib='',version='',
platform.py(145):              chunksize=2048):
platform.py(196): def _dist_try_harder(distname,version,id):
platform.py(246): _release_filename = re.compile(r'(\w+)[-_](release|version)')
 --- modulename: re, funcname: compile
re.py(194):     return _compile(pattern, flags)
 --- modulename: re, funcname: _compile
re.py(232):     pattern, flags = key
re.py(233):     bypass_cache = flags & DEBUG
re.py(234):     if not bypass_cache:
re.py(235):         cachekey = (type(key[0]),) + key
re.py(236):         try:
re.py(237):             p, loc = _cache[cachekey]
re.py(240):         except KeyError:
re.py(241):             pass
re.py(242):     if isinstance(pattern, _pattern_type):
re.py(246):     if not sre_compile.isstring(pattern):
 --- modulename: sre_compile, funcname: isstring
sre_compile.py(547):     for tp in STRING_TYPES:
sre_compile.py(548):         if isinstance(obj, tp):
sre_compile.py(549):             return 1
re.py(248):     try:
re.py(249):         p = sre_compile.compile(pattern, flags)
 --- modulename: sre_compile, funcname: compile
sre_compile.py(570):     if isstring(p):
 --- modulename: sre_compile, funcname: isstring
sre_compile.py(547):     for tp in STRING_TYPES:
sre_compile.py(548):         if isinstance(obj, tp):
sre_compile.py(549):             return 1
sre_compile.py(571):         pattern = p
sre_compile.py(572):         p = sre_parse.parse(p, flags)
 --- modulename: sre_parse, funcname: parse
sre_parse.py(709):     source = Tokenizer(str)
 --- modulename: sre_parse, funcname: __init__
sre_parse.py(190):         self.string = string
sre_parse.py(191):         self.index = 0
sre_parse.py(192):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(711):     if pattern is None:
sre_parse.py(712):         pattern = Pattern()
 --- modulename: sre_parse, funcname: __init__
sre_parse.py(68):         self.flags = 0
sre_parse.py(69):         self.open = []
sre_parse.py(70):         self.groups = 1
sre_parse.py(71):         self.groupdict = {}
sre_parse.py(72):         self.lookbehind = 0
sre_parse.py(713):     pattern.flags = flags
sre_parse.py(714):     pattern.str = str
sre_parse.py(716):     p = _parse_sub(source, pattern, 0)
 --- modulename: sre_parse, funcname: _parse_sub
sre_parse.py(320):     items = []
sre_parse.py(321):     itemsappend = items.append
sre_parse.py(322):     sourcematch = source.match
sre_parse.py(323):     while 1:
sre_parse.py(324):         itemsappend(_parse(source, state))
 --- modulename: sre_parse, funcname: _parse
sre_parse.py(397):     subpattern = SubPattern(state)
 --- modulename: sre_parse, funcname: __init__
sre_parse.py(93):         self.pattern = pattern
sre_parse.py(94):         if data is None:
sre_parse.py(95):             data = []
sre_parse.py(96):         self.data = data
sre_parse.py(97):         self.width = None
sre_parse.py(400):     subpatternappend = subpattern.append
sre_parse.py(401):     sourceget = source.get
sre_parse.py(402):     sourcematch = source.match
sre_parse.py(403):     _len = len
sre_parse.py(404):     PATTERNENDERS = _PATTERNENDERS
sre_parse.py(405):     ASSERTCHARS = _ASSERTCHARS
sre_parse.py(406):     LOOKBEHINDASSERTCHARS = _LOOKBEHINDASSERTCHARS
sre_parse.py(407):     REPEATCODES = _REPEATCODES
sre_parse.py(409):     while 1:
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(413):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(199):             try:
sre_parse.py(200):                 c = self.string[self.index + 1]
sre_parse.py(203):             char = char + c
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(414):         if this is None:
sre_parse.py(417):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(428):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(431):         elif this == "[":
sre_parse.py(488):         elif this and this[0] in REPEAT_CHARS:
sre_parse.py(541):         elif this == ".":
sre_parse.py(544):         elif this == "(":
sre_parse.py(545):             group = 1
sre_parse.py(546):             name = None
sre_parse.py(547):             condgroup = None
sre_parse.py(548):             if sourcematch("?"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(211):         return 0
sre_parse.py(666):             if group:
sre_parse.py(668):                 if group == 2:
sre_parse.py(672):                     group = state.opengroup(name)
 --- modulename: sre_parse, funcname: opengroup
sre_parse.py(75):         gid = self.groups
sre_parse.py(76):         self.groups = gid + 1
sre_parse.py(77):         if name is not None:
sre_parse.py(83):         self.open.append(gid)
sre_parse.py(84):         return gid
sre_parse.py(673):                 if condgroup:
sre_parse.py(676):                     p = _parse_sub(source, state)
 --- modulename: sre_parse, funcname: _parse_sub
sre_parse.py(320):     items = []
sre_parse.py(321):     itemsappend = items.append
sre_parse.py(322):     sourcematch = source.match
sre_parse.py(323):     while 1:
sre_parse.py(324):         itemsappend(_parse(source, state))
 --- modulename: sre_parse, funcname: _parse
sre_parse.py(397):     subpattern = SubPattern(state)
 --- modulename: sre_parse, funcname: __init__
sre_parse.py(93):         self.pattern = pattern
sre_parse.py(94):         if data is None:
sre_parse.py(95):             data = []
sre_parse.py(96):         self.data = data
sre_parse.py(97):         self.width = None
sre_parse.py(400):     subpatternappend = subpattern.append
sre_parse.py(401):     sourceget = source.get
sre_parse.py(402):     sourcematch = source.match
sre_parse.py(403):     _len = len
sre_parse.py(404):     PATTERNENDERS = _PATTERNENDERS
sre_parse.py(405):     ASSERTCHARS = _ASSERTCHARS
sre_parse.py(406):     LOOKBEHINDASSERTCHARS = _LOOKBEHINDASSERTCHARS
sre_parse.py(407):     REPEATCODES = _REPEATCODES
sre_parse.py(409):     while 1:
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(413):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(414):         if this is None:
sre_parse.py(417):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(428):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(431):         elif this == "[":
sre_parse.py(488):         elif this and this[0] in REPEAT_CHARS:
sre_parse.py(541):         elif this == ".":
sre_parse.py(544):         elif this == "(":
sre_parse.py(691):         elif this == "^":
sre_parse.py(694):         elif this == "$":
sre_parse.py(697):         elif this and this[0] == "\\":
sre_parse.py(698):             code = _escape(source, this, state)
 --- modulename: sre_parse, funcname: _escape
sre_parse.py(270):     code = CATEGORIES.get(escape)
sre_parse.py(271):     if code:
sre_parse.py(272):         return code
sre_parse.py(699):             subpatternappend(code)
 --- modulename: sre_parse, funcname: append
sre_parse.py(150):         self.data.append(code)
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(413):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(414):         if this is None:
sre_parse.py(417):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(428):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(431):         elif this == "[":
sre_parse.py(488):         elif this and this[0] in REPEAT_CHARS:
sre_parse.py(490):             if this == "?":
sre_parse.py(492):             elif this == "*":
sre_parse.py(495):             elif this == "+":
sre_parse.py(496):                 min, max = 1, MAXREPEAT
sre_parse.py(528):             if subpattern:
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(138):         return len(self.data)
sre_parse.py(529):                 item = subpattern[-1:]
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(138):         return len(self.data)
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(143):             return SubPattern(self.pattern, self.data[index])
 --- modulename: sre_parse, funcname: __init__
sre_parse.py(93):         self.pattern = pattern
sre_parse.py(94):         if data is None:
sre_parse.py(96):         self.data = data
sre_parse.py(97):         self.width = None
sre_parse.py(532):             if not item or (_len(item) == 1 and item[0][0] == AT):
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(138):         return len(self.data)
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(138):         return len(self.data)
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_parse.py(534):             if item[0][0] in REPEATCODES:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_parse.py(536):             if sourcematch("?"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(211):         return 0
sre_parse.py(539):                 subpattern[-1] = (MAX_REPEAT, (min, max, item))
 --- modulename: sre_parse, funcname: __setitem__
sre_parse.py(146):         self.data[index] = code
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(412):             break # end of subpattern
sre_parse.py(704):     return subpattern
sre_parse.py(325):         if sourcematch("|"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(211):         return 0
sre_parse.py(327):         if not nested:
sre_parse.py(329):         if not source.next or sourcematch(")", 0):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(208):             if skip:
sre_parse.py(210):             return 1
sre_parse.py(330):             break
sre_parse.py(334):     if len(items) == 1:
sre_parse.py(335):         return items[0]
sre_parse.py(677):                 if not sourcematch(")"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(208):             if skip:
sre_parse.py(209):                 self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(210):             return 1
sre_parse.py(679):                 if group is not None:
sre_parse.py(680):                     state.closegroup(group)
 --- modulename: sre_parse, funcname: closegroup
sre_parse.py(86):         self.open.remove(gid)
sre_parse.py(681):                 subpatternappend((SUBPATTERN, (group, p)))
 --- modulename: sre_parse, funcname: append
sre_parse.py(150):         self.data.append(code)
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(413):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(414):         if this is None:
sre_parse.py(417):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(428):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(431):         elif this == "[":
sre_parse.py(433):             set = []
sre_parse.py(434):             setappend = set.append
sre_parse.py(437):             if sourcematch("^"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(211):         return 0
sre_parse.py(440):             start = set[:]
sre_parse.py(441):             while 1:
sre_parse.py(442):                 this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(443):                 if this == "]" and set != start:
sre_parse.py(445):                 elif this and this[0] == "\\":
sre_parse.py(447):                 elif this:
sre_parse.py(448):                     code1 = LITERAL, ord(this)
sre_parse.py(451):                 if sourcematch("-"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(211):         return 0
sre_parse.py(475):                     if code1[0] is IN:
sre_parse.py(477):                     setappend(code1)
sre_parse.py(442):                 this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(443):                 if this == "]" and set != start:
sre_parse.py(445):                 elif this and this[0] == "\\":
sre_parse.py(447):                 elif this:
sre_parse.py(448):                     code1 = LITERAL, ord(this)
sre_parse.py(451):                 if sourcematch("-"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(211):         return 0
sre_parse.py(475):                     if code1[0] is IN:
sre_parse.py(477):                     setappend(code1)
sre_parse.py(442):                 this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(443):                 if this == "]" and set != start:
sre_parse.py(444):                     break
sre_parse.py(480):             if _len(set)==1 and set[0][0] is LITERAL:
sre_parse.py(482):             elif _len(set)==2 and set[0][0] is NEGATE and set[1][0] is LITERAL:
sre_parse.py(486):                 subpatternappend((IN, set))
 --- modulename: sre_parse, funcname: append
sre_parse.py(150):         self.data.append(code)
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(413):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(414):         if this is None:
sre_parse.py(417):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(428):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(431):         elif this == "[":
sre_parse.py(488):         elif this and this[0] in REPEAT_CHARS:
sre_parse.py(541):         elif this == ".":
sre_parse.py(544):         elif this == "(":
sre_parse.py(545):             group = 1
sre_parse.py(546):             name = None
sre_parse.py(547):             condgroup = None
sre_parse.py(548):             if sourcematch("?"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(211):         return 0
sre_parse.py(666):             if group:
sre_parse.py(668):                 if group == 2:
sre_parse.py(672):                     group = state.opengroup(name)
 --- modulename: sre_parse, funcname: opengroup
sre_parse.py(75):         gid = self.groups
sre_parse.py(76):         self.groups = gid + 1
sre_parse.py(77):         if name is not None:
sre_parse.py(83):         self.open.append(gid)
sre_parse.py(84):         return gid
sre_parse.py(673):                 if condgroup:
sre_parse.py(676):                     p = _parse_sub(source, state)
 --- modulename: sre_parse, funcname: _parse_sub
sre_parse.py(320):     items = []
sre_parse.py(321):     itemsappend = items.append
sre_parse.py(322):     sourcematch = source.match
sre_parse.py(323):     while 1:
sre_parse.py(324):         itemsappend(_parse(source, state))
 --- modulename: sre_parse, funcname: _parse
sre_parse.py(397):     subpattern = SubPattern(state)
 --- modulename: sre_parse, funcname: __init__
sre_parse.py(93):         self.pattern = pattern
sre_parse.py(94):         if data is None:
sre_parse.py(95):             data = []
sre_parse.py(96):         self.data = data
sre_parse.py(97):         self.width = None
sre_parse.py(400):     subpatternappend = subpattern.append
sre_parse.py(401):     sourceget = source.get
sre_parse.py(402):     sourcematch = source.match
sre_parse.py(403):     _len = len
sre_parse.py(404):     PATTERNENDERS = _PATTERNENDERS
sre_parse.py(405):     ASSERTCHARS = _ASSERTCHARS
sre_parse.py(406):     LOOKBEHINDASSERTCHARS = _LOOKBEHINDASSERTCHARS
sre_parse.py(407):     REPEATCODES = _REPEATCODES
sre_parse.py(409):     while 1:
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(413):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(414):         if this is None:
sre_parse.py(417):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(428):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(429):             subpatternappend((LITERAL, ord(this)))
 --- modulename: sre_parse, funcname: append
sre_parse.py(150):         self.data.append(code)
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(413):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(414):         if this is None:
sre_parse.py(417):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(428):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(429):             subpatternappend((LITERAL, ord(this)))
 --- modulename: sre_parse, funcname: append
sre_parse.py(150):         self.data.append(code)
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(413):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(414):         if this is None:
sre_parse.py(417):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(428):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(429):             subpatternappend((LITERAL, ord(this)))
 --- modulename: sre_parse, funcname: append
sre_parse.py(150):         self.data.append(code)
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(413):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(414):         if this is None:
sre_parse.py(417):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(428):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(429):             subpatternappend((LITERAL, ord(this)))
 --- modulename: sre_parse, funcname: append
sre_parse.py(150):         self.data.append(code)
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(413):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(414):         if this is None:
sre_parse.py(417):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(428):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(429):             subpatternappend((LITERAL, ord(this)))
 --- modulename: sre_parse, funcname: append
sre_parse.py(150):         self.data.append(code)
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(413):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(414):         if this is None:
sre_parse.py(417):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(428):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(429):             subpatternappend((LITERAL, ord(this)))
 --- modulename: sre_parse, funcname: append
sre_parse.py(150):         self.data.append(code)
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(413):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(414):         if this is None:
sre_parse.py(417):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(428):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(429):             subpatternappend((LITERAL, ord(this)))
 --- modulename: sre_parse, funcname: append
sre_parse.py(150):         self.data.append(code)
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(412):             break # end of subpattern
sre_parse.py(704):     return subpattern
sre_parse.py(325):         if sourcematch("|"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(208):             if skip:
sre_parse.py(209):                 self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(210):             return 1
sre_parse.py(326):             continue
sre_parse.py(324):         itemsappend(_parse(source, state))
 --- modulename: sre_parse, funcname: _parse
sre_parse.py(397):     subpattern = SubPattern(state)
 --- modulename: sre_parse, funcname: __init__
sre_parse.py(93):         self.pattern = pattern
sre_parse.py(94):         if data is None:
sre_parse.py(95):             data = []
sre_parse.py(96):         self.data = data
sre_parse.py(97):         self.width = None
sre_parse.py(400):     subpatternappend = subpattern.append
sre_parse.py(401):     sourceget = source.get
sre_parse.py(402):     sourcematch = source.match
sre_parse.py(403):     _len = len
sre_parse.py(404):     PATTERNENDERS = _PATTERNENDERS
sre_parse.py(405):     ASSERTCHARS = _ASSERTCHARS
sre_parse.py(406):     LOOKBEHINDASSERTCHARS = _LOOKBEHINDASSERTCHARS
sre_parse.py(407):     REPEATCODES = _REPEATCODES
sre_parse.py(409):     while 1:
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(413):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(414):         if this is None:
sre_parse.py(417):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(428):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(429):             subpatternappend((LITERAL, ord(this)))
 --- modulename: sre_parse, funcname: append
sre_parse.py(150):         self.data.append(code)
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(413):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(414):         if this is None:
sre_parse.py(417):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(428):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(429):             subpatternappend((LITERAL, ord(this)))
 --- modulename: sre_parse, funcname: append
sre_parse.py(150):         self.data.append(code)
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(413):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(414):         if this is None:
sre_parse.py(417):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(428):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(429):             subpatternappend((LITERAL, ord(this)))
 --- modulename: sre_parse, funcname: append
sre_parse.py(150):         self.data.append(code)
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(413):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(414):         if this is None:
sre_parse.py(417):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(428):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(429):             subpatternappend((LITERAL, ord(this)))
 --- modulename: sre_parse, funcname: append
sre_parse.py(150):         self.data.append(code)
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(413):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(414):         if this is None:
sre_parse.py(417):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(428):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(429):             subpatternappend((LITERAL, ord(this)))
 --- modulename: sre_parse, funcname: append
sre_parse.py(150):         self.data.append(code)
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(413):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(414):         if this is None:
sre_parse.py(417):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(428):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(429):             subpatternappend((LITERAL, ord(this)))
 --- modulename: sre_parse, funcname: append
sre_parse.py(150):         self.data.append(code)
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(413):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(414):         if this is None:
sre_parse.py(417):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(428):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(429):             subpatternappend((LITERAL, ord(this)))
 --- modulename: sre_parse, funcname: append
sre_parse.py(150):         self.data.append(code)
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(412):             break # end of subpattern
sre_parse.py(704):     return subpattern
sre_parse.py(325):         if sourcematch("|"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(211):         return 0
sre_parse.py(327):         if not nested:
sre_parse.py(329):         if not source.next or sourcematch(")", 0):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(208):             if skip:
sre_parse.py(210):             return 1
sre_parse.py(330):             break
sre_parse.py(334):     if len(items) == 1:
sre_parse.py(337):     subpattern = SubPattern(state)
 --- modulename: sre_parse, funcname: __init__
sre_parse.py(93):         self.pattern = pattern
sre_parse.py(94):         if data is None:
sre_parse.py(95):             data = []
sre_parse.py(96):         self.data = data
sre_parse.py(97):         self.width = None
sre_parse.py(338):     subpatternappend = subpattern.append
sre_parse.py(341):     while 1:
sre_parse.py(342):         prefix = None
sre_parse.py(343):         for item in items:
sre_parse.py(344):             if not item:
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(138):         return len(self.data)
sre_parse.py(346):             if prefix is None:
sre_parse.py(347):                 prefix = item[0]
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_parse.py(343):         for item in items:
sre_parse.py(344):             if not item:
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(138):         return len(self.data)
sre_parse.py(346):             if prefix is None:
sre_parse.py(348):             elif item[0] != prefix:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_parse.py(349):                 break
sre_parse.py(357):         break
sre_parse.py(360):     for item in items:
sre_parse.py(361):         if len(item) != 1 or item[0][0] != LITERAL:
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(138):         return len(self.data)
sre_parse.py(362):             break
sre_parse.py(373):     subpattern.append((BRANCH, (None, items)))
 --- modulename: sre_parse, funcname: append
sre_parse.py(150):         self.data.append(code)
sre_parse.py(374):     return subpattern
sre_parse.py(677):                 if not sourcematch(")"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(208):             if skip:
sre_parse.py(209):                 self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(195):             self.next = None
sre_parse.py(196):             return
sre_parse.py(210):             return 1
sre_parse.py(679):                 if group is not None:
sre_parse.py(680):                     state.closegroup(group)
 --- modulename: sre_parse, funcname: closegroup
sre_parse.py(86):         self.open.remove(gid)
sre_parse.py(681):                 subpatternappend((SUBPATTERN, (group, p)))
 --- modulename: sre_parse, funcname: append
sre_parse.py(150):         self.data.append(code)
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(413):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(195):             self.next = None
sre_parse.py(196):             return
sre_parse.py(215):         return this
sre_parse.py(414):         if this is None:
sre_parse.py(415):             break # end of pattern
sre_parse.py(704):     return subpattern
sre_parse.py(325):         if sourcematch("|"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(211):         return 0
sre_parse.py(327):         if not nested:
sre_parse.py(328):             break
sre_parse.py(334):     if len(items) == 1:
sre_parse.py(335):         return items[0]
sre_parse.py(718):     tail = source.get()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(195):             self.next = None
sre_parse.py(196):             return
sre_parse.py(215):         return this
sre_parse.py(719):     if tail == ")":
sre_parse.py(721):     elif tail:
sre_parse.py(724):     if not (flags & SRE_FLAG_VERBOSE) and p.pattern.flags & SRE_FLAG_VERBOSE:
sre_parse.py(729):     if flags & SRE_FLAG_DEBUG:
sre_parse.py(732):     return p
sre_compile.py(576):     code = _code(p, flags)
 --- modulename: sre_compile, funcname: _code
sre_compile.py(554):     flags = p.pattern.flags | flags
sre_compile.py(555):     code = []
sre_compile.py(558):     _compile_info(code, p, flags)
 --- modulename: sre_compile, funcname: _compile_info
sre_compile.py(437):     lo, hi = pattern.getwidth()
 --- modulename: sre_parse, funcname: getwidth
sre_parse.py(153):         if self.width:
sre_parse.py(155):         lo = hi = 0
sre_parse.py(156):         UNITCODES = (ANY, RANGE, IN, LITERAL, NOT_LITERAL, CATEGORY)
sre_parse.py(157):         REPEATCODES = (MIN_REPEAT, MAX_REPEAT)
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(159):             if op is BRANCH:
sre_parse.py(168):             elif op is CALL:
sre_parse.py(172):             elif op is SUBPATTERN:
sre_parse.py(173):                 i, j = av[1].getwidth()
 --- modulename: sre_parse, funcname: getwidth
sre_parse.py(153):         if self.width:
sre_parse.py(155):         lo = hi = 0
sre_parse.py(156):         UNITCODES = (ANY, RANGE, IN, LITERAL, NOT_LITERAL, CATEGORY)
sre_parse.py(157):         REPEATCODES = (MIN_REPEAT, MAX_REPEAT)
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(159):             if op is BRANCH:
sre_parse.py(168):             elif op is CALL:
sre_parse.py(172):             elif op is SUBPATTERN:
sre_parse.py(176):             elif op in REPEATCODES:
sre_parse.py(177):                 i, j = av[2].getwidth()
 --- modulename: sre_parse, funcname: getwidth
sre_parse.py(153):         if self.width:
sre_parse.py(155):         lo = hi = 0
sre_parse.py(156):         UNITCODES = (ANY, RANGE, IN, LITERAL, NOT_LITERAL, CATEGORY)
sre_parse.py(157):         REPEATCODES = (MIN_REPEAT, MAX_REPEAT)
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(159):             if op is BRANCH:
sre_parse.py(168):             elif op is CALL:
sre_parse.py(172):             elif op is SUBPATTERN:
sre_parse.py(176):             elif op in REPEATCODES:
sre_parse.py(180):             elif op in UNITCODES:
sre_parse.py(181):                 lo = lo + 1
sre_parse.py(182):                 hi = hi + 1
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(185):         self.width = min(lo, MAXREPEAT - 1), min(hi, MAXREPEAT)
sre_parse.py(186):         return self.width
sre_parse.py(178):                 lo = lo + i * av[0]
sre_parse.py(179):                 hi = hi + j * av[1]
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(185):         self.width = min(lo, MAXREPEAT - 1), min(hi, MAXREPEAT)
sre_parse.py(186):         return self.width
sre_parse.py(174):                 lo = lo + i
sre_parse.py(175):                 hi = hi + j
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(159):             if op is BRANCH:
sre_parse.py(168):             elif op is CALL:
sre_parse.py(172):             elif op is SUBPATTERN:
sre_parse.py(176):             elif op in REPEATCODES:
sre_parse.py(180):             elif op in UNITCODES:
sre_parse.py(181):                 lo = lo + 1
sre_parse.py(182):                 hi = hi + 1
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(159):             if op is BRANCH:
sre_parse.py(168):             elif op is CALL:
sre_parse.py(172):             elif op is SUBPATTERN:
sre_parse.py(173):                 i, j = av[1].getwidth()
 --- modulename: sre_parse, funcname: getwidth
sre_parse.py(153):         if self.width:
sre_parse.py(155):         lo = hi = 0
sre_parse.py(156):         UNITCODES = (ANY, RANGE, IN, LITERAL, NOT_LITERAL, CATEGORY)
sre_parse.py(157):         REPEATCODES = (MIN_REPEAT, MAX_REPEAT)
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(159):             if op is BRANCH:
sre_parse.py(160):                 i = MAXREPEAT - 1
sre_parse.py(161):                 j = 0
sre_parse.py(162):                 for av in av[1]:
sre_parse.py(163):                     l, h = av.getwidth()
 --- modulename: sre_parse, funcname: getwidth
sre_parse.py(153):         if self.width:
sre_parse.py(155):         lo = hi = 0
sre_parse.py(156):         UNITCODES = (ANY, RANGE, IN, LITERAL, NOT_LITERAL, CATEGORY)
sre_parse.py(157):         REPEATCODES = (MIN_REPEAT, MAX_REPEAT)
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(159):             if op is BRANCH:
sre_parse.py(168):             elif op is CALL:
sre_parse.py(172):             elif op is SUBPATTERN:
sre_parse.py(176):             elif op in REPEATCODES:
sre_parse.py(180):             elif op in UNITCODES:
sre_parse.py(181):                 lo = lo + 1
sre_parse.py(182):                 hi = hi + 1
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(159):             if op is BRANCH:
sre_parse.py(168):             elif op is CALL:
sre_parse.py(172):             elif op is SUBPATTERN:
sre_parse.py(176):             elif op in REPEATCODES:
sre_parse.py(180):             elif op in UNITCODES:
sre_parse.py(181):                 lo = lo + 1
sre_parse.py(182):                 hi = hi + 1
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(159):             if op is BRANCH:
sre_parse.py(168):             elif op is CALL:
sre_parse.py(172):             elif op is SUBPATTERN:
sre_parse.py(176):             elif op in REPEATCODES:
sre_parse.py(180):             elif op in UNITCODES:
sre_parse.py(181):                 lo = lo + 1
sre_parse.py(182):                 hi = hi + 1
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(159):             if op is BRANCH:
sre_parse.py(168):             elif op is CALL:
sre_parse.py(172):             elif op is SUBPATTERN:
sre_parse.py(176):             elif op in REPEATCODES:
sre_parse.py(180):             elif op in UNITCODES:
sre_parse.py(181):                 lo = lo + 1
sre_parse.py(182):                 hi = hi + 1
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(159):             if op is BRANCH:
sre_parse.py(168):             elif op is CALL:
sre_parse.py(172):             elif op is SUBPATTERN:
sre_parse.py(176):             elif op in REPEATCODES:
sre_parse.py(180):             elif op in UNITCODES:
sre_parse.py(181):                 lo = lo + 1
sre_parse.py(182):                 hi = hi + 1
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(159):             if op is BRANCH:
sre_parse.py(168):             elif op is CALL:
sre_parse.py(172):             elif op is SUBPATTERN:
sre_parse.py(176):             elif op in REPEATCODES:
sre_parse.py(180):             elif op in UNITCODES:
sre_parse.py(181):                 lo = lo + 1
sre_parse.py(182):                 hi = hi + 1
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(159):             if op is BRANCH:
sre_parse.py(168):             elif op is CALL:
sre_parse.py(172):             elif op is SUBPATTERN:
sre_parse.py(176):             elif op in REPEATCODES:
sre_parse.py(180):             elif op in UNITCODES:
sre_parse.py(181):                 lo = lo + 1
sre_parse.py(182):                 hi = hi + 1
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(185):         self.width = min(lo, MAXREPEAT - 1), min(hi, MAXREPEAT)
sre_parse.py(186):         return self.width
sre_parse.py(164):                     i = min(i, l)
sre_parse.py(165):                     j = max(j, h)
sre_parse.py(162):                 for av in av[1]:
sre_parse.py(163):                     l, h = av.getwidth()
 --- modulename: sre_parse, funcname: getwidth
sre_parse.py(153):         if self.width:
sre_parse.py(155):         lo = hi = 0
sre_parse.py(156):         UNITCODES = (ANY, RANGE, IN, LITERAL, NOT_LITERAL, CATEGORY)
sre_parse.py(157):         REPEATCODES = (MIN_REPEAT, MAX_REPEAT)
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(159):             if op is BRANCH:
sre_parse.py(168):             elif op is CALL:
sre_parse.py(172):             elif op is SUBPATTERN:
sre_parse.py(176):             elif op in REPEATCODES:
sre_parse.py(180):             elif op in UNITCODES:
sre_parse.py(181):                 lo = lo + 1
sre_parse.py(182):                 hi = hi + 1
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(159):             if op is BRANCH:
sre_parse.py(168):             elif op is CALL:
sre_parse.py(172):             elif op is SUBPATTERN:
sre_parse.py(176):             elif op in REPEATCODES:
sre_parse.py(180):             elif op in UNITCODES:
sre_parse.py(181):                 lo = lo + 1
sre_parse.py(182):                 hi = hi + 1
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(159):             if op is BRANCH:
sre_parse.py(168):             elif op is CALL:
sre_parse.py(172):             elif op is SUBPATTERN:
sre_parse.py(176):             elif op in REPEATCODES:
sre_parse.py(180):             elif op in UNITCODES:
sre_parse.py(181):                 lo = lo + 1
sre_parse.py(182):                 hi = hi + 1
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(159):             if op is BRANCH:
sre_parse.py(168):             elif op is CALL:
sre_parse.py(172):             elif op is SUBPATTERN:
sre_parse.py(176):             elif op in REPEATCODES:
sre_parse.py(180):             elif op in UNITCODES:
sre_parse.py(181):                 lo = lo + 1
sre_parse.py(182):                 hi = hi + 1
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(159):             if op is BRANCH:
sre_parse.py(168):             elif op is CALL:
sre_parse.py(172):             elif op is SUBPATTERN:
sre_parse.py(176):             elif op in REPEATCODES:
sre_parse.py(180):             elif op in UNITCODES:
sre_parse.py(181):                 lo = lo + 1
sre_parse.py(182):                 hi = hi + 1
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(159):             if op is BRANCH:
sre_parse.py(168):             elif op is CALL:
sre_parse.py(172):             elif op is SUBPATTERN:
sre_parse.py(176):             elif op in REPEATCODES:
sre_parse.py(180):             elif op in UNITCODES:
sre_parse.py(181):                 lo = lo + 1
sre_parse.py(182):                 hi = hi + 1
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(159):             if op is BRANCH:
sre_parse.py(168):             elif op is CALL:
sre_parse.py(172):             elif op is SUBPATTERN:
sre_parse.py(176):             elif op in REPEATCODES:
sre_parse.py(180):             elif op in UNITCODES:
sre_parse.py(181):                 lo = lo + 1
sre_parse.py(182):                 hi = hi + 1
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(185):         self.width = min(lo, MAXREPEAT - 1), min(hi, MAXREPEAT)
sre_parse.py(186):         return self.width
sre_parse.py(164):                     i = min(i, l)
sre_parse.py(165):                     j = max(j, h)
sre_parse.py(162):                 for av in av[1]:
sre_parse.py(166):                 lo = lo + i
sre_parse.py(167):                 hi = hi + j
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(185):         self.width = min(lo, MAXREPEAT - 1), min(hi, MAXREPEAT)
sre_parse.py(186):         return self.width
sre_parse.py(174):                 lo = lo + i
sre_parse.py(175):                 hi = hi + j
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(185):         self.width = min(lo, MAXREPEAT - 1), min(hi, MAXREPEAT)
sre_parse.py(186):         return self.width
sre_compile.py(438):     if lo == 0:
sre_compile.py(441):     prefix = []
sre_compile.py(442):     prefixappend = prefix.append
sre_compile.py(443):     prefix_skip = 0
sre_compile.py(444):     charset = [] # not used
sre_compile.py(445):     charsetappend = charset.append
sre_compile.py(446):     if not (flags & SRE_FLAG_IGNORECASE):
sre_compile.py(448):         for op, av in pattern.data:
sre_compile.py(449):             if op is LITERAL:
sre_compile.py(453):             elif op is SUBPATTERN and len(av[1]) == 1:
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(138):         return len(self.data)
sre_compile.py(454):                 op, av = av[1][0]
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(455):                 if op is LITERAL:
sre_compile.py(458):                     break
sre_compile.py(462):         if not prefix and pattern.data:
sre_compile.py(463):             op, av = pattern.data[0]
sre_compile.py(464):             if op is SUBPATTERN and av[1]:
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(138):         return len(self.data)
sre_compile.py(465):                 op, av = av[1][0]
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(466):                 if op is LITERAL:
sre_compile.py(468):                 elif op is BRANCH:
sre_compile.py(501):     emit = code.append
sre_compile.py(502):     emit(OPCODES[INFO])
sre_compile.py(503):     skip = len(code); emit(0)
sre_compile.py(505):     mask = 0
sre_compile.py(506):     if prefix:
sre_compile.py(510):     elif charset:
sre_compile.py(512):     emit(mask)
sre_compile.py(514):     if lo < MAXCODE:
sre_compile.py(515):         emit(lo)
sre_compile.py(519):     if hi < MAXCODE:
sre_compile.py(520):         emit(hi)
sre_compile.py(524):     if prefix:
sre_compile.py(535):     elif charset:
sre_compile.py(537):     code[skip] = len(code) - skip
sre_compile.py(561):     _compile(code, p.data, flags)
 --- modulename: sre_compile, funcname: _compile
sre_compile.py(66):     emit = code.append
sre_compile.py(67):     _len = len
sre_compile.py(68):     LITERAL_CODES = _LITERAL_CODES
sre_compile.py(69):     REPEATING_CODES = _REPEATING_CODES
sre_compile.py(70):     SUCCESS_CODES = _SUCCESS_CODES
sre_compile.py(71):     ASSERT_CODES = _ASSERT_CODES
sre_compile.py(72):     if (flags & SRE_FLAG_IGNORECASE and
sre_compile.py(77):         fixes = None
sre_compile.py(78):     for op, av in pattern:
sre_compile.py(79):         if op in LITERAL_CODES:
sre_compile.py(98):         elif op is IN:
sre_compile.py(109):         elif op is ANY:
sre_compile.py(114):         elif op in REPEATING_CODES:
sre_compile.py(146):         elif op is SUBPATTERN:
sre_compile.py(147):             if av[0]:
sre_compile.py(148):                 emit(OPCODES[MARK])
sre_compile.py(149):                 emit((av[0]-1)*2)
sre_compile.py(151):             _compile(code, av[1], flags)
 --- modulename: sre_compile, funcname: _compile
sre_compile.py(66):     emit = code.append
sre_compile.py(67):     _len = len
sre_compile.py(68):     LITERAL_CODES = _LITERAL_CODES
sre_compile.py(69):     REPEATING_CODES = _REPEATING_CODES
sre_compile.py(70):     SUCCESS_CODES = _SUCCESS_CODES
sre_compile.py(71):     ASSERT_CODES = _ASSERT_CODES
sre_compile.py(72):     if (flags & SRE_FLAG_IGNORECASE and
sre_compile.py(77):         fixes = None
sre_compile.py(78):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(79):         if op in LITERAL_CODES:
sre_compile.py(98):         elif op is IN:
sre_compile.py(109):         elif op is ANY:
sre_compile.py(114):         elif op in REPEATING_CODES:
sre_compile.py(115):             if flags & SRE_FLAG_TEMPLATE:
sre_compile.py(124):             elif _simple(av) and op is not REPEAT:
 --- modulename: sre_compile, funcname: _simple
sre_compile.py(430):     lo, hi = av[2].getwidth()
 --- modulename: sre_parse, funcname: getwidth
sre_parse.py(153):         if self.width:
sre_parse.py(154):             return self.width
sre_compile.py(431):     return lo == hi == 1 and av[2][0][0] != SUBPATTERN
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(125):                 if op is MAX_REPEAT:
sre_compile.py(126):                     emit(OPCODES[REPEAT_ONE])
sre_compile.py(129):                 skip = _len(code); emit(0)
sre_compile.py(130):                 emit(av[0])
sre_compile.py(131):                 emit(av[1])
sre_compile.py(132):                 _compile(code, av[2], flags)
 --- modulename: sre_compile, funcname: _compile
sre_compile.py(66):     emit = code.append
sre_compile.py(67):     _len = len
sre_compile.py(68):     LITERAL_CODES = _LITERAL_CODES
sre_compile.py(69):     REPEATING_CODES = _REPEATING_CODES
sre_compile.py(70):     SUCCESS_CODES = _SUCCESS_CODES
sre_compile.py(71):     ASSERT_CODES = _ASSERT_CODES
sre_compile.py(72):     if (flags & SRE_FLAG_IGNORECASE and
sre_compile.py(77):         fixes = None
sre_compile.py(78):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(79):         if op in LITERAL_CODES:
sre_compile.py(98):         elif op is IN:
sre_compile.py(99):             if flags & SRE_FLAG_IGNORECASE:
sre_compile.py(104):                 emit(OPCODES[op])
sre_compile.py(105):                 fixup = None
sre_compile.py(106):             skip = _len(code); emit(0)
sre_compile.py(107):             _compile_charset(av, flags, code, fixup, fixes)
 --- modulename: sre_compile, funcname: _compile_charset
sre_compile.py(230):     emit = code.append
sre_compile.py(231):     for op, av in _optimize_charset(charset, fixup, fixes,
sre_compile.py(232):                                     flags & SRE_FLAG_UNICODE):
 --- modulename: sre_compile, funcname: _optimize_charset
sre_compile.py(258):     out = []
sre_compile.py(259):     tail = []
sre_compile.py(260):     charmap = bytearray(256)
sre_compile.py(261):     for op, av in charset:
sre_compile.py(262):         while True:
sre_compile.py(263):             try:
sre_compile.py(264):                 if op is LITERAL:
sre_compile.py(273):                 elif op is RANGE:
sre_compile.py(286):                 elif op is NEGATE:
sre_compile.py(289):                     tail.append((op, av))
sre_compile.py(310):             break
sre_compile.py(261):     for op, av in charset:
sre_compile.py(313):     runs = []
sre_compile.py(314):     q = 0
sre_compile.py(315):     while True:
sre_compile.py(316):         p = charmap.find(b'\1', q)
sre_compile.py(317):         if p < 0:
sre_compile.py(318):             break
sre_compile.py(327):     if runs is not None:
sre_compile.py(329):         for p, q in runs:
sre_compile.py(334):         out += tail
sre_compile.py(336):         if fixup or len(out) < len(charset):
sre_compile.py(339):         return charset
sre_compile.py(233):         emit(OPCODES[op])
sre_compile.py(234):         if op is NEGATE:
sre_compile.py(236):         elif op is LITERAL:
sre_compile.py(238):         elif op is RANGE:
sre_compile.py(241):         elif op is CHARSET:
sre_compile.py(243):         elif op is BIGCHARSET:
sre_compile.py(245):         elif op is CATEGORY:
sre_compile.py(246):             if flags & SRE_FLAG_LOCALE:
sre_compile.py(248):             elif flags & SRE_FLAG_UNICODE:
sre_compile.py(251):                 emit(CHCODES[av])
sre_compile.py(232):                                     flags & SRE_FLAG_UNICODE):
sre_compile.py(254):     emit(OPCODES[FAILURE])
sre_compile.py(108):             code[skip] = _len(code) - skip
sre_compile.py(78):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(133):                 emit(OPCODES[SUCCESS])
sre_compile.py(134):                 code[skip] = _len(code) - skip
sre_compile.py(78):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(152):             if av[0]:
sre_compile.py(153):                 emit(OPCODES[MARK])
sre_compile.py(154):                 emit((av[0]-1)*2+1)
sre_compile.py(78):     for op, av in pattern:
sre_compile.py(79):         if op in LITERAL_CODES:
sre_compile.py(98):         elif op is IN:
sre_compile.py(99):             if flags & SRE_FLAG_IGNORECASE:
sre_compile.py(104):                 emit(OPCODES[op])
sre_compile.py(105):                 fixup = None
sre_compile.py(106):             skip = _len(code); emit(0)
sre_compile.py(107):             _compile_charset(av, flags, code, fixup, fixes)
 --- modulename: sre_compile, funcname: _compile_charset
sre_compile.py(230):     emit = code.append
sre_compile.py(231):     for op, av in _optimize_charset(charset, fixup, fixes,
sre_compile.py(232):                                     flags & SRE_FLAG_UNICODE):
 --- modulename: sre_compile, funcname: _optimize_charset
sre_compile.py(258):     out = []
sre_compile.py(259):     tail = []
sre_compile.py(260):     charmap = bytearray(256)
sre_compile.py(261):     for op, av in charset:
sre_compile.py(262):         while True:
sre_compile.py(263):             try:
sre_compile.py(264):                 if op is LITERAL:
sre_compile.py(265):                     if fixup:
sre_compile.py(272):                         charmap[av] = 1
sre_compile.py(310):             break
sre_compile.py(261):     for op, av in charset:
sre_compile.py(262):         while True:
sre_compile.py(263):             try:
sre_compile.py(264):                 if op is LITERAL:
sre_compile.py(265):                     if fixup:
sre_compile.py(272):                         charmap[av] = 1
sre_compile.py(310):             break
sre_compile.py(261):     for op, av in charset:
sre_compile.py(313):     runs = []
sre_compile.py(314):     q = 0
sre_compile.py(315):     while True:
sre_compile.py(316):         p = charmap.find(b'\1', q)
sre_compile.py(317):         if p < 0:
sre_compile.py(319):         if len(runs) >= 2:
sre_compile.py(322):         q = charmap.find(b'\0', p)
sre_compile.py(323):         if q < 0:
sre_compile.py(326):         runs.append((p, q))
sre_compile.py(315):     while True:
sre_compile.py(316):         p = charmap.find(b'\1', q)
sre_compile.py(317):         if p < 0:
sre_compile.py(319):         if len(runs) >= 2:
sre_compile.py(322):         q = charmap.find(b'\0', p)
sre_compile.py(323):         if q < 0:
sre_compile.py(326):         runs.append((p, q))
sre_compile.py(315):     while True:
sre_compile.py(316):         p = charmap.find(b'\1', q)
sre_compile.py(317):         if p < 0:
sre_compile.py(318):             break
sre_compile.py(327):     if runs is not None:
sre_compile.py(329):         for p, q in runs:
sre_compile.py(330):             if q - p == 1:
sre_compile.py(331):                 out.append((LITERAL, p))
sre_compile.py(329):         for p, q in runs:
sre_compile.py(330):             if q - p == 1:
sre_compile.py(331):                 out.append((LITERAL, p))
sre_compile.py(329):         for p, q in runs:
sre_compile.py(334):         out += tail
sre_compile.py(336):         if fixup or len(out) < len(charset):
sre_compile.py(339):         return charset
sre_compile.py(233):         emit(OPCODES[op])
sre_compile.py(234):         if op is NEGATE:
sre_compile.py(236):         elif op is LITERAL:
sre_compile.py(237):             emit(av)
sre_compile.py(232):                                     flags & SRE_FLAG_UNICODE):
sre_compile.py(233):         emit(OPCODES[op])
sre_compile.py(234):         if op is NEGATE:
sre_compile.py(236):         elif op is LITERAL:
sre_compile.py(237):             emit(av)
sre_compile.py(232):                                     flags & SRE_FLAG_UNICODE):
sre_compile.py(254):     emit(OPCODES[FAILURE])
sre_compile.py(108):             code[skip] = _len(code) - skip
sre_compile.py(78):     for op, av in pattern:
sre_compile.py(79):         if op in LITERAL_CODES:
sre_compile.py(98):         elif op is IN:
sre_compile.py(109):         elif op is ANY:
sre_compile.py(114):         elif op in REPEATING_CODES:
sre_compile.py(146):         elif op is SUBPATTERN:
sre_compile.py(147):             if av[0]:
sre_compile.py(148):                 emit(OPCODES[MARK])
sre_compile.py(149):                 emit((av[0]-1)*2)
sre_compile.py(151):             _compile(code, av[1], flags)
 --- modulename: sre_compile, funcname: _compile
sre_compile.py(66):     emit = code.append
sre_compile.py(67):     _len = len
sre_compile.py(68):     LITERAL_CODES = _LITERAL_CODES
sre_compile.py(69):     REPEATING_CODES = _REPEATING_CODES
sre_compile.py(70):     SUCCESS_CODES = _SUCCESS_CODES
sre_compile.py(71):     ASSERT_CODES = _ASSERT_CODES
sre_compile.py(72):     if (flags & SRE_FLAG_IGNORECASE and
sre_compile.py(77):         fixes = None
sre_compile.py(78):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(79):         if op in LITERAL_CODES:
sre_compile.py(98):         elif op is IN:
sre_compile.py(109):         elif op is ANY:
sre_compile.py(114):         elif op in REPEATING_CODES:
sre_compile.py(146):         elif op is SUBPATTERN:
sre_compile.py(155):         elif op in SUCCESS_CODES:
sre_compile.py(157):         elif op in ASSERT_CODES:
sre_compile.py(170):         elif op is CALL:
sre_compile.py(176):         elif op is AT:
sre_compile.py(185):         elif op is BRANCH:
sre_compile.py(186):             emit(OPCODES[op])
sre_compile.py(187):             tail = []
sre_compile.py(188):             tailappend = tail.append
sre_compile.py(189):             for av in av[1]:
sre_compile.py(190):                 skip = _len(code); emit(0)
sre_compile.py(192):                 _compile(code, av, flags)
 --- modulename: sre_compile, funcname: _compile
sre_compile.py(66):     emit = code.append
sre_compile.py(67):     _len = len
sre_compile.py(68):     LITERAL_CODES = _LITERAL_CODES
sre_compile.py(69):     REPEATING_CODES = _REPEATING_CODES
sre_compile.py(70):     SUCCESS_CODES = _SUCCESS_CODES
sre_compile.py(71):     ASSERT_CODES = _ASSERT_CODES
sre_compile.py(72):     if (flags & SRE_FLAG_IGNORECASE and
sre_compile.py(77):         fixes = None
sre_compile.py(78):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(79):         if op in LITERAL_CODES:
sre_compile.py(80):             if flags & SRE_FLAG_IGNORECASE:
sre_compile.py(96):                 emit(OPCODES[op])
sre_compile.py(97):                 emit(av)
sre_compile.py(78):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(79):         if op in LITERAL_CODES:
sre_compile.py(80):             if flags & SRE_FLAG_IGNORECASE:
sre_compile.py(96):                 emit(OPCODES[op])
sre_compile.py(97):                 emit(av)
sre_compile.py(78):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(79):         if op in LITERAL_CODES:
sre_compile.py(80):             if flags & SRE_FLAG_IGNORECASE:
sre_compile.py(96):                 emit(OPCODES[op])
sre_compile.py(97):                 emit(av)
sre_compile.py(78):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(79):         if op in LITERAL_CODES:
sre_compile.py(80):             if flags & SRE_FLAG_IGNORECASE:
sre_compile.py(96):                 emit(OPCODES[op])
sre_compile.py(97):                 emit(av)
sre_compile.py(78):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(79):         if op in LITERAL_CODES:
sre_compile.py(80):             if flags & SRE_FLAG_IGNORECASE:
sre_compile.py(96):                 emit(OPCODES[op])
sre_compile.py(97):                 emit(av)
sre_compile.py(78):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(79):         if op in LITERAL_CODES:
sre_compile.py(80):             if flags & SRE_FLAG_IGNORECASE:
sre_compile.py(96):                 emit(OPCODES[op])
sre_compile.py(97):                 emit(av)
sre_compile.py(78):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(79):         if op in LITERAL_CODES:
sre_compile.py(80):             if flags & SRE_FLAG_IGNORECASE:
sre_compile.py(96):                 emit(OPCODES[op])
sre_compile.py(97):                 emit(av)
sre_compile.py(78):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(193):                 emit(OPCODES[JUMP])
sre_compile.py(194):                 tailappend(_len(code)); emit(0)
sre_compile.py(195):                 code[skip] = _len(code) - skip
sre_compile.py(189):             for av in av[1]:
sre_compile.py(190):                 skip = _len(code); emit(0)
sre_compile.py(192):                 _compile(code, av, flags)
 --- modulename: sre_compile, funcname: _compile
sre_compile.py(66):     emit = code.append
sre_compile.py(67):     _len = len
sre_compile.py(68):     LITERAL_CODES = _LITERAL_CODES
sre_compile.py(69):     REPEATING_CODES = _REPEATING_CODES
sre_compile.py(70):     SUCCESS_CODES = _SUCCESS_CODES
sre_compile.py(71):     ASSERT_CODES = _ASSERT_CODES
sre_compile.py(72):     if (flags & SRE_FLAG_IGNORECASE and
sre_compile.py(77):         fixes = None
sre_compile.py(78):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(79):         if op in LITERAL_CODES:
sre_compile.py(80):             if flags & SRE_FLAG_IGNORECASE:
sre_compile.py(96):                 emit(OPCODES[op])
sre_compile.py(97):                 emit(av)
sre_compile.py(78):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(79):         if op in LITERAL_CODES:
sre_compile.py(80):             if flags & SRE_FLAG_IGNORECASE:
sre_compile.py(96):                 emit(OPCODES[op])
sre_compile.py(97):                 emit(av)
sre_compile.py(78):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(79):         if op in LITERAL_CODES:
sre_compile.py(80):             if flags & SRE_FLAG_IGNORECASE:
sre_compile.py(96):                 emit(OPCODES[op])
sre_compile.py(97):                 emit(av)
sre_compile.py(78):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(79):         if op in LITERAL_CODES:
sre_compile.py(80):             if flags & SRE_FLAG_IGNORECASE:
sre_compile.py(96):                 emit(OPCODES[op])
sre_compile.py(97):                 emit(av)
sre_compile.py(78):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(79):         if op in LITERAL_CODES:
sre_compile.py(80):             if flags & SRE_FLAG_IGNORECASE:
sre_compile.py(96):                 emit(OPCODES[op])
sre_compile.py(97):                 emit(av)
sre_compile.py(78):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(79):         if op in LITERAL_CODES:
sre_compile.py(80):             if flags & SRE_FLAG_IGNORECASE:
sre_compile.py(96):                 emit(OPCODES[op])
sre_compile.py(97):                 emit(av)
sre_compile.py(78):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(79):         if op in LITERAL_CODES:
sre_compile.py(80):             if flags & SRE_FLAG_IGNORECASE:
sre_compile.py(96):                 emit(OPCODES[op])
sre_compile.py(97):                 emit(av)
sre_compile.py(78):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(193):                 emit(OPCODES[JUMP])
sre_compile.py(194):                 tailappend(_len(code)); emit(0)
sre_compile.py(195):                 code[skip] = _len(code) - skip
sre_compile.py(189):             for av in av[1]:
sre_compile.py(196):             emit(0) # end of branch
sre_compile.py(197):             for tail in tail:
sre_compile.py(198):                 code[tail] = _len(code) - tail
sre_compile.py(197):             for tail in tail:
sre_compile.py(198):                 code[tail] = _len(code) - tail
sre_compile.py(197):             for tail in tail:
sre_compile.py(78):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(152):             if av[0]:
sre_compile.py(153):                 emit(OPCODES[MARK])
sre_compile.py(154):                 emit((av[0]-1)*2+1)
sre_compile.py(78):     for op, av in pattern:
sre_compile.py(563):     code.append(OPCODES[SUCCESS])
sre_compile.py(565):     return code
sre_compile.py(581):     if p.pattern.groups > 100:
sre_compile.py(587):     groupindex = p.pattern.groupdict
sre_compile.py(588):     indexgroup = [None] * p.pattern.groups
sre_compile.py(589):     for k, i in groupindex.items():
sre_compile.py(592):     return _sre.compile(
sre_compile.py(593):         pattern, flags | p.pattern.flags, code,
sre_compile.py(594):         p.pattern.groups-1,
sre_compile.py(595):         groupindex, indexgroup
re.py(252):     if not bypass_cache:
re.py(253):         if len(_cache) >= _MAXCACHE:
re.py(255):         if p.flags & LOCALE:
re.py(260):             loc = None
re.py(261):         _cache[cachekey] = p, loc
re.py(262):     return p
platform.py(247): _lsb_release_version = re.compile(r'(.+)'
 --- modulename: re, funcname: compile
re.py(194):     return _compile(pattern, flags)
 --- modulename: re, funcname: _compile
re.py(232):     pattern, flags = key
re.py(233):     bypass_cache = flags & DEBUG
re.py(234):     if not bypass_cache:
re.py(235):         cachekey = (type(key[0]),) + key
re.py(236):         try:
re.py(237):             p, loc = _cache[cachekey]
re.py(240):         except KeyError:
re.py(241):             pass
re.py(242):     if isinstance(pattern, _pattern_type):
re.py(246):     if not sre_compile.isstring(pattern):
 --- modulename: sre_compile, funcname: isstring
sre_compile.py(547):     for tp in STRING_TYPES:
sre_compile.py(548):         if isinstance(obj, tp):
sre_compile.py(549):             return 1
re.py(248):     try:
re.py(249):         p = sre_compile.compile(pattern, flags)
 --- modulename: sre_compile, funcname: compile
sre_compile.py(570):     if isstring(p):
 --- modulename: sre_compile, funcname: isstring
sre_compile.py(547):     for tp in STRING_TYPES:
sre_compile.py(548):         if isinstance(obj, tp):
sre_compile.py(549):             return 1
sre_compile.py(571):         pattern = p
sre_compile.py(572):         p = sre_parse.parse(p, flags)
 --- modulename: sre_parse, funcname: parse
sre_parse.py(709):     source = Tokenizer(str)
 --- modulename: sre_parse, funcname: __init__
sre_parse.py(190):         self.string = string
sre_parse.py(191):         self.index = 0
sre_parse.py(192):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(711):     if pattern is None:
sre_parse.py(712):         pattern = Pattern()
 --- modulename: sre_parse, funcname: __init__
sre_parse.py(68):         self.flags = 0
sre_parse.py(69):         self.open = []
sre_parse.py(70):         self.groups = 1
sre_parse.py(71):         self.groupdict = {}
sre_parse.py(72):         self.lookbehind = 0
sre_parse.py(713):     pattern.flags = flags
sre_parse.py(714):     pattern.str = str
sre_parse.py(716):     p = _parse_sub(source, pattern, 0)
 --- modulename: sre_parse, funcname: _parse_sub
sre_parse.py(320):     items = []
sre_parse.py(321):     itemsappend = items.append
sre_parse.py(322):     sourcematch = source.match
sre_parse.py(323):     while 1:
sre_parse.py(324):         itemsappend(_parse(source, state))
 --- modulename: sre_parse, funcname: _parse
sre_parse.py(397):     subpattern = SubPattern(state)
 --- modulename: sre_parse, funcname: __init__
sre_parse.py(93):         self.pattern = pattern
sre_parse.py(94):         if data is None:
sre_parse.py(95):             data = []
sre_parse.py(96):         self.data = data
sre_parse.py(97):         self.width = None
sre_parse.py(400):     subpatternappend = subpattern.append
sre_parse.py(401):     sourceget = source.get
sre_parse.py(402):     sourcematch = source.match
sre_parse.py(403):     _len = len
sre_parse.py(404):     PATTERNENDERS = _PATTERNENDERS
sre_parse.py(405):     ASSERTCHARS = _ASSERTCHARS
sre_parse.py(406):     LOOKBEHINDASSERTCHARS = _LOOKBEHINDASSERTCHARS
sre_parse.py(407):     REPEATCODES = _REPEATCODES
sre_parse.py(409):     while 1:
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(413):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(414):         if this is None:
sre_parse.py(417):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(428):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(431):         elif this == "[":
sre_parse.py(488):         elif this and this[0] in REPEAT_CHARS:
sre_parse.py(541):         elif this == ".":
sre_parse.py(544):         elif this == "(":
sre_parse.py(545):             group = 1
sre_parse.py(546):             name = None
sre_parse.py(547):             condgroup = None
sre_parse.py(548):             if sourcematch("?"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(211):         return 0
sre_parse.py(666):             if group:
sre_parse.py(668):                 if group == 2:
sre_parse.py(672):                     group = state.opengroup(name)
 --- modulename: sre_parse, funcname: opengroup
sre_parse.py(75):         gid = self.groups
sre_parse.py(76):         self.groups = gid + 1
sre_parse.py(77):         if name is not None:
sre_parse.py(83):         self.open.append(gid)
sre_parse.py(84):         return gid
sre_parse.py(673):                 if condgroup:
sre_parse.py(676):                     p = _parse_sub(source, state)
 --- modulename: sre_parse, funcname: _parse_sub
sre_parse.py(320):     items = []
sre_parse.py(321):     itemsappend = items.append
sre_parse.py(322):     sourcematch = source.match
sre_parse.py(323):     while 1:
sre_parse.py(324):         itemsappend(_parse(source, state))
 --- modulename: sre_parse, funcname: _parse
sre_parse.py(397):     subpattern = SubPattern(state)
 --- modulename: sre_parse, funcname: __init__
sre_parse.py(93):         self.pattern = pattern
sre_parse.py(94):         if data is None:
sre_parse.py(95):             data = []
sre_parse.py(96):         self.data = data
sre_parse.py(97):         self.width = None
sre_parse.py(400):     subpatternappend = subpattern.append
sre_parse.py(401):     sourceget = source.get
sre_parse.py(402):     sourcematch = source.match
sre_parse.py(403):     _len = len
sre_parse.py(404):     PATTERNENDERS = _PATTERNENDERS
sre_parse.py(405):     ASSERTCHARS = _ASSERTCHARS
sre_parse.py(406):     LOOKBEHINDASSERTCHARS = _LOOKBEHINDASSERTCHARS
sre_parse.py(407):     REPEATCODES = _REPEATCODES
sre_parse.py(409):     while 1:
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(413):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(414):         if this is None:
sre_parse.py(417):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(428):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(431):         elif this == "[":
sre_parse.py(488):         elif this and this[0] in REPEAT_CHARS:
sre_parse.py(541):         elif this == ".":
sre_parse.py(542):             subpatternappend((ANY, None))
 --- modulename: sre_parse, funcname: append
sre_parse.py(150):         self.data.append(code)
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(413):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(414):         if this is None:
sre_parse.py(417):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(428):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(431):         elif this == "[":
sre_parse.py(488):         elif this and this[0] in REPEAT_CHARS:
sre_parse.py(490):             if this == "?":
sre_parse.py(492):             elif this == "*":
sre_parse.py(495):             elif this == "+":
sre_parse.py(496):                 min, max = 1, MAXREPEAT
sre_parse.py(528):             if subpattern:
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(138):         return len(self.data)
sre_parse.py(529):                 item = subpattern[-1:]
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(138):         return len(self.data)
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(143):             return SubPattern(self.pattern, self.data[index])
 --- modulename: sre_parse, funcname: __init__
sre_parse.py(93):         self.pattern = pattern
sre_parse.py(94):         if data is None:
sre_parse.py(96):         self.data = data
sre_parse.py(97):         self.width = None
sre_parse.py(532):             if not item or (_len(item) == 1 and item[0][0] == AT):
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(138):         return len(self.data)
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(138):         return len(self.data)
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_parse.py(534):             if item[0][0] in REPEATCODES:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_parse.py(536):             if sourcematch("?"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(211):         return 0
sre_parse.py(539):                 subpattern[-1] = (MAX_REPEAT, (min, max, item))
 --- modulename: sre_parse, funcname: __setitem__
sre_parse.py(146):         self.data[index] = code
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(412):             break # end of subpattern
sre_parse.py(704):     return subpattern
sre_parse.py(325):         if sourcematch("|"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(211):         return 0
sre_parse.py(327):         if not nested:
sre_parse.py(329):         if not source.next or sourcematch(")", 0):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(208):             if skip:
sre_parse.py(210):             return 1
sre_parse.py(330):             break
sre_parse.py(334):     if len(items) == 1:
sre_parse.py(335):         return items[0]
sre_parse.py(677):                 if not sourcematch(")"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(208):             if skip:
sre_parse.py(209):                 self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(210):             return 1
sre_parse.py(679):                 if group is not None:
sre_parse.py(680):                     state.closegroup(group)
 --- modulename: sre_parse, funcname: closegroup
sre_parse.py(86):         self.open.remove(gid)
sre_parse.py(681):                 subpatternappend((SUBPATTERN, (group, p)))
 --- modulename: sre_parse, funcname: append
sre_parse.py(150):         self.data.append(code)
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(413):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(414):         if this is None:
sre_parse.py(417):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(428):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(429):             subpatternappend((LITERAL, ord(this)))
 --- modulename: sre_parse, funcname: append
sre_parse.py(150):         self.data.append(code)
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(413):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(414):         if this is None:
sre_parse.py(417):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(428):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(429):             subpatternappend((LITERAL, ord(this)))
 --- modulename: sre_parse, funcname: append
sre_parse.py(150):         self.data.append(code)
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(413):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(414):         if this is None:
sre_parse.py(417):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(428):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(429):             subpatternappend((LITERAL, ord(this)))
 --- modulename: sre_parse, funcname: append
sre_parse.py(150):         self.data.append(code)
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(413):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(414):         if this is None:
sre_parse.py(417):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(428):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(429):             subpatternappend((LITERAL, ord(this)))
 --- modulename: sre_parse, funcname: append
sre_parse.py(150):         self.data.append(code)
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(413):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(414):         if this is None:
sre_parse.py(417):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(428):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(429):             subpatternappend((LITERAL, ord(this)))
 --- modulename: sre_parse, funcname: append
sre_parse.py(150):         self.data.append(code)
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(413):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(414):         if this is None:
sre_parse.py(417):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(428):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(429):             subpatternappend((LITERAL, ord(this)))
 --- modulename: sre_parse, funcname: append
sre_parse.py(150):         self.data.append(code)
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(413):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(414):         if this is None:
sre_parse.py(417):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(428):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(429):             subpatternappend((LITERAL, ord(this)))
 --- modulename: sre_parse, funcname: append
sre_parse.py(150):         self.data.append(code)
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(413):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(414):         if this is None:
sre_parse.py(417):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(428):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(429):             subpatternappend((LITERAL, ord(this)))
 --- modulename: sre_parse, funcname: append
sre_parse.py(150):         self.data.append(code)
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(413):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(414):         if this is None:
sre_parse.py(417):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(428):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(429):             subpatternappend((LITERAL, ord(this)))
 --- modulename: sre_parse, funcname: append
sre_parse.py(150):         self.data.append(code)
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(413):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(414):         if this is None:
sre_parse.py(417):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(428):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(431):         elif this == "[":
sre_parse.py(488):         elif this and this[0] in REPEAT_CHARS:
sre_parse.py(541):         elif this == ".":
sre_parse.py(544):         elif this == "(":
sre_parse.py(545):             group = 1
sre_parse.py(546):             name = None
sre_parse.py(547):             condgroup = None
sre_parse.py(548):             if sourcematch("?"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(211):         return 0
sre_parse.py(666):             if group:
sre_parse.py(668):                 if group == 2:
sre_parse.py(672):                     group = state.opengroup(name)
 --- modulename: sre_parse, funcname: opengroup
sre_parse.py(75):         gid = self.groups
sre_parse.py(76):         self.groups = gid + 1
sre_parse.py(77):         if name is not None:
sre_parse.py(83):         self.open.append(gid)
sre_parse.py(84):         return gid
sre_parse.py(673):                 if condgroup:
sre_parse.py(676):                     p = _parse_sub(source, state)
 --- modulename: sre_parse, funcname: _parse_sub
sre_parse.py(320):     items = []
sre_parse.py(321):     itemsappend = items.append
sre_parse.py(322):     sourcematch = source.match
sre_parse.py(323):     while 1:
sre_parse.py(324):         itemsappend(_parse(source, state))
 --- modulename: sre_parse, funcname: _parse
sre_parse.py(397):     subpattern = SubPattern(state)
 --- modulename: sre_parse, funcname: __init__
sre_parse.py(93):         self.pattern = pattern
sre_parse.py(94):         if data is None:
sre_parse.py(95):             data = []
sre_parse.py(96):         self.data = data
sre_parse.py(97):         self.width = None
sre_parse.py(400):     subpatternappend = subpattern.append
sre_parse.py(401):     sourceget = source.get
sre_parse.py(402):     sourcematch = source.match
sre_parse.py(403):     _len = len
sre_parse.py(404):     PATTERNENDERS = _PATTERNENDERS
sre_parse.py(405):     ASSERTCHARS = _ASSERTCHARS
sre_parse.py(406):     LOOKBEHINDASSERTCHARS = _LOOKBEHINDASSERTCHARS
sre_parse.py(407):     REPEATCODES = _REPEATCODES
sre_parse.py(409):     while 1:
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(413):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(199):             try:
sre_parse.py(200):                 c = self.string[self.index + 1]
sre_parse.py(203):             char = char + c
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(414):         if this is None:
sre_parse.py(417):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(428):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(431):         elif this == "[":
sre_parse.py(433):             set = []
sre_parse.py(434):             setappend = set.append
sre_parse.py(437):             if sourcematch("^"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(211):         return 0
sre_parse.py(440):             start = set[:]
sre_parse.py(441):             while 1:
sre_parse.py(442):                 this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(443):                 if this == "]" and set != start:
sre_parse.py(445):                 elif this and this[0] == "\\":
sre_parse.py(446):                     code1 = _class_escape(source, this)
 --- modulename: sre_parse, funcname: _class_escape
sre_parse.py(238):     code = ESCAPES.get(escape)
sre_parse.py(239):     if code:
sre_parse.py(241):     code = CATEGORIES.get(escape)
sre_parse.py(242):     if code and code[0] == IN:
sre_parse.py(243):         return code
sre_parse.py(451):                 if sourcematch("-"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(211):         return 0
sre_parse.py(475):                     if code1[0] is IN:
sre_parse.py(476):                         code1 = code1[1][0]
sre_parse.py(477):                     setappend(code1)
sre_parse.py(442):                 this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(443):                 if this == "]" and set != start:
sre_parse.py(445):                 elif this and this[0] == "\\":
sre_parse.py(447):                 elif this:
sre_parse.py(448):                     code1 = LITERAL, ord(this)
sre_parse.py(451):                 if sourcematch("-"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(211):         return 0
sre_parse.py(475):                     if code1[0] is IN:
sre_parse.py(477):                     setappend(code1)
sre_parse.py(442):                 this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(443):                 if this == "]" and set != start:
sre_parse.py(444):                     break
sre_parse.py(480):             if _len(set)==1 and set[0][0] is LITERAL:
sre_parse.py(482):             elif _len(set)==2 and set[0][0] is NEGATE and set[1][0] is LITERAL:
sre_parse.py(486):                 subpatternappend((IN, set))
 --- modulename: sre_parse, funcname: append
sre_parse.py(150):         self.data.append(code)
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(413):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(414):         if this is None:
sre_parse.py(417):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(428):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(431):         elif this == "[":
sre_parse.py(488):         elif this and this[0] in REPEAT_CHARS:
sre_parse.py(490):             if this == "?":
sre_parse.py(492):             elif this == "*":
sre_parse.py(495):             elif this == "+":
sre_parse.py(496):                 min, max = 1, MAXREPEAT
sre_parse.py(528):             if subpattern:
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(138):         return len(self.data)
sre_parse.py(529):                 item = subpattern[-1:]
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(138):         return len(self.data)
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(143):             return SubPattern(self.pattern, self.data[index])
 --- modulename: sre_parse, funcname: __init__
sre_parse.py(93):         self.pattern = pattern
sre_parse.py(94):         if data is None:
sre_parse.py(96):         self.data = data
sre_parse.py(97):         self.width = None
sre_parse.py(532):             if not item or (_len(item) == 1 and item[0][0] == AT):
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(138):         return len(self.data)
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(138):         return len(self.data)
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_parse.py(534):             if item[0][0] in REPEATCODES:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_parse.py(536):             if sourcematch("?"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(211):         return 0
sre_parse.py(539):                 subpattern[-1] = (MAX_REPEAT, (min, max, item))
 --- modulename: sre_parse, funcname: __setitem__
sre_parse.py(146):         self.data[index] = code
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(412):             break # end of subpattern
sre_parse.py(704):     return subpattern
sre_parse.py(325):         if sourcematch("|"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(211):         return 0
sre_parse.py(327):         if not nested:
sre_parse.py(329):         if not source.next or sourcematch(")", 0):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(208):             if skip:
sre_parse.py(210):             return 1
sre_parse.py(330):             break
sre_parse.py(334):     if len(items) == 1:
sre_parse.py(335):         return items[0]
sre_parse.py(677):                 if not sourcematch(")"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(208):             if skip:
sre_parse.py(209):                 self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(210):             return 1
sre_parse.py(679):                 if group is not None:
sre_parse.py(680):                     state.closegroup(group)
 --- modulename: sre_parse, funcname: closegroup
sre_parse.py(86):         self.open.remove(gid)
sre_parse.py(681):                 subpatternappend((SUBPATTERN, (group, p)))
 --- modulename: sre_parse, funcname: append
sre_parse.py(150):         self.data.append(code)
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(413):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(414):         if this is None:
sre_parse.py(417):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(428):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(431):         elif this == "[":
sre_parse.py(433):             set = []
sre_parse.py(434):             setappend = set.append
sre_parse.py(437):             if sourcematch("^"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(208):             if skip:
sre_parse.py(209):                 self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(210):             return 1
sre_parse.py(438):                 setappend((NEGATE, None))
sre_parse.py(440):             start = set[:]
sre_parse.py(441):             while 1:
sre_parse.py(442):                 this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(443):                 if this == "]" and set != start:
sre_parse.py(445):                 elif this and this[0] == "\\":
sre_parse.py(447):                 elif this:
sre_parse.py(448):                     code1 = LITERAL, ord(this)
sre_parse.py(451):                 if sourcematch("-"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(211):         return 0
sre_parse.py(475):                     if code1[0] is IN:
sre_parse.py(477):                     setappend(code1)
sre_parse.py(442):                 this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(443):                 if this == "]" and set != start:
sre_parse.py(444):                     break
sre_parse.py(480):             if _len(set)==1 and set[0][0] is LITERAL:
sre_parse.py(482):             elif _len(set)==2 and set[0][0] is NEGATE and set[1][0] is LITERAL:
sre_parse.py(483):                 subpatternappend((NOT_LITERAL, set[1][1])) # optimization
 --- modulename: sre_parse, funcname: append
sre_parse.py(150):         self.data.append(code)
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(413):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(414):         if this is None:
sre_parse.py(417):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(428):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(431):         elif this == "[":
sre_parse.py(488):         elif this and this[0] in REPEAT_CHARS:
sre_parse.py(490):             if this == "?":
sre_parse.py(492):             elif this == "*":
sre_parse.py(493):                 min, max = 0, MAXREPEAT
sre_parse.py(528):             if subpattern:
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(138):         return len(self.data)
sre_parse.py(529):                 item = subpattern[-1:]
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(138):         return len(self.data)
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(143):             return SubPattern(self.pattern, self.data[index])
 --- modulename: sre_parse, funcname: __init__
sre_parse.py(93):         self.pattern = pattern
sre_parse.py(94):         if data is None:
sre_parse.py(96):         self.data = data
sre_parse.py(97):         self.width = None
sre_parse.py(532):             if not item or (_len(item) == 1 and item[0][0] == AT):
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(138):         return len(self.data)
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(138):         return len(self.data)
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_parse.py(534):             if item[0][0] in REPEATCODES:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_parse.py(536):             if sourcematch("?"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(211):         return 0
sre_parse.py(539):                 subpattern[-1] = (MAX_REPEAT, (min, max, item))
 --- modulename: sre_parse, funcname: __setitem__
sre_parse.py(146):         self.data[index] = code
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(413):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(414):         if this is None:
sre_parse.py(417):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(428):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(431):         elif this == "[":
sre_parse.py(488):         elif this and this[0] in REPEAT_CHARS:
sre_parse.py(541):         elif this == ".":
sre_parse.py(544):         elif this == "(":
sre_parse.py(545):             group = 1
sre_parse.py(546):             name = None
sre_parse.py(547):             condgroup = None
sre_parse.py(548):             if sourcematch("?"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(208):             if skip:
sre_parse.py(209):                 self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(210):             return 1
sre_parse.py(549):                 group = 0
sre_parse.py(551):                 if sourcematch("P"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(211):         return 0
sre_parse.py(600):                 elif sourcematch(":"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(208):             if skip:
sre_parse.py(209):                 self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(199):             try:
sre_parse.py(200):                 c = self.string[self.index + 1]
sre_parse.py(203):             char = char + c
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(210):             return 1
sre_parse.py(602):                     group = 2
sre_parse.py(666):             if group:
sre_parse.py(668):                 if group == 2:
sre_parse.py(670):                     group = None
sre_parse.py(673):                 if condgroup:
sre_parse.py(676):                     p = _parse_sub(source, state)
 --- modulename: sre_parse, funcname: _parse_sub
sre_parse.py(320):     items = []
sre_parse.py(321):     itemsappend = items.append
sre_parse.py(322):     sourcematch = source.match
sre_parse.py(323):     while 1:
sre_parse.py(324):         itemsappend(_parse(source, state))
 --- modulename: sre_parse, funcname: _parse
sre_parse.py(397):     subpattern = SubPattern(state)
 --- modulename: sre_parse, funcname: __init__
sre_parse.py(93):         self.pattern = pattern
sre_parse.py(94):         if data is None:
sre_parse.py(95):             data = []
sre_parse.py(96):         self.data = data
sre_parse.py(97):         self.width = None
sre_parse.py(400):     subpatternappend = subpattern.append
sre_parse.py(401):     sourceget = source.get
sre_parse.py(402):     sourcematch = source.match
sre_parse.py(403):     _len = len
sre_parse.py(404):     PATTERNENDERS = _PATTERNENDERS
sre_parse.py(405):     ASSERTCHARS = _ASSERTCHARS
sre_parse.py(406):     LOOKBEHINDASSERTCHARS = _LOOKBEHINDASSERTCHARS
sre_parse.py(407):     REPEATCODES = _REPEATCODES
sre_parse.py(409):     while 1:
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(413):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(414):         if this is None:
sre_parse.py(417):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(428):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(431):         elif this == "[":
sre_parse.py(488):         elif this and this[0] in REPEAT_CHARS:
sre_parse.py(541):         elif this == ".":
sre_parse.py(544):         elif this == "(":
sre_parse.py(691):         elif this == "^":
sre_parse.py(694):         elif this == "$":
sre_parse.py(697):         elif this and this[0] == "\\":
sre_parse.py(698):             code = _escape(source, this, state)
 --- modulename: sre_parse, funcname: _escape
sre_parse.py(270):     code = CATEGORIES.get(escape)
sre_parse.py(271):     if code:
sre_parse.py(273):     code = ESCAPES.get(escape)
sre_parse.py(274):     if code:
sre_parse.py(276):     try:
sre_parse.py(277):         c = escape[1:2]
sre_parse.py(278):         if c == "x":
sre_parse.py(285):         elif c == "0":
sre_parse.py(290):         elif c in DIGITS:
sre_parse.py(311):         if len(escape) == 2:
sre_parse.py(312):             return LITERAL, ord(escape[1])
sre_parse.py(699):             subpatternappend(code)
 --- modulename: sre_parse, funcname: append
sre_parse.py(150):         self.data.append(code)
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(413):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(414):         if this is None:
sre_parse.py(417):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(428):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(431):         elif this == "[":
sre_parse.py(488):         elif this and this[0] in REPEAT_CHARS:
sre_parse.py(541):         elif this == ".":
sre_parse.py(544):         elif this == "(":
sre_parse.py(545):             group = 1
sre_parse.py(546):             name = None
sre_parse.py(547):             condgroup = None
sre_parse.py(548):             if sourcematch("?"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(211):         return 0
sre_parse.py(666):             if group:
sre_parse.py(668):                 if group == 2:
sre_parse.py(672):                     group = state.opengroup(name)
 --- modulename: sre_parse, funcname: opengroup
sre_parse.py(75):         gid = self.groups
sre_parse.py(76):         self.groups = gid + 1
sre_parse.py(77):         if name is not None:
sre_parse.py(83):         self.open.append(gid)
sre_parse.py(84):         return gid
sre_parse.py(673):                 if condgroup:
sre_parse.py(676):                     p = _parse_sub(source, state)
 --- modulename: sre_parse, funcname: _parse_sub
sre_parse.py(320):     items = []
sre_parse.py(321):     itemsappend = items.append
sre_parse.py(322):     sourcematch = source.match
sre_parse.py(323):     while 1:
sre_parse.py(324):         itemsappend(_parse(source, state))
 --- modulename: sre_parse, funcname: _parse
sre_parse.py(397):     subpattern = SubPattern(state)
 --- modulename: sre_parse, funcname: __init__
sre_parse.py(93):         self.pattern = pattern
sre_parse.py(94):         if data is None:
sre_parse.py(95):             data = []
sre_parse.py(96):         self.data = data
sre_parse.py(97):         self.width = None
sre_parse.py(400):     subpatternappend = subpattern.append
sre_parse.py(401):     sourceget = source.get
sre_parse.py(402):     sourcematch = source.match
sre_parse.py(403):     _len = len
sre_parse.py(404):     PATTERNENDERS = _PATTERNENDERS
sre_parse.py(405):     ASSERTCHARS = _ASSERTCHARS
sre_parse.py(406):     LOOKBEHINDASSERTCHARS = _LOOKBEHINDASSERTCHARS
sre_parse.py(407):     REPEATCODES = _REPEATCODES
sre_parse.py(409):     while 1:
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(413):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(414):         if this is None:
sre_parse.py(417):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(428):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(431):         elif this == "[":
sre_parse.py(488):         elif this and this[0] in REPEAT_CHARS:
sre_parse.py(541):         elif this == ".":
sre_parse.py(542):             subpatternappend((ANY, None))
 --- modulename: sre_parse, funcname: append
sre_parse.py(150):         self.data.append(code)
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(413):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(414):         if this is None:
sre_parse.py(417):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(428):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(431):         elif this == "[":
sre_parse.py(488):         elif this and this[0] in REPEAT_CHARS:
sre_parse.py(490):             if this == "?":
sre_parse.py(492):             elif this == "*":
sre_parse.py(495):             elif this == "+":
sre_parse.py(496):                 min, max = 1, MAXREPEAT
sre_parse.py(528):             if subpattern:
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(138):         return len(self.data)
sre_parse.py(529):                 item = subpattern[-1:]
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(138):         return len(self.data)
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(143):             return SubPattern(self.pattern, self.data[index])
 --- modulename: sre_parse, funcname: __init__
sre_parse.py(93):         self.pattern = pattern
sre_parse.py(94):         if data is None:
sre_parse.py(96):         self.data = data
sre_parse.py(97):         self.width = None
sre_parse.py(532):             if not item or (_len(item) == 1 and item[0][0] == AT):
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(138):         return len(self.data)
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(138):         return len(self.data)
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_parse.py(534):             if item[0][0] in REPEATCODES:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_parse.py(536):             if sourcematch("?"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(211):         return 0
sre_parse.py(539):                 subpattern[-1] = (MAX_REPEAT, (min, max, item))
 --- modulename: sre_parse, funcname: __setitem__
sre_parse.py(146):         self.data[index] = code
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(412):             break # end of subpattern
sre_parse.py(704):     return subpattern
sre_parse.py(325):         if sourcematch("|"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(211):         return 0
sre_parse.py(327):         if not nested:
sre_parse.py(329):         if not source.next or sourcematch(")", 0):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(208):             if skip:
sre_parse.py(210):             return 1
sre_parse.py(330):             break
sre_parse.py(334):     if len(items) == 1:
sre_parse.py(335):         return items[0]
sre_parse.py(677):                 if not sourcematch(")"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(208):             if skip:
sre_parse.py(209):                 self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(199):             try:
sre_parse.py(200):                 c = self.string[self.index + 1]
sre_parse.py(203):             char = char + c
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(210):             return 1
sre_parse.py(679):                 if group is not None:
sre_parse.py(680):                     state.closegroup(group)
 --- modulename: sre_parse, funcname: closegroup
sre_parse.py(86):         self.open.remove(gid)
sre_parse.py(681):                 subpatternappend((SUBPATTERN, (group, p)))
 --- modulename: sre_parse, funcname: append
sre_parse.py(150):         self.data.append(code)
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(413):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(414):         if this is None:
sre_parse.py(417):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(428):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(431):         elif this == "[":
sre_parse.py(488):         elif this and this[0] in REPEAT_CHARS:
sre_parse.py(541):         elif this == ".":
sre_parse.py(544):         elif this == "(":
sre_parse.py(691):         elif this == "^":
sre_parse.py(694):         elif this == "$":
sre_parse.py(697):         elif this and this[0] == "\\":
sre_parse.py(698):             code = _escape(source, this, state)
 --- modulename: sre_parse, funcname: _escape
sre_parse.py(270):     code = CATEGORIES.get(escape)
sre_parse.py(271):     if code:
sre_parse.py(273):     code = ESCAPES.get(escape)
sre_parse.py(274):     if code:
sre_parse.py(276):     try:
sre_parse.py(277):         c = escape[1:2]
sre_parse.py(278):         if c == "x":
sre_parse.py(285):         elif c == "0":
sre_parse.py(290):         elif c in DIGITS:
sre_parse.py(311):         if len(escape) == 2:
sre_parse.py(312):             return LITERAL, ord(escape[1])
sre_parse.py(699):             subpatternappend(code)
 --- modulename: sre_parse, funcname: append
sre_parse.py(150):         self.data.append(code)
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(412):             break # end of subpattern
sre_parse.py(704):     return subpattern
sre_parse.py(325):         if sourcematch("|"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(211):         return 0
sre_parse.py(327):         if not nested:
sre_parse.py(329):         if not source.next or sourcematch(")", 0):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(208):             if skip:
sre_parse.py(210):             return 1
sre_parse.py(330):             break
sre_parse.py(334):     if len(items) == 1:
sre_parse.py(335):         return items[0]
sre_parse.py(677):                 if not sourcematch(")"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(208):             if skip:
sre_parse.py(209):                 self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(210):             return 1
sre_parse.py(679):                 if group is not None:
sre_parse.py(681):                 subpatternappend((SUBPATTERN, (group, p)))
 --- modulename: sre_parse, funcname: append
sre_parse.py(150):         self.data.append(code)
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(413):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(195):             self.next = None
sre_parse.py(196):             return
sre_parse.py(215):         return this
sre_parse.py(414):         if this is None:
sre_parse.py(417):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(428):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(431):         elif this == "[":
sre_parse.py(488):         elif this and this[0] in REPEAT_CHARS:
sre_parse.py(490):             if this == "?":
sre_parse.py(491):                 min, max = 0, 1
sre_parse.py(528):             if subpattern:
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(138):         return len(self.data)
sre_parse.py(529):                 item = subpattern[-1:]
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(138):         return len(self.data)
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(143):             return SubPattern(self.pattern, self.data[index])
 --- modulename: sre_parse, funcname: __init__
sre_parse.py(93):         self.pattern = pattern
sre_parse.py(94):         if data is None:
sre_parse.py(96):         self.data = data
sre_parse.py(97):         self.width = None
sre_parse.py(532):             if not item or (_len(item) == 1 and item[0][0] == AT):
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(138):         return len(self.data)
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(138):         return len(self.data)
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_parse.py(534):             if item[0][0] in REPEATCODES:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_parse.py(536):             if sourcematch("?"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(211):         return 0
sre_parse.py(539):                 subpattern[-1] = (MAX_REPEAT, (min, max, item))
 --- modulename: sre_parse, funcname: __setitem__
sre_parse.py(146):         self.data[index] = code
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(413):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(195):             self.next = None
sre_parse.py(196):             return
sre_parse.py(215):         return this
sre_parse.py(414):         if this is None:
sre_parse.py(415):             break # end of pattern
sre_parse.py(704):     return subpattern
sre_parse.py(325):         if sourcematch("|"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(211):         return 0
sre_parse.py(327):         if not nested:
sre_parse.py(328):             break
sre_parse.py(334):     if len(items) == 1:
sre_parse.py(335):         return items[0]
sre_parse.py(718):     tail = source.get()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(195):             self.next = None
sre_parse.py(196):             return
sre_parse.py(215):         return this
sre_parse.py(719):     if tail == ")":
sre_parse.py(721):     elif tail:
sre_parse.py(724):     if not (flags & SRE_FLAG_VERBOSE) and p.pattern.flags & SRE_FLAG_VERBOSE:
sre_parse.py(729):     if flags & SRE_FLAG_DEBUG:
sre_parse.py(732):     return p
sre_compile.py(576):     code = _code(p, flags)
 --- modulename: sre_compile, funcname: _code
sre_compile.py(554):     flags = p.pattern.flags | flags
sre_compile.py(555):     code = []
sre_compile.py(558):     _compile_info(code, p, flags)
 --- modulename: sre_compile, funcname: _compile_info
sre_compile.py(437):     lo, hi = pattern.getwidth()
 --- modulename: sre_parse, funcname: getwidth
sre_parse.py(153):         if self.width:
sre_parse.py(155):         lo = hi = 0
sre_parse.py(156):         UNITCODES = (ANY, RANGE, IN, LITERAL, NOT_LITERAL, CATEGORY)
sre_parse.py(157):         REPEATCODES = (MIN_REPEAT, MAX_REPEAT)
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(159):             if op is BRANCH:
sre_parse.py(168):             elif op is CALL:
sre_parse.py(172):             elif op is SUBPATTERN:
sre_parse.py(173):                 i, j = av[1].getwidth()
 --- modulename: sre_parse, funcname: getwidth
sre_parse.py(153):         if self.width:
sre_parse.py(155):         lo = hi = 0
sre_parse.py(156):         UNITCODES = (ANY, RANGE, IN, LITERAL, NOT_LITERAL, CATEGORY)
sre_parse.py(157):         REPEATCODES = (MIN_REPEAT, MAX_REPEAT)
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(159):             if op is BRANCH:
sre_parse.py(168):             elif op is CALL:
sre_parse.py(172):             elif op is SUBPATTERN:
sre_parse.py(176):             elif op in REPEATCODES:
sre_parse.py(177):                 i, j = av[2].getwidth()
 --- modulename: sre_parse, funcname: getwidth
sre_parse.py(153):         if self.width:
sre_parse.py(155):         lo = hi = 0
sre_parse.py(156):         UNITCODES = (ANY, RANGE, IN, LITERAL, NOT_LITERAL, CATEGORY)
sre_parse.py(157):         REPEATCODES = (MIN_REPEAT, MAX_REPEAT)
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(159):             if op is BRANCH:
sre_parse.py(168):             elif op is CALL:
sre_parse.py(172):             elif op is SUBPATTERN:
sre_parse.py(176):             elif op in REPEATCODES:
sre_parse.py(180):             elif op in UNITCODES:
sre_parse.py(181):                 lo = lo + 1
sre_parse.py(182):                 hi = hi + 1
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(185):         self.width = min(lo, MAXREPEAT - 1), min(hi, MAXREPEAT)
sre_parse.py(186):         return self.width
sre_parse.py(178):                 lo = lo + i * av[0]
sre_parse.py(179):                 hi = hi + j * av[1]
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(185):         self.width = min(lo, MAXREPEAT - 1), min(hi, MAXREPEAT)
sre_parse.py(186):         return self.width
sre_parse.py(174):                 lo = lo + i
sre_parse.py(175):                 hi = hi + j
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(159):             if op is BRANCH:
sre_parse.py(168):             elif op is CALL:
sre_parse.py(172):             elif op is SUBPATTERN:
sre_parse.py(176):             elif op in REPEATCODES:
sre_parse.py(180):             elif op in UNITCODES:
sre_parse.py(181):                 lo = lo + 1
sre_parse.py(182):                 hi = hi + 1
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(159):             if op is BRANCH:
sre_parse.py(168):             elif op is CALL:
sre_parse.py(172):             elif op is SUBPATTERN:
sre_parse.py(176):             elif op in REPEATCODES:
sre_parse.py(180):             elif op in UNITCODES:
sre_parse.py(181):                 lo = lo + 1
sre_parse.py(182):                 hi = hi + 1
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(159):             if op is BRANCH:
sre_parse.py(168):             elif op is CALL:
sre_parse.py(172):             elif op is SUBPATTERN:
sre_parse.py(176):             elif op in REPEATCODES:
sre_parse.py(180):             elif op in UNITCODES:
sre_parse.py(181):                 lo = lo + 1
sre_parse.py(182):                 hi = hi + 1
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(159):             if op is BRANCH:
sre_parse.py(168):             elif op is CALL:
sre_parse.py(172):             elif op is SUBPATTERN:
sre_parse.py(176):             elif op in REPEATCODES:
sre_parse.py(180):             elif op in UNITCODES:
sre_parse.py(181):                 lo = lo + 1
sre_parse.py(182):                 hi = hi + 1
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(159):             if op is BRANCH:
sre_parse.py(168):             elif op is CALL:
sre_parse.py(172):             elif op is SUBPATTERN:
sre_parse.py(176):             elif op in REPEATCODES:
sre_parse.py(180):             elif op in UNITCODES:
sre_parse.py(181):                 lo = lo + 1
sre_parse.py(182):                 hi = hi + 1
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(159):             if op is BRANCH:
sre_parse.py(168):             elif op is CALL:
sre_parse.py(172):             elif op is SUBPATTERN:
sre_parse.py(176):             elif op in REPEATCODES:
sre_parse.py(180):             elif op in UNITCODES:
sre_parse.py(181):                 lo = lo + 1
sre_parse.py(182):                 hi = hi + 1
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(159):             if op is BRANCH:
sre_parse.py(168):             elif op is CALL:
sre_parse.py(172):             elif op is SUBPATTERN:
sre_parse.py(176):             elif op in REPEATCODES:
sre_parse.py(180):             elif op in UNITCODES:
sre_parse.py(181):                 lo = lo + 1
sre_parse.py(182):                 hi = hi + 1
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(159):             if op is BRANCH:
sre_parse.py(168):             elif op is CALL:
sre_parse.py(172):             elif op is SUBPATTERN:
sre_parse.py(176):             elif op in REPEATCODES:
sre_parse.py(180):             elif op in UNITCODES:
sre_parse.py(181):                 lo = lo + 1
sre_parse.py(182):                 hi = hi + 1
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(159):             if op is BRANCH:
sre_parse.py(168):             elif op is CALL:
sre_parse.py(172):             elif op is SUBPATTERN:
sre_parse.py(176):             elif op in REPEATCODES:
sre_parse.py(180):             elif op in UNITCODES:
sre_parse.py(181):                 lo = lo + 1
sre_parse.py(182):                 hi = hi + 1
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(159):             if op is BRANCH:
sre_parse.py(168):             elif op is CALL:
sre_parse.py(172):             elif op is SUBPATTERN:
sre_parse.py(173):                 i, j = av[1].getwidth()
 --- modulename: sre_parse, funcname: getwidth
sre_parse.py(153):         if self.width:
sre_parse.py(155):         lo = hi = 0
sre_parse.py(156):         UNITCODES = (ANY, RANGE, IN, LITERAL, NOT_LITERAL, CATEGORY)
sre_parse.py(157):         REPEATCODES = (MIN_REPEAT, MAX_REPEAT)
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(159):             if op is BRANCH:
sre_parse.py(168):             elif op is CALL:
sre_parse.py(172):             elif op is SUBPATTERN:
sre_parse.py(176):             elif op in REPEATCODES:
sre_parse.py(177):                 i, j = av[2].getwidth()
 --- modulename: sre_parse, funcname: getwidth
sre_parse.py(153):         if self.width:
sre_parse.py(155):         lo = hi = 0
sre_parse.py(156):         UNITCODES = (ANY, RANGE, IN, LITERAL, NOT_LITERAL, CATEGORY)
sre_parse.py(157):         REPEATCODES = (MIN_REPEAT, MAX_REPEAT)
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(159):             if op is BRANCH:
sre_parse.py(168):             elif op is CALL:
sre_parse.py(172):             elif op is SUBPATTERN:
sre_parse.py(176):             elif op in REPEATCODES:
sre_parse.py(180):             elif op in UNITCODES:
sre_parse.py(181):                 lo = lo + 1
sre_parse.py(182):                 hi = hi + 1
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(185):         self.width = min(lo, MAXREPEAT - 1), min(hi, MAXREPEAT)
sre_parse.py(186):         return self.width
sre_parse.py(178):                 lo = lo + i * av[0]
sre_parse.py(179):                 hi = hi + j * av[1]
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(185):         self.width = min(lo, MAXREPEAT - 1), min(hi, MAXREPEAT)
sre_parse.py(186):         return self.width
sre_parse.py(174):                 lo = lo + i
sre_parse.py(175):                 hi = hi + j
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(159):             if op is BRANCH:
sre_parse.py(168):             elif op is CALL:
sre_parse.py(172):             elif op is SUBPATTERN:
sre_parse.py(176):             elif op in REPEATCODES:
sre_parse.py(177):                 i, j = av[2].getwidth()
 --- modulename: sre_parse, funcname: getwidth
sre_parse.py(153):         if self.width:
sre_parse.py(155):         lo = hi = 0
sre_parse.py(156):         UNITCODES = (ANY, RANGE, IN, LITERAL, NOT_LITERAL, CATEGORY)
sre_parse.py(157):         REPEATCODES = (MIN_REPEAT, MAX_REPEAT)
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(159):             if op is BRANCH:
sre_parse.py(168):             elif op is CALL:
sre_parse.py(172):             elif op is SUBPATTERN:
sre_parse.py(176):             elif op in REPEATCODES:
sre_parse.py(180):             elif op in UNITCODES:
sre_parse.py(181):                 lo = lo + 1
sre_parse.py(182):                 hi = hi + 1
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(185):         self.width = min(lo, MAXREPEAT - 1), min(hi, MAXREPEAT)
sre_parse.py(186):         return self.width
sre_parse.py(178):                 lo = lo + i * av[0]
sre_parse.py(179):                 hi = hi + j * av[1]
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(159):             if op is BRANCH:
sre_parse.py(168):             elif op is CALL:
sre_parse.py(172):             elif op is SUBPATTERN:
sre_parse.py(176):             elif op in REPEATCODES:
sre_parse.py(177):                 i, j = av[2].getwidth()
 --- modulename: sre_parse, funcname: getwidth
sre_parse.py(153):         if self.width:
sre_parse.py(155):         lo = hi = 0
sre_parse.py(156):         UNITCODES = (ANY, RANGE, IN, LITERAL, NOT_LITERAL, CATEGORY)
sre_parse.py(157):         REPEATCODES = (MIN_REPEAT, MAX_REPEAT)
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(159):             if op is BRANCH:
sre_parse.py(168):             elif op is CALL:
sre_parse.py(172):             elif op is SUBPATTERN:
sre_parse.py(173):                 i, j = av[1].getwidth()
 --- modulename: sre_parse, funcname: getwidth
sre_parse.py(153):         if self.width:
sre_parse.py(155):         lo = hi = 0
sre_parse.py(156):         UNITCODES = (ANY, RANGE, IN, LITERAL, NOT_LITERAL, CATEGORY)
sre_parse.py(157):         REPEATCODES = (MIN_REPEAT, MAX_REPEAT)
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(159):             if op is BRANCH:
sre_parse.py(168):             elif op is CALL:
sre_parse.py(172):             elif op is SUBPATTERN:
sre_parse.py(176):             elif op in REPEATCODES:
sre_parse.py(180):             elif op in UNITCODES:
sre_parse.py(181):                 lo = lo + 1
sre_parse.py(182):                 hi = hi + 1
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(159):             if op is BRANCH:
sre_parse.py(168):             elif op is CALL:
sre_parse.py(172):             elif op is SUBPATTERN:
sre_parse.py(173):                 i, j = av[1].getwidth()
 --- modulename: sre_parse, funcname: getwidth
sre_parse.py(153):         if self.width:
sre_parse.py(155):         lo = hi = 0
sre_parse.py(156):         UNITCODES = (ANY, RANGE, IN, LITERAL, NOT_LITERAL, CATEGORY)
sre_parse.py(157):         REPEATCODES = (MIN_REPEAT, MAX_REPEAT)
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(159):             if op is BRANCH:
sre_parse.py(168):             elif op is CALL:
sre_parse.py(172):             elif op is SUBPATTERN:
sre_parse.py(176):             elif op in REPEATCODES:
sre_parse.py(177):                 i, j = av[2].getwidth()
 --- modulename: sre_parse, funcname: getwidth
sre_parse.py(153):         if self.width:
sre_parse.py(155):         lo = hi = 0
sre_parse.py(156):         UNITCODES = (ANY, RANGE, IN, LITERAL, NOT_LITERAL, CATEGORY)
sre_parse.py(157):         REPEATCODES = (MIN_REPEAT, MAX_REPEAT)
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(159):             if op is BRANCH:
sre_parse.py(168):             elif op is CALL:
sre_parse.py(172):             elif op is SUBPATTERN:
sre_parse.py(176):             elif op in REPEATCODES:
sre_parse.py(180):             elif op in UNITCODES:
sre_parse.py(181):                 lo = lo + 1
sre_parse.py(182):                 hi = hi + 1
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(185):         self.width = min(lo, MAXREPEAT - 1), min(hi, MAXREPEAT)
sre_parse.py(186):         return self.width
sre_parse.py(178):                 lo = lo + i * av[0]
sre_parse.py(179):                 hi = hi + j * av[1]
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(185):         self.width = min(lo, MAXREPEAT - 1), min(hi, MAXREPEAT)
sre_parse.py(186):         return self.width
sre_parse.py(174):                 lo = lo + i
sre_parse.py(175):                 hi = hi + j
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(159):             if op is BRANCH:
sre_parse.py(168):             elif op is CALL:
sre_parse.py(172):             elif op is SUBPATTERN:
sre_parse.py(176):             elif op in REPEATCODES:
sre_parse.py(180):             elif op in UNITCODES:
sre_parse.py(181):                 lo = lo + 1
sre_parse.py(182):                 hi = hi + 1
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(185):         self.width = min(lo, MAXREPEAT - 1), min(hi, MAXREPEAT)
sre_parse.py(186):         return self.width
sre_parse.py(174):                 lo = lo + i
sre_parse.py(175):                 hi = hi + j
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(185):         self.width = min(lo, MAXREPEAT - 1), min(hi, MAXREPEAT)
sre_parse.py(186):         return self.width
sre_parse.py(178):                 lo = lo + i * av[0]
sre_parse.py(179):                 hi = hi + j * av[1]
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(185):         self.width = min(lo, MAXREPEAT - 1), min(hi, MAXREPEAT)
sre_parse.py(186):         return self.width
sre_compile.py(438):     if lo == 0:
sre_compile.py(441):     prefix = []
sre_compile.py(442):     prefixappend = prefix.append
sre_compile.py(443):     prefix_skip = 0
sre_compile.py(444):     charset = [] # not used
sre_compile.py(445):     charsetappend = charset.append
sre_compile.py(446):     if not (flags & SRE_FLAG_IGNORECASE):
sre_compile.py(448):         for op, av in pattern.data:
sre_compile.py(449):             if op is LITERAL:
sre_compile.py(453):             elif op is SUBPATTERN and len(av[1]) == 1:
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(138):         return len(self.data)
sre_compile.py(454):                 op, av = av[1][0]
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(455):                 if op is LITERAL:
sre_compile.py(458):                     break
sre_compile.py(462):         if not prefix and pattern.data:
sre_compile.py(463):             op, av = pattern.data[0]
sre_compile.py(464):             if op is SUBPATTERN and av[1]:
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(138):         return len(self.data)
sre_compile.py(465):                 op, av = av[1][0]
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(466):                 if op is LITERAL:
sre_compile.py(468):                 elif op is BRANCH:
sre_compile.py(501):     emit = code.append
sre_compile.py(502):     emit(OPCODES[INFO])
sre_compile.py(503):     skip = len(code); emit(0)
sre_compile.py(505):     mask = 0
sre_compile.py(506):     if prefix:
sre_compile.py(510):     elif charset:
sre_compile.py(512):     emit(mask)
sre_compile.py(514):     if lo < MAXCODE:
sre_compile.py(515):         emit(lo)
sre_compile.py(519):     if hi < MAXCODE:
sre_compile.py(520):         emit(hi)
sre_compile.py(524):     if prefix:
sre_compile.py(535):     elif charset:
sre_compile.py(537):     code[skip] = len(code) - skip
sre_compile.py(561):     _compile(code, p.data, flags)
 --- modulename: sre_compile, funcname: _compile
sre_compile.py(66):     emit = code.append
sre_compile.py(67):     _len = len
sre_compile.py(68):     LITERAL_CODES = _LITERAL_CODES
sre_compile.py(69):     REPEATING_CODES = _REPEATING_CODES
sre_compile.py(70):     SUCCESS_CODES = _SUCCESS_CODES
sre_compile.py(71):     ASSERT_CODES = _ASSERT_CODES
sre_compile.py(72):     if (flags & SRE_FLAG_IGNORECASE and
sre_compile.py(77):         fixes = None
sre_compile.py(78):     for op, av in pattern:
sre_compile.py(79):         if op in LITERAL_CODES:
sre_compile.py(98):         elif op is IN:
sre_compile.py(109):         elif op is ANY:
sre_compile.py(114):         elif op in REPEATING_CODES:
sre_compile.py(146):         elif op is SUBPATTERN:
sre_compile.py(147):             if av[0]:
sre_compile.py(148):                 emit(OPCODES[MARK])
sre_compile.py(149):                 emit((av[0]-1)*2)
sre_compile.py(151):             _compile(code, av[1], flags)
 --- modulename: sre_compile, funcname: _compile
sre_compile.py(66):     emit = code.append
sre_compile.py(67):     _len = len
sre_compile.py(68):     LITERAL_CODES = _LITERAL_CODES
sre_compile.py(69):     REPEATING_CODES = _REPEATING_CODES
sre_compile.py(70):     SUCCESS_CODES = _SUCCESS_CODES
sre_compile.py(71):     ASSERT_CODES = _ASSERT_CODES
sre_compile.py(72):     if (flags & SRE_FLAG_IGNORECASE and
sre_compile.py(77):         fixes = None
sre_compile.py(78):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(79):         if op in LITERAL_CODES:
sre_compile.py(98):         elif op is IN:
sre_compile.py(109):         elif op is ANY:
sre_compile.py(114):         elif op in REPEATING_CODES:
sre_compile.py(115):             if flags & SRE_FLAG_TEMPLATE:
sre_compile.py(124):             elif _simple(av) and op is not REPEAT:
 --- modulename: sre_compile, funcname: _simple
sre_compile.py(430):     lo, hi = av[2].getwidth()
 --- modulename: sre_parse, funcname: getwidth
sre_parse.py(153):         if self.width:
sre_parse.py(154):             return self.width
sre_compile.py(431):     return lo == hi == 1 and av[2][0][0] != SUBPATTERN
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(125):                 if op is MAX_REPEAT:
sre_compile.py(126):                     emit(OPCODES[REPEAT_ONE])
sre_compile.py(129):                 skip = _len(code); emit(0)
sre_compile.py(130):                 emit(av[0])
sre_compile.py(131):                 emit(av[1])
sre_compile.py(132):                 _compile(code, av[2], flags)
 --- modulename: sre_compile, funcname: _compile
sre_compile.py(66):     emit = code.append
sre_compile.py(67):     _len = len
sre_compile.py(68):     LITERAL_CODES = _LITERAL_CODES
sre_compile.py(69):     REPEATING_CODES = _REPEATING_CODES
sre_compile.py(70):     SUCCESS_CODES = _SUCCESS_CODES
sre_compile.py(71):     ASSERT_CODES = _ASSERT_CODES
sre_compile.py(72):     if (flags & SRE_FLAG_IGNORECASE and
sre_compile.py(77):         fixes = None
sre_compile.py(78):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(79):         if op in LITERAL_CODES:
sre_compile.py(98):         elif op is IN:
sre_compile.py(109):         elif op is ANY:
sre_compile.py(110):             if flags & SRE_FLAG_DOTALL:
sre_compile.py(113):                 emit(OPCODES[ANY])
sre_compile.py(78):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(133):                 emit(OPCODES[SUCCESS])
sre_compile.py(134):                 code[skip] = _len(code) - skip
sre_compile.py(78):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(152):             if av[0]:
sre_compile.py(153):                 emit(OPCODES[MARK])
sre_compile.py(154):                 emit((av[0]-1)*2+1)
sre_compile.py(78):     for op, av in pattern:
sre_compile.py(79):         if op in LITERAL_CODES:
sre_compile.py(80):             if flags & SRE_FLAG_IGNORECASE:
sre_compile.py(96):                 emit(OPCODES[op])
sre_compile.py(97):                 emit(av)
sre_compile.py(78):     for op, av in pattern:
sre_compile.py(79):         if op in LITERAL_CODES:
sre_compile.py(80):             if flags & SRE_FLAG_IGNORECASE:
sre_compile.py(96):                 emit(OPCODES[op])
sre_compile.py(97):                 emit(av)
sre_compile.py(78):     for op, av in pattern:
sre_compile.py(79):         if op in LITERAL_CODES:
sre_compile.py(80):             if flags & SRE_FLAG_IGNORECASE:
sre_compile.py(96):                 emit(OPCODES[op])
sre_compile.py(97):                 emit(av)
sre_compile.py(78):     for op, av in pattern:
sre_compile.py(79):         if op in LITERAL_CODES:
sre_compile.py(80):             if flags & SRE_FLAG_IGNORECASE:
sre_compile.py(96):                 emit(OPCODES[op])
sre_compile.py(97):                 emit(av)
sre_compile.py(78):     for op, av in pattern:
sre_compile.py(79):         if op in LITERAL_CODES:
sre_compile.py(80):             if flags & SRE_FLAG_IGNORECASE:
sre_compile.py(96):                 emit(OPCODES[op])
sre_compile.py(97):                 emit(av)
sre_compile.py(78):     for op, av in pattern:
sre_compile.py(79):         if op in LITERAL_CODES:
sre_compile.py(80):             if flags & SRE_FLAG_IGNORECASE:
sre_compile.py(96):                 emit(OPCODES[op])
sre_compile.py(97):                 emit(av)
sre_compile.py(78):     for op, av in pattern:
sre_compile.py(79):         if op in LITERAL_CODES:
sre_compile.py(80):             if flags & SRE_FLAG_IGNORECASE:
sre_compile.py(96):                 emit(OPCODES[op])
sre_compile.py(97):                 emit(av)
sre_compile.py(78):     for op, av in pattern:
sre_compile.py(79):         if op in LITERAL_CODES:
sre_compile.py(80):             if flags & SRE_FLAG_IGNORECASE:
sre_compile.py(96):                 emit(OPCODES[op])
sre_compile.py(97):                 emit(av)
sre_compile.py(78):     for op, av in pattern:
sre_compile.py(79):         if op in LITERAL_CODES:
sre_compile.py(80):             if flags & SRE_FLAG_IGNORECASE:
sre_compile.py(96):                 emit(OPCODES[op])
sre_compile.py(97):                 emit(av)
sre_compile.py(78):     for op, av in pattern:
sre_compile.py(79):         if op in LITERAL_CODES:
sre_compile.py(98):         elif op is IN:
sre_compile.py(109):         elif op is ANY:
sre_compile.py(114):         elif op in REPEATING_CODES:
sre_compile.py(146):         elif op is SUBPATTERN:
sre_compile.py(147):             if av[0]:
sre_compile.py(148):                 emit(OPCODES[MARK])
sre_compile.py(149):                 emit((av[0]-1)*2)
sre_compile.py(151):             _compile(code, av[1], flags)
 --- modulename: sre_compile, funcname: _compile
sre_compile.py(66):     emit = code.append
sre_compile.py(67):     _len = len
sre_compile.py(68):     LITERAL_CODES = _LITERAL_CODES
sre_compile.py(69):     REPEATING_CODES = _REPEATING_CODES
sre_compile.py(70):     SUCCESS_CODES = _SUCCESS_CODES
sre_compile.py(71):     ASSERT_CODES = _ASSERT_CODES
sre_compile.py(72):     if (flags & SRE_FLAG_IGNORECASE and
sre_compile.py(77):         fixes = None
sre_compile.py(78):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(79):         if op in LITERAL_CODES:
sre_compile.py(98):         elif op is IN:
sre_compile.py(109):         elif op is ANY:
sre_compile.py(114):         elif op in REPEATING_CODES:
sre_compile.py(115):             if flags & SRE_FLAG_TEMPLATE:
sre_compile.py(124):             elif _simple(av) and op is not REPEAT:
 --- modulename: sre_compile, funcname: _simple
sre_compile.py(430):     lo, hi = av[2].getwidth()
 --- modulename: sre_parse, funcname: getwidth
sre_parse.py(153):         if self.width:
sre_parse.py(154):             return self.width
sre_compile.py(431):     return lo == hi == 1 and av[2][0][0] != SUBPATTERN
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(125):                 if op is MAX_REPEAT:
sre_compile.py(126):                     emit(OPCODES[REPEAT_ONE])
sre_compile.py(129):                 skip = _len(code); emit(0)
sre_compile.py(130):                 emit(av[0])
sre_compile.py(131):                 emit(av[1])
sre_compile.py(132):                 _compile(code, av[2], flags)
 --- modulename: sre_compile, funcname: _compile
sre_compile.py(66):     emit = code.append
sre_compile.py(67):     _len = len
sre_compile.py(68):     LITERAL_CODES = _LITERAL_CODES
sre_compile.py(69):     REPEATING_CODES = _REPEATING_CODES
sre_compile.py(70):     SUCCESS_CODES = _SUCCESS_CODES
sre_compile.py(71):     ASSERT_CODES = _ASSERT_CODES
sre_compile.py(72):     if (flags & SRE_FLAG_IGNORECASE and
sre_compile.py(77):         fixes = None
sre_compile.py(78):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(79):         if op in LITERAL_CODES:
sre_compile.py(98):         elif op is IN:
sre_compile.py(99):             if flags & SRE_FLAG_IGNORECASE:
sre_compile.py(104):                 emit(OPCODES[op])
sre_compile.py(105):                 fixup = None
sre_compile.py(106):             skip = _len(code); emit(0)
sre_compile.py(107):             _compile_charset(av, flags, code, fixup, fixes)
 --- modulename: sre_compile, funcname: _compile_charset
sre_compile.py(230):     emit = code.append
sre_compile.py(231):     for op, av in _optimize_charset(charset, fixup, fixes,
sre_compile.py(232):                                     flags & SRE_FLAG_UNICODE):
 --- modulename: sre_compile, funcname: _optimize_charset
sre_compile.py(258):     out = []
sre_compile.py(259):     tail = []
sre_compile.py(260):     charmap = bytearray(256)
sre_compile.py(261):     for op, av in charset:
sre_compile.py(262):         while True:
sre_compile.py(263):             try:
sre_compile.py(264):                 if op is LITERAL:
sre_compile.py(273):                 elif op is RANGE:
sre_compile.py(286):                 elif op is NEGATE:
sre_compile.py(289):                     tail.append((op, av))
sre_compile.py(310):             break
sre_compile.py(261):     for op, av in charset:
sre_compile.py(262):         while True:
sre_compile.py(263):             try:
sre_compile.py(264):                 if op is LITERAL:
sre_compile.py(265):                     if fixup:
sre_compile.py(272):                         charmap[av] = 1
sre_compile.py(310):             break
sre_compile.py(261):     for op, av in charset:
sre_compile.py(313):     runs = []
sre_compile.py(314):     q = 0
sre_compile.py(315):     while True:
sre_compile.py(316):         p = charmap.find(b'\1', q)
sre_compile.py(317):         if p < 0:
sre_compile.py(319):         if len(runs) >= 2:
sre_compile.py(322):         q = charmap.find(b'\0', p)
sre_compile.py(323):         if q < 0:
sre_compile.py(326):         runs.append((p, q))
sre_compile.py(315):     while True:
sre_compile.py(316):         p = charmap.find(b'\1', q)
sre_compile.py(317):         if p < 0:
sre_compile.py(318):             break
sre_compile.py(327):     if runs is not None:
sre_compile.py(329):         for p, q in runs:
sre_compile.py(330):             if q - p == 1:
sre_compile.py(331):                 out.append((LITERAL, p))
sre_compile.py(329):         for p, q in runs:
sre_compile.py(334):         out += tail
sre_compile.py(336):         if fixup or len(out) < len(charset):
sre_compile.py(339):         return charset
sre_compile.py(233):         emit(OPCODES[op])
sre_compile.py(234):         if op is NEGATE:
sre_compile.py(236):         elif op is LITERAL:
sre_compile.py(238):         elif op is RANGE:
sre_compile.py(241):         elif op is CHARSET:
sre_compile.py(243):         elif op is BIGCHARSET:
sre_compile.py(245):         elif op is CATEGORY:
sre_compile.py(246):             if flags & SRE_FLAG_LOCALE:
sre_compile.py(248):             elif flags & SRE_FLAG_UNICODE:
sre_compile.py(251):                 emit(CHCODES[av])
sre_compile.py(232):                                     flags & SRE_FLAG_UNICODE):
sre_compile.py(233):         emit(OPCODES[op])
sre_compile.py(234):         if op is NEGATE:
sre_compile.py(236):         elif op is LITERAL:
sre_compile.py(237):             emit(av)
sre_compile.py(232):                                     flags & SRE_FLAG_UNICODE):
sre_compile.py(254):     emit(OPCODES[FAILURE])
sre_compile.py(108):             code[skip] = _len(code) - skip
sre_compile.py(78):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(133):                 emit(OPCODES[SUCCESS])
sre_compile.py(134):                 code[skip] = _len(code) - skip
sre_compile.py(78):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(152):             if av[0]:
sre_compile.py(153):                 emit(OPCODES[MARK])
sre_compile.py(154):                 emit((av[0]-1)*2+1)
sre_compile.py(78):     for op, av in pattern:
sre_compile.py(79):         if op in LITERAL_CODES:
sre_compile.py(98):         elif op is IN:
sre_compile.py(109):         elif op is ANY:
sre_compile.py(114):         elif op in REPEATING_CODES:
sre_compile.py(115):             if flags & SRE_FLAG_TEMPLATE:
sre_compile.py(124):             elif _simple(av) and op is not REPEAT:
 --- modulename: sre_compile, funcname: _simple
sre_compile.py(430):     lo, hi = av[2].getwidth()
 --- modulename: sre_parse, funcname: getwidth
sre_parse.py(153):         if self.width:
sre_parse.py(154):             return self.width
sre_compile.py(431):     return lo == hi == 1 and av[2][0][0] != SUBPATTERN
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(125):                 if op is MAX_REPEAT:
sre_compile.py(126):                     emit(OPCODES[REPEAT_ONE])
sre_compile.py(129):                 skip = _len(code); emit(0)
sre_compile.py(130):                 emit(av[0])
sre_compile.py(131):                 emit(av[1])
sre_compile.py(132):                 _compile(code, av[2], flags)
 --- modulename: sre_compile, funcname: _compile
sre_compile.py(66):     emit = code.append
sre_compile.py(67):     _len = len
sre_compile.py(68):     LITERAL_CODES = _LITERAL_CODES
sre_compile.py(69):     REPEATING_CODES = _REPEATING_CODES
sre_compile.py(70):     SUCCESS_CODES = _SUCCESS_CODES
sre_compile.py(71):     ASSERT_CODES = _ASSERT_CODES
sre_compile.py(72):     if (flags & SRE_FLAG_IGNORECASE and
sre_compile.py(77):         fixes = None
sre_compile.py(78):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(79):         if op in LITERAL_CODES:
sre_compile.py(80):             if flags & SRE_FLAG_IGNORECASE:
sre_compile.py(96):                 emit(OPCODES[op])
sre_compile.py(97):                 emit(av)
sre_compile.py(78):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(133):                 emit(OPCODES[SUCCESS])
sre_compile.py(134):                 code[skip] = _len(code) - skip
sre_compile.py(78):     for op, av in pattern:
sre_compile.py(79):         if op in LITERAL_CODES:
sre_compile.py(98):         elif op is IN:
sre_compile.py(109):         elif op is ANY:
sre_compile.py(114):         elif op in REPEATING_CODES:
sre_compile.py(115):             if flags & SRE_FLAG_TEMPLATE:
sre_compile.py(124):             elif _simple(av) and op is not REPEAT:
 --- modulename: sre_compile, funcname: _simple
sre_compile.py(430):     lo, hi = av[2].getwidth()
 --- modulename: sre_parse, funcname: getwidth
sre_parse.py(153):         if self.width:
sre_parse.py(154):             return self.width
sre_compile.py(431):     return lo == hi == 1 and av[2][0][0] != SUBPATTERN
sre_compile.py(136):                 emit(OPCODES[REPEAT])
sre_compile.py(137):                 skip = _len(code); emit(0)
sre_compile.py(138):                 emit(av[0])
sre_compile.py(139):                 emit(av[1])
sre_compile.py(140):                 _compile(code, av[2], flags)
 --- modulename: sre_compile, funcname: _compile
sre_compile.py(66):     emit = code.append
sre_compile.py(67):     _len = len
sre_compile.py(68):     LITERAL_CODES = _LITERAL_CODES
sre_compile.py(69):     REPEATING_CODES = _REPEATING_CODES
sre_compile.py(70):     SUCCESS_CODES = _SUCCESS_CODES
sre_compile.py(71):     ASSERT_CODES = _ASSERT_CODES
sre_compile.py(72):     if (flags & SRE_FLAG_IGNORECASE and
sre_compile.py(77):         fixes = None
sre_compile.py(78):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(79):         if op in LITERAL_CODES:
sre_compile.py(98):         elif op is IN:
sre_compile.py(109):         elif op is ANY:
sre_compile.py(114):         elif op in REPEATING_CODES:
sre_compile.py(146):         elif op is SUBPATTERN:
sre_compile.py(147):             if av[0]:
sre_compile.py(151):             _compile(code, av[1], flags)
 --- modulename: sre_compile, funcname: _compile
sre_compile.py(66):     emit = code.append
sre_compile.py(67):     _len = len
sre_compile.py(68):     LITERAL_CODES = _LITERAL_CODES
sre_compile.py(69):     REPEATING_CODES = _REPEATING_CODES
sre_compile.py(70):     SUCCESS_CODES = _SUCCESS_CODES
sre_compile.py(71):     ASSERT_CODES = _ASSERT_CODES
sre_compile.py(72):     if (flags & SRE_FLAG_IGNORECASE and
sre_compile.py(77):         fixes = None
sre_compile.py(78):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(79):         if op in LITERAL_CODES:
sre_compile.py(80):             if flags & SRE_FLAG_IGNORECASE:
sre_compile.py(96):                 emit(OPCODES[op])
sre_compile.py(97):                 emit(av)
sre_compile.py(78):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(79):         if op in LITERAL_CODES:
sre_compile.py(98):         elif op is IN:
sre_compile.py(109):         elif op is ANY:
sre_compile.py(114):         elif op in REPEATING_CODES:
sre_compile.py(146):         elif op is SUBPATTERN:
sre_compile.py(147):             if av[0]:
sre_compile.py(148):                 emit(OPCODES[MARK])
sre_compile.py(149):                 emit((av[0]-1)*2)
sre_compile.py(151):             _compile(code, av[1], flags)
 --- modulename: sre_compile, funcname: _compile
sre_compile.py(66):     emit = code.append
sre_compile.py(67):     _len = len
sre_compile.py(68):     LITERAL_CODES = _LITERAL_CODES
sre_compile.py(69):     REPEATING_CODES = _REPEATING_CODES
sre_compile.py(70):     SUCCESS_CODES = _SUCCESS_CODES
sre_compile.py(71):     ASSERT_CODES = _ASSERT_CODES
sre_compile.py(72):     if (flags & SRE_FLAG_IGNORECASE and
sre_compile.py(77):         fixes = None
sre_compile.py(78):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(79):         if op in LITERAL_CODES:
sre_compile.py(98):         elif op is IN:
sre_compile.py(109):         elif op is ANY:
sre_compile.py(114):         elif op in REPEATING_CODES:
sre_compile.py(115):             if flags & SRE_FLAG_TEMPLATE:
sre_compile.py(124):             elif _simple(av) and op is not REPEAT:
 --- modulename: sre_compile, funcname: _simple
sre_compile.py(430):     lo, hi = av[2].getwidth()
 --- modulename: sre_parse, funcname: getwidth
sre_parse.py(153):         if self.width:
sre_parse.py(154):             return self.width
sre_compile.py(431):     return lo == hi == 1 and av[2][0][0] != SUBPATTERN
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(125):                 if op is MAX_REPEAT:
sre_compile.py(126):                     emit(OPCODES[REPEAT_ONE])
sre_compile.py(129):                 skip = _len(code); emit(0)
sre_compile.py(130):                 emit(av[0])
sre_compile.py(131):                 emit(av[1])
sre_compile.py(132):                 _compile(code, av[2], flags)
 --- modulename: sre_compile, funcname: _compile
sre_compile.py(66):     emit = code.append
sre_compile.py(67):     _len = len
sre_compile.py(68):     LITERAL_CODES = _LITERAL_CODES
sre_compile.py(69):     REPEATING_CODES = _REPEATING_CODES
sre_compile.py(70):     SUCCESS_CODES = _SUCCESS_CODES
sre_compile.py(71):     ASSERT_CODES = _ASSERT_CODES
sre_compile.py(72):     if (flags & SRE_FLAG_IGNORECASE and
sre_compile.py(77):         fixes = None
sre_compile.py(78):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(79):         if op in LITERAL_CODES:
sre_compile.py(98):         elif op is IN:
sre_compile.py(109):         elif op is ANY:
sre_compile.py(110):             if flags & SRE_FLAG_DOTALL:
sre_compile.py(113):                 emit(OPCODES[ANY])
sre_compile.py(78):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(133):                 emit(OPCODES[SUCCESS])
sre_compile.py(134):                 code[skip] = _len(code) - skip
sre_compile.py(78):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(152):             if av[0]:
sre_compile.py(153):                 emit(OPCODES[MARK])
sre_compile.py(154):                 emit((av[0]-1)*2+1)
sre_compile.py(78):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(79):         if op in LITERAL_CODES:
sre_compile.py(80):             if flags & SRE_FLAG_IGNORECASE:
sre_compile.py(96):                 emit(OPCODES[op])
sre_compile.py(97):                 emit(av)
sre_compile.py(78):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(152):             if av[0]:
sre_compile.py(78):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(141):                 code[skip] = _len(code) - skip
sre_compile.py(142):                 if op is MAX_REPEAT:
sre_compile.py(143):                     emit(OPCODES[MAX_UNTIL])
sre_compile.py(78):     for op, av in pattern:
sre_compile.py(563):     code.append(OPCODES[SUCCESS])
sre_compile.py(565):     return code
sre_compile.py(581):     if p.pattern.groups > 100:
sre_compile.py(587):     groupindex = p.pattern.groupdict
sre_compile.py(588):     indexgroup = [None] * p.pattern.groups
sre_compile.py(589):     for k, i in groupindex.items():
sre_compile.py(592):     return _sre.compile(
sre_compile.py(593):         pattern, flags | p.pattern.flags, code,
sre_compile.py(594):         p.pattern.groups-1,
sre_compile.py(595):         groupindex, indexgroup
re.py(252):     if not bypass_cache:
re.py(253):         if len(_cache) >= _MAXCACHE:
re.py(255):         if p.flags & LOCALE:
re.py(260):             loc = None
re.py(261):         _cache[cachekey] = p, loc
re.py(262):     return p
platform.py(251): _release_version = re.compile(r'([^0-9]+)'
 --- modulename: re, funcname: compile
re.py(194):     return _compile(pattern, flags)
 --- modulename: re, funcname: _compile
re.py(232):     pattern, flags = key
re.py(233):     bypass_cache = flags & DEBUG
re.py(234):     if not bypass_cache:
re.py(235):         cachekey = (type(key[0]),) + key
re.py(236):         try:
re.py(237):             p, loc = _cache[cachekey]
re.py(240):         except KeyError:
re.py(241):             pass
re.py(242):     if isinstance(pattern, _pattern_type):
re.py(246):     if not sre_compile.isstring(pattern):
 --- modulename: sre_compile, funcname: isstring
sre_compile.py(547):     for tp in STRING_TYPES:
sre_compile.py(548):         if isinstance(obj, tp):
sre_compile.py(549):             return 1
re.py(248):     try:
re.py(249):         p = sre_compile.compile(pattern, flags)
 --- modulename: sre_compile, funcname: compile
sre_compile.py(570):     if isstring(p):
 --- modulename: sre_compile, funcname: isstring
sre_compile.py(547):     for tp in STRING_TYPES:
sre_compile.py(548):         if isinstance(obj, tp):
sre_compile.py(549):             return 1
sre_compile.py(571):         pattern = p
sre_compile.py(572):         p = sre_parse.parse(p, flags)
 --- modulename: sre_parse, funcname: parse
sre_parse.py(709):     source = Tokenizer(str)
 --- modulename: sre_parse, funcname: __init__
sre_parse.py(190):         self.string = string
sre_parse.py(191):         self.index = 0
sre_parse.py(192):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(711):     if pattern is None:
sre_parse.py(712):         pattern = Pattern()
 --- modulename: sre_parse, funcname: __init__
sre_parse.py(68):         self.flags = 0
sre_parse.py(69):         self.open = []
sre_parse.py(70):         self.groups = 1
sre_parse.py(71):         self.groupdict = {}
sre_parse.py(72):         self.lookbehind = 0
sre_parse.py(713):     pattern.flags = flags
sre_parse.py(714):     pattern.str = str
sre_parse.py(716):     p = _parse_sub(source, pattern, 0)
 --- modulename: sre_parse, funcname: _parse_sub
sre_parse.py(320):     items = []
sre_parse.py(321):     itemsappend = items.append
sre_parse.py(322):     sourcematch = source.match
sre_parse.py(323):     while 1:
sre_parse.py(324):         itemsappend(_parse(source, state))
 --- modulename: sre_parse, funcname: _parse
sre_parse.py(397):     subpattern = SubPattern(state)
 --- modulename: sre_parse, funcname: __init__
sre_parse.py(93):         self.pattern = pattern
sre_parse.py(94):         if data is None:
sre_parse.py(95):             data = []
sre_parse.py(96):         self.data = data
sre_parse.py(97):         self.width = None
sre_parse.py(400):     subpatternappend = subpattern.append
sre_parse.py(401):     sourceget = source.get
sre_parse.py(402):     sourcematch = source.match
sre_parse.py(403):     _len = len
sre_parse.py(404):     PATTERNENDERS = _PATTERNENDERS
sre_parse.py(405):     ASSERTCHARS = _ASSERTCHARS
sre_parse.py(406):     LOOKBEHINDASSERTCHARS = _LOOKBEHINDASSERTCHARS
sre_parse.py(407):     REPEATCODES = _REPEATCODES
sre_parse.py(409):     while 1:
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(413):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(414):         if this is None:
sre_parse.py(417):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(428):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(431):         elif this == "[":
sre_parse.py(488):         elif this and this[0] in REPEAT_CHARS:
sre_parse.py(541):         elif this == ".":
sre_parse.py(544):         elif this == "(":
sre_parse.py(545):             group = 1
sre_parse.py(546):             name = None
sre_parse.py(547):             condgroup = None
sre_parse.py(548):             if sourcematch("?"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(211):         return 0
sre_parse.py(666):             if group:
sre_parse.py(668):                 if group == 2:
sre_parse.py(672):                     group = state.opengroup(name)
 --- modulename: sre_parse, funcname: opengroup
sre_parse.py(75):         gid = self.groups
sre_parse.py(76):         self.groups = gid + 1
sre_parse.py(77):         if name is not None:
sre_parse.py(83):         self.open.append(gid)
sre_parse.py(84):         return gid
sre_parse.py(673):                 if condgroup:
sre_parse.py(676):                     p = _parse_sub(source, state)
 --- modulename: sre_parse, funcname: _parse_sub
sre_parse.py(320):     items = []
sre_parse.py(321):     itemsappend = items.append
sre_parse.py(322):     sourcematch = source.match
sre_parse.py(323):     while 1:
sre_parse.py(324):         itemsappend(_parse(source, state))
 --- modulename: sre_parse, funcname: _parse
sre_parse.py(397):     subpattern = SubPattern(state)
 --- modulename: sre_parse, funcname: __init__
sre_parse.py(93):         self.pattern = pattern
sre_parse.py(94):         if data is None:
sre_parse.py(95):             data = []
sre_parse.py(96):         self.data = data
sre_parse.py(97):         self.width = None
sre_parse.py(400):     subpatternappend = subpattern.append
sre_parse.py(401):     sourceget = source.get
sre_parse.py(402):     sourcematch = source.match
sre_parse.py(403):     _len = len
sre_parse.py(404):     PATTERNENDERS = _PATTERNENDERS
sre_parse.py(405):     ASSERTCHARS = _ASSERTCHARS
sre_parse.py(406):     LOOKBEHINDASSERTCHARS = _LOOKBEHINDASSERTCHARS
sre_parse.py(407):     REPEATCODES = _REPEATCODES
sre_parse.py(409):     while 1:
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(413):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(414):         if this is None:
sre_parse.py(417):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(428):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(431):         elif this == "[":
sre_parse.py(433):             set = []
sre_parse.py(434):             setappend = set.append
sre_parse.py(437):             if sourcematch("^"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(208):             if skip:
sre_parse.py(209):                 self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(210):             return 1
sre_parse.py(438):                 setappend((NEGATE, None))
sre_parse.py(440):             start = set[:]
sre_parse.py(441):             while 1:
sre_parse.py(442):                 this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(443):                 if this == "]" and set != start:
sre_parse.py(445):                 elif this and this[0] == "\\":
sre_parse.py(447):                 elif this:
sre_parse.py(448):                     code1 = LITERAL, ord(this)
sre_parse.py(451):                 if sourcematch("-"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(208):             if skip:
sre_parse.py(209):                 self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(210):             return 1
sre_parse.py(453):                     this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(454):                     if this == "]":
sre_parse.py(460):                     elif this:
sre_parse.py(461):                         if this[0] == "\\":
sre_parse.py(464):                             code2 = LITERAL, ord(this)
sre_parse.py(465):                         if code1[0] != LITERAL or code2[0] != LITERAL:
sre_parse.py(467):                         lo = code1[1]
sre_parse.py(468):                         hi = code2[1]
sre_parse.py(469):                         if hi < lo:
sre_parse.py(471):                         setappend((RANGE, (lo, hi)))
sre_parse.py(442):                 this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(443):                 if this == "]" and set != start:
sre_parse.py(444):                     break
sre_parse.py(480):             if _len(set)==1 and set[0][0] is LITERAL:
sre_parse.py(482):             elif _len(set)==2 and set[0][0] is NEGATE and set[1][0] is LITERAL:
sre_parse.py(486):                 subpatternappend((IN, set))
 --- modulename: sre_parse, funcname: append
sre_parse.py(150):         self.data.append(code)
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(413):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(414):         if this is None:
sre_parse.py(417):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(428):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(431):         elif this == "[":
sre_parse.py(488):         elif this and this[0] in REPEAT_CHARS:
sre_parse.py(490):             if this == "?":
sre_parse.py(492):             elif this == "*":
sre_parse.py(495):             elif this == "+":
sre_parse.py(496):                 min, max = 1, MAXREPEAT
sre_parse.py(528):             if subpattern:
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(138):         return len(self.data)
sre_parse.py(529):                 item = subpattern[-1:]
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(138):         return len(self.data)
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(143):             return SubPattern(self.pattern, self.data[index])
 --- modulename: sre_parse, funcname: __init__
sre_parse.py(93):         self.pattern = pattern
sre_parse.py(94):         if data is None:
sre_parse.py(96):         self.data = data
sre_parse.py(97):         self.width = None
sre_parse.py(532):             if not item or (_len(item) == 1 and item[0][0] == AT):
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(138):         return len(self.data)
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(138):         return len(self.data)
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_parse.py(534):             if item[0][0] in REPEATCODES:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_parse.py(536):             if sourcematch("?"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(211):         return 0
sre_parse.py(539):                 subpattern[-1] = (MAX_REPEAT, (min, max, item))
 --- modulename: sre_parse, funcname: __setitem__
sre_parse.py(146):         self.data[index] = code
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(412):             break # end of subpattern
sre_parse.py(704):     return subpattern
sre_parse.py(325):         if sourcematch("|"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(211):         return 0
sre_parse.py(327):         if not nested:
sre_parse.py(329):         if not source.next or sourcematch(")", 0):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(208):             if skip:
sre_parse.py(210):             return 1
sre_parse.py(330):             break
sre_parse.py(334):     if len(items) == 1:
sre_parse.py(335):         return items[0]
sre_parse.py(677):                 if not sourcematch(")"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(208):             if skip:
sre_parse.py(209):                 self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(210):             return 1
sre_parse.py(679):                 if group is not None:
sre_parse.py(680):                     state.closegroup(group)
 --- modulename: sre_parse, funcname: closegroup
sre_parse.py(86):         self.open.remove(gid)
sre_parse.py(681):                 subpatternappend((SUBPATTERN, (group, p)))
 --- modulename: sre_parse, funcname: append
sre_parse.py(150):         self.data.append(code)
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(413):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(414):         if this is None:
sre_parse.py(417):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(428):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(431):         elif this == "[":
sre_parse.py(488):         elif this and this[0] in REPEAT_CHARS:
sre_parse.py(541):         elif this == ".":
sre_parse.py(544):         elif this == "(":
sre_parse.py(545):             group = 1
sre_parse.py(546):             name = None
sre_parse.py(547):             condgroup = None
sre_parse.py(548):             if sourcematch("?"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(208):             if skip:
sre_parse.py(209):                 self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(210):             return 1
sre_parse.py(549):                 group = 0
sre_parse.py(551):                 if sourcematch("P"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(211):         return 0
sre_parse.py(600):                 elif sourcematch(":"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(208):             if skip:
sre_parse.py(209):                 self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(210):             return 1
sre_parse.py(602):                     group = 2
sre_parse.py(666):             if group:
sre_parse.py(668):                 if group == 2:
sre_parse.py(670):                     group = None
sre_parse.py(673):                 if condgroup:
sre_parse.py(676):                     p = _parse_sub(source, state)
 --- modulename: sre_parse, funcname: _parse_sub
sre_parse.py(320):     items = []
sre_parse.py(321):     itemsappend = items.append
sre_parse.py(322):     sourcematch = source.match
sre_parse.py(323):     while 1:
sre_parse.py(324):         itemsappend(_parse(source, state))
 --- modulename: sre_parse, funcname: _parse
sre_parse.py(397):     subpattern = SubPattern(state)
 --- modulename: sre_parse, funcname: __init__
sre_parse.py(93):         self.pattern = pattern
sre_parse.py(94):         if data is None:
sre_parse.py(95):             data = []
sre_parse.py(96):         self.data = data
sre_parse.py(97):         self.width = None
sre_parse.py(400):     subpatternappend = subpattern.append
sre_parse.py(401):     sourceget = source.get
sre_parse.py(402):     sourcematch = source.match
sre_parse.py(403):     _len = len
sre_parse.py(404):     PATTERNENDERS = _PATTERNENDERS
sre_parse.py(405):     ASSERTCHARS = _ASSERTCHARS
sre_parse.py(406):     LOOKBEHINDASSERTCHARS = _LOOKBEHINDASSERTCHARS
sre_parse.py(407):     REPEATCODES = _REPEATCODES
sre_parse.py(409):     while 1:
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(413):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(414):         if this is None:
sre_parse.py(417):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(428):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(429):             subpatternappend((LITERAL, ord(this)))
 --- modulename: sre_parse, funcname: append
sre_parse.py(150):         self.data.append(code)
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(413):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(414):         if this is None:
sre_parse.py(417):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(428):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(429):             subpatternappend((LITERAL, ord(this)))
 --- modulename: sre_parse, funcname: append
sre_parse.py(150):         self.data.append(code)
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(413):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(414):         if this is None:
sre_parse.py(417):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(428):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(429):             subpatternappend((LITERAL, ord(this)))
 --- modulename: sre_parse, funcname: append
sre_parse.py(150):         self.data.append(code)
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(413):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(414):         if this is None:
sre_parse.py(417):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(428):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(429):             subpatternappend((LITERAL, ord(this)))
 --- modulename: sre_parse, funcname: append
sre_parse.py(150):         self.data.append(code)
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(413):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(414):         if this is None:
sre_parse.py(417):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(428):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(429):             subpatternappend((LITERAL, ord(this)))
 --- modulename: sre_parse, funcname: append
sre_parse.py(150):         self.data.append(code)
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(413):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(414):         if this is None:
sre_parse.py(417):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(428):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(429):             subpatternappend((LITERAL, ord(this)))
 --- modulename: sre_parse, funcname: append
sre_parse.py(150):         self.data.append(code)
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(413):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(414):         if this is None:
sre_parse.py(417):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(428):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(429):             subpatternappend((LITERAL, ord(this)))
 --- modulename: sre_parse, funcname: append
sre_parse.py(150):         self.data.append(code)
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(413):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(414):         if this is None:
sre_parse.py(417):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(428):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(429):             subpatternappend((LITERAL, ord(this)))
 --- modulename: sre_parse, funcname: append
sre_parse.py(150):         self.data.append(code)
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(413):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(414):         if this is None:
sre_parse.py(417):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(428):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(429):             subpatternappend((LITERAL, ord(this)))
 --- modulename: sre_parse, funcname: append
sre_parse.py(150):         self.data.append(code)
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(412):             break # end of subpattern
sre_parse.py(704):     return subpattern
sre_parse.py(325):         if sourcematch("|"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(211):         return 0
sre_parse.py(327):         if not nested:
sre_parse.py(329):         if not source.next or sourcematch(")", 0):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(208):             if skip:
sre_parse.py(210):             return 1
sre_parse.py(330):             break
sre_parse.py(334):     if len(items) == 1:
sre_parse.py(335):         return items[0]
sre_parse.py(677):                 if not sourcematch(")"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(208):             if skip:
sre_parse.py(209):                 self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(210):             return 1
sre_parse.py(679):                 if group is not None:
sre_parse.py(681):                 subpatternappend((SUBPATTERN, (group, p)))
 --- modulename: sre_parse, funcname: append
sre_parse.py(150):         self.data.append(code)
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(413):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(414):         if this is None:
sre_parse.py(417):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(428):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(431):         elif this == "[":
sre_parse.py(488):         elif this and this[0] in REPEAT_CHARS:
sre_parse.py(490):             if this == "?":
sre_parse.py(491):                 min, max = 0, 1
sre_parse.py(528):             if subpattern:
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(138):         return len(self.data)
sre_parse.py(529):                 item = subpattern[-1:]
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(138):         return len(self.data)
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(143):             return SubPattern(self.pattern, self.data[index])
 --- modulename: sre_parse, funcname: __init__
sre_parse.py(93):         self.pattern = pattern
sre_parse.py(94):         if data is None:
sre_parse.py(96):         self.data = data
sre_parse.py(97):         self.width = None
sre_parse.py(532):             if not item or (_len(item) == 1 and item[0][0] == AT):
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(138):         return len(self.data)
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(138):         return len(self.data)
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_parse.py(534):             if item[0][0] in REPEATCODES:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_parse.py(536):             if sourcematch("?"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(211):         return 0
sre_parse.py(539):                 subpattern[-1] = (MAX_REPEAT, (min, max, item))
 --- modulename: sre_parse, funcname: __setitem__
sre_parse.py(146):         self.data[index] = code
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(413):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(414):         if this is None:
sre_parse.py(417):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(428):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(431):         elif this == "[":
sre_parse.py(488):         elif this and this[0] in REPEAT_CHARS:
sre_parse.py(541):         elif this == ".":
sre_parse.py(544):         elif this == "(":
sre_parse.py(545):             group = 1
sre_parse.py(546):             name = None
sre_parse.py(547):             condgroup = None
sre_parse.py(548):             if sourcematch("?"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(211):         return 0
sre_parse.py(666):             if group:
sre_parse.py(668):                 if group == 2:
sre_parse.py(672):                     group = state.opengroup(name)
 --- modulename: sre_parse, funcname: opengroup
sre_parse.py(75):         gid = self.groups
sre_parse.py(76):         self.groups = gid + 1
sre_parse.py(77):         if name is not None:
sre_parse.py(83):         self.open.append(gid)
sre_parse.py(84):         return gid
sre_parse.py(673):                 if condgroup:
sre_parse.py(676):                     p = _parse_sub(source, state)
 --- modulename: sre_parse, funcname: _parse_sub
sre_parse.py(320):     items = []
sre_parse.py(321):     itemsappend = items.append
sre_parse.py(322):     sourcematch = source.match
sre_parse.py(323):     while 1:
sre_parse.py(324):         itemsappend(_parse(source, state))
 --- modulename: sre_parse, funcname: _parse
sre_parse.py(397):     subpattern = SubPattern(state)
 --- modulename: sre_parse, funcname: __init__
sre_parse.py(93):         self.pattern = pattern
sre_parse.py(94):         if data is None:
sre_parse.py(95):             data = []
sre_parse.py(96):         self.data = data
sre_parse.py(97):         self.width = None
sre_parse.py(400):     subpatternappend = subpattern.append
sre_parse.py(401):     sourceget = source.get
sre_parse.py(402):     sourcematch = source.match
sre_parse.py(403):     _len = len
sre_parse.py(404):     PATTERNENDERS = _PATTERNENDERS
sre_parse.py(405):     ASSERTCHARS = _ASSERTCHARS
sre_parse.py(406):     LOOKBEHINDASSERTCHARS = _LOOKBEHINDASSERTCHARS
sre_parse.py(407):     REPEATCODES = _REPEATCODES
sre_parse.py(409):     while 1:
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(413):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(199):             try:
sre_parse.py(200):                 c = self.string[self.index + 1]
sre_parse.py(203):             char = char + c
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(414):         if this is None:
sre_parse.py(417):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(428):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(431):         elif this == "[":
sre_parse.py(433):             set = []
sre_parse.py(434):             setappend = set.append
sre_parse.py(437):             if sourcematch("^"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(211):         return 0
sre_parse.py(440):             start = set[:]
sre_parse.py(441):             while 1:
sre_parse.py(442):                 this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(443):                 if this == "]" and set != start:
sre_parse.py(445):                 elif this and this[0] == "\\":
sre_parse.py(446):                     code1 = _class_escape(source, this)
 --- modulename: sre_parse, funcname: _class_escape
sre_parse.py(238):     code = ESCAPES.get(escape)
sre_parse.py(239):     if code:
sre_parse.py(241):     code = CATEGORIES.get(escape)
sre_parse.py(242):     if code and code[0] == IN:
sre_parse.py(243):         return code
sre_parse.py(451):                 if sourcematch("-"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(211):         return 0
sre_parse.py(475):                     if code1[0] is IN:
sre_parse.py(476):                         code1 = code1[1][0]
sre_parse.py(477):                     setappend(code1)
sre_parse.py(442):                 this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(443):                 if this == "]" and set != start:
sre_parse.py(445):                 elif this and this[0] == "\\":
sre_parse.py(447):                 elif this:
sre_parse.py(448):                     code1 = LITERAL, ord(this)
sre_parse.py(451):                 if sourcematch("-"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(211):         return 0
sre_parse.py(475):                     if code1[0] is IN:
sre_parse.py(477):                     setappend(code1)
sre_parse.py(442):                 this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(443):                 if this == "]" and set != start:
sre_parse.py(444):                     break
sre_parse.py(480):             if _len(set)==1 and set[0][0] is LITERAL:
sre_parse.py(482):             elif _len(set)==2 and set[0][0] is NEGATE and set[1][0] is LITERAL:
sre_parse.py(486):                 subpatternappend((IN, set))
 --- modulename: sre_parse, funcname: append
sre_parse.py(150):         self.data.append(code)
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(413):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(414):         if this is None:
sre_parse.py(417):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(428):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(431):         elif this == "[":
sre_parse.py(488):         elif this and this[0] in REPEAT_CHARS:
sre_parse.py(490):             if this == "?":
sre_parse.py(492):             elif this == "*":
sre_parse.py(495):             elif this == "+":
sre_parse.py(496):                 min, max = 1, MAXREPEAT
sre_parse.py(528):             if subpattern:
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(138):         return len(self.data)
sre_parse.py(529):                 item = subpattern[-1:]
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(138):         return len(self.data)
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(143):             return SubPattern(self.pattern, self.data[index])
 --- modulename: sre_parse, funcname: __init__
sre_parse.py(93):         self.pattern = pattern
sre_parse.py(94):         if data is None:
sre_parse.py(96):         self.data = data
sre_parse.py(97):         self.width = None
sre_parse.py(532):             if not item or (_len(item) == 1 and item[0][0] == AT):
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(138):         return len(self.data)
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(138):         return len(self.data)
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_parse.py(534):             if item[0][0] in REPEATCODES:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_parse.py(536):             if sourcematch("?"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(211):         return 0
sre_parse.py(539):                 subpattern[-1] = (MAX_REPEAT, (min, max, item))
 --- modulename: sre_parse, funcname: __setitem__
sre_parse.py(146):         self.data[index] = code
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(412):             break # end of subpattern
sre_parse.py(704):     return subpattern
sre_parse.py(325):         if sourcematch("|"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(211):         return 0
sre_parse.py(327):         if not nested:
sre_parse.py(329):         if not source.next or sourcematch(")", 0):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(208):             if skip:
sre_parse.py(210):             return 1
sre_parse.py(330):             break
sre_parse.py(334):     if len(items) == 1:
sre_parse.py(335):         return items[0]
sre_parse.py(677):                 if not sourcematch(")"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(208):             if skip:
sre_parse.py(209):                 self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(210):             return 1
sre_parse.py(679):                 if group is not None:
sre_parse.py(680):                     state.closegroup(group)
 --- modulename: sre_parse, funcname: closegroup
sre_parse.py(86):         self.open.remove(gid)
sre_parse.py(681):                 subpatternappend((SUBPATTERN, (group, p)))
 --- modulename: sre_parse, funcname: append
sre_parse.py(150):         self.data.append(code)
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(413):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(414):         if this is None:
sre_parse.py(417):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(428):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(431):         elif this == "[":
sre_parse.py(433):             set = []
sre_parse.py(434):             setappend = set.append
sre_parse.py(437):             if sourcematch("^"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(208):             if skip:
sre_parse.py(209):                 self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(210):             return 1
sre_parse.py(438):                 setappend((NEGATE, None))
sre_parse.py(440):             start = set[:]
sre_parse.py(441):             while 1:
sre_parse.py(442):                 this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(443):                 if this == "]" and set != start:
sre_parse.py(445):                 elif this and this[0] == "\\":
sre_parse.py(447):                 elif this:
sre_parse.py(448):                     code1 = LITERAL, ord(this)
sre_parse.py(451):                 if sourcematch("-"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(211):         return 0
sre_parse.py(475):                     if code1[0] is IN:
sre_parse.py(477):                     setappend(code1)
sre_parse.py(442):                 this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(443):                 if this == "]" and set != start:
sre_parse.py(444):                     break
sre_parse.py(480):             if _len(set)==1 and set[0][0] is LITERAL:
sre_parse.py(482):             elif _len(set)==2 and set[0][0] is NEGATE and set[1][0] is LITERAL:
sre_parse.py(483):                 subpatternappend((NOT_LITERAL, set[1][1])) # optimization
 --- modulename: sre_parse, funcname: append
sre_parse.py(150):         self.data.append(code)
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(413):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(414):         if this is None:
sre_parse.py(417):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(428):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(431):         elif this == "[":
sre_parse.py(488):         elif this and this[0] in REPEAT_CHARS:
sre_parse.py(490):             if this == "?":
sre_parse.py(492):             elif this == "*":
sre_parse.py(493):                 min, max = 0, MAXREPEAT
sre_parse.py(528):             if subpattern:
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(138):         return len(self.data)
sre_parse.py(529):                 item = subpattern[-1:]
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(138):         return len(self.data)
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(143):             return SubPattern(self.pattern, self.data[index])
 --- modulename: sre_parse, funcname: __init__
sre_parse.py(93):         self.pattern = pattern
sre_parse.py(94):         if data is None:
sre_parse.py(96):         self.data = data
sre_parse.py(97):         self.width = None
sre_parse.py(532):             if not item or (_len(item) == 1 and item[0][0] == AT):
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(138):         return len(self.data)
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(138):         return len(self.data)
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_parse.py(534):             if item[0][0] in REPEATCODES:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_parse.py(536):             if sourcematch("?"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(211):         return 0
sre_parse.py(539):                 subpattern[-1] = (MAX_REPEAT, (min, max, item))
 --- modulename: sre_parse, funcname: __setitem__
sre_parse.py(146):         self.data[index] = code
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(413):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(414):         if this is None:
sre_parse.py(417):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(428):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(431):         elif this == "[":
sre_parse.py(488):         elif this and this[0] in REPEAT_CHARS:
sre_parse.py(541):         elif this == ".":
sre_parse.py(544):         elif this == "(":
sre_parse.py(545):             group = 1
sre_parse.py(546):             name = None
sre_parse.py(547):             condgroup = None
sre_parse.py(548):             if sourcematch("?"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(208):             if skip:
sre_parse.py(209):                 self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(210):             return 1
sre_parse.py(549):                 group = 0
sre_parse.py(551):                 if sourcematch("P"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(211):         return 0
sre_parse.py(600):                 elif sourcematch(":"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(208):             if skip:
sre_parse.py(209):                 self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(199):             try:
sre_parse.py(200):                 c = self.string[self.index + 1]
sre_parse.py(203):             char = char + c
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(210):             return 1
sre_parse.py(602):                     group = 2
sre_parse.py(666):             if group:
sre_parse.py(668):                 if group == 2:
sre_parse.py(670):                     group = None
sre_parse.py(673):                 if condgroup:
sre_parse.py(676):                     p = _parse_sub(source, state)
 --- modulename: sre_parse, funcname: _parse_sub
sre_parse.py(320):     items = []
sre_parse.py(321):     itemsappend = items.append
sre_parse.py(322):     sourcematch = source.match
sre_parse.py(323):     while 1:
sre_parse.py(324):         itemsappend(_parse(source, state))
 --- modulename: sre_parse, funcname: _parse
sre_parse.py(397):     subpattern = SubPattern(state)
 --- modulename: sre_parse, funcname: __init__
sre_parse.py(93):         self.pattern = pattern
sre_parse.py(94):         if data is None:
sre_parse.py(95):             data = []
sre_parse.py(96):         self.data = data
sre_parse.py(97):         self.width = None
sre_parse.py(400):     subpatternappend = subpattern.append
sre_parse.py(401):     sourceget = source.get
sre_parse.py(402):     sourcematch = source.match
sre_parse.py(403):     _len = len
sre_parse.py(404):     PATTERNENDERS = _PATTERNENDERS
sre_parse.py(405):     ASSERTCHARS = _ASSERTCHARS
sre_parse.py(406):     LOOKBEHINDASSERTCHARS = _LOOKBEHINDASSERTCHARS
sre_parse.py(407):     REPEATCODES = _REPEATCODES
sre_parse.py(409):     while 1:
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(413):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(414):         if this is None:
sre_parse.py(417):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(428):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(431):         elif this == "[":
sre_parse.py(488):         elif this and this[0] in REPEAT_CHARS:
sre_parse.py(541):         elif this == ".":
sre_parse.py(544):         elif this == "(":
sre_parse.py(691):         elif this == "^":
sre_parse.py(694):         elif this == "$":
sre_parse.py(697):         elif this and this[0] == "\\":
sre_parse.py(698):             code = _escape(source, this, state)
 --- modulename: sre_parse, funcname: _escape
sre_parse.py(270):     code = CATEGORIES.get(escape)
sre_parse.py(271):     if code:
sre_parse.py(273):     code = ESCAPES.get(escape)
sre_parse.py(274):     if code:
sre_parse.py(276):     try:
sre_parse.py(277):         c = escape[1:2]
sre_parse.py(278):         if c == "x":
sre_parse.py(285):         elif c == "0":
sre_parse.py(290):         elif c in DIGITS:
sre_parse.py(311):         if len(escape) == 2:
sre_parse.py(312):             return LITERAL, ord(escape[1])
sre_parse.py(699):             subpatternappend(code)
 --- modulename: sre_parse, funcname: append
sre_parse.py(150):         self.data.append(code)
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(413):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(414):         if this is None:
sre_parse.py(417):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(428):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(431):         elif this == "[":
sre_parse.py(488):         elif this and this[0] in REPEAT_CHARS:
sre_parse.py(541):         elif this == ".":
sre_parse.py(544):         elif this == "(":
sre_parse.py(545):             group = 1
sre_parse.py(546):             name = None
sre_parse.py(547):             condgroup = None
sre_parse.py(548):             if sourcematch("?"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(211):         return 0
sre_parse.py(666):             if group:
sre_parse.py(668):                 if group == 2:
sre_parse.py(672):                     group = state.opengroup(name)
 --- modulename: sre_parse, funcname: opengroup
sre_parse.py(75):         gid = self.groups
sre_parse.py(76):         self.groups = gid + 1
sre_parse.py(77):         if name is not None:
sre_parse.py(83):         self.open.append(gid)
sre_parse.py(84):         return gid
sre_parse.py(673):                 if condgroup:
sre_parse.py(676):                     p = _parse_sub(source, state)
 --- modulename: sre_parse, funcname: _parse_sub
sre_parse.py(320):     items = []
sre_parse.py(321):     itemsappend = items.append
sre_parse.py(322):     sourcematch = source.match
sre_parse.py(323):     while 1:
sre_parse.py(324):         itemsappend(_parse(source, state))
 --- modulename: sre_parse, funcname: _parse
sre_parse.py(397):     subpattern = SubPattern(state)
 --- modulename: sre_parse, funcname: __init__
sre_parse.py(93):         self.pattern = pattern
sre_parse.py(94):         if data is None:
sre_parse.py(95):             data = []
sre_parse.py(96):         self.data = data
sre_parse.py(97):         self.width = None
sre_parse.py(400):     subpatternappend = subpattern.append
sre_parse.py(401):     sourceget = source.get
sre_parse.py(402):     sourcematch = source.match
sre_parse.py(403):     _len = len
sre_parse.py(404):     PATTERNENDERS = _PATTERNENDERS
sre_parse.py(405):     ASSERTCHARS = _ASSERTCHARS
sre_parse.py(406):     LOOKBEHINDASSERTCHARS = _LOOKBEHINDASSERTCHARS
sre_parse.py(407):     REPEATCODES = _REPEATCODES
sre_parse.py(409):     while 1:
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(413):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(414):         if this is None:
sre_parse.py(417):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(428):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(431):         elif this == "[":
sre_parse.py(488):         elif this and this[0] in REPEAT_CHARS:
sre_parse.py(541):         elif this == ".":
sre_parse.py(542):             subpatternappend((ANY, None))
 --- modulename: sre_parse, funcname: append
sre_parse.py(150):         self.data.append(code)
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(413):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(414):         if this is None:
sre_parse.py(417):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(428):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(431):         elif this == "[":
sre_parse.py(488):         elif this and this[0] in REPEAT_CHARS:
sre_parse.py(490):             if this == "?":
sre_parse.py(492):             elif this == "*":
sre_parse.py(495):             elif this == "+":
sre_parse.py(496):                 min, max = 1, MAXREPEAT
sre_parse.py(528):             if subpattern:
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(138):         return len(self.data)
sre_parse.py(529):                 item = subpattern[-1:]
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(138):         return len(self.data)
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(143):             return SubPattern(self.pattern, self.data[index])
 --- modulename: sre_parse, funcname: __init__
sre_parse.py(93):         self.pattern = pattern
sre_parse.py(94):         if data is None:
sre_parse.py(96):         self.data = data
sre_parse.py(97):         self.width = None
sre_parse.py(532):             if not item or (_len(item) == 1 and item[0][0] == AT):
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(138):         return len(self.data)
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(138):         return len(self.data)
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_parse.py(534):             if item[0][0] in REPEATCODES:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_parse.py(536):             if sourcematch("?"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(211):         return 0
sre_parse.py(539):                 subpattern[-1] = (MAX_REPEAT, (min, max, item))
 --- modulename: sre_parse, funcname: __setitem__
sre_parse.py(146):         self.data[index] = code
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(412):             break # end of subpattern
sre_parse.py(704):     return subpattern
sre_parse.py(325):         if sourcematch("|"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(211):         return 0
sre_parse.py(327):         if not nested:
sre_parse.py(329):         if not source.next or sourcematch(")", 0):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(208):             if skip:
sre_parse.py(210):             return 1
sre_parse.py(330):             break
sre_parse.py(334):     if len(items) == 1:
sre_parse.py(335):         return items[0]
sre_parse.py(677):                 if not sourcematch(")"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(208):             if skip:
sre_parse.py(209):                 self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(199):             try:
sre_parse.py(200):                 c = self.string[self.index + 1]
sre_parse.py(203):             char = char + c
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(210):             return 1
sre_parse.py(679):                 if group is not None:
sre_parse.py(680):                     state.closegroup(group)
 --- modulename: sre_parse, funcname: closegroup
sre_parse.py(86):         self.open.remove(gid)
sre_parse.py(681):                 subpatternappend((SUBPATTERN, (group, p)))
 --- modulename: sre_parse, funcname: append
sre_parse.py(150):         self.data.append(code)
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(413):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(414):         if this is None:
sre_parse.py(417):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(428):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(431):         elif this == "[":
sre_parse.py(488):         elif this and this[0] in REPEAT_CHARS:
sre_parse.py(541):         elif this == ".":
sre_parse.py(544):         elif this == "(":
sre_parse.py(691):         elif this == "^":
sre_parse.py(694):         elif this == "$":
sre_parse.py(697):         elif this and this[0] == "\\":
sre_parse.py(698):             code = _escape(source, this, state)
 --- modulename: sre_parse, funcname: _escape
sre_parse.py(270):     code = CATEGORIES.get(escape)
sre_parse.py(271):     if code:
sre_parse.py(273):     code = ESCAPES.get(escape)
sre_parse.py(274):     if code:
sre_parse.py(276):     try:
sre_parse.py(277):         c = escape[1:2]
sre_parse.py(278):         if c == "x":
sre_parse.py(285):         elif c == "0":
sre_parse.py(290):         elif c in DIGITS:
sre_parse.py(311):         if len(escape) == 2:
sre_parse.py(312):             return LITERAL, ord(escape[1])
sre_parse.py(699):             subpatternappend(code)
 --- modulename: sre_parse, funcname: append
sre_parse.py(150):         self.data.append(code)
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(412):             break # end of subpattern
sre_parse.py(704):     return subpattern
sre_parse.py(325):         if sourcematch("|"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(211):         return 0
sre_parse.py(327):         if not nested:
sre_parse.py(329):         if not source.next or sourcematch(")", 0):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(208):             if skip:
sre_parse.py(210):             return 1
sre_parse.py(330):             break
sre_parse.py(334):     if len(items) == 1:
sre_parse.py(335):         return items[0]
sre_parse.py(677):                 if not sourcematch(")"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(208):             if skip:
sre_parse.py(209):                 self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(210):             return 1
sre_parse.py(679):                 if group is not None:
sre_parse.py(681):                 subpatternappend((SUBPATTERN, (group, p)))
 --- modulename: sre_parse, funcname: append
sre_parse.py(150):         self.data.append(code)
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(413):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(195):             self.next = None
sre_parse.py(196):             return
sre_parse.py(215):         return this
sre_parse.py(414):         if this is None:
sre_parse.py(417):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(428):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(431):         elif this == "[":
sre_parse.py(488):         elif this and this[0] in REPEAT_CHARS:
sre_parse.py(490):             if this == "?":
sre_parse.py(491):                 min, max = 0, 1
sre_parse.py(528):             if subpattern:
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(138):         return len(self.data)
sre_parse.py(529):                 item = subpattern[-1:]
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(138):         return len(self.data)
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(143):             return SubPattern(self.pattern, self.data[index])
 --- modulename: sre_parse, funcname: __init__
sre_parse.py(93):         self.pattern = pattern
sre_parse.py(94):         if data is None:
sre_parse.py(96):         self.data = data
sre_parse.py(97):         self.width = None
sre_parse.py(532):             if not item or (_len(item) == 1 and item[0][0] == AT):
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(138):         return len(self.data)
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(138):         return len(self.data)
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_parse.py(534):             if item[0][0] in REPEATCODES:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_parse.py(536):             if sourcematch("?"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(211):         return 0
sre_parse.py(539):                 subpattern[-1] = (MAX_REPEAT, (min, max, item))
 --- modulename: sre_parse, funcname: __setitem__
sre_parse.py(146):         self.data[index] = code
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(413):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(195):             self.next = None
sre_parse.py(196):             return
sre_parse.py(215):         return this
sre_parse.py(414):         if this is None:
sre_parse.py(415):             break # end of pattern
sre_parse.py(704):     return subpattern
sre_parse.py(325):         if sourcematch("|"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(211):         return 0
sre_parse.py(327):         if not nested:
sre_parse.py(328):             break
sre_parse.py(334):     if len(items) == 1:
sre_parse.py(335):         return items[0]
sre_parse.py(718):     tail = source.get()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(195):             self.next = None
sre_parse.py(196):             return
sre_parse.py(215):         return this
sre_parse.py(719):     if tail == ")":
sre_parse.py(721):     elif tail:
sre_parse.py(724):     if not (flags & SRE_FLAG_VERBOSE) and p.pattern.flags & SRE_FLAG_VERBOSE:
sre_parse.py(729):     if flags & SRE_FLAG_DEBUG:
sre_parse.py(732):     return p
sre_compile.py(576):     code = _code(p, flags)
 --- modulename: sre_compile, funcname: _code
sre_compile.py(554):     flags = p.pattern.flags | flags
sre_compile.py(555):     code = []
sre_compile.py(558):     _compile_info(code, p, flags)
 --- modulename: sre_compile, funcname: _compile_info
sre_compile.py(437):     lo, hi = pattern.getwidth()
 --- modulename: sre_parse, funcname: getwidth
sre_parse.py(153):         if self.width:
sre_parse.py(155):         lo = hi = 0
sre_parse.py(156):         UNITCODES = (ANY, RANGE, IN, LITERAL, NOT_LITERAL, CATEGORY)
sre_parse.py(157):         REPEATCODES = (MIN_REPEAT, MAX_REPEAT)
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(159):             if op is BRANCH:
sre_parse.py(168):             elif op is CALL:
sre_parse.py(172):             elif op is SUBPATTERN:
sre_parse.py(173):                 i, j = av[1].getwidth()
 --- modulename: sre_parse, funcname: getwidth
sre_parse.py(153):         if self.width:
sre_parse.py(155):         lo = hi = 0
sre_parse.py(156):         UNITCODES = (ANY, RANGE, IN, LITERAL, NOT_LITERAL, CATEGORY)
sre_parse.py(157):         REPEATCODES = (MIN_REPEAT, MAX_REPEAT)
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(159):             if op is BRANCH:
sre_parse.py(168):             elif op is CALL:
sre_parse.py(172):             elif op is SUBPATTERN:
sre_parse.py(176):             elif op in REPEATCODES:
sre_parse.py(177):                 i, j = av[2].getwidth()
 --- modulename: sre_parse, funcname: getwidth
sre_parse.py(153):         if self.width:
sre_parse.py(155):         lo = hi = 0
sre_parse.py(156):         UNITCODES = (ANY, RANGE, IN, LITERAL, NOT_LITERAL, CATEGORY)
sre_parse.py(157):         REPEATCODES = (MIN_REPEAT, MAX_REPEAT)
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(159):             if op is BRANCH:
sre_parse.py(168):             elif op is CALL:
sre_parse.py(172):             elif op is SUBPATTERN:
sre_parse.py(176):             elif op in REPEATCODES:
sre_parse.py(180):             elif op in UNITCODES:
sre_parse.py(181):                 lo = lo + 1
sre_parse.py(182):                 hi = hi + 1
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(185):         self.width = min(lo, MAXREPEAT - 1), min(hi, MAXREPEAT)
sre_parse.py(186):         return self.width
sre_parse.py(178):                 lo = lo + i * av[0]
sre_parse.py(179):                 hi = hi + j * av[1]
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(185):         self.width = min(lo, MAXREPEAT - 1), min(hi, MAXREPEAT)
sre_parse.py(186):         return self.width
sre_parse.py(174):                 lo = lo + i
sre_parse.py(175):                 hi = hi + j
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(159):             if op is BRANCH:
sre_parse.py(168):             elif op is CALL:
sre_parse.py(172):             elif op is SUBPATTERN:
sre_parse.py(176):             elif op in REPEATCODES:
sre_parse.py(177):                 i, j = av[2].getwidth()
 --- modulename: sre_parse, funcname: getwidth
sre_parse.py(153):         if self.width:
sre_parse.py(155):         lo = hi = 0
sre_parse.py(156):         UNITCODES = (ANY, RANGE, IN, LITERAL, NOT_LITERAL, CATEGORY)
sre_parse.py(157):         REPEATCODES = (MIN_REPEAT, MAX_REPEAT)
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(159):             if op is BRANCH:
sre_parse.py(168):             elif op is CALL:
sre_parse.py(172):             elif op is SUBPATTERN:
sre_parse.py(173):                 i, j = av[1].getwidth()
 --- modulename: sre_parse, funcname: getwidth
sre_parse.py(153):         if self.width:
sre_parse.py(155):         lo = hi = 0
sre_parse.py(156):         UNITCODES = (ANY, RANGE, IN, LITERAL, NOT_LITERAL, CATEGORY)
sre_parse.py(157):         REPEATCODES = (MIN_REPEAT, MAX_REPEAT)
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(159):             if op is BRANCH:
sre_parse.py(168):             elif op is CALL:
sre_parse.py(172):             elif op is SUBPATTERN:
sre_parse.py(176):             elif op in REPEATCODES:
sre_parse.py(180):             elif op in UNITCODES:
sre_parse.py(181):                 lo = lo + 1
sre_parse.py(182):                 hi = hi + 1
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(159):             if op is BRANCH:
sre_parse.py(168):             elif op is CALL:
sre_parse.py(172):             elif op is SUBPATTERN:
sre_parse.py(176):             elif op in REPEATCODES:
sre_parse.py(180):             elif op in UNITCODES:
sre_parse.py(181):                 lo = lo + 1
sre_parse.py(182):                 hi = hi + 1
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(159):             if op is BRANCH:
sre_parse.py(168):             elif op is CALL:
sre_parse.py(172):             elif op is SUBPATTERN:
sre_parse.py(176):             elif op in REPEATCODES:
sre_parse.py(180):             elif op in UNITCODES:
sre_parse.py(181):                 lo = lo + 1
sre_parse.py(182):                 hi = hi + 1
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(159):             if op is BRANCH:
sre_parse.py(168):             elif op is CALL:
sre_parse.py(172):             elif op is SUBPATTERN:
sre_parse.py(176):             elif op in REPEATCODES:
sre_parse.py(180):             elif op in UNITCODES:
sre_parse.py(181):                 lo = lo + 1
sre_parse.py(182):                 hi = hi + 1
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(159):             if op is BRANCH:
sre_parse.py(168):             elif op is CALL:
sre_parse.py(172):             elif op is SUBPATTERN:
sre_parse.py(176):             elif op in REPEATCODES:
sre_parse.py(180):             elif op in UNITCODES:
sre_parse.py(181):                 lo = lo + 1
sre_parse.py(182):                 hi = hi + 1
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(159):             if op is BRANCH:
sre_parse.py(168):             elif op is CALL:
sre_parse.py(172):             elif op is SUBPATTERN:
sre_parse.py(176):             elif op in REPEATCODES:
sre_parse.py(180):             elif op in UNITCODES:
sre_parse.py(181):                 lo = lo + 1
sre_parse.py(182):                 hi = hi + 1
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(159):             if op is BRANCH:
sre_parse.py(168):             elif op is CALL:
sre_parse.py(172):             elif op is SUBPATTERN:
sre_parse.py(176):             elif op in REPEATCODES:
sre_parse.py(180):             elif op in UNITCODES:
sre_parse.py(181):                 lo = lo + 1
sre_parse.py(182):                 hi = hi + 1
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(159):             if op is BRANCH:
sre_parse.py(168):             elif op is CALL:
sre_parse.py(172):             elif op is SUBPATTERN:
sre_parse.py(176):             elif op in REPEATCODES:
sre_parse.py(180):             elif op in UNITCODES:
sre_parse.py(181):                 lo = lo + 1
sre_parse.py(182):                 hi = hi + 1
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(159):             if op is BRANCH:
sre_parse.py(168):             elif op is CALL:
sre_parse.py(172):             elif op is SUBPATTERN:
sre_parse.py(176):             elif op in REPEATCODES:
sre_parse.py(180):             elif op in UNITCODES:
sre_parse.py(181):                 lo = lo + 1
sre_parse.py(182):                 hi = hi + 1
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(185):         self.width = min(lo, MAXREPEAT - 1), min(hi, MAXREPEAT)
sre_parse.py(186):         return self.width
sre_parse.py(174):                 lo = lo + i
sre_parse.py(175):                 hi = hi + j
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(185):         self.width = min(lo, MAXREPEAT - 1), min(hi, MAXREPEAT)
sre_parse.py(186):         return self.width
sre_parse.py(178):                 lo = lo + i * av[0]
sre_parse.py(179):                 hi = hi + j * av[1]
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(159):             if op is BRANCH:
sre_parse.py(168):             elif op is CALL:
sre_parse.py(172):             elif op is SUBPATTERN:
sre_parse.py(173):                 i, j = av[1].getwidth()
 --- modulename: sre_parse, funcname: getwidth
sre_parse.py(153):         if self.width:
sre_parse.py(155):         lo = hi = 0
sre_parse.py(156):         UNITCODES = (ANY, RANGE, IN, LITERAL, NOT_LITERAL, CATEGORY)
sre_parse.py(157):         REPEATCODES = (MIN_REPEAT, MAX_REPEAT)
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(159):             if op is BRANCH:
sre_parse.py(168):             elif op is CALL:
sre_parse.py(172):             elif op is SUBPATTERN:
sre_parse.py(176):             elif op in REPEATCODES:
sre_parse.py(177):                 i, j = av[2].getwidth()
 --- modulename: sre_parse, funcname: getwidth
sre_parse.py(153):         if self.width:
sre_parse.py(155):         lo = hi = 0
sre_parse.py(156):         UNITCODES = (ANY, RANGE, IN, LITERAL, NOT_LITERAL, CATEGORY)
sre_parse.py(157):         REPEATCODES = (MIN_REPEAT, MAX_REPEAT)
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(159):             if op is BRANCH:
sre_parse.py(168):             elif op is CALL:
sre_parse.py(172):             elif op is SUBPATTERN:
sre_parse.py(176):             elif op in REPEATCODES:
sre_parse.py(180):             elif op in UNITCODES:
sre_parse.py(181):                 lo = lo + 1
sre_parse.py(182):                 hi = hi + 1
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(185):         self.width = min(lo, MAXREPEAT - 1), min(hi, MAXREPEAT)
sre_parse.py(186):         return self.width
sre_parse.py(178):                 lo = lo + i * av[0]
sre_parse.py(179):                 hi = hi + j * av[1]
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(185):         self.width = min(lo, MAXREPEAT - 1), min(hi, MAXREPEAT)
sre_parse.py(186):         return self.width
sre_parse.py(174):                 lo = lo + i
sre_parse.py(175):                 hi = hi + j
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(159):             if op is BRANCH:
sre_parse.py(168):             elif op is CALL:
sre_parse.py(172):             elif op is SUBPATTERN:
sre_parse.py(176):             elif op in REPEATCODES:
sre_parse.py(177):                 i, j = av[2].getwidth()
 --- modulename: sre_parse, funcname: getwidth
sre_parse.py(153):         if self.width:
sre_parse.py(155):         lo = hi = 0
sre_parse.py(156):         UNITCODES = (ANY, RANGE, IN, LITERAL, NOT_LITERAL, CATEGORY)
sre_parse.py(157):         REPEATCODES = (MIN_REPEAT, MAX_REPEAT)
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(159):             if op is BRANCH:
sre_parse.py(168):             elif op is CALL:
sre_parse.py(172):             elif op is SUBPATTERN:
sre_parse.py(176):             elif op in REPEATCODES:
sre_parse.py(180):             elif op in UNITCODES:
sre_parse.py(181):                 lo = lo + 1
sre_parse.py(182):                 hi = hi + 1
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(185):         self.width = min(lo, MAXREPEAT - 1), min(hi, MAXREPEAT)
sre_parse.py(186):         return self.width
sre_parse.py(178):                 lo = lo + i * av[0]
sre_parse.py(179):                 hi = hi + j * av[1]
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(159):             if op is BRANCH:
sre_parse.py(168):             elif op is CALL:
sre_parse.py(172):             elif op is SUBPATTERN:
sre_parse.py(176):             elif op in REPEATCODES:
sre_parse.py(177):                 i, j = av[2].getwidth()
 --- modulename: sre_parse, funcname: getwidth
sre_parse.py(153):         if self.width:
sre_parse.py(155):         lo = hi = 0
sre_parse.py(156):         UNITCODES = (ANY, RANGE, IN, LITERAL, NOT_LITERAL, CATEGORY)
sre_parse.py(157):         REPEATCODES = (MIN_REPEAT, MAX_REPEAT)
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(159):             if op is BRANCH:
sre_parse.py(168):             elif op is CALL:
sre_parse.py(172):             elif op is SUBPATTERN:
sre_parse.py(173):                 i, j = av[1].getwidth()
 --- modulename: sre_parse, funcname: getwidth
sre_parse.py(153):         if self.width:
sre_parse.py(155):         lo = hi = 0
sre_parse.py(156):         UNITCODES = (ANY, RANGE, IN, LITERAL, NOT_LITERAL, CATEGORY)
sre_parse.py(157):         REPEATCODES = (MIN_REPEAT, MAX_REPEAT)
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(159):             if op is BRANCH:
sre_parse.py(168):             elif op is CALL:
sre_parse.py(172):             elif op is SUBPATTERN:
sre_parse.py(176):             elif op in REPEATCODES:
sre_parse.py(180):             elif op in UNITCODES:
sre_parse.py(181):                 lo = lo + 1
sre_parse.py(182):                 hi = hi + 1
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(159):             if op is BRANCH:
sre_parse.py(168):             elif op is CALL:
sre_parse.py(172):             elif op is SUBPATTERN:
sre_parse.py(173):                 i, j = av[1].getwidth()
 --- modulename: sre_parse, funcname: getwidth
sre_parse.py(153):         if self.width:
sre_parse.py(155):         lo = hi = 0
sre_parse.py(156):         UNITCODES = (ANY, RANGE, IN, LITERAL, NOT_LITERAL, CATEGORY)
sre_parse.py(157):         REPEATCODES = (MIN_REPEAT, MAX_REPEAT)
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(159):             if op is BRANCH:
sre_parse.py(168):             elif op is CALL:
sre_parse.py(172):             elif op is SUBPATTERN:
sre_parse.py(176):             elif op in REPEATCODES:
sre_parse.py(177):                 i, j = av[2].getwidth()
 --- modulename: sre_parse, funcname: getwidth
sre_parse.py(153):         if self.width:
sre_parse.py(155):         lo = hi = 0
sre_parse.py(156):         UNITCODES = (ANY, RANGE, IN, LITERAL, NOT_LITERAL, CATEGORY)
sre_parse.py(157):         REPEATCODES = (MIN_REPEAT, MAX_REPEAT)
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(159):             if op is BRANCH:
sre_parse.py(168):             elif op is CALL:
sre_parse.py(172):             elif op is SUBPATTERN:
sre_parse.py(176):             elif op in REPEATCODES:
sre_parse.py(180):             elif op in UNITCODES:
sre_parse.py(181):                 lo = lo + 1
sre_parse.py(182):                 hi = hi + 1
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(185):         self.width = min(lo, MAXREPEAT - 1), min(hi, MAXREPEAT)
sre_parse.py(186):         return self.width
sre_parse.py(178):                 lo = lo + i * av[0]
sre_parse.py(179):                 hi = hi + j * av[1]
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(185):         self.width = min(lo, MAXREPEAT - 1), min(hi, MAXREPEAT)
sre_parse.py(186):         return self.width
sre_parse.py(174):                 lo = lo + i
sre_parse.py(175):                 hi = hi + j
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(159):             if op is BRANCH:
sre_parse.py(168):             elif op is CALL:
sre_parse.py(172):             elif op is SUBPATTERN:
sre_parse.py(176):             elif op in REPEATCODES:
sre_parse.py(180):             elif op in UNITCODES:
sre_parse.py(181):                 lo = lo + 1
sre_parse.py(182):                 hi = hi + 1
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(185):         self.width = min(lo, MAXREPEAT - 1), min(hi, MAXREPEAT)
sre_parse.py(186):         return self.width
sre_parse.py(174):                 lo = lo + i
sre_parse.py(175):                 hi = hi + j
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(185):         self.width = min(lo, MAXREPEAT - 1), min(hi, MAXREPEAT)
sre_parse.py(186):         return self.width
sre_parse.py(178):                 lo = lo + i * av[0]
sre_parse.py(179):                 hi = hi + j * av[1]
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(185):         self.width = min(lo, MAXREPEAT - 1), min(hi, MAXREPEAT)
sre_parse.py(186):         return self.width
sre_compile.py(438):     if lo == 0:
sre_compile.py(441):     prefix = []
sre_compile.py(442):     prefixappend = prefix.append
sre_compile.py(443):     prefix_skip = 0
sre_compile.py(444):     charset = [] # not used
sre_compile.py(445):     charsetappend = charset.append
sre_compile.py(446):     if not (flags & SRE_FLAG_IGNORECASE):
sre_compile.py(448):         for op, av in pattern.data:
sre_compile.py(449):             if op is LITERAL:
sre_compile.py(453):             elif op is SUBPATTERN and len(av[1]) == 1:
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(138):         return len(self.data)
sre_compile.py(454):                 op, av = av[1][0]
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(455):                 if op is LITERAL:
sre_compile.py(458):                     break
sre_compile.py(462):         if not prefix and pattern.data:
sre_compile.py(463):             op, av = pattern.data[0]
sre_compile.py(464):             if op is SUBPATTERN and av[1]:
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(138):         return len(self.data)
sre_compile.py(465):                 op, av = av[1][0]
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(466):                 if op is LITERAL:
sre_compile.py(468):                 elif op is BRANCH:
sre_compile.py(501):     emit = code.append
sre_compile.py(502):     emit(OPCODES[INFO])
sre_compile.py(503):     skip = len(code); emit(0)
sre_compile.py(505):     mask = 0
sre_compile.py(506):     if prefix:
sre_compile.py(510):     elif charset:
sre_compile.py(512):     emit(mask)
sre_compile.py(514):     if lo < MAXCODE:
sre_compile.py(515):         emit(lo)
sre_compile.py(519):     if hi < MAXCODE:
sre_compile.py(520):         emit(hi)
sre_compile.py(524):     if prefix:
sre_compile.py(535):     elif charset:
sre_compile.py(537):     code[skip] = len(code) - skip
sre_compile.py(561):     _compile(code, p.data, flags)
 --- modulename: sre_compile, funcname: _compile
sre_compile.py(66):     emit = code.append
sre_compile.py(67):     _len = len
sre_compile.py(68):     LITERAL_CODES = _LITERAL_CODES
sre_compile.py(69):     REPEATING_CODES = _REPEATING_CODES
sre_compile.py(70):     SUCCESS_CODES = _SUCCESS_CODES
sre_compile.py(71):     ASSERT_CODES = _ASSERT_CODES
sre_compile.py(72):     if (flags & SRE_FLAG_IGNORECASE and
sre_compile.py(77):         fixes = None
sre_compile.py(78):     for op, av in pattern:
sre_compile.py(79):         if op in LITERAL_CODES:
sre_compile.py(98):         elif op is IN:
sre_compile.py(109):         elif op is ANY:
sre_compile.py(114):         elif op in REPEATING_CODES:
sre_compile.py(146):         elif op is SUBPATTERN:
sre_compile.py(147):             if av[0]:
sre_compile.py(148):                 emit(OPCODES[MARK])
sre_compile.py(149):                 emit((av[0]-1)*2)
sre_compile.py(151):             _compile(code, av[1], flags)
 --- modulename: sre_compile, funcname: _compile
sre_compile.py(66):     emit = code.append
sre_compile.py(67):     _len = len
sre_compile.py(68):     LITERAL_CODES = _LITERAL_CODES
sre_compile.py(69):     REPEATING_CODES = _REPEATING_CODES
sre_compile.py(70):     SUCCESS_CODES = _SUCCESS_CODES
sre_compile.py(71):     ASSERT_CODES = _ASSERT_CODES
sre_compile.py(72):     if (flags & SRE_FLAG_IGNORECASE and
sre_compile.py(77):         fixes = None
sre_compile.py(78):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(79):         if op in LITERAL_CODES:
sre_compile.py(98):         elif op is IN:
sre_compile.py(109):         elif op is ANY:
sre_compile.py(114):         elif op in REPEATING_CODES:
sre_compile.py(115):             if flags & SRE_FLAG_TEMPLATE:
sre_compile.py(124):             elif _simple(av) and op is not REPEAT:
 --- modulename: sre_compile, funcname: _simple
sre_compile.py(430):     lo, hi = av[2].getwidth()
 --- modulename: sre_parse, funcname: getwidth
sre_parse.py(153):         if self.width:
sre_parse.py(154):             return self.width
sre_compile.py(431):     return lo == hi == 1 and av[2][0][0] != SUBPATTERN
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(125):                 if op is MAX_REPEAT:
sre_compile.py(126):                     emit(OPCODES[REPEAT_ONE])
sre_compile.py(129):                 skip = _len(code); emit(0)
sre_compile.py(130):                 emit(av[0])
sre_compile.py(131):                 emit(av[1])
sre_compile.py(132):                 _compile(code, av[2], flags)
 --- modulename: sre_compile, funcname: _compile
sre_compile.py(66):     emit = code.append
sre_compile.py(67):     _len = len
sre_compile.py(68):     LITERAL_CODES = _LITERAL_CODES
sre_compile.py(69):     REPEATING_CODES = _REPEATING_CODES
sre_compile.py(70):     SUCCESS_CODES = _SUCCESS_CODES
sre_compile.py(71):     ASSERT_CODES = _ASSERT_CODES
sre_compile.py(72):     if (flags & SRE_FLAG_IGNORECASE and
sre_compile.py(77):         fixes = None
sre_compile.py(78):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(79):         if op in LITERAL_CODES:
sre_compile.py(98):         elif op is IN:
sre_compile.py(99):             if flags & SRE_FLAG_IGNORECASE:
sre_compile.py(104):                 emit(OPCODES[op])
sre_compile.py(105):                 fixup = None
sre_compile.py(106):             skip = _len(code); emit(0)
sre_compile.py(107):             _compile_charset(av, flags, code, fixup, fixes)
 --- modulename: sre_compile, funcname: _compile_charset
sre_compile.py(230):     emit = code.append
sre_compile.py(231):     for op, av in _optimize_charset(charset, fixup, fixes,
sre_compile.py(232):                                     flags & SRE_FLAG_UNICODE):
 --- modulename: sre_compile, funcname: _optimize_charset
sre_compile.py(258):     out = []
sre_compile.py(259):     tail = []
sre_compile.py(260):     charmap = bytearray(256)
sre_compile.py(261):     for op, av in charset:
sre_compile.py(262):         while True:
sre_compile.py(263):             try:
sre_compile.py(264):                 if op is LITERAL:
sre_compile.py(273):                 elif op is RANGE:
sre_compile.py(286):                 elif op is NEGATE:
sre_compile.py(287):                     out.append((op, av))
sre_compile.py(310):             break
sre_compile.py(261):     for op, av in charset:
sre_compile.py(262):         while True:
sre_compile.py(263):             try:
sre_compile.py(264):                 if op is LITERAL:
sre_compile.py(273):                 elif op is RANGE:
sre_compile.py(274):                     r = range(av[0], av[1]+1)
sre_compile.py(275):                     if fixup:
sre_compile.py(277):                     if fixup and fixes:
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(310):             break
sre_compile.py(261):     for op, av in charset:
sre_compile.py(313):     runs = []
sre_compile.py(314):     q = 0
sre_compile.py(315):     while True:
sre_compile.py(316):         p = charmap.find(b'\1', q)
sre_compile.py(317):         if p < 0:
sre_compile.py(319):         if len(runs) >= 2:
sre_compile.py(322):         q = charmap.find(b'\0', p)
sre_compile.py(323):         if q < 0:
sre_compile.py(326):         runs.append((p, q))
sre_compile.py(315):     while True:
sre_compile.py(316):         p = charmap.find(b'\1', q)
sre_compile.py(317):         if p < 0:
sre_compile.py(318):             break
sre_compile.py(327):     if runs is not None:
sre_compile.py(329):         for p, q in runs:
sre_compile.py(330):             if q - p == 1:
sre_compile.py(333):                 out.append((RANGE, (p, q - 1)))
sre_compile.py(329):         for p, q in runs:
sre_compile.py(334):         out += tail
sre_compile.py(336):         if fixup or len(out) < len(charset):
sre_compile.py(339):         return charset
sre_compile.py(233):         emit(OPCODES[op])
sre_compile.py(234):         if op is NEGATE:
sre_compile.py(235):             pass
sre_compile.py(232):                                     flags & SRE_FLAG_UNICODE):
sre_compile.py(233):         emit(OPCODES[op])
sre_compile.py(234):         if op is NEGATE:
sre_compile.py(236):         elif op is LITERAL:
sre_compile.py(238):         elif op is RANGE:
sre_compile.py(239):             emit(av[0])
sre_compile.py(240):             emit(av[1])
sre_compile.py(232):                                     flags & SRE_FLAG_UNICODE):
sre_compile.py(254):     emit(OPCODES[FAILURE])
sre_compile.py(108):             code[skip] = _len(code) - skip
sre_compile.py(78):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(133):                 emit(OPCODES[SUCCESS])
sre_compile.py(134):                 code[skip] = _len(code) - skip
sre_compile.py(78):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(152):             if av[0]:
sre_compile.py(153):                 emit(OPCODES[MARK])
sre_compile.py(154):                 emit((av[0]-1)*2+1)
sre_compile.py(78):     for op, av in pattern:
sre_compile.py(79):         if op in LITERAL_CODES:
sre_compile.py(98):         elif op is IN:
sre_compile.py(109):         elif op is ANY:
sre_compile.py(114):         elif op in REPEATING_CODES:
sre_compile.py(115):             if flags & SRE_FLAG_TEMPLATE:
sre_compile.py(124):             elif _simple(av) and op is not REPEAT:
 --- modulename: sre_compile, funcname: _simple
sre_compile.py(430):     lo, hi = av[2].getwidth()
 --- modulename: sre_parse, funcname: getwidth
sre_parse.py(153):         if self.width:
sre_parse.py(154):             return self.width
sre_compile.py(431):     return lo == hi == 1 and av[2][0][0] != SUBPATTERN
sre_compile.py(136):                 emit(OPCODES[REPEAT])
sre_compile.py(137):                 skip = _len(code); emit(0)
sre_compile.py(138):                 emit(av[0])
sre_compile.py(139):                 emit(av[1])
sre_compile.py(140):                 _compile(code, av[2], flags)
 --- modulename: sre_compile, funcname: _compile
sre_compile.py(66):     emit = code.append
sre_compile.py(67):     _len = len
sre_compile.py(68):     LITERAL_CODES = _LITERAL_CODES
sre_compile.py(69):     REPEATING_CODES = _REPEATING_CODES
sre_compile.py(70):     SUCCESS_CODES = _SUCCESS_CODES
sre_compile.py(71):     ASSERT_CODES = _ASSERT_CODES
sre_compile.py(72):     if (flags & SRE_FLAG_IGNORECASE and
sre_compile.py(77):         fixes = None
sre_compile.py(78):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(79):         if op in LITERAL_CODES:
sre_compile.py(98):         elif op is IN:
sre_compile.py(109):         elif op is ANY:
sre_compile.py(114):         elif op in REPEATING_CODES:
sre_compile.py(146):         elif op is SUBPATTERN:
sre_compile.py(147):             if av[0]:
sre_compile.py(151):             _compile(code, av[1], flags)
 --- modulename: sre_compile, funcname: _compile
sre_compile.py(66):     emit = code.append
sre_compile.py(67):     _len = len
sre_compile.py(68):     LITERAL_CODES = _LITERAL_CODES
sre_compile.py(69):     REPEATING_CODES = _REPEATING_CODES
sre_compile.py(70):     SUCCESS_CODES = _SUCCESS_CODES
sre_compile.py(71):     ASSERT_CODES = _ASSERT_CODES
sre_compile.py(72):     if (flags & SRE_FLAG_IGNORECASE and
sre_compile.py(77):         fixes = None
sre_compile.py(78):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(79):         if op in LITERAL_CODES:
sre_compile.py(80):             if flags & SRE_FLAG_IGNORECASE:
sre_compile.py(96):                 emit(OPCODES[op])
sre_compile.py(97):                 emit(av)
sre_compile.py(78):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(79):         if op in LITERAL_CODES:
sre_compile.py(80):             if flags & SRE_FLAG_IGNORECASE:
sre_compile.py(96):                 emit(OPCODES[op])
sre_compile.py(97):                 emit(av)
sre_compile.py(78):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(79):         if op in LITERAL_CODES:
sre_compile.py(80):             if flags & SRE_FLAG_IGNORECASE:
sre_compile.py(96):                 emit(OPCODES[op])
sre_compile.py(97):                 emit(av)
sre_compile.py(78):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(79):         if op in LITERAL_CODES:
sre_compile.py(80):             if flags & SRE_FLAG_IGNORECASE:
sre_compile.py(96):                 emit(OPCODES[op])
sre_compile.py(97):                 emit(av)
sre_compile.py(78):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(79):         if op in LITERAL_CODES:
sre_compile.py(80):             if flags & SRE_FLAG_IGNORECASE:
sre_compile.py(96):                 emit(OPCODES[op])
sre_compile.py(97):                 emit(av)
sre_compile.py(78):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(79):         if op in LITERAL_CODES:
sre_compile.py(80):             if flags & SRE_FLAG_IGNORECASE:
sre_compile.py(96):                 emit(OPCODES[op])
sre_compile.py(97):                 emit(av)
sre_compile.py(78):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(79):         if op in LITERAL_CODES:
sre_compile.py(80):             if flags & SRE_FLAG_IGNORECASE:
sre_compile.py(96):                 emit(OPCODES[op])
sre_compile.py(97):                 emit(av)
sre_compile.py(78):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(79):         if op in LITERAL_CODES:
sre_compile.py(80):             if flags & SRE_FLAG_IGNORECASE:
sre_compile.py(96):                 emit(OPCODES[op])
sre_compile.py(97):                 emit(av)
sre_compile.py(78):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(79):         if op in LITERAL_CODES:
sre_compile.py(80):             if flags & SRE_FLAG_IGNORECASE:
sre_compile.py(96):                 emit(OPCODES[op])
sre_compile.py(97):                 emit(av)
sre_compile.py(78):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(152):             if av[0]:
sre_compile.py(78):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(141):                 code[skip] = _len(code) - skip
sre_compile.py(142):                 if op is MAX_REPEAT:
sre_compile.py(143):                     emit(OPCODES[MAX_UNTIL])
sre_compile.py(78):     for op, av in pattern:
sre_compile.py(79):         if op in LITERAL_CODES:
sre_compile.py(98):         elif op is IN:
sre_compile.py(109):         elif op is ANY:
sre_compile.py(114):         elif op in REPEATING_CODES:
sre_compile.py(146):         elif op is SUBPATTERN:
sre_compile.py(147):             if av[0]:
sre_compile.py(148):                 emit(OPCODES[MARK])
sre_compile.py(149):                 emit((av[0]-1)*2)
sre_compile.py(151):             _compile(code, av[1], flags)
 --- modulename: sre_compile, funcname: _compile
sre_compile.py(66):     emit = code.append
sre_compile.py(67):     _len = len
sre_compile.py(68):     LITERAL_CODES = _LITERAL_CODES
sre_compile.py(69):     REPEATING_CODES = _REPEATING_CODES
sre_compile.py(70):     SUCCESS_CODES = _SUCCESS_CODES
sre_compile.py(71):     ASSERT_CODES = _ASSERT_CODES
sre_compile.py(72):     if (flags & SRE_FLAG_IGNORECASE and
sre_compile.py(77):         fixes = None
sre_compile.py(78):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(79):         if op in LITERAL_CODES:
sre_compile.py(98):         elif op is IN:
sre_compile.py(109):         elif op is ANY:
sre_compile.py(114):         elif op in REPEATING_CODES:
sre_compile.py(115):             if flags & SRE_FLAG_TEMPLATE:
sre_compile.py(124):             elif _simple(av) and op is not REPEAT:
 --- modulename: sre_compile, funcname: _simple
sre_compile.py(430):     lo, hi = av[2].getwidth()
 --- modulename: sre_parse, funcname: getwidth
sre_parse.py(153):         if self.width:
sre_parse.py(154):             return self.width
sre_compile.py(431):     return lo == hi == 1 and av[2][0][0] != SUBPATTERN
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(125):                 if op is MAX_REPEAT:
sre_compile.py(126):                     emit(OPCODES[REPEAT_ONE])
sre_compile.py(129):                 skip = _len(code); emit(0)
sre_compile.py(130):                 emit(av[0])
sre_compile.py(131):                 emit(av[1])
sre_compile.py(132):                 _compile(code, av[2], flags)
 --- modulename: sre_compile, funcname: _compile
sre_compile.py(66):     emit = code.append
sre_compile.py(67):     _len = len
sre_compile.py(68):     LITERAL_CODES = _LITERAL_CODES
sre_compile.py(69):     REPEATING_CODES = _REPEATING_CODES
sre_compile.py(70):     SUCCESS_CODES = _SUCCESS_CODES
sre_compile.py(71):     ASSERT_CODES = _ASSERT_CODES
sre_compile.py(72):     if (flags & SRE_FLAG_IGNORECASE and
sre_compile.py(77):         fixes = None
sre_compile.py(78):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(79):         if op in LITERAL_CODES:
sre_compile.py(98):         elif op is IN:
sre_compile.py(99):             if flags & SRE_FLAG_IGNORECASE:
sre_compile.py(104):                 emit(OPCODES[op])
sre_compile.py(105):                 fixup = None
sre_compile.py(106):             skip = _len(code); emit(0)
sre_compile.py(107):             _compile_charset(av, flags, code, fixup, fixes)
 --- modulename: sre_compile, funcname: _compile_charset
sre_compile.py(230):     emit = code.append
sre_compile.py(231):     for op, av in _optimize_charset(charset, fixup, fixes,
sre_compile.py(232):                                     flags & SRE_FLAG_UNICODE):
 --- modulename: sre_compile, funcname: _optimize_charset
sre_compile.py(258):     out = []
sre_compile.py(259):     tail = []
sre_compile.py(260):     charmap = bytearray(256)
sre_compile.py(261):     for op, av in charset:
sre_compile.py(262):         while True:
sre_compile.py(263):             try:
sre_compile.py(264):                 if op is LITERAL:
sre_compile.py(273):                 elif op is RANGE:
sre_compile.py(286):                 elif op is NEGATE:
sre_compile.py(289):                     tail.append((op, av))
sre_compile.py(310):             break
sre_compile.py(261):     for op, av in charset:
sre_compile.py(262):         while True:
sre_compile.py(263):             try:
sre_compile.py(264):                 if op is LITERAL:
sre_compile.py(265):                     if fixup:
sre_compile.py(272):                         charmap[av] = 1
sre_compile.py(310):             break
sre_compile.py(261):     for op, av in charset:
sre_compile.py(313):     runs = []
sre_compile.py(314):     q = 0
sre_compile.py(315):     while True:
sre_compile.py(316):         p = charmap.find(b'\1', q)
sre_compile.py(317):         if p < 0:
sre_compile.py(319):         if len(runs) >= 2:
sre_compile.py(322):         q = charmap.find(b'\0', p)
sre_compile.py(323):         if q < 0:
sre_compile.py(326):         runs.append((p, q))
sre_compile.py(315):     while True:
sre_compile.py(316):         p = charmap.find(b'\1', q)
sre_compile.py(317):         if p < 0:
sre_compile.py(318):             break
sre_compile.py(327):     if runs is not None:
sre_compile.py(329):         for p, q in runs:
sre_compile.py(330):             if q - p == 1:
sre_compile.py(331):                 out.append((LITERAL, p))
sre_compile.py(329):         for p, q in runs:
sre_compile.py(334):         out += tail
sre_compile.py(336):         if fixup or len(out) < len(charset):
sre_compile.py(339):         return charset
sre_compile.py(233):         emit(OPCODES[op])
sre_compile.py(234):         if op is NEGATE:
sre_compile.py(236):         elif op is LITERAL:
sre_compile.py(238):         elif op is RANGE:
sre_compile.py(241):         elif op is CHARSET:
sre_compile.py(243):         elif op is BIGCHARSET:
sre_compile.py(245):         elif op is CATEGORY:
sre_compile.py(246):             if flags & SRE_FLAG_LOCALE:
sre_compile.py(248):             elif flags & SRE_FLAG_UNICODE:
sre_compile.py(251):                 emit(CHCODES[av])
sre_compile.py(232):                                     flags & SRE_FLAG_UNICODE):
sre_compile.py(233):         emit(OPCODES[op])
sre_compile.py(234):         if op is NEGATE:
sre_compile.py(236):         elif op is LITERAL:
sre_compile.py(237):             emit(av)
sre_compile.py(232):                                     flags & SRE_FLAG_UNICODE):
sre_compile.py(254):     emit(OPCODES[FAILURE])
sre_compile.py(108):             code[skip] = _len(code) - skip
sre_compile.py(78):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(133):                 emit(OPCODES[SUCCESS])
sre_compile.py(134):                 code[skip] = _len(code) - skip
sre_compile.py(78):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(152):             if av[0]:
sre_compile.py(153):                 emit(OPCODES[MARK])
sre_compile.py(154):                 emit((av[0]-1)*2+1)
sre_compile.py(78):     for op, av in pattern:
sre_compile.py(79):         if op in LITERAL_CODES:
sre_compile.py(98):         elif op is IN:
sre_compile.py(109):         elif op is ANY:
sre_compile.py(114):         elif op in REPEATING_CODES:
sre_compile.py(115):             if flags & SRE_FLAG_TEMPLATE:
sre_compile.py(124):             elif _simple(av) and op is not REPEAT:
 --- modulename: sre_compile, funcname: _simple
sre_compile.py(430):     lo, hi = av[2].getwidth()
 --- modulename: sre_parse, funcname: getwidth
sre_parse.py(153):         if self.width:
sre_parse.py(154):             return self.width
sre_compile.py(431):     return lo == hi == 1 and av[2][0][0] != SUBPATTERN
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(125):                 if op is MAX_REPEAT:
sre_compile.py(126):                     emit(OPCODES[REPEAT_ONE])
sre_compile.py(129):                 skip = _len(code); emit(0)
sre_compile.py(130):                 emit(av[0])
sre_compile.py(131):                 emit(av[1])
sre_compile.py(132):                 _compile(code, av[2], flags)
 --- modulename: sre_compile, funcname: _compile
sre_compile.py(66):     emit = code.append
sre_compile.py(67):     _len = len
sre_compile.py(68):     LITERAL_CODES = _LITERAL_CODES
sre_compile.py(69):     REPEATING_CODES = _REPEATING_CODES
sre_compile.py(70):     SUCCESS_CODES = _SUCCESS_CODES
sre_compile.py(71):     ASSERT_CODES = _ASSERT_CODES
sre_compile.py(72):     if (flags & SRE_FLAG_IGNORECASE and
sre_compile.py(77):         fixes = None
sre_compile.py(78):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(79):         if op in LITERAL_CODES:
sre_compile.py(80):             if flags & SRE_FLAG_IGNORECASE:
sre_compile.py(96):                 emit(OPCODES[op])
sre_compile.py(97):                 emit(av)
sre_compile.py(78):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(133):                 emit(OPCODES[SUCCESS])
sre_compile.py(134):                 code[skip] = _len(code) - skip
sre_compile.py(78):     for op, av in pattern:
sre_compile.py(79):         if op in LITERAL_CODES:
sre_compile.py(98):         elif op is IN:
sre_compile.py(109):         elif op is ANY:
sre_compile.py(114):         elif op in REPEATING_CODES:
sre_compile.py(115):             if flags & SRE_FLAG_TEMPLATE:
sre_compile.py(124):             elif _simple(av) and op is not REPEAT:
 --- modulename: sre_compile, funcname: _simple
sre_compile.py(430):     lo, hi = av[2].getwidth()
 --- modulename: sre_parse, funcname: getwidth
sre_parse.py(153):         if self.width:
sre_parse.py(154):             return self.width
sre_compile.py(431):     return lo == hi == 1 and av[2][0][0] != SUBPATTERN
sre_compile.py(136):                 emit(OPCODES[REPEAT])
sre_compile.py(137):                 skip = _len(code); emit(0)
sre_compile.py(138):                 emit(av[0])
sre_compile.py(139):                 emit(av[1])
sre_compile.py(140):                 _compile(code, av[2], flags)
 --- modulename: sre_compile, funcname: _compile
sre_compile.py(66):     emit = code.append
sre_compile.py(67):     _len = len
sre_compile.py(68):     LITERAL_CODES = _LITERAL_CODES
sre_compile.py(69):     REPEATING_CODES = _REPEATING_CODES
sre_compile.py(70):     SUCCESS_CODES = _SUCCESS_CODES
sre_compile.py(71):     ASSERT_CODES = _ASSERT_CODES
sre_compile.py(72):     if (flags & SRE_FLAG_IGNORECASE and
sre_compile.py(77):         fixes = None
sre_compile.py(78):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(79):         if op in LITERAL_CODES:
sre_compile.py(98):         elif op is IN:
sre_compile.py(109):         elif op is ANY:
sre_compile.py(114):         elif op in REPEATING_CODES:
sre_compile.py(146):         elif op is SUBPATTERN:
sre_compile.py(147):             if av[0]:
sre_compile.py(151):             _compile(code, av[1], flags)
 --- modulename: sre_compile, funcname: _compile
sre_compile.py(66):     emit = code.append
sre_compile.py(67):     _len = len
sre_compile.py(68):     LITERAL_CODES = _LITERAL_CODES
sre_compile.py(69):     REPEATING_CODES = _REPEATING_CODES
sre_compile.py(70):     SUCCESS_CODES = _SUCCESS_CODES
sre_compile.py(71):     ASSERT_CODES = _ASSERT_CODES
sre_compile.py(72):     if (flags & SRE_FLAG_IGNORECASE and
sre_compile.py(77):         fixes = None
sre_compile.py(78):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(79):         if op in LITERAL_CODES:
sre_compile.py(80):             if flags & SRE_FLAG_IGNORECASE:
sre_compile.py(96):                 emit(OPCODES[op])
sre_compile.py(97):                 emit(av)
sre_compile.py(78):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(79):         if op in LITERAL_CODES:
sre_compile.py(98):         elif op is IN:
sre_compile.py(109):         elif op is ANY:
sre_compile.py(114):         elif op in REPEATING_CODES:
sre_compile.py(146):         elif op is SUBPATTERN:
sre_compile.py(147):             if av[0]:
sre_compile.py(148):                 emit(OPCODES[MARK])
sre_compile.py(149):                 emit((av[0]-1)*2)
sre_compile.py(151):             _compile(code, av[1], flags)
 --- modulename: sre_compile, funcname: _compile
sre_compile.py(66):     emit = code.append
sre_compile.py(67):     _len = len
sre_compile.py(68):     LITERAL_CODES = _LITERAL_CODES
sre_compile.py(69):     REPEATING_CODES = _REPEATING_CODES
sre_compile.py(70):     SUCCESS_CODES = _SUCCESS_CODES
sre_compile.py(71):     ASSERT_CODES = _ASSERT_CODES
sre_compile.py(72):     if (flags & SRE_FLAG_IGNORECASE and
sre_compile.py(77):         fixes = None
sre_compile.py(78):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(79):         if op in LITERAL_CODES:
sre_compile.py(98):         elif op is IN:
sre_compile.py(109):         elif op is ANY:
sre_compile.py(114):         elif op in REPEATING_CODES:
sre_compile.py(115):             if flags & SRE_FLAG_TEMPLATE:
sre_compile.py(124):             elif _simple(av) and op is not REPEAT:
 --- modulename: sre_compile, funcname: _simple
sre_compile.py(430):     lo, hi = av[2].getwidth()
 --- modulename: sre_parse, funcname: getwidth
sre_parse.py(153):         if self.width:
sre_parse.py(154):             return self.width
sre_compile.py(431):     return lo == hi == 1 and av[2][0][0] != SUBPATTERN
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(125):                 if op is MAX_REPEAT:
sre_compile.py(126):                     emit(OPCODES[REPEAT_ONE])
sre_compile.py(129):                 skip = _len(code); emit(0)
sre_compile.py(130):                 emit(av[0])
sre_compile.py(131):                 emit(av[1])
sre_compile.py(132):                 _compile(code, av[2], flags)
 --- modulename: sre_compile, funcname: _compile
sre_compile.py(66):     emit = code.append
sre_compile.py(67):     _len = len
sre_compile.py(68):     LITERAL_CODES = _LITERAL_CODES
sre_compile.py(69):     REPEATING_CODES = _REPEATING_CODES
sre_compile.py(70):     SUCCESS_CODES = _SUCCESS_CODES
sre_compile.py(71):     ASSERT_CODES = _ASSERT_CODES
sre_compile.py(72):     if (flags & SRE_FLAG_IGNORECASE and
sre_compile.py(77):         fixes = None
sre_compile.py(78):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(79):         if op in LITERAL_CODES:
sre_compile.py(98):         elif op is IN:
sre_compile.py(109):         elif op is ANY:
sre_compile.py(110):             if flags & SRE_FLAG_DOTALL:
sre_compile.py(113):                 emit(OPCODES[ANY])
sre_compile.py(78):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(133):                 emit(OPCODES[SUCCESS])
sre_compile.py(134):                 code[skip] = _len(code) - skip
sre_compile.py(78):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(152):             if av[0]:
sre_compile.py(153):                 emit(OPCODES[MARK])
sre_compile.py(154):                 emit((av[0]-1)*2+1)
sre_compile.py(78):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(79):         if op in LITERAL_CODES:
sre_compile.py(80):             if flags & SRE_FLAG_IGNORECASE:
sre_compile.py(96):                 emit(OPCODES[op])
sre_compile.py(97):                 emit(av)
sre_compile.py(78):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(152):             if av[0]:
sre_compile.py(78):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(141):                 code[skip] = _len(code) - skip
sre_compile.py(142):                 if op is MAX_REPEAT:
sre_compile.py(143):                     emit(OPCODES[MAX_UNTIL])
sre_compile.py(78):     for op, av in pattern:
sre_compile.py(563):     code.append(OPCODES[SUCCESS])
sre_compile.py(565):     return code
sre_compile.py(581):     if p.pattern.groups > 100:
sre_compile.py(587):     groupindex = p.pattern.groupdict
sre_compile.py(588):     indexgroup = [None] * p.pattern.groups
sre_compile.py(589):     for k, i in groupindex.items():
sre_compile.py(592):     return _sre.compile(
sre_compile.py(593):         pattern, flags | p.pattern.flags, code,
sre_compile.py(594):         p.pattern.groups-1,
sre_compile.py(595):         groupindex, indexgroup
re.py(252):     if not bypass_cache:
re.py(253):         if len(_cache) >= _MAXCACHE:
re.py(255):         if p.flags & LOCALE:
re.py(260):             loc = None
re.py(261):         _cache[cachekey] = p, loc
re.py(262):     return p
platform.py(264):     'UnitedLinux', 'turbolinux')
platform.py(266): def _parse_release_file(firstline):
platform.py(293): def linux_distribution(distname='', version='', id='',
platform.py(295):                        supported_dists=_supported_dists,
platform.py(296):                        full_distribution_name=1):
platform.py(349): def dist(distname='',version='',id='',
platform.py(351):          supported_dists=_supported_dists):
platform.py(367): class _popen:
 --- modulename: platform, funcname: _popen
platform.py(367): class _popen:
platform.py(377):     """
platform.py(378):     tmpfile = ''
platform.py(379):     pipe = None
platform.py(380):     bufsize = None
platform.py(381):     mode = 'r'
platform.py(383):     def __init__(self,cmd,mode='r',bufsize=None):
platform.py(394):     def read(self):
platform.py(398):     def readlines(self):
platform.py(405):               remove=os.unlink,error=os.error):
platform.py(419):     __del__ = close
platform.py(421): def popen(cmd, mode='r', bufsize=None):
platform.py(454): def _norm_version(version, build=''):
platform.py(471): _ver_output = re.compile(r'(?:([\w ]+) ([\w.]+) '
 --- modulename: re, funcname: compile
re.py(194):     return _compile(pattern, flags)
 --- modulename: re, funcname: _compile
re.py(232):     pattern, flags = key
re.py(233):     bypass_cache = flags & DEBUG
re.py(234):     if not bypass_cache:
re.py(235):         cachekey = (type(key[0]),) + key
re.py(236):         try:
re.py(237):             p, loc = _cache[cachekey]
re.py(240):         except KeyError:
re.py(241):             pass
re.py(242):     if isinstance(pattern, _pattern_type):
re.py(246):     if not sre_compile.isstring(pattern):
 --- modulename: sre_compile, funcname: isstring
sre_compile.py(547):     for tp in STRING_TYPES:
sre_compile.py(548):         if isinstance(obj, tp):
sre_compile.py(549):             return 1
re.py(248):     try:
re.py(249):         p = sre_compile.compile(pattern, flags)
 --- modulename: sre_compile, funcname: compile
sre_compile.py(570):     if isstring(p):
 --- modulename: sre_compile, funcname: isstring
sre_compile.py(547):     for tp in STRING_TYPES:
sre_compile.py(548):         if isinstance(obj, tp):
sre_compile.py(549):             return 1
sre_compile.py(571):         pattern = p
sre_compile.py(572):         p = sre_parse.parse(p, flags)
 --- modulename: sre_parse, funcname: parse
sre_parse.py(709):     source = Tokenizer(str)
 --- modulename: sre_parse, funcname: __init__
sre_parse.py(190):         self.string = string
sre_parse.py(191):         self.index = 0
sre_parse.py(192):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(711):     if pattern is None:
sre_parse.py(712):         pattern = Pattern()
 --- modulename: sre_parse, funcname: __init__
sre_parse.py(68):         self.flags = 0
sre_parse.py(69):         self.open = []
sre_parse.py(70):         self.groups = 1
sre_parse.py(71):         self.groupdict = {}
sre_parse.py(72):         self.lookbehind = 0
sre_parse.py(713):     pattern.flags = flags
sre_parse.py(714):     pattern.str = str
sre_parse.py(716):     p = _parse_sub(source, pattern, 0)
 --- modulename: sre_parse, funcname: _parse_sub
sre_parse.py(320):     items = []
sre_parse.py(321):     itemsappend = items.append
sre_parse.py(322):     sourcematch = source.match
sre_parse.py(323):     while 1:
sre_parse.py(324):         itemsappend(_parse(source, state))
 --- modulename: sre_parse, funcname: _parse
sre_parse.py(397):     subpattern = SubPattern(state)
 --- modulename: sre_parse, funcname: __init__
sre_parse.py(93):         self.pattern = pattern
sre_parse.py(94):         if data is None:
sre_parse.py(95):             data = []
sre_parse.py(96):         self.data = data
sre_parse.py(97):         self.width = None
sre_parse.py(400):     subpatternappend = subpattern.append
sre_parse.py(401):     sourceget = source.get
sre_parse.py(402):     sourcematch = source.match
sre_parse.py(403):     _len = len
sre_parse.py(404):     PATTERNENDERS = _PATTERNENDERS
sre_parse.py(405):     ASSERTCHARS = _ASSERTCHARS
sre_parse.py(406):     LOOKBEHINDASSERTCHARS = _LOOKBEHINDASSERTCHARS
sre_parse.py(407):     REPEATCODES = _REPEATCODES
sre_parse.py(409):     while 1:
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(413):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(414):         if this is None:
sre_parse.py(417):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(428):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(431):         elif this == "[":
sre_parse.py(488):         elif this and this[0] in REPEAT_CHARS:
sre_parse.py(541):         elif this == ".":
sre_parse.py(544):         elif this == "(":
sre_parse.py(545):             group = 1
sre_parse.py(546):             name = None
sre_parse.py(547):             condgroup = None
sre_parse.py(548):             if sourcematch("?"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(208):             if skip:
sre_parse.py(209):                 self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(210):             return 1
sre_parse.py(549):                 group = 0
sre_parse.py(551):                 if sourcematch("P"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(211):         return 0
sre_parse.py(600):                 elif sourcematch(":"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(208):             if skip:
sre_parse.py(209):                 self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(210):             return 1
sre_parse.py(602):                     group = 2
sre_parse.py(666):             if group:
sre_parse.py(668):                 if group == 2:
sre_parse.py(670):                     group = None
sre_parse.py(673):                 if condgroup:
sre_parse.py(676):                     p = _parse_sub(source, state)
 --- modulename: sre_parse, funcname: _parse_sub
sre_parse.py(320):     items = []
sre_parse.py(321):     itemsappend = items.append
sre_parse.py(322):     sourcematch = source.match
sre_parse.py(323):     while 1:
sre_parse.py(324):         itemsappend(_parse(source, state))
 --- modulename: sre_parse, funcname: _parse
sre_parse.py(397):     subpattern = SubPattern(state)
 --- modulename: sre_parse, funcname: __init__
sre_parse.py(93):         self.pattern = pattern
sre_parse.py(94):         if data is None:
sre_parse.py(95):             data = []
sre_parse.py(96):         self.data = data
sre_parse.py(97):         self.width = None
sre_parse.py(400):     subpatternappend = subpattern.append
sre_parse.py(401):     sourceget = source.get
sre_parse.py(402):     sourcematch = source.match
sre_parse.py(403):     _len = len
sre_parse.py(404):     PATTERNENDERS = _PATTERNENDERS
sre_parse.py(405):     ASSERTCHARS = _ASSERTCHARS
sre_parse.py(406):     LOOKBEHINDASSERTCHARS = _LOOKBEHINDASSERTCHARS
sre_parse.py(407):     REPEATCODES = _REPEATCODES
sre_parse.py(409):     while 1:
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(413):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(414):         if this is None:
sre_parse.py(417):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(428):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(431):         elif this == "[":
sre_parse.py(488):         elif this and this[0] in REPEAT_CHARS:
sre_parse.py(541):         elif this == ".":
sre_parse.py(544):         elif this == "(":
sre_parse.py(545):             group = 1
sre_parse.py(546):             name = None
sre_parse.py(547):             condgroup = None
sre_parse.py(548):             if sourcematch("?"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(211):         return 0
sre_parse.py(666):             if group:
sre_parse.py(668):                 if group == 2:
sre_parse.py(672):                     group = state.opengroup(name)
 --- modulename: sre_parse, funcname: opengroup
sre_parse.py(75):         gid = self.groups
sre_parse.py(76):         self.groups = gid + 1
sre_parse.py(77):         if name is not None:
sre_parse.py(83):         self.open.append(gid)
sre_parse.py(84):         return gid
sre_parse.py(673):                 if condgroup:
sre_parse.py(676):                     p = _parse_sub(source, state)
 --- modulename: sre_parse, funcname: _parse_sub
sre_parse.py(320):     items = []
sre_parse.py(321):     itemsappend = items.append
sre_parse.py(322):     sourcematch = source.match
sre_parse.py(323):     while 1:
sre_parse.py(324):         itemsappend(_parse(source, state))
 --- modulename: sre_parse, funcname: _parse
sre_parse.py(397):     subpattern = SubPattern(state)
 --- modulename: sre_parse, funcname: __init__
sre_parse.py(93):         self.pattern = pattern
sre_parse.py(94):         if data is None:
sre_parse.py(95):             data = []
sre_parse.py(96):         self.data = data
sre_parse.py(97):         self.width = None
sre_parse.py(400):     subpatternappend = subpattern.append
sre_parse.py(401):     sourceget = source.get
sre_parse.py(402):     sourcematch = source.match
sre_parse.py(403):     _len = len
sre_parse.py(404):     PATTERNENDERS = _PATTERNENDERS
sre_parse.py(405):     ASSERTCHARS = _ASSERTCHARS
sre_parse.py(406):     LOOKBEHINDASSERTCHARS = _LOOKBEHINDASSERTCHARS
sre_parse.py(407):     REPEATCODES = _REPEATCODES
sre_parse.py(409):     while 1:
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(413):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(199):             try:
sre_parse.py(200):                 c = self.string[self.index + 1]
sre_parse.py(203):             char = char + c
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(414):         if this is None:
sre_parse.py(417):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(428):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(431):         elif this == "[":
sre_parse.py(433):             set = []
sre_parse.py(434):             setappend = set.append
sre_parse.py(437):             if sourcematch("^"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(211):         return 0
sre_parse.py(440):             start = set[:]
sre_parse.py(441):             while 1:
sre_parse.py(442):                 this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(443):                 if this == "]" and set != start:
sre_parse.py(445):                 elif this and this[0] == "\\":
sre_parse.py(446):                     code1 = _class_escape(source, this)
 --- modulename: sre_parse, funcname: _class_escape
sre_parse.py(238):     code = ESCAPES.get(escape)
sre_parse.py(239):     if code:
sre_parse.py(241):     code = CATEGORIES.get(escape)
sre_parse.py(242):     if code and code[0] == IN:
sre_parse.py(243):         return code
sre_parse.py(451):                 if sourcematch("-"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(211):         return 0
sre_parse.py(475):                     if code1[0] is IN:
sre_parse.py(476):                         code1 = code1[1][0]
sre_parse.py(477):                     setappend(code1)
sre_parse.py(442):                 this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(443):                 if this == "]" and set != start:
sre_parse.py(445):                 elif this and this[0] == "\\":
sre_parse.py(447):                 elif this:
sre_parse.py(448):                     code1 = LITERAL, ord(this)
sre_parse.py(451):                 if sourcematch("-"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(211):         return 0
sre_parse.py(475):                     if code1[0] is IN:
sre_parse.py(477):                     setappend(code1)
sre_parse.py(442):                 this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(443):                 if this == "]" and set != start:
sre_parse.py(444):                     break
sre_parse.py(480):             if _len(set)==1 and set[0][0] is LITERAL:
sre_parse.py(482):             elif _len(set)==2 and set[0][0] is NEGATE and set[1][0] is LITERAL:
sre_parse.py(486):                 subpatternappend((IN, set))
 --- modulename: sre_parse, funcname: append
sre_parse.py(150):         self.data.append(code)
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(413):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(414):         if this is None:
sre_parse.py(417):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(428):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(431):         elif this == "[":
sre_parse.py(488):         elif this and this[0] in REPEAT_CHARS:
sre_parse.py(490):             if this == "?":
sre_parse.py(492):             elif this == "*":
sre_parse.py(495):             elif this == "+":
sre_parse.py(496):                 min, max = 1, MAXREPEAT
sre_parse.py(528):             if subpattern:
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(138):         return len(self.data)
sre_parse.py(529):                 item = subpattern[-1:]
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(138):         return len(self.data)
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(143):             return SubPattern(self.pattern, self.data[index])
 --- modulename: sre_parse, funcname: __init__
sre_parse.py(93):         self.pattern = pattern
sre_parse.py(94):         if data is None:
sre_parse.py(96):         self.data = data
sre_parse.py(97):         self.width = None
sre_parse.py(532):             if not item or (_len(item) == 1 and item[0][0] == AT):
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(138):         return len(self.data)
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(138):         return len(self.data)
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_parse.py(534):             if item[0][0] in REPEATCODES:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_parse.py(536):             if sourcematch("?"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(211):         return 0
sre_parse.py(539):                 subpattern[-1] = (MAX_REPEAT, (min, max, item))
 --- modulename: sre_parse, funcname: __setitem__
sre_parse.py(146):         self.data[index] = code
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(412):             break # end of subpattern
sre_parse.py(704):     return subpattern
sre_parse.py(325):         if sourcematch("|"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(211):         return 0
sre_parse.py(327):         if not nested:
sre_parse.py(329):         if not source.next or sourcematch(")", 0):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(208):             if skip:
sre_parse.py(210):             return 1
sre_parse.py(330):             break
sre_parse.py(334):     if len(items) == 1:
sre_parse.py(335):         return items[0]
sre_parse.py(677):                 if not sourcematch(")"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(208):             if skip:
sre_parse.py(209):                 self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(210):             return 1
sre_parse.py(679):                 if group is not None:
sre_parse.py(680):                     state.closegroup(group)
 --- modulename: sre_parse, funcname: closegroup
sre_parse.py(86):         self.open.remove(gid)
sre_parse.py(681):                 subpatternappend((SUBPATTERN, (group, p)))
 --- modulename: sre_parse, funcname: append
sre_parse.py(150):         self.data.append(code)
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(413):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(414):         if this is None:
sre_parse.py(417):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(428):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(429):             subpatternappend((LITERAL, ord(this)))
 --- modulename: sre_parse, funcname: append
sre_parse.py(150):         self.data.append(code)
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(413):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(414):         if this is None:
sre_parse.py(417):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(428):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(431):         elif this == "[":
sre_parse.py(488):         elif this and this[0] in REPEAT_CHARS:
sre_parse.py(541):         elif this == ".":
sre_parse.py(544):         elif this == "(":
sre_parse.py(545):             group = 1
sre_parse.py(546):             name = None
sre_parse.py(547):             condgroup = None
sre_parse.py(548):             if sourcematch("?"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(211):         return 0
sre_parse.py(666):             if group:
sre_parse.py(668):                 if group == 2:
sre_parse.py(672):                     group = state.opengroup(name)
 --- modulename: sre_parse, funcname: opengroup
sre_parse.py(75):         gid = self.groups
sre_parse.py(76):         self.groups = gid + 1
sre_parse.py(77):         if name is not None:
sre_parse.py(83):         self.open.append(gid)
sre_parse.py(84):         return gid
sre_parse.py(673):                 if condgroup:
sre_parse.py(676):                     p = _parse_sub(source, state)
 --- modulename: sre_parse, funcname: _parse_sub
sre_parse.py(320):     items = []
sre_parse.py(321):     itemsappend = items.append
sre_parse.py(322):     sourcematch = source.match
sre_parse.py(323):     while 1:
sre_parse.py(324):         itemsappend(_parse(source, state))
 --- modulename: sre_parse, funcname: _parse
sre_parse.py(397):     subpattern = SubPattern(state)
 --- modulename: sre_parse, funcname: __init__
sre_parse.py(93):         self.pattern = pattern
sre_parse.py(94):         if data is None:
sre_parse.py(95):             data = []
sre_parse.py(96):         self.data = data
sre_parse.py(97):         self.width = None
sre_parse.py(400):     subpatternappend = subpattern.append
sre_parse.py(401):     sourceget = source.get
sre_parse.py(402):     sourcematch = source.match
sre_parse.py(403):     _len = len
sre_parse.py(404):     PATTERNENDERS = _PATTERNENDERS
sre_parse.py(405):     ASSERTCHARS = _ASSERTCHARS
sre_parse.py(406):     LOOKBEHINDASSERTCHARS = _LOOKBEHINDASSERTCHARS
sre_parse.py(407):     REPEATCODES = _REPEATCODES
sre_parse.py(409):     while 1:
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(413):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(199):             try:
sre_parse.py(200):                 c = self.string[self.index + 1]
sre_parse.py(203):             char = char + c
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(414):         if this is None:
sre_parse.py(417):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(428):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(431):         elif this == "[":
sre_parse.py(433):             set = []
sre_parse.py(434):             setappend = set.append
sre_parse.py(437):             if sourcematch("^"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(211):         return 0
sre_parse.py(440):             start = set[:]
sre_parse.py(441):             while 1:
sre_parse.py(442):                 this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(443):                 if this == "]" and set != start:
sre_parse.py(445):                 elif this and this[0] == "\\":
sre_parse.py(446):                     code1 = _class_escape(source, this)
 --- modulename: sre_parse, funcname: _class_escape
sre_parse.py(238):     code = ESCAPES.get(escape)
sre_parse.py(239):     if code:
sre_parse.py(241):     code = CATEGORIES.get(escape)
sre_parse.py(242):     if code and code[0] == IN:
sre_parse.py(243):         return code
sre_parse.py(451):                 if sourcematch("-"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(211):         return 0
sre_parse.py(475):                     if code1[0] is IN:
sre_parse.py(476):                         code1 = code1[1][0]
sre_parse.py(477):                     setappend(code1)
sre_parse.py(442):                 this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(443):                 if this == "]" and set != start:
sre_parse.py(445):                 elif this and this[0] == "\\":
sre_parse.py(447):                 elif this:
sre_parse.py(448):                     code1 = LITERAL, ord(this)
sre_parse.py(451):                 if sourcematch("-"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(211):         return 0
sre_parse.py(475):                     if code1[0] is IN:
sre_parse.py(477):                     setappend(code1)
sre_parse.py(442):                 this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(443):                 if this == "]" and set != start:
sre_parse.py(444):                     break
sre_parse.py(480):             if _len(set)==1 and set[0][0] is LITERAL:
sre_parse.py(482):             elif _len(set)==2 and set[0][0] is NEGATE and set[1][0] is LITERAL:
sre_parse.py(486):                 subpatternappend((IN, set))
 --- modulename: sre_parse, funcname: append
sre_parse.py(150):         self.data.append(code)
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(413):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(414):         if this is None:
sre_parse.py(417):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(428):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(431):         elif this == "[":
sre_parse.py(488):         elif this and this[0] in REPEAT_CHARS:
sre_parse.py(490):             if this == "?":
sre_parse.py(492):             elif this == "*":
sre_parse.py(495):             elif this == "+":
sre_parse.py(496):                 min, max = 1, MAXREPEAT
sre_parse.py(528):             if subpattern:
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(138):         return len(self.data)
sre_parse.py(529):                 item = subpattern[-1:]
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(138):         return len(self.data)
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(143):             return SubPattern(self.pattern, self.data[index])
 --- modulename: sre_parse, funcname: __init__
sre_parse.py(93):         self.pattern = pattern
sre_parse.py(94):         if data is None:
sre_parse.py(96):         self.data = data
sre_parse.py(97):         self.width = None
sre_parse.py(532):             if not item or (_len(item) == 1 and item[0][0] == AT):
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(138):         return len(self.data)
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(138):         return len(self.data)
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_parse.py(534):             if item[0][0] in REPEATCODES:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_parse.py(536):             if sourcematch("?"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(211):         return 0
sre_parse.py(539):                 subpattern[-1] = (MAX_REPEAT, (min, max, item))
 --- modulename: sre_parse, funcname: __setitem__
sre_parse.py(146):         self.data[index] = code
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(412):             break # end of subpattern
sre_parse.py(704):     return subpattern
sre_parse.py(325):         if sourcematch("|"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(211):         return 0
sre_parse.py(327):         if not nested:
sre_parse.py(329):         if not source.next or sourcematch(")", 0):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(208):             if skip:
sre_parse.py(210):             return 1
sre_parse.py(330):             break
sre_parse.py(334):     if len(items) == 1:
sre_parse.py(335):         return items[0]
sre_parse.py(677):                 if not sourcematch(")"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(208):             if skip:
sre_parse.py(209):                 self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(210):             return 1
sre_parse.py(679):                 if group is not None:
sre_parse.py(680):                     state.closegroup(group)
 --- modulename: sre_parse, funcname: closegroup
sre_parse.py(86):         self.open.remove(gid)
sre_parse.py(681):                 subpatternappend((SUBPATTERN, (group, p)))
 --- modulename: sre_parse, funcname: append
sre_parse.py(150):         self.data.append(code)
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(413):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(414):         if this is None:
sre_parse.py(417):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(428):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(429):             subpatternappend((LITERAL, ord(this)))
 --- modulename: sre_parse, funcname: append
sre_parse.py(150):         self.data.append(code)
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(413):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(414):         if this is None:
sre_parse.py(417):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(428):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(431):         elif this == "[":
sre_parse.py(488):         elif this and this[0] in REPEAT_CHARS:
sre_parse.py(541):         elif this == ".":
sre_parse.py(542):             subpatternappend((ANY, None))
 --- modulename: sre_parse, funcname: append
sre_parse.py(150):         self.data.append(code)
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(413):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(199):             try:
sre_parse.py(200):                 c = self.string[self.index + 1]
sre_parse.py(203):             char = char + c
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(414):         if this is None:
sre_parse.py(417):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(428):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(431):         elif this == "[":
sre_parse.py(488):         elif this and this[0] in REPEAT_CHARS:
sre_parse.py(490):             if this == "?":
sre_parse.py(492):             elif this == "*":
sre_parse.py(493):                 min, max = 0, MAXREPEAT
sre_parse.py(528):             if subpattern:
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(138):         return len(self.data)
sre_parse.py(529):                 item = subpattern[-1:]
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(138):         return len(self.data)
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(143):             return SubPattern(self.pattern, self.data[index])
 --- modulename: sre_parse, funcname: __init__
sre_parse.py(93):         self.pattern = pattern
sre_parse.py(94):         if data is None:
sre_parse.py(96):         self.data = data
sre_parse.py(97):         self.width = None
sre_parse.py(532):             if not item or (_len(item) == 1 and item[0][0] == AT):
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(138):         return len(self.data)
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(138):         return len(self.data)
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_parse.py(534):             if item[0][0] in REPEATCODES:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_parse.py(536):             if sourcematch("?"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(211):         return 0
sre_parse.py(539):                 subpattern[-1] = (MAX_REPEAT, (min, max, item))
 --- modulename: sre_parse, funcname: __setitem__
sre_parse.py(146):         self.data[index] = code
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(413):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(414):         if this is None:
sre_parse.py(417):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(428):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(431):         elif this == "[":
sre_parse.py(488):         elif this and this[0] in REPEAT_CHARS:
sre_parse.py(541):         elif this == ".":
sre_parse.py(544):         elif this == "(":
sre_parse.py(691):         elif this == "^":
sre_parse.py(694):         elif this == "$":
sre_parse.py(697):         elif this and this[0] == "\\":
sre_parse.py(698):             code = _escape(source, this, state)
 --- modulename: sre_parse, funcname: _escape
sre_parse.py(270):     code = CATEGORIES.get(escape)
sre_parse.py(271):     if code:
sre_parse.py(273):     code = ESCAPES.get(escape)
sre_parse.py(274):     if code:
sre_parse.py(276):     try:
sre_parse.py(277):         c = escape[1:2]
sre_parse.py(278):         if c == "x":
sre_parse.py(285):         elif c == "0":
sre_parse.py(290):         elif c in DIGITS:
sre_parse.py(311):         if len(escape) == 2:
sre_parse.py(312):             return LITERAL, ord(escape[1])
sre_parse.py(699):             subpatternappend(code)
 --- modulename: sre_parse, funcname: append
sre_parse.py(150):         self.data.append(code)
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(413):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(414):         if this is None:
sre_parse.py(417):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(428):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(431):         elif this == "[":
sre_parse.py(488):         elif this and this[0] in REPEAT_CHARS:
sre_parse.py(541):         elif this == ".":
sre_parse.py(542):             subpatternappend((ANY, None))
 --- modulename: sre_parse, funcname: append
sre_parse.py(150):         self.data.append(code)
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(413):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(414):         if this is None:
sre_parse.py(417):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(428):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(431):         elif this == "[":
sre_parse.py(488):         elif this and this[0] in REPEAT_CHARS:
sre_parse.py(490):             if this == "?":
sre_parse.py(492):             elif this == "*":
sre_parse.py(493):                 min, max = 0, MAXREPEAT
sre_parse.py(528):             if subpattern:
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(138):         return len(self.data)
sre_parse.py(529):                 item = subpattern[-1:]
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(138):         return len(self.data)
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(143):             return SubPattern(self.pattern, self.data[index])
 --- modulename: sre_parse, funcname: __init__
sre_parse.py(93):         self.pattern = pattern
sre_parse.py(94):         if data is None:
sre_parse.py(96):         self.data = data
sre_parse.py(97):         self.width = None
sre_parse.py(532):             if not item or (_len(item) == 1 and item[0][0] == AT):
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(138):         return len(self.data)
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(138):         return len(self.data)
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_parse.py(534):             if item[0][0] in REPEATCODES:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_parse.py(536):             if sourcematch("?"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(211):         return 0
sre_parse.py(539):                 subpattern[-1] = (MAX_REPEAT, (min, max, item))
 --- modulename: sre_parse, funcname: __setitem__
sre_parse.py(146):         self.data[index] = code
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(413):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(414):         if this is None:
sre_parse.py(417):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(428):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(429):             subpatternappend((LITERAL, ord(this)))
 --- modulename: sre_parse, funcname: append
sre_parse.py(150):         self.data.append(code)
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(413):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(414):         if this is None:
sre_parse.py(417):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(428):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(431):         elif this == "[":
sre_parse.py(488):         elif this and this[0] in REPEAT_CHARS:
sre_parse.py(541):         elif this == ".":
sre_parse.py(544):         elif this == "(":
sre_parse.py(545):             group = 1
sre_parse.py(546):             name = None
sre_parse.py(547):             condgroup = None
sre_parse.py(548):             if sourcematch("?"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(211):         return 0
sre_parse.py(666):             if group:
sre_parse.py(668):                 if group == 2:
sre_parse.py(672):                     group = state.opengroup(name)
 --- modulename: sre_parse, funcname: opengroup
sre_parse.py(75):         gid = self.groups
sre_parse.py(76):         self.groups = gid + 1
sre_parse.py(77):         if name is not None:
sre_parse.py(83):         self.open.append(gid)
sre_parse.py(84):         return gid
sre_parse.py(673):                 if condgroup:
sre_parse.py(676):                     p = _parse_sub(source, state)
 --- modulename: sre_parse, funcname: _parse_sub
sre_parse.py(320):     items = []
sre_parse.py(321):     itemsappend = items.append
sre_parse.py(322):     sourcematch = source.match
sre_parse.py(323):     while 1:
sre_parse.py(324):         itemsappend(_parse(source, state))
 --- modulename: sre_parse, funcname: _parse
sre_parse.py(397):     subpattern = SubPattern(state)
 --- modulename: sre_parse, funcname: __init__
sre_parse.py(93):         self.pattern = pattern
sre_parse.py(94):         if data is None:
sre_parse.py(95):             data = []
sre_parse.py(96):         self.data = data
sre_parse.py(97):         self.width = None
sre_parse.py(400):     subpatternappend = subpattern.append
sre_parse.py(401):     sourceget = source.get
sre_parse.py(402):     sourcematch = source.match
sre_parse.py(403):     _len = len
sre_parse.py(404):     PATTERNENDERS = _PATTERNENDERS
sre_parse.py(405):     ASSERTCHARS = _ASSERTCHARS
sre_parse.py(406):     LOOKBEHINDASSERTCHARS = _LOOKBEHINDASSERTCHARS
sre_parse.py(407):     REPEATCODES = _REPEATCODES
sre_parse.py(409):     while 1:
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(413):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(199):             try:
sre_parse.py(200):                 c = self.string[self.index + 1]
sre_parse.py(203):             char = char + c
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(414):         if this is None:
sre_parse.py(417):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(428):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(431):         elif this == "[":
sre_parse.py(433):             set = []
sre_parse.py(434):             setappend = set.append
sre_parse.py(437):             if sourcematch("^"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(211):         return 0
sre_parse.py(440):             start = set[:]
sre_parse.py(441):             while 1:
sre_parse.py(442):                 this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(443):                 if this == "]" and set != start:
sre_parse.py(445):                 elif this and this[0] == "\\":
sre_parse.py(446):                     code1 = _class_escape(source, this)
 --- modulename: sre_parse, funcname: _class_escape
sre_parse.py(238):     code = ESCAPES.get(escape)
sre_parse.py(239):     if code:
sre_parse.py(241):     code = CATEGORIES.get(escape)
sre_parse.py(242):     if code and code[0] == IN:
sre_parse.py(243):         return code
sre_parse.py(451):                 if sourcematch("-"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(211):         return 0
sre_parse.py(475):                     if code1[0] is IN:
sre_parse.py(476):                         code1 = code1[1][0]
sre_parse.py(477):                     setappend(code1)
sre_parse.py(442):                 this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(443):                 if this == "]" and set != start:
sre_parse.py(445):                 elif this and this[0] == "\\":
sre_parse.py(447):                 elif this:
sre_parse.py(448):                     code1 = LITERAL, ord(this)
sre_parse.py(451):                 if sourcematch("-"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(211):         return 0
sre_parse.py(475):                     if code1[0] is IN:
sre_parse.py(477):                     setappend(code1)
sre_parse.py(442):                 this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(443):                 if this == "]" and set != start:
sre_parse.py(444):                     break
sre_parse.py(480):             if _len(set)==1 and set[0][0] is LITERAL:
sre_parse.py(482):             elif _len(set)==2 and set[0][0] is NEGATE and set[1][0] is LITERAL:
sre_parse.py(486):                 subpatternappend((IN, set))
 --- modulename: sre_parse, funcname: append
sre_parse.py(150):         self.data.append(code)
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(413):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(414):         if this is None:
sre_parse.py(417):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(428):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(431):         elif this == "[":
sre_parse.py(488):         elif this and this[0] in REPEAT_CHARS:
sre_parse.py(490):             if this == "?":
sre_parse.py(492):             elif this == "*":
sre_parse.py(495):             elif this == "+":
sre_parse.py(496):                 min, max = 1, MAXREPEAT
sre_parse.py(528):             if subpattern:
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(138):         return len(self.data)
sre_parse.py(529):                 item = subpattern[-1:]
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(138):         return len(self.data)
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(143):             return SubPattern(self.pattern, self.data[index])
 --- modulename: sre_parse, funcname: __init__
sre_parse.py(93):         self.pattern = pattern
sre_parse.py(94):         if data is None:
sre_parse.py(96):         self.data = data
sre_parse.py(97):         self.width = None
sre_parse.py(532):             if not item or (_len(item) == 1 and item[0][0] == AT):
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(138):         return len(self.data)
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(138):         return len(self.data)
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_parse.py(534):             if item[0][0] in REPEATCODES:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_parse.py(536):             if sourcematch("?"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(211):         return 0
sre_parse.py(539):                 subpattern[-1] = (MAX_REPEAT, (min, max, item))
 --- modulename: sre_parse, funcname: __setitem__
sre_parse.py(146):         self.data[index] = code
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(412):             break # end of subpattern
sre_parse.py(704):     return subpattern
sre_parse.py(325):         if sourcematch("|"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(211):         return 0
sre_parse.py(327):         if not nested:
sre_parse.py(329):         if not source.next or sourcematch(")", 0):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(208):             if skip:
sre_parse.py(210):             return 1
sre_parse.py(330):             break
sre_parse.py(334):     if len(items) == 1:
sre_parse.py(335):         return items[0]
sre_parse.py(677):                 if not sourcematch(")"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(208):             if skip:
sre_parse.py(209):                 self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(199):             try:
sre_parse.py(200):                 c = self.string[self.index + 1]
sre_parse.py(203):             char = char + c
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(210):             return 1
sre_parse.py(679):                 if group is not None:
sre_parse.py(680):                     state.closegroup(group)
 --- modulename: sre_parse, funcname: closegroup
sre_parse.py(86):         self.open.remove(gid)
sre_parse.py(681):                 subpatternappend((SUBPATTERN, (group, p)))
 --- modulename: sre_parse, funcname: append
sre_parse.py(150):         self.data.append(code)
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(413):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(414):         if this is None:
sre_parse.py(417):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(428):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(431):         elif this == "[":
sre_parse.py(488):         elif this and this[0] in REPEAT_CHARS:
sre_parse.py(541):         elif this == ".":
sre_parse.py(544):         elif this == "(":
sre_parse.py(691):         elif this == "^":
sre_parse.py(694):         elif this == "$":
sre_parse.py(697):         elif this and this[0] == "\\":
sre_parse.py(698):             code = _escape(source, this, state)
 --- modulename: sre_parse, funcname: _escape
sre_parse.py(270):     code = CATEGORIES.get(escape)
sre_parse.py(271):     if code:
sre_parse.py(273):     code = ESCAPES.get(escape)
sre_parse.py(274):     if code:
sre_parse.py(276):     try:
sre_parse.py(277):         c = escape[1:2]
sre_parse.py(278):         if c == "x":
sre_parse.py(285):         elif c == "0":
sre_parse.py(290):         elif c in DIGITS:
sre_parse.py(311):         if len(escape) == 2:
sre_parse.py(312):             return LITERAL, ord(escape[1])
sre_parse.py(699):             subpatternappend(code)
 --- modulename: sre_parse, funcname: append
sre_parse.py(150):         self.data.append(code)
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(412):             break # end of subpattern
sre_parse.py(704):     return subpattern
sre_parse.py(325):         if sourcematch("|"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(211):         return 0
sre_parse.py(327):         if not nested:
sre_parse.py(329):         if not source.next or sourcematch(")", 0):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(208):             if skip:
sre_parse.py(210):             return 1
sre_parse.py(330):             break
sre_parse.py(334):     if len(items) == 1:
sre_parse.py(335):         return items[0]
sre_parse.py(677):                 if not sourcematch(")"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(208):             if skip:
sre_parse.py(209):                 self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(195):             self.next = None
sre_parse.py(196):             return
sre_parse.py(210):             return 1
sre_parse.py(679):                 if group is not None:
sre_parse.py(681):                 subpatternappend((SUBPATTERN, (group, p)))
 --- modulename: sre_parse, funcname: append
sre_parse.py(150):         self.data.append(code)
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(413):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(195):             self.next = None
sre_parse.py(196):             return
sre_parse.py(215):         return this
sre_parse.py(414):         if this is None:
sre_parse.py(415):             break # end of pattern
sre_parse.py(704):     return subpattern
sre_parse.py(325):         if sourcematch("|"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(211):         return 0
sre_parse.py(327):         if not nested:
sre_parse.py(328):             break
sre_parse.py(334):     if len(items) == 1:
sre_parse.py(335):         return items[0]
sre_parse.py(718):     tail = source.get()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(195):             self.next = None
sre_parse.py(196):             return
sre_parse.py(215):         return this
sre_parse.py(719):     if tail == ")":
sre_parse.py(721):     elif tail:
sre_parse.py(724):     if not (flags & SRE_FLAG_VERBOSE) and p.pattern.flags & SRE_FLAG_VERBOSE:
sre_parse.py(729):     if flags & SRE_FLAG_DEBUG:
sre_parse.py(732):     return p
sre_compile.py(576):     code = _code(p, flags)
 --- modulename: sre_compile, funcname: _code
sre_compile.py(554):     flags = p.pattern.flags | flags
sre_compile.py(555):     code = []
sre_compile.py(558):     _compile_info(code, p, flags)
 --- modulename: sre_compile, funcname: _compile_info
sre_compile.py(437):     lo, hi = pattern.getwidth()
 --- modulename: sre_parse, funcname: getwidth
sre_parse.py(153):         if self.width:
sre_parse.py(155):         lo = hi = 0
sre_parse.py(156):         UNITCODES = (ANY, RANGE, IN, LITERAL, NOT_LITERAL, CATEGORY)
sre_parse.py(157):         REPEATCODES = (MIN_REPEAT, MAX_REPEAT)
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(159):             if op is BRANCH:
sre_parse.py(168):             elif op is CALL:
sre_parse.py(172):             elif op is SUBPATTERN:
sre_parse.py(173):                 i, j = av[1].getwidth()
 --- modulename: sre_parse, funcname: getwidth
sre_parse.py(153):         if self.width:
sre_parse.py(155):         lo = hi = 0
sre_parse.py(156):         UNITCODES = (ANY, RANGE, IN, LITERAL, NOT_LITERAL, CATEGORY)
sre_parse.py(157):         REPEATCODES = (MIN_REPEAT, MAX_REPEAT)
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(159):             if op is BRANCH:
sre_parse.py(168):             elif op is CALL:
sre_parse.py(172):             elif op is SUBPATTERN:
sre_parse.py(173):                 i, j = av[1].getwidth()
 --- modulename: sre_parse, funcname: getwidth
sre_parse.py(153):         if self.width:
sre_parse.py(155):         lo = hi = 0
sre_parse.py(156):         UNITCODES = (ANY, RANGE, IN, LITERAL, NOT_LITERAL, CATEGORY)
sre_parse.py(157):         REPEATCODES = (MIN_REPEAT, MAX_REPEAT)
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(159):             if op is BRANCH:
sre_parse.py(168):             elif op is CALL:
sre_parse.py(172):             elif op is SUBPATTERN:
sre_parse.py(176):             elif op in REPEATCODES:
sre_parse.py(177):                 i, j = av[2].getwidth()
 --- modulename: sre_parse, funcname: getwidth
sre_parse.py(153):         if self.width:
sre_parse.py(155):         lo = hi = 0
sre_parse.py(156):         UNITCODES = (ANY, RANGE, IN, LITERAL, NOT_LITERAL, CATEGORY)
sre_parse.py(157):         REPEATCODES = (MIN_REPEAT, MAX_REPEAT)
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(159):             if op is BRANCH:
sre_parse.py(168):             elif op is CALL:
sre_parse.py(172):             elif op is SUBPATTERN:
sre_parse.py(176):             elif op in REPEATCODES:
sre_parse.py(180):             elif op in UNITCODES:
sre_parse.py(181):                 lo = lo + 1
sre_parse.py(182):                 hi = hi + 1
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(185):         self.width = min(lo, MAXREPEAT - 1), min(hi, MAXREPEAT)
sre_parse.py(186):         return self.width
sre_parse.py(178):                 lo = lo + i * av[0]
sre_parse.py(179):                 hi = hi + j * av[1]
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(185):         self.width = min(lo, MAXREPEAT - 1), min(hi, MAXREPEAT)
sre_parse.py(186):         return self.width
sre_parse.py(174):                 lo = lo + i
sre_parse.py(175):                 hi = hi + j
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(159):             if op is BRANCH:
sre_parse.py(168):             elif op is CALL:
sre_parse.py(172):             elif op is SUBPATTERN:
sre_parse.py(176):             elif op in REPEATCODES:
sre_parse.py(180):             elif op in UNITCODES:
sre_parse.py(181):                 lo = lo + 1
sre_parse.py(182):                 hi = hi + 1
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(159):             if op is BRANCH:
sre_parse.py(168):             elif op is CALL:
sre_parse.py(172):             elif op is SUBPATTERN:
sre_parse.py(173):                 i, j = av[1].getwidth()
 --- modulename: sre_parse, funcname: getwidth
sre_parse.py(153):         if self.width:
sre_parse.py(155):         lo = hi = 0
sre_parse.py(156):         UNITCODES = (ANY, RANGE, IN, LITERAL, NOT_LITERAL, CATEGORY)
sre_parse.py(157):         REPEATCODES = (MIN_REPEAT, MAX_REPEAT)
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(159):             if op is BRANCH:
sre_parse.py(168):             elif op is CALL:
sre_parse.py(172):             elif op is SUBPATTERN:
sre_parse.py(176):             elif op in REPEATCODES:
sre_parse.py(177):                 i, j = av[2].getwidth()
 --- modulename: sre_parse, funcname: getwidth
sre_parse.py(153):         if self.width:
sre_parse.py(155):         lo = hi = 0
sre_parse.py(156):         UNITCODES = (ANY, RANGE, IN, LITERAL, NOT_LITERAL, CATEGORY)
sre_parse.py(157):         REPEATCODES = (MIN_REPEAT, MAX_REPEAT)
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(159):             if op is BRANCH:
sre_parse.py(168):             elif op is CALL:
sre_parse.py(172):             elif op is SUBPATTERN:
sre_parse.py(176):             elif op in REPEATCODES:
sre_parse.py(180):             elif op in UNITCODES:
sre_parse.py(181):                 lo = lo + 1
sre_parse.py(182):                 hi = hi + 1
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(185):         self.width = min(lo, MAXREPEAT - 1), min(hi, MAXREPEAT)
sre_parse.py(186):         return self.width
sre_parse.py(178):                 lo = lo + i * av[0]
sre_parse.py(179):                 hi = hi + j * av[1]
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(185):         self.width = min(lo, MAXREPEAT - 1), min(hi, MAXREPEAT)
sre_parse.py(186):         return self.width
sre_parse.py(174):                 lo = lo + i
sre_parse.py(175):                 hi = hi + j
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(159):             if op is BRANCH:
sre_parse.py(168):             elif op is CALL:
sre_parse.py(172):             elif op is SUBPATTERN:
sre_parse.py(176):             elif op in REPEATCODES:
sre_parse.py(180):             elif op in UNITCODES:
sre_parse.py(181):                 lo = lo + 1
sre_parse.py(182):                 hi = hi + 1
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(159):             if op is BRANCH:
sre_parse.py(168):             elif op is CALL:
sre_parse.py(172):             elif op is SUBPATTERN:
sre_parse.py(176):             elif op in REPEATCODES:
sre_parse.py(177):                 i, j = av[2].getwidth()
 --- modulename: sre_parse, funcname: getwidth
sre_parse.py(153):         if self.width:
sre_parse.py(155):         lo = hi = 0
sre_parse.py(156):         UNITCODES = (ANY, RANGE, IN, LITERAL, NOT_LITERAL, CATEGORY)
sre_parse.py(157):         REPEATCODES = (MIN_REPEAT, MAX_REPEAT)
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(159):             if op is BRANCH:
sre_parse.py(168):             elif op is CALL:
sre_parse.py(172):             elif op is SUBPATTERN:
sre_parse.py(176):             elif op in REPEATCODES:
sre_parse.py(180):             elif op in UNITCODES:
sre_parse.py(181):                 lo = lo + 1
sre_parse.py(182):                 hi = hi + 1
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(185):         self.width = min(lo, MAXREPEAT - 1), min(hi, MAXREPEAT)
sre_parse.py(186):         return self.width
sre_parse.py(178):                 lo = lo + i * av[0]
sre_parse.py(179):                 hi = hi + j * av[1]
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(159):             if op is BRANCH:
sre_parse.py(168):             elif op is CALL:
sre_parse.py(172):             elif op is SUBPATTERN:
sre_parse.py(176):             elif op in REPEATCODES:
sre_parse.py(180):             elif op in UNITCODES:
sre_parse.py(181):                 lo = lo + 1
sre_parse.py(182):                 hi = hi + 1
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(159):             if op is BRANCH:
sre_parse.py(168):             elif op is CALL:
sre_parse.py(172):             elif op is SUBPATTERN:
sre_parse.py(176):             elif op in REPEATCODES:
sre_parse.py(177):                 i, j = av[2].getwidth()
 --- modulename: sre_parse, funcname: getwidth
sre_parse.py(153):         if self.width:
sre_parse.py(155):         lo = hi = 0
sre_parse.py(156):         UNITCODES = (ANY, RANGE, IN, LITERAL, NOT_LITERAL, CATEGORY)
sre_parse.py(157):         REPEATCODES = (MIN_REPEAT, MAX_REPEAT)
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(159):             if op is BRANCH:
sre_parse.py(168):             elif op is CALL:
sre_parse.py(172):             elif op is SUBPATTERN:
sre_parse.py(176):             elif op in REPEATCODES:
sre_parse.py(180):             elif op in UNITCODES:
sre_parse.py(181):                 lo = lo + 1
sre_parse.py(182):                 hi = hi + 1
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(185):         self.width = min(lo, MAXREPEAT - 1), min(hi, MAXREPEAT)
sre_parse.py(186):         return self.width
sre_parse.py(178):                 lo = lo + i * av[0]
sre_parse.py(179):                 hi = hi + j * av[1]
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(159):             if op is BRANCH:
sre_parse.py(168):             elif op is CALL:
sre_parse.py(172):             elif op is SUBPATTERN:
sre_parse.py(176):             elif op in REPEATCODES:
sre_parse.py(180):             elif op in UNITCODES:
sre_parse.py(181):                 lo = lo + 1
sre_parse.py(182):                 hi = hi + 1
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(159):             if op is BRANCH:
sre_parse.py(168):             elif op is CALL:
sre_parse.py(172):             elif op is SUBPATTERN:
sre_parse.py(173):                 i, j = av[1].getwidth()
 --- modulename: sre_parse, funcname: getwidth
sre_parse.py(153):         if self.width:
sre_parse.py(155):         lo = hi = 0
sre_parse.py(156):         UNITCODES = (ANY, RANGE, IN, LITERAL, NOT_LITERAL, CATEGORY)
sre_parse.py(157):         REPEATCODES = (MIN_REPEAT, MAX_REPEAT)
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(159):             if op is BRANCH:
sre_parse.py(168):             elif op is CALL:
sre_parse.py(172):             elif op is SUBPATTERN:
sre_parse.py(176):             elif op in REPEATCODES:
sre_parse.py(177):                 i, j = av[2].getwidth()
 --- modulename: sre_parse, funcname: getwidth
sre_parse.py(153):         if self.width:
sre_parse.py(155):         lo = hi = 0
sre_parse.py(156):         UNITCODES = (ANY, RANGE, IN, LITERAL, NOT_LITERAL, CATEGORY)
sre_parse.py(157):         REPEATCODES = (MIN_REPEAT, MAX_REPEAT)
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(159):             if op is BRANCH:
sre_parse.py(168):             elif op is CALL:
sre_parse.py(172):             elif op is SUBPATTERN:
sre_parse.py(176):             elif op in REPEATCODES:
sre_parse.py(180):             elif op in UNITCODES:
sre_parse.py(181):                 lo = lo + 1
sre_parse.py(182):                 hi = hi + 1
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(185):         self.width = min(lo, MAXREPEAT - 1), min(hi, MAXREPEAT)
sre_parse.py(186):         return self.width
sre_parse.py(178):                 lo = lo + i * av[0]
sre_parse.py(179):                 hi = hi + j * av[1]
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(185):         self.width = min(lo, MAXREPEAT - 1), min(hi, MAXREPEAT)
sre_parse.py(186):         return self.width
sre_parse.py(174):                 lo = lo + i
sre_parse.py(175):                 hi = hi + j
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(159):             if op is BRANCH:
sre_parse.py(168):             elif op is CALL:
sre_parse.py(172):             elif op is SUBPATTERN:
sre_parse.py(176):             elif op in REPEATCODES:
sre_parse.py(180):             elif op in UNITCODES:
sre_parse.py(181):                 lo = lo + 1
sre_parse.py(182):                 hi = hi + 1
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(185):         self.width = min(lo, MAXREPEAT - 1), min(hi, MAXREPEAT)
sre_parse.py(186):         return self.width
sre_parse.py(174):                 lo = lo + i
sre_parse.py(175):                 hi = hi + j
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(185):         self.width = min(lo, MAXREPEAT - 1), min(hi, MAXREPEAT)
sre_parse.py(186):         return self.width
sre_compile.py(438):     if lo == 0:
sre_compile.py(441):     prefix = []
sre_compile.py(442):     prefixappend = prefix.append
sre_compile.py(443):     prefix_skip = 0
sre_compile.py(444):     charset = [] # not used
sre_compile.py(445):     charsetappend = charset.append
sre_compile.py(446):     if not (flags & SRE_FLAG_IGNORECASE):
sre_compile.py(448):         for op, av in pattern.data:
sre_compile.py(449):             if op is LITERAL:
sre_compile.py(453):             elif op is SUBPATTERN and len(av[1]) == 1:
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(138):         return len(self.data)
sre_compile.py(460):                 break
sre_compile.py(462):         if not prefix and pattern.data:
sre_compile.py(463):             op, av = pattern.data[0]
sre_compile.py(464):             if op is SUBPATTERN and av[1]:
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(138):         return len(self.data)
sre_compile.py(465):                 op, av = av[1][0]
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(466):                 if op is LITERAL:
sre_compile.py(468):                 elif op is BRANCH:
sre_compile.py(501):     emit = code.append
sre_compile.py(502):     emit(OPCODES[INFO])
sre_compile.py(503):     skip = len(code); emit(0)
sre_compile.py(505):     mask = 0
sre_compile.py(506):     if prefix:
sre_compile.py(510):     elif charset:
sre_compile.py(512):     emit(mask)
sre_compile.py(514):     if lo < MAXCODE:
sre_compile.py(515):         emit(lo)
sre_compile.py(519):     if hi < MAXCODE:
sre_compile.py(520):         emit(hi)
sre_compile.py(524):     if prefix:
sre_compile.py(535):     elif charset:
sre_compile.py(537):     code[skip] = len(code) - skip
sre_compile.py(561):     _compile(code, p.data, flags)
 --- modulename: sre_compile, funcname: _compile
sre_compile.py(66):     emit = code.append
sre_compile.py(67):     _len = len
sre_compile.py(68):     LITERAL_CODES = _LITERAL_CODES
sre_compile.py(69):     REPEATING_CODES = _REPEATING_CODES
sre_compile.py(70):     SUCCESS_CODES = _SUCCESS_CODES
sre_compile.py(71):     ASSERT_CODES = _ASSERT_CODES
sre_compile.py(72):     if (flags & SRE_FLAG_IGNORECASE and
sre_compile.py(77):         fixes = None
sre_compile.py(78):     for op, av in pattern:
sre_compile.py(79):         if op in LITERAL_CODES:
sre_compile.py(98):         elif op is IN:
sre_compile.py(109):         elif op is ANY:
sre_compile.py(114):         elif op in REPEATING_CODES:
sre_compile.py(146):         elif op is SUBPATTERN:
sre_compile.py(147):             if av[0]:
sre_compile.py(151):             _compile(code, av[1], flags)
 --- modulename: sre_compile, funcname: _compile
sre_compile.py(66):     emit = code.append
sre_compile.py(67):     _len = len
sre_compile.py(68):     LITERAL_CODES = _LITERAL_CODES
sre_compile.py(69):     REPEATING_CODES = _REPEATING_CODES
sre_compile.py(70):     SUCCESS_CODES = _SUCCESS_CODES
sre_compile.py(71):     ASSERT_CODES = _ASSERT_CODES
sre_compile.py(72):     if (flags & SRE_FLAG_IGNORECASE and
sre_compile.py(77):         fixes = None
sre_compile.py(78):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(79):         if op in LITERAL_CODES:
sre_compile.py(98):         elif op is IN:
sre_compile.py(109):         elif op is ANY:
sre_compile.py(114):         elif op in REPEATING_CODES:
sre_compile.py(146):         elif op is SUBPATTERN:
sre_compile.py(147):             if av[0]:
sre_compile.py(148):                 emit(OPCODES[MARK])
sre_compile.py(149):                 emit((av[0]-1)*2)
sre_compile.py(151):             _compile(code, av[1], flags)
 --- modulename: sre_compile, funcname: _compile
sre_compile.py(66):     emit = code.append
sre_compile.py(67):     _len = len
sre_compile.py(68):     LITERAL_CODES = _LITERAL_CODES
sre_compile.py(69):     REPEATING_CODES = _REPEATING_CODES
sre_compile.py(70):     SUCCESS_CODES = _SUCCESS_CODES
sre_compile.py(71):     ASSERT_CODES = _ASSERT_CODES
sre_compile.py(72):     if (flags & SRE_FLAG_IGNORECASE and
sre_compile.py(77):         fixes = None
sre_compile.py(78):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(79):         if op in LITERAL_CODES:
sre_compile.py(98):         elif op is IN:
sre_compile.py(109):         elif op is ANY:
sre_compile.py(114):         elif op in REPEATING_CODES:
sre_compile.py(115):             if flags & SRE_FLAG_TEMPLATE:
sre_compile.py(124):             elif _simple(av) and op is not REPEAT:
 --- modulename: sre_compile, funcname: _simple
sre_compile.py(430):     lo, hi = av[2].getwidth()
 --- modulename: sre_parse, funcname: getwidth
sre_parse.py(153):         if self.width:
sre_parse.py(154):             return self.width
sre_compile.py(431):     return lo == hi == 1 and av[2][0][0] != SUBPATTERN
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(125):                 if op is MAX_REPEAT:
sre_compile.py(126):                     emit(OPCODES[REPEAT_ONE])
sre_compile.py(129):                 skip = _len(code); emit(0)
sre_compile.py(130):                 emit(av[0])
sre_compile.py(131):                 emit(av[1])
sre_compile.py(132):                 _compile(code, av[2], flags)
 --- modulename: sre_compile, funcname: _compile
sre_compile.py(66):     emit = code.append
sre_compile.py(67):     _len = len
sre_compile.py(68):     LITERAL_CODES = _LITERAL_CODES
sre_compile.py(69):     REPEATING_CODES = _REPEATING_CODES
sre_compile.py(70):     SUCCESS_CODES = _SUCCESS_CODES
sre_compile.py(71):     ASSERT_CODES = _ASSERT_CODES
sre_compile.py(72):     if (flags & SRE_FLAG_IGNORECASE and
sre_compile.py(77):         fixes = None
sre_compile.py(78):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(79):         if op in LITERAL_CODES:
sre_compile.py(98):         elif op is IN:
sre_compile.py(99):             if flags & SRE_FLAG_IGNORECASE:
sre_compile.py(104):                 emit(OPCODES[op])
sre_compile.py(105):                 fixup = None
sre_compile.py(106):             skip = _len(code); emit(0)
sre_compile.py(107):             _compile_charset(av, flags, code, fixup, fixes)
 --- modulename: sre_compile, funcname: _compile_charset
sre_compile.py(230):     emit = code.append
sre_compile.py(231):     for op, av in _optimize_charset(charset, fixup, fixes,
sre_compile.py(232):                                     flags & SRE_FLAG_UNICODE):
 --- modulename: sre_compile, funcname: _optimize_charset
sre_compile.py(258):     out = []
sre_compile.py(259):     tail = []
sre_compile.py(260):     charmap = bytearray(256)
sre_compile.py(261):     for op, av in charset:
sre_compile.py(262):         while True:
sre_compile.py(263):             try:
sre_compile.py(264):                 if op is LITERAL:
sre_compile.py(273):                 elif op is RANGE:
sre_compile.py(286):                 elif op is NEGATE:
sre_compile.py(289):                     tail.append((op, av))
sre_compile.py(310):             break
sre_compile.py(261):     for op, av in charset:
sre_compile.py(262):         while True:
sre_compile.py(263):             try:
sre_compile.py(264):                 if op is LITERAL:
sre_compile.py(265):                     if fixup:
sre_compile.py(272):                         charmap[av] = 1
sre_compile.py(310):             break
sre_compile.py(261):     for op, av in charset:
sre_compile.py(313):     runs = []
sre_compile.py(314):     q = 0
sre_compile.py(315):     while True:
sre_compile.py(316):         p = charmap.find(b'\1', q)
sre_compile.py(317):         if p < 0:
sre_compile.py(319):         if len(runs) >= 2:
sre_compile.py(322):         q = charmap.find(b'\0', p)
sre_compile.py(323):         if q < 0:
sre_compile.py(326):         runs.append((p, q))
sre_compile.py(315):     while True:
sre_compile.py(316):         p = charmap.find(b'\1', q)
sre_compile.py(317):         if p < 0:
sre_compile.py(318):             break
sre_compile.py(327):     if runs is not None:
sre_compile.py(329):         for p, q in runs:
sre_compile.py(330):             if q - p == 1:
sre_compile.py(331):                 out.append((LITERAL, p))
sre_compile.py(329):         for p, q in runs:
sre_compile.py(334):         out += tail
sre_compile.py(336):         if fixup or len(out) < len(charset):
sre_compile.py(339):         return charset
sre_compile.py(233):         emit(OPCODES[op])
sre_compile.py(234):         if op is NEGATE:
sre_compile.py(236):         elif op is LITERAL:
sre_compile.py(238):         elif op is RANGE:
sre_compile.py(241):         elif op is CHARSET:
sre_compile.py(243):         elif op is BIGCHARSET:
sre_compile.py(245):         elif op is CATEGORY:
sre_compile.py(246):             if flags & SRE_FLAG_LOCALE:
sre_compile.py(248):             elif flags & SRE_FLAG_UNICODE:
sre_compile.py(251):                 emit(CHCODES[av])
sre_compile.py(232):                                     flags & SRE_FLAG_UNICODE):
sre_compile.py(233):         emit(OPCODES[op])
sre_compile.py(234):         if op is NEGATE:
sre_compile.py(236):         elif op is LITERAL:
sre_compile.py(237):             emit(av)
sre_compile.py(232):                                     flags & SRE_FLAG_UNICODE):
sre_compile.py(254):     emit(OPCODES[FAILURE])
sre_compile.py(108):             code[skip] = _len(code) - skip
sre_compile.py(78):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(133):                 emit(OPCODES[SUCCESS])
sre_compile.py(134):                 code[skip] = _len(code) - skip
sre_compile.py(78):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(152):             if av[0]:
sre_compile.py(153):                 emit(OPCODES[MARK])
sre_compile.py(154):                 emit((av[0]-1)*2+1)
sre_compile.py(78):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(79):         if op in LITERAL_CODES:
sre_compile.py(80):             if flags & SRE_FLAG_IGNORECASE:
sre_compile.py(96):                 emit(OPCODES[op])
sre_compile.py(97):                 emit(av)
sre_compile.py(78):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(79):         if op in LITERAL_CODES:
sre_compile.py(98):         elif op is IN:
sre_compile.py(109):         elif op is ANY:
sre_compile.py(114):         elif op in REPEATING_CODES:
sre_compile.py(146):         elif op is SUBPATTERN:
sre_compile.py(147):             if av[0]:
sre_compile.py(148):                 emit(OPCODES[MARK])
sre_compile.py(149):                 emit((av[0]-1)*2)
sre_compile.py(151):             _compile(code, av[1], flags)
 --- modulename: sre_compile, funcname: _compile
sre_compile.py(66):     emit = code.append
sre_compile.py(67):     _len = len
sre_compile.py(68):     LITERAL_CODES = _LITERAL_CODES
sre_compile.py(69):     REPEATING_CODES = _REPEATING_CODES
sre_compile.py(70):     SUCCESS_CODES = _SUCCESS_CODES
sre_compile.py(71):     ASSERT_CODES = _ASSERT_CODES
sre_compile.py(72):     if (flags & SRE_FLAG_IGNORECASE and
sre_compile.py(77):         fixes = None
sre_compile.py(78):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(79):         if op in LITERAL_CODES:
sre_compile.py(98):         elif op is IN:
sre_compile.py(109):         elif op is ANY:
sre_compile.py(114):         elif op in REPEATING_CODES:
sre_compile.py(115):             if flags & SRE_FLAG_TEMPLATE:
sre_compile.py(124):             elif _simple(av) and op is not REPEAT:
 --- modulename: sre_compile, funcname: _simple
sre_compile.py(430):     lo, hi = av[2].getwidth()
 --- modulename: sre_parse, funcname: getwidth
sre_parse.py(153):         if self.width:
sre_parse.py(154):             return self.width
sre_compile.py(431):     return lo == hi == 1 and av[2][0][0] != SUBPATTERN
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(125):                 if op is MAX_REPEAT:
sre_compile.py(126):                     emit(OPCODES[REPEAT_ONE])
sre_compile.py(129):                 skip = _len(code); emit(0)
sre_compile.py(130):                 emit(av[0])
sre_compile.py(131):                 emit(av[1])
sre_compile.py(132):                 _compile(code, av[2], flags)
 --- modulename: sre_compile, funcname: _compile
sre_compile.py(66):     emit = code.append
sre_compile.py(67):     _len = len
sre_compile.py(68):     LITERAL_CODES = _LITERAL_CODES
sre_compile.py(69):     REPEATING_CODES = _REPEATING_CODES
sre_compile.py(70):     SUCCESS_CODES = _SUCCESS_CODES
sre_compile.py(71):     ASSERT_CODES = _ASSERT_CODES
sre_compile.py(72):     if (flags & SRE_FLAG_IGNORECASE and
sre_compile.py(77):         fixes = None
sre_compile.py(78):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(79):         if op in LITERAL_CODES:
sre_compile.py(98):         elif op is IN:
sre_compile.py(99):             if flags & SRE_FLAG_IGNORECASE:
sre_compile.py(104):                 emit(OPCODES[op])
sre_compile.py(105):                 fixup = None
sre_compile.py(106):             skip = _len(code); emit(0)
sre_compile.py(107):             _compile_charset(av, flags, code, fixup, fixes)
 --- modulename: sre_compile, funcname: _compile_charset
sre_compile.py(230):     emit = code.append
sre_compile.py(231):     for op, av in _optimize_charset(charset, fixup, fixes,
sre_compile.py(232):                                     flags & SRE_FLAG_UNICODE):
 --- modulename: sre_compile, funcname: _optimize_charset
sre_compile.py(258):     out = []
sre_compile.py(259):     tail = []
sre_compile.py(260):     charmap = bytearray(256)
sre_compile.py(261):     for op, av in charset:
sre_compile.py(262):         while True:
sre_compile.py(263):             try:
sre_compile.py(264):                 if op is LITERAL:
sre_compile.py(273):                 elif op is RANGE:
sre_compile.py(286):                 elif op is NEGATE:
sre_compile.py(289):                     tail.append((op, av))
sre_compile.py(310):             break
sre_compile.py(261):     for op, av in charset:
sre_compile.py(262):         while True:
sre_compile.py(263):             try:
sre_compile.py(264):                 if op is LITERAL:
sre_compile.py(265):                     if fixup:
sre_compile.py(272):                         charmap[av] = 1
sre_compile.py(310):             break
sre_compile.py(261):     for op, av in charset:
sre_compile.py(313):     runs = []
sre_compile.py(314):     q = 0
sre_compile.py(315):     while True:
sre_compile.py(316):         p = charmap.find(b'\1', q)
sre_compile.py(317):         if p < 0:
sre_compile.py(319):         if len(runs) >= 2:
sre_compile.py(322):         q = charmap.find(b'\0', p)
sre_compile.py(323):         if q < 0:
sre_compile.py(326):         runs.append((p, q))
sre_compile.py(315):     while True:
sre_compile.py(316):         p = charmap.find(b'\1', q)
sre_compile.py(317):         if p < 0:
sre_compile.py(318):             break
sre_compile.py(327):     if runs is not None:
sre_compile.py(329):         for p, q in runs:
sre_compile.py(330):             if q - p == 1:
sre_compile.py(331):                 out.append((LITERAL, p))
sre_compile.py(329):         for p, q in runs:
sre_compile.py(334):         out += tail
sre_compile.py(336):         if fixup or len(out) < len(charset):
sre_compile.py(339):         return charset
sre_compile.py(233):         emit(OPCODES[op])
sre_compile.py(234):         if op is NEGATE:
sre_compile.py(236):         elif op is LITERAL:
sre_compile.py(238):         elif op is RANGE:
sre_compile.py(241):         elif op is CHARSET:
sre_compile.py(243):         elif op is BIGCHARSET:
sre_compile.py(245):         elif op is CATEGORY:
sre_compile.py(246):             if flags & SRE_FLAG_LOCALE:
sre_compile.py(248):             elif flags & SRE_FLAG_UNICODE:
sre_compile.py(251):                 emit(CHCODES[av])
sre_compile.py(232):                                     flags & SRE_FLAG_UNICODE):
sre_compile.py(233):         emit(OPCODES[op])
sre_compile.py(234):         if op is NEGATE:
sre_compile.py(236):         elif op is LITERAL:
sre_compile.py(237):             emit(av)
sre_compile.py(232):                                     flags & SRE_FLAG_UNICODE):
sre_compile.py(254):     emit(OPCODES[FAILURE])
sre_compile.py(108):             code[skip] = _len(code) - skip
sre_compile.py(78):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(133):                 emit(OPCODES[SUCCESS])
sre_compile.py(134):                 code[skip] = _len(code) - skip
sre_compile.py(78):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(152):             if av[0]:
sre_compile.py(153):                 emit(OPCODES[MARK])
sre_compile.py(154):                 emit((av[0]-1)*2+1)
sre_compile.py(78):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(79):         if op in LITERAL_CODES:
sre_compile.py(80):             if flags & SRE_FLAG_IGNORECASE:
sre_compile.py(96):                 emit(OPCODES[op])
sre_compile.py(97):                 emit(av)
sre_compile.py(78):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(79):         if op in LITERAL_CODES:
sre_compile.py(98):         elif op is IN:
sre_compile.py(109):         elif op is ANY:
sre_compile.py(114):         elif op in REPEATING_CODES:
sre_compile.py(115):             if flags & SRE_FLAG_TEMPLATE:
sre_compile.py(124):             elif _simple(av) and op is not REPEAT:
 --- modulename: sre_compile, funcname: _simple
sre_compile.py(430):     lo, hi = av[2].getwidth()
 --- modulename: sre_parse, funcname: getwidth
sre_parse.py(153):         if self.width:
sre_parse.py(154):             return self.width
sre_compile.py(431):     return lo == hi == 1 and av[2][0][0] != SUBPATTERN
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(125):                 if op is MAX_REPEAT:
sre_compile.py(126):                     emit(OPCODES[REPEAT_ONE])
sre_compile.py(129):                 skip = _len(code); emit(0)
sre_compile.py(130):                 emit(av[0])
sre_compile.py(131):                 emit(av[1])
sre_compile.py(132):                 _compile(code, av[2], flags)
 --- modulename: sre_compile, funcname: _compile
sre_compile.py(66):     emit = code.append
sre_compile.py(67):     _len = len
sre_compile.py(68):     LITERAL_CODES = _LITERAL_CODES
sre_compile.py(69):     REPEATING_CODES = _REPEATING_CODES
sre_compile.py(70):     SUCCESS_CODES = _SUCCESS_CODES
sre_compile.py(71):     ASSERT_CODES = _ASSERT_CODES
sre_compile.py(72):     if (flags & SRE_FLAG_IGNORECASE and
sre_compile.py(77):         fixes = None
sre_compile.py(78):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(79):         if op in LITERAL_CODES:
sre_compile.py(98):         elif op is IN:
sre_compile.py(109):         elif op is ANY:
sre_compile.py(110):             if flags & SRE_FLAG_DOTALL:
sre_compile.py(113):                 emit(OPCODES[ANY])
sre_compile.py(78):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(133):                 emit(OPCODES[SUCCESS])
sre_compile.py(134):                 code[skip] = _len(code) - skip
sre_compile.py(78):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(79):         if op in LITERAL_CODES:
sre_compile.py(80):             if flags & SRE_FLAG_IGNORECASE:
sre_compile.py(96):                 emit(OPCODES[op])
sre_compile.py(97):                 emit(av)
sre_compile.py(78):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(79):         if op in LITERAL_CODES:
sre_compile.py(98):         elif op is IN:
sre_compile.py(109):         elif op is ANY:
sre_compile.py(114):         elif op in REPEATING_CODES:
sre_compile.py(115):             if flags & SRE_FLAG_TEMPLATE:
sre_compile.py(124):             elif _simple(av) and op is not REPEAT:
 --- modulename: sre_compile, funcname: _simple
sre_compile.py(430):     lo, hi = av[2].getwidth()
 --- modulename: sre_parse, funcname: getwidth
sre_parse.py(153):         if self.width:
sre_parse.py(154):             return self.width
sre_compile.py(431):     return lo == hi == 1 and av[2][0][0] != SUBPATTERN
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(125):                 if op is MAX_REPEAT:
sre_compile.py(126):                     emit(OPCODES[REPEAT_ONE])
sre_compile.py(129):                 skip = _len(code); emit(0)
sre_compile.py(130):                 emit(av[0])
sre_compile.py(131):                 emit(av[1])
sre_compile.py(132):                 _compile(code, av[2], flags)
 --- modulename: sre_compile, funcname: _compile
sre_compile.py(66):     emit = code.append
sre_compile.py(67):     _len = len
sre_compile.py(68):     LITERAL_CODES = _LITERAL_CODES
sre_compile.py(69):     REPEATING_CODES = _REPEATING_CODES
sre_compile.py(70):     SUCCESS_CODES = _SUCCESS_CODES
sre_compile.py(71):     ASSERT_CODES = _ASSERT_CODES
sre_compile.py(72):     if (flags & SRE_FLAG_IGNORECASE and
sre_compile.py(77):         fixes = None
sre_compile.py(78):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(79):         if op in LITERAL_CODES:
sre_compile.py(98):         elif op is IN:
sre_compile.py(109):         elif op is ANY:
sre_compile.py(110):             if flags & SRE_FLAG_DOTALL:
sre_compile.py(113):                 emit(OPCODES[ANY])
sre_compile.py(78):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(133):                 emit(OPCODES[SUCCESS])
sre_compile.py(134):                 code[skip] = _len(code) - skip
sre_compile.py(78):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(79):         if op in LITERAL_CODES:
sre_compile.py(80):             if flags & SRE_FLAG_IGNORECASE:
sre_compile.py(96):                 emit(OPCODES[op])
sre_compile.py(97):                 emit(av)
sre_compile.py(78):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(79):         if op in LITERAL_CODES:
sre_compile.py(98):         elif op is IN:
sre_compile.py(109):         elif op is ANY:
sre_compile.py(114):         elif op in REPEATING_CODES:
sre_compile.py(146):         elif op is SUBPATTERN:
sre_compile.py(147):             if av[0]:
sre_compile.py(148):                 emit(OPCODES[MARK])
sre_compile.py(149):                 emit((av[0]-1)*2)
sre_compile.py(151):             _compile(code, av[1], flags)
 --- modulename: sre_compile, funcname: _compile
sre_compile.py(66):     emit = code.append
sre_compile.py(67):     _len = len
sre_compile.py(68):     LITERAL_CODES = _LITERAL_CODES
sre_compile.py(69):     REPEATING_CODES = _REPEATING_CODES
sre_compile.py(70):     SUCCESS_CODES = _SUCCESS_CODES
sre_compile.py(71):     ASSERT_CODES = _ASSERT_CODES
sre_compile.py(72):     if (flags & SRE_FLAG_IGNORECASE and
sre_compile.py(77):         fixes = None
sre_compile.py(78):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(79):         if op in LITERAL_CODES:
sre_compile.py(98):         elif op is IN:
sre_compile.py(109):         elif op is ANY:
sre_compile.py(114):         elif op in REPEATING_CODES:
sre_compile.py(115):             if flags & SRE_FLAG_TEMPLATE:
sre_compile.py(124):             elif _simple(av) and op is not REPEAT:
 --- modulename: sre_compile, funcname: _simple
sre_compile.py(430):     lo, hi = av[2].getwidth()
 --- modulename: sre_parse, funcname: getwidth
sre_parse.py(153):         if self.width:
sre_parse.py(154):             return self.width
sre_compile.py(431):     return lo == hi == 1 and av[2][0][0] != SUBPATTERN
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(125):                 if op is MAX_REPEAT:
sre_compile.py(126):                     emit(OPCODES[REPEAT_ONE])
sre_compile.py(129):                 skip = _len(code); emit(0)
sre_compile.py(130):                 emit(av[0])
sre_compile.py(131):                 emit(av[1])
sre_compile.py(132):                 _compile(code, av[2], flags)
 --- modulename: sre_compile, funcname: _compile
sre_compile.py(66):     emit = code.append
sre_compile.py(67):     _len = len
sre_compile.py(68):     LITERAL_CODES = _LITERAL_CODES
sre_compile.py(69):     REPEATING_CODES = _REPEATING_CODES
sre_compile.py(70):     SUCCESS_CODES = _SUCCESS_CODES
sre_compile.py(71):     ASSERT_CODES = _ASSERT_CODES
sre_compile.py(72):     if (flags & SRE_FLAG_IGNORECASE and
sre_compile.py(77):         fixes = None
sre_compile.py(78):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(79):         if op in LITERAL_CODES:
sre_compile.py(98):         elif op is IN:
sre_compile.py(99):             if flags & SRE_FLAG_IGNORECASE:
sre_compile.py(104):                 emit(OPCODES[op])
sre_compile.py(105):                 fixup = None
sre_compile.py(106):             skip = _len(code); emit(0)
sre_compile.py(107):             _compile_charset(av, flags, code, fixup, fixes)
 --- modulename: sre_compile, funcname: _compile_charset
sre_compile.py(230):     emit = code.append
sre_compile.py(231):     for op, av in _optimize_charset(charset, fixup, fixes,
sre_compile.py(232):                                     flags & SRE_FLAG_UNICODE):
 --- modulename: sre_compile, funcname: _optimize_charset
sre_compile.py(258):     out = []
sre_compile.py(259):     tail = []
sre_compile.py(260):     charmap = bytearray(256)
sre_compile.py(261):     for op, av in charset:
sre_compile.py(262):         while True:
sre_compile.py(263):             try:
sre_compile.py(264):                 if op is LITERAL:
sre_compile.py(273):                 elif op is RANGE:
sre_compile.py(286):                 elif op is NEGATE:
sre_compile.py(289):                     tail.append((op, av))
sre_compile.py(310):             break
sre_compile.py(261):     for op, av in charset:
sre_compile.py(262):         while True:
sre_compile.py(263):             try:
sre_compile.py(264):                 if op is LITERAL:
sre_compile.py(265):                     if fixup:
sre_compile.py(272):                         charmap[av] = 1
sre_compile.py(310):             break
sre_compile.py(261):     for op, av in charset:
sre_compile.py(313):     runs = []
sre_compile.py(314):     q = 0
sre_compile.py(315):     while True:
sre_compile.py(316):         p = charmap.find(b'\1', q)
sre_compile.py(317):         if p < 0:
sre_compile.py(319):         if len(runs) >= 2:
sre_compile.py(322):         q = charmap.find(b'\0', p)
sre_compile.py(323):         if q < 0:
sre_compile.py(326):         runs.append((p, q))
sre_compile.py(315):     while True:
sre_compile.py(316):         p = charmap.find(b'\1', q)
sre_compile.py(317):         if p < 0:
sre_compile.py(318):             break
sre_compile.py(327):     if runs is not None:
sre_compile.py(329):         for p, q in runs:
sre_compile.py(330):             if q - p == 1:
sre_compile.py(331):                 out.append((LITERAL, p))
sre_compile.py(329):         for p, q in runs:
sre_compile.py(334):         out += tail
sre_compile.py(336):         if fixup or len(out) < len(charset):
sre_compile.py(339):         return charset
sre_compile.py(233):         emit(OPCODES[op])
sre_compile.py(234):         if op is NEGATE:
sre_compile.py(236):         elif op is LITERAL:
sre_compile.py(238):         elif op is RANGE:
sre_compile.py(241):         elif op is CHARSET:
sre_compile.py(243):         elif op is BIGCHARSET:
sre_compile.py(245):         elif op is CATEGORY:
sre_compile.py(246):             if flags & SRE_FLAG_LOCALE:
sre_compile.py(248):             elif flags & SRE_FLAG_UNICODE:
sre_compile.py(251):                 emit(CHCODES[av])
sre_compile.py(232):                                     flags & SRE_FLAG_UNICODE):
sre_compile.py(233):         emit(OPCODES[op])
sre_compile.py(234):         if op is NEGATE:
sre_compile.py(236):         elif op is LITERAL:
sre_compile.py(237):             emit(av)
sre_compile.py(232):                                     flags & SRE_FLAG_UNICODE):
sre_compile.py(254):     emit(OPCODES[FAILURE])
sre_compile.py(108):             code[skip] = _len(code) - skip
sre_compile.py(78):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(133):                 emit(OPCODES[SUCCESS])
sre_compile.py(134):                 code[skip] = _len(code) - skip
sre_compile.py(78):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(152):             if av[0]:
sre_compile.py(153):                 emit(OPCODES[MARK])
sre_compile.py(154):                 emit((av[0]-1)*2+1)
sre_compile.py(78):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(79):         if op in LITERAL_CODES:
sre_compile.py(80):             if flags & SRE_FLAG_IGNORECASE:
sre_compile.py(96):                 emit(OPCODES[op])
sre_compile.py(97):                 emit(av)
sre_compile.py(78):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(152):             if av[0]:
sre_compile.py(78):     for op, av in pattern:
sre_compile.py(563):     code.append(OPCODES[SUCCESS])
sre_compile.py(565):     return code
sre_compile.py(581):     if p.pattern.groups > 100:
sre_compile.py(587):     groupindex = p.pattern.groupdict
sre_compile.py(588):     indexgroup = [None] * p.pattern.groups
sre_compile.py(589):     for k, i in groupindex.items():
sre_compile.py(592):     return _sre.compile(
sre_compile.py(593):         pattern, flags | p.pattern.flags, code,
sre_compile.py(594):         p.pattern.groups-1,
sre_compile.py(595):         groupindex, indexgroup
re.py(252):     if not bypass_cache:
re.py(253):         if len(_cache) >= _MAXCACHE:
re.py(255):         if p.flags & LOCALE:
re.py(260):             loc = None
re.py(261):         _cache[cachekey] = p, loc
re.py(262):     return p
platform.py(484): def _syscmd_ver(system='', release='', version='',
platform.py(486):                supported_platforms=('win32','win16','dos','os2')):
platform.py(536): _WIN32_CLIENT_RELEASES = {
platform.py(537):     (5, 0): "2000",
platform.py(538):     (5, 1): "XP",
platform.py(541):     (5, 2): "2003Server",
platform.py(542):     (5, None): "post2003",
platform.py(544):     (6, 0): "Vista",
platform.py(545):     (6, 1): "7",
platform.py(546):     (6, 2): "8",
platform.py(547):     (6, 3): "8.1",
platform.py(548):     (6, None): "post8.1",
platform.py(550):     (10, 0): "10",
platform.py(551):     (10, None): "post10",
platform.py(555): _WIN32_SERVER_RELEASES = {
platform.py(556):     (5, 2): "2003Server",
platform.py(558):     (6, 0): "2008Server",
platform.py(559):     (6, 1): "2008ServerR2",
platform.py(560):     (6, 2): "2012Server",
platform.py(561):     (6, 3): "2012ServerR2",
platform.py(562):     (6, None): "post2012ServerR2",
platform.py(565): def _get_real_winver(maj, min, build):
platform.py(624): def win32_ver(release='', version='', csd='', ptype=''):
platform.py(671): def _mac_ver_lookup(selectors,default=None):
platform.py(684): def _bcd2str(bcd):
platform.py(688): def _mac_ver_gestalt():
platform.py(729): def _mac_ver_xml():
platform.py(750): def mac_ver(release='',versioninfo=('','',''),machine=''):
platform.py(775): def _java_getprop(name,default):
platform.py(786): def java_ver(release='',vendor='',vminfo=('','',''),osinfo=('','','')):
platform.py(821): def system_alias(system,release,version):
platform.py(875): def _platform(*args):
platform.py(911): def _node(default=''):
platform.py(927): if not hasattr(os.path,'abspath'):
platform.py(940):     _abspath = os.path.abspath
platform.py(942): def _follow_symlinks(filepath):
platform.py(953): def _syscmd_uname(option,default=''):
platform.py(971): def _syscmd_file(target,default=''):
platform.py(1022): _default_architecture = {
platform.py(1023):     'win32': ('','WindowsPE'),
platform.py(1024):     'win16': ('','Windows'),
platform.py(1025):     'dos': ('','MSDOS'),
platform.py(1028): _architecture_split = re.compile(r'[\s,]').split
 --- modulename: re, funcname: compile
re.py(194):     return _compile(pattern, flags)
 --- modulename: re, funcname: _compile
re.py(232):     pattern, flags = key
re.py(233):     bypass_cache = flags & DEBUG
re.py(234):     if not bypass_cache:
re.py(235):         cachekey = (type(key[0]),) + key
re.py(236):         try:
re.py(237):             p, loc = _cache[cachekey]
re.py(240):         except KeyError:
re.py(241):             pass
re.py(242):     if isinstance(pattern, _pattern_type):
re.py(246):     if not sre_compile.isstring(pattern):
 --- modulename: sre_compile, funcname: isstring
sre_compile.py(547):     for tp in STRING_TYPES:
sre_compile.py(548):         if isinstance(obj, tp):
sre_compile.py(549):             return 1
re.py(248):     try:
re.py(249):         p = sre_compile.compile(pattern, flags)
 --- modulename: sre_compile, funcname: compile
sre_compile.py(570):     if isstring(p):
 --- modulename: sre_compile, funcname: isstring
sre_compile.py(547):     for tp in STRING_TYPES:
sre_compile.py(548):         if isinstance(obj, tp):
sre_compile.py(549):             return 1
sre_compile.py(571):         pattern = p
sre_compile.py(572):         p = sre_parse.parse(p, flags)
 --- modulename: sre_parse, funcname: parse
sre_parse.py(709):     source = Tokenizer(str)
 --- modulename: sre_parse, funcname: __init__
sre_parse.py(190):         self.string = string
sre_parse.py(191):         self.index = 0
sre_parse.py(192):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(711):     if pattern is None:
sre_parse.py(712):         pattern = Pattern()
 --- modulename: sre_parse, funcname: __init__
sre_parse.py(68):         self.flags = 0
sre_parse.py(69):         self.open = []
sre_parse.py(70):         self.groups = 1
sre_parse.py(71):         self.groupdict = {}
sre_parse.py(72):         self.lookbehind = 0
sre_parse.py(713):     pattern.flags = flags
sre_parse.py(714):     pattern.str = str
sre_parse.py(716):     p = _parse_sub(source, pattern, 0)
 --- modulename: sre_parse, funcname: _parse_sub
sre_parse.py(320):     items = []
sre_parse.py(321):     itemsappend = items.append
sre_parse.py(322):     sourcematch = source.match
sre_parse.py(323):     while 1:
sre_parse.py(324):         itemsappend(_parse(source, state))
 --- modulename: sre_parse, funcname: _parse
sre_parse.py(397):     subpattern = SubPattern(state)
 --- modulename: sre_parse, funcname: __init__
sre_parse.py(93):         self.pattern = pattern
sre_parse.py(94):         if data is None:
sre_parse.py(95):             data = []
sre_parse.py(96):         self.data = data
sre_parse.py(97):         self.width = None
sre_parse.py(400):     subpatternappend = subpattern.append
sre_parse.py(401):     sourceget = source.get
sre_parse.py(402):     sourcematch = source.match
sre_parse.py(403):     _len = len
sre_parse.py(404):     PATTERNENDERS = _PATTERNENDERS
sre_parse.py(405):     ASSERTCHARS = _ASSERTCHARS
sre_parse.py(406):     LOOKBEHINDASSERTCHARS = _LOOKBEHINDASSERTCHARS
sre_parse.py(407):     REPEATCODES = _REPEATCODES
sre_parse.py(409):     while 1:
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(413):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(199):             try:
sre_parse.py(200):                 c = self.string[self.index + 1]
sre_parse.py(203):             char = char + c
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(414):         if this is None:
sre_parse.py(417):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(428):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(431):         elif this == "[":
sre_parse.py(433):             set = []
sre_parse.py(434):             setappend = set.append
sre_parse.py(437):             if sourcematch("^"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(211):         return 0
sre_parse.py(440):             start = set[:]
sre_parse.py(441):             while 1:
sre_parse.py(442):                 this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(443):                 if this == "]" and set != start:
sre_parse.py(445):                 elif this and this[0] == "\\":
sre_parse.py(446):                     code1 = _class_escape(source, this)
 --- modulename: sre_parse, funcname: _class_escape
sre_parse.py(238):     code = ESCAPES.get(escape)
sre_parse.py(239):     if code:
sre_parse.py(241):     code = CATEGORIES.get(escape)
sre_parse.py(242):     if code and code[0] == IN:
sre_parse.py(243):         return code
sre_parse.py(451):                 if sourcematch("-"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(211):         return 0
sre_parse.py(475):                     if code1[0] is IN:
sre_parse.py(476):                         code1 = code1[1][0]
sre_parse.py(477):                     setappend(code1)
sre_parse.py(442):                 this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(443):                 if this == "]" and set != start:
sre_parse.py(445):                 elif this and this[0] == "\\":
sre_parse.py(447):                 elif this:
sre_parse.py(448):                     code1 = LITERAL, ord(this)
sre_parse.py(451):                 if sourcematch("-"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(211):         return 0
sre_parse.py(475):                     if code1[0] is IN:
sre_parse.py(477):                     setappend(code1)
sre_parse.py(442):                 this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(195):             self.next = None
sre_parse.py(196):             return
sre_parse.py(215):         return this
sre_parse.py(443):                 if this == "]" and set != start:
sre_parse.py(444):                     break
sre_parse.py(480):             if _len(set)==1 and set[0][0] is LITERAL:
sre_parse.py(482):             elif _len(set)==2 and set[0][0] is NEGATE and set[1][0] is LITERAL:
sre_parse.py(486):                 subpatternappend((IN, set))
 --- modulename: sre_parse, funcname: append
sre_parse.py(150):         self.data.append(code)
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(413):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(195):             self.next = None
sre_parse.py(196):             return
sre_parse.py(215):         return this
sre_parse.py(414):         if this is None:
sre_parse.py(415):             break # end of pattern
sre_parse.py(704):     return subpattern
sre_parse.py(325):         if sourcematch("|"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(211):         return 0
sre_parse.py(327):         if not nested:
sre_parse.py(328):             break
sre_parse.py(334):     if len(items) == 1:
sre_parse.py(335):         return items[0]
sre_parse.py(718):     tail = source.get()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(195):             self.next = None
sre_parse.py(196):             return
sre_parse.py(215):         return this
sre_parse.py(719):     if tail == ")":
sre_parse.py(721):     elif tail:
sre_parse.py(724):     if not (flags & SRE_FLAG_VERBOSE) and p.pattern.flags & SRE_FLAG_VERBOSE:
sre_parse.py(729):     if flags & SRE_FLAG_DEBUG:
sre_parse.py(732):     return p
sre_compile.py(576):     code = _code(p, flags)
 --- modulename: sre_compile, funcname: _code
sre_compile.py(554):     flags = p.pattern.flags | flags
sre_compile.py(555):     code = []
sre_compile.py(558):     _compile_info(code, p, flags)
 --- modulename: sre_compile, funcname: _compile_info
sre_compile.py(437):     lo, hi = pattern.getwidth()
 --- modulename: sre_parse, funcname: getwidth
sre_parse.py(153):         if self.width:
sre_parse.py(155):         lo = hi = 0
sre_parse.py(156):         UNITCODES = (ANY, RANGE, IN, LITERAL, NOT_LITERAL, CATEGORY)
sre_parse.py(157):         REPEATCODES = (MIN_REPEAT, MAX_REPEAT)
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(159):             if op is BRANCH:
sre_parse.py(168):             elif op is CALL:
sre_parse.py(172):             elif op is SUBPATTERN:
sre_parse.py(176):             elif op in REPEATCODES:
sre_parse.py(180):             elif op in UNITCODES:
sre_parse.py(181):                 lo = lo + 1
sre_parse.py(182):                 hi = hi + 1
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(185):         self.width = min(lo, MAXREPEAT - 1), min(hi, MAXREPEAT)
sre_parse.py(186):         return self.width
sre_compile.py(438):     if lo == 0:
sre_compile.py(441):     prefix = []
sre_compile.py(442):     prefixappend = prefix.append
sre_compile.py(443):     prefix_skip = 0
sre_compile.py(444):     charset = [] # not used
sre_compile.py(445):     charsetappend = charset.append
sre_compile.py(446):     if not (flags & SRE_FLAG_IGNORECASE):
sre_compile.py(448):         for op, av in pattern.data:
sre_compile.py(449):             if op is LITERAL:
sre_compile.py(453):             elif op is SUBPATTERN and len(av[1]) == 1:
sre_compile.py(460):                 break
sre_compile.py(462):         if not prefix and pattern.data:
sre_compile.py(463):             op, av = pattern.data[0]
sre_compile.py(464):             if op is SUBPATTERN and av[1]:
sre_compile.py(481):             elif op is BRANCH:
sre_compile.py(494):             elif op is IN:
sre_compile.py(495):                 charset = av
sre_compile.py(501):     emit = code.append
sre_compile.py(502):     emit(OPCODES[INFO])
sre_compile.py(503):     skip = len(code); emit(0)
sre_compile.py(505):     mask = 0
sre_compile.py(506):     if prefix:
sre_compile.py(510):     elif charset:
sre_compile.py(511):         mask = mask + SRE_INFO_CHARSET
sre_compile.py(512):     emit(mask)
sre_compile.py(514):     if lo < MAXCODE:
sre_compile.py(515):         emit(lo)
sre_compile.py(519):     if hi < MAXCODE:
sre_compile.py(520):         emit(hi)
sre_compile.py(524):     if prefix:
sre_compile.py(535):     elif charset:
sre_compile.py(536):         _compile_charset(charset, flags, code)
 --- modulename: sre_compile, funcname: _compile_charset
sre_compile.py(230):     emit = code.append
sre_compile.py(231):     for op, av in _optimize_charset(charset, fixup, fixes,
sre_compile.py(232):                                     flags & SRE_FLAG_UNICODE):
 --- modulename: sre_compile, funcname: _optimize_charset
sre_compile.py(258):     out = []
sre_compile.py(259):     tail = []
sre_compile.py(260):     charmap = bytearray(256)
sre_compile.py(261):     for op, av in charset:
sre_compile.py(262):         while True:
sre_compile.py(263):             try:
sre_compile.py(264):                 if op is LITERAL:
sre_compile.py(273):                 elif op is RANGE:
sre_compile.py(286):                 elif op is NEGATE:
sre_compile.py(289):                     tail.append((op, av))
sre_compile.py(310):             break
sre_compile.py(261):     for op, av in charset:
sre_compile.py(262):         while True:
sre_compile.py(263):             try:
sre_compile.py(264):                 if op is LITERAL:
sre_compile.py(265):                     if fixup:
sre_compile.py(272):                         charmap[av] = 1
sre_compile.py(310):             break
sre_compile.py(261):     for op, av in charset:
sre_compile.py(313):     runs = []
sre_compile.py(314):     q = 0
sre_compile.py(315):     while True:
sre_compile.py(316):         p = charmap.find(b'\1', q)
sre_compile.py(317):         if p < 0:
sre_compile.py(319):         if len(runs) >= 2:
sre_compile.py(322):         q = charmap.find(b'\0', p)
sre_compile.py(323):         if q < 0:
sre_compile.py(326):         runs.append((p, q))
sre_compile.py(315):     while True:
sre_compile.py(316):         p = charmap.find(b'\1', q)
sre_compile.py(317):         if p < 0:
sre_compile.py(318):             break
sre_compile.py(327):     if runs is not None:
sre_compile.py(329):         for p, q in runs:
sre_compile.py(330):             if q - p == 1:
sre_compile.py(331):                 out.append((LITERAL, p))
sre_compile.py(329):         for p, q in runs:
sre_compile.py(334):         out += tail
sre_compile.py(336):         if fixup or len(out) < len(charset):
sre_compile.py(339):         return charset
sre_compile.py(233):         emit(OPCODES[op])
sre_compile.py(234):         if op is NEGATE:
sre_compile.py(236):         elif op is LITERAL:
sre_compile.py(238):         elif op is RANGE:
sre_compile.py(241):         elif op is CHARSET:
sre_compile.py(243):         elif op is BIGCHARSET:
sre_compile.py(245):         elif op is CATEGORY:
sre_compile.py(246):             if flags & SRE_FLAG_LOCALE:
sre_compile.py(248):             elif flags & SRE_FLAG_UNICODE:
sre_compile.py(251):                 emit(CHCODES[av])
sre_compile.py(232):                                     flags & SRE_FLAG_UNICODE):
sre_compile.py(233):         emit(OPCODES[op])
sre_compile.py(234):         if op is NEGATE:
sre_compile.py(236):         elif op is LITERAL:
sre_compile.py(237):             emit(av)
sre_compile.py(232):                                     flags & SRE_FLAG_UNICODE):
sre_compile.py(254):     emit(OPCODES[FAILURE])
sre_compile.py(537):     code[skip] = len(code) - skip
sre_compile.py(561):     _compile(code, p.data, flags)
 --- modulename: sre_compile, funcname: _compile
sre_compile.py(66):     emit = code.append
sre_compile.py(67):     _len = len
sre_compile.py(68):     LITERAL_CODES = _LITERAL_CODES
sre_compile.py(69):     REPEATING_CODES = _REPEATING_CODES
sre_compile.py(70):     SUCCESS_CODES = _SUCCESS_CODES
sre_compile.py(71):     ASSERT_CODES = _ASSERT_CODES
sre_compile.py(72):     if (flags & SRE_FLAG_IGNORECASE and
sre_compile.py(77):         fixes = None
sre_compile.py(78):     for op, av in pattern:
sre_compile.py(79):         if op in LITERAL_CODES:
sre_compile.py(98):         elif op is IN:
sre_compile.py(99):             if flags & SRE_FLAG_IGNORECASE:
sre_compile.py(104):                 emit(OPCODES[op])
sre_compile.py(105):                 fixup = None
sre_compile.py(106):             skip = _len(code); emit(0)
sre_compile.py(107):             _compile_charset(av, flags, code, fixup, fixes)
 --- modulename: sre_compile, funcname: _compile_charset
sre_compile.py(230):     emit = code.append
sre_compile.py(231):     for op, av in _optimize_charset(charset, fixup, fixes,
sre_compile.py(232):                                     flags & SRE_FLAG_UNICODE):
 --- modulename: sre_compile, funcname: _optimize_charset
sre_compile.py(258):     out = []
sre_compile.py(259):     tail = []
sre_compile.py(260):     charmap = bytearray(256)
sre_compile.py(261):     for op, av in charset:
sre_compile.py(262):         while True:
sre_compile.py(263):             try:
sre_compile.py(264):                 if op is LITERAL:
sre_compile.py(273):                 elif op is RANGE:
sre_compile.py(286):                 elif op is NEGATE:
sre_compile.py(289):                     tail.append((op, av))
sre_compile.py(310):             break
sre_compile.py(261):     for op, av in charset:
sre_compile.py(262):         while True:
sre_compile.py(263):             try:
sre_compile.py(264):                 if op is LITERAL:
sre_compile.py(265):                     if fixup:
sre_compile.py(272):                         charmap[av] = 1
sre_compile.py(310):             break
sre_compile.py(261):     for op, av in charset:
sre_compile.py(313):     runs = []
sre_compile.py(314):     q = 0
sre_compile.py(315):     while True:
sre_compile.py(316):         p = charmap.find(b'\1', q)
sre_compile.py(317):         if p < 0:
sre_compile.py(319):         if len(runs) >= 2:
sre_compile.py(322):         q = charmap.find(b'\0', p)
sre_compile.py(323):         if q < 0:
sre_compile.py(326):         runs.append((p, q))
sre_compile.py(315):     while True:
sre_compile.py(316):         p = charmap.find(b'\1', q)
sre_compile.py(317):         if p < 0:
sre_compile.py(318):             break
sre_compile.py(327):     if runs is not None:
sre_compile.py(329):         for p, q in runs:
sre_compile.py(330):             if q - p == 1:
sre_compile.py(331):                 out.append((LITERAL, p))
sre_compile.py(329):         for p, q in runs:
sre_compile.py(334):         out += tail
sre_compile.py(336):         if fixup or len(out) < len(charset):
sre_compile.py(339):         return charset
sre_compile.py(233):         emit(OPCODES[op])
sre_compile.py(234):         if op is NEGATE:
sre_compile.py(236):         elif op is LITERAL:
sre_compile.py(238):         elif op is RANGE:
sre_compile.py(241):         elif op is CHARSET:
sre_compile.py(243):         elif op is BIGCHARSET:
sre_compile.py(245):         elif op is CATEGORY:
sre_compile.py(246):             if flags & SRE_FLAG_LOCALE:
sre_compile.py(248):             elif flags & SRE_FLAG_UNICODE:
sre_compile.py(251):                 emit(CHCODES[av])
sre_compile.py(232):                                     flags & SRE_FLAG_UNICODE):
sre_compile.py(233):         emit(OPCODES[op])
sre_compile.py(234):         if op is NEGATE:
sre_compile.py(236):         elif op is LITERAL:
sre_compile.py(237):             emit(av)
sre_compile.py(232):                                     flags & SRE_FLAG_UNICODE):
sre_compile.py(254):     emit(OPCODES[FAILURE])
sre_compile.py(108):             code[skip] = _len(code) - skip
sre_compile.py(78):     for op, av in pattern:
sre_compile.py(563):     code.append(OPCODES[SUCCESS])
sre_compile.py(565):     return code
sre_compile.py(581):     if p.pattern.groups > 100:
sre_compile.py(587):     groupindex = p.pattern.groupdict
sre_compile.py(588):     indexgroup = [None] * p.pattern.groups
sre_compile.py(589):     for k, i in groupindex.items():
sre_compile.py(592):     return _sre.compile(
sre_compile.py(593):         pattern, flags | p.pattern.flags, code,
sre_compile.py(594):         p.pattern.groups-1,
sre_compile.py(595):         groupindex, indexgroup
re.py(252):     if not bypass_cache:
re.py(253):         if len(_cache) >= _MAXCACHE:
re.py(255):         if p.flags & LOCALE:
re.py(260):             loc = None
re.py(261):         _cache[cachekey] = p, loc
re.py(262):     return p
platform.py(1030): def architecture(executable=sys.executable,bits='',linkage=''):
platform.py(1117): _uname_cache = None
platform.py(1119): def uname():
platform.py(1256): def system():
platform.py(1265): def node():
platform.py(1275): def release():
platform.py(1284): def version():
platform.py(1293): def machine():
platform.py(1302): def processor():
platform.py(1316): _sys_version_parser = re.compile(
platform.py(1317):     r'([\w.+]+)\s*'  # "version<space>"
 --- modulename: re, funcname: compile
re.py(194):     return _compile(pattern, flags)
 --- modulename: re, funcname: _compile
re.py(232):     pattern, flags = key
re.py(233):     bypass_cache = flags & DEBUG
re.py(234):     if not bypass_cache:
re.py(235):         cachekey = (type(key[0]),) + key
re.py(236):         try:
re.py(237):             p, loc = _cache[cachekey]
re.py(240):         except KeyError:
re.py(241):             pass
re.py(242):     if isinstance(pattern, _pattern_type):
re.py(246):     if not sre_compile.isstring(pattern):
 --- modulename: sre_compile, funcname: isstring
sre_compile.py(547):     for tp in STRING_TYPES:
sre_compile.py(548):         if isinstance(obj, tp):
sre_compile.py(549):             return 1
re.py(248):     try:
re.py(249):         p = sre_compile.compile(pattern, flags)
 --- modulename: sre_compile, funcname: compile
sre_compile.py(570):     if isstring(p):
 --- modulename: sre_compile, funcname: isstring
sre_compile.py(547):     for tp in STRING_TYPES:
sre_compile.py(548):         if isinstance(obj, tp):
sre_compile.py(549):             return 1
sre_compile.py(571):         pattern = p
sre_compile.py(572):         p = sre_parse.parse(p, flags)
 --- modulename: sre_parse, funcname: parse
sre_parse.py(709):     source = Tokenizer(str)
 --- modulename: sre_parse, funcname: __init__
sre_parse.py(190):         self.string = string
sre_parse.py(191):         self.index = 0
sre_parse.py(192):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(711):     if pattern is None:
sre_parse.py(712):         pattern = Pattern()
 --- modulename: sre_parse, funcname: __init__
sre_parse.py(68):         self.flags = 0
sre_parse.py(69):         self.open = []
sre_parse.py(70):         self.groups = 1
sre_parse.py(71):         self.groupdict = {}
sre_parse.py(72):         self.lookbehind = 0
sre_parse.py(713):     pattern.flags = flags
sre_parse.py(714):     pattern.str = str
sre_parse.py(716):     p = _parse_sub(source, pattern, 0)
 --- modulename: sre_parse, funcname: _parse_sub
sre_parse.py(320):     items = []
sre_parse.py(321):     itemsappend = items.append
sre_parse.py(322):     sourcematch = source.match
sre_parse.py(323):     while 1:
sre_parse.py(324):         itemsappend(_parse(source, state))
 --- modulename: sre_parse, funcname: _parse
sre_parse.py(397):     subpattern = SubPattern(state)
 --- modulename: sre_parse, funcname: __init__
sre_parse.py(93):         self.pattern = pattern
sre_parse.py(94):         if data is None:
sre_parse.py(95):             data = []
sre_parse.py(96):         self.data = data
sre_parse.py(97):         self.width = None
sre_parse.py(400):     subpatternappend = subpattern.append
sre_parse.py(401):     sourceget = source.get
sre_parse.py(402):     sourcematch = source.match
sre_parse.py(403):     _len = len
sre_parse.py(404):     PATTERNENDERS = _PATTERNENDERS
sre_parse.py(405):     ASSERTCHARS = _ASSERTCHARS
sre_parse.py(406):     LOOKBEHINDASSERTCHARS = _LOOKBEHINDASSERTCHARS
sre_parse.py(407):     REPEATCODES = _REPEATCODES
sre_parse.py(409):     while 1:
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(413):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(414):         if this is None:
sre_parse.py(417):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(428):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(431):         elif this == "[":
sre_parse.py(488):         elif this and this[0] in REPEAT_CHARS:
sre_parse.py(541):         elif this == ".":
sre_parse.py(544):         elif this == "(":
sre_parse.py(545):             group = 1
sre_parse.py(546):             name = None
sre_parse.py(547):             condgroup = None
sre_parse.py(548):             if sourcematch("?"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(211):         return 0
sre_parse.py(666):             if group:
sre_parse.py(668):                 if group == 2:
sre_parse.py(672):                     group = state.opengroup(name)
 --- modulename: sre_parse, funcname: opengroup
sre_parse.py(75):         gid = self.groups
sre_parse.py(76):         self.groups = gid + 1
sre_parse.py(77):         if name is not None:
sre_parse.py(83):         self.open.append(gid)
sre_parse.py(84):         return gid
sre_parse.py(673):                 if condgroup:
sre_parse.py(676):                     p = _parse_sub(source, state)
 --- modulename: sre_parse, funcname: _parse_sub
sre_parse.py(320):     items = []
sre_parse.py(321):     itemsappend = items.append
sre_parse.py(322):     sourcematch = source.match
sre_parse.py(323):     while 1:
sre_parse.py(324):         itemsappend(_parse(source, state))
 --- modulename: sre_parse, funcname: _parse
sre_parse.py(397):     subpattern = SubPattern(state)
 --- modulename: sre_parse, funcname: __init__
sre_parse.py(93):         self.pattern = pattern
sre_parse.py(94):         if data is None:
sre_parse.py(95):             data = []
sre_parse.py(96):         self.data = data
sre_parse.py(97):         self.width = None
sre_parse.py(400):     subpatternappend = subpattern.append
sre_parse.py(401):     sourceget = source.get
sre_parse.py(402):     sourcematch = source.match
sre_parse.py(403):     _len = len
sre_parse.py(404):     PATTERNENDERS = _PATTERNENDERS
sre_parse.py(405):     ASSERTCHARS = _ASSERTCHARS
sre_parse.py(406):     LOOKBEHINDASSERTCHARS = _LOOKBEHINDASSERTCHARS
sre_parse.py(407):     REPEATCODES = _REPEATCODES
sre_parse.py(409):     while 1:
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(413):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(199):             try:
sre_parse.py(200):                 c = self.string[self.index + 1]
sre_parse.py(203):             char = char + c
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(414):         if this is None:
sre_parse.py(417):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(428):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(431):         elif this == "[":
sre_parse.py(433):             set = []
sre_parse.py(434):             setappend = set.append
sre_parse.py(437):             if sourcematch("^"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(211):         return 0
sre_parse.py(440):             start = set[:]
sre_parse.py(441):             while 1:
sre_parse.py(442):                 this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(443):                 if this == "]" and set != start:
sre_parse.py(445):                 elif this and this[0] == "\\":
sre_parse.py(446):                     code1 = _class_escape(source, this)
 --- modulename: sre_parse, funcname: _class_escape
sre_parse.py(238):     code = ESCAPES.get(escape)
sre_parse.py(239):     if code:
sre_parse.py(241):     code = CATEGORIES.get(escape)
sre_parse.py(242):     if code and code[0] == IN:
sre_parse.py(243):         return code
sre_parse.py(451):                 if sourcematch("-"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(211):         return 0
sre_parse.py(475):                     if code1[0] is IN:
sre_parse.py(476):                         code1 = code1[1][0]
sre_parse.py(477):                     setappend(code1)
sre_parse.py(442):                 this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(443):                 if this == "]" and set != start:
sre_parse.py(445):                 elif this and this[0] == "\\":
sre_parse.py(447):                 elif this:
sre_parse.py(448):                     code1 = LITERAL, ord(this)
sre_parse.py(451):                 if sourcematch("-"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(211):         return 0
sre_parse.py(475):                     if code1[0] is IN:
sre_parse.py(477):                     setappend(code1)
sre_parse.py(442):                 this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(443):                 if this == "]" and set != start:
sre_parse.py(445):                 elif this and this[0] == "\\":
sre_parse.py(447):                 elif this:
sre_parse.py(448):                     code1 = LITERAL, ord(this)
sre_parse.py(451):                 if sourcematch("-"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(211):         return 0
sre_parse.py(475):                     if code1[0] is IN:
sre_parse.py(477):                     setappend(code1)
sre_parse.py(442):                 this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(443):                 if this == "]" and set != start:
sre_parse.py(444):                     break
sre_parse.py(480):             if _len(set)==1 and set[0][0] is LITERAL:
sre_parse.py(482):             elif _len(set)==2 and set[0][0] is NEGATE and set[1][0] is LITERAL:
sre_parse.py(486):                 subpatternappend((IN, set))
 --- modulename: sre_parse, funcname: append
sre_parse.py(150):         self.data.append(code)
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(413):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(414):         if this is None:
sre_parse.py(417):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(428):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(431):         elif this == "[":
sre_parse.py(488):         elif this and this[0] in REPEAT_CHARS:
sre_parse.py(490):             if this == "?":
sre_parse.py(492):             elif this == "*":
sre_parse.py(495):             elif this == "+":
sre_parse.py(496):                 min, max = 1, MAXREPEAT
sre_parse.py(528):             if subpattern:
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(138):         return len(self.data)
sre_parse.py(529):                 item = subpattern[-1:]
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(138):         return len(self.data)
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(143):             return SubPattern(self.pattern, self.data[index])
 --- modulename: sre_parse, funcname: __init__
sre_parse.py(93):         self.pattern = pattern
sre_parse.py(94):         if data is None:
sre_parse.py(96):         self.data = data
sre_parse.py(97):         self.width = None
sre_parse.py(532):             if not item or (_len(item) == 1 and item[0][0] == AT):
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(138):         return len(self.data)
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(138):         return len(self.data)
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_parse.py(534):             if item[0][0] in REPEATCODES:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_parse.py(536):             if sourcematch("?"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(211):         return 0
sre_parse.py(539):                 subpattern[-1] = (MAX_REPEAT, (min, max, item))
 --- modulename: sre_parse, funcname: __setitem__
sre_parse.py(146):         self.data[index] = code
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(412):             break # end of subpattern
sre_parse.py(704):     return subpattern
sre_parse.py(325):         if sourcematch("|"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(211):         return 0
sre_parse.py(327):         if not nested:
sre_parse.py(329):         if not source.next or sourcematch(")", 0):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(208):             if skip:
sre_parse.py(210):             return 1
sre_parse.py(330):             break
sre_parse.py(334):     if len(items) == 1:
sre_parse.py(335):         return items[0]
sre_parse.py(677):                 if not sourcematch(")"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(208):             if skip:
sre_parse.py(209):                 self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(199):             try:
sre_parse.py(200):                 c = self.string[self.index + 1]
sre_parse.py(203):             char = char + c
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(210):             return 1
sre_parse.py(679):                 if group is not None:
sre_parse.py(680):                     state.closegroup(group)
 --- modulename: sre_parse, funcname: closegroup
sre_parse.py(86):         self.open.remove(gid)
sre_parse.py(681):                 subpatternappend((SUBPATTERN, (group, p)))
 --- modulename: sre_parse, funcname: append
sre_parse.py(150):         self.data.append(code)
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(413):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(414):         if this is None:
sre_parse.py(417):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(428):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(431):         elif this == "[":
sre_parse.py(488):         elif this and this[0] in REPEAT_CHARS:
sre_parse.py(541):         elif this == ".":
sre_parse.py(544):         elif this == "(":
sre_parse.py(691):         elif this == "^":
sre_parse.py(694):         elif this == "$":
sre_parse.py(697):         elif this and this[0] == "\\":
sre_parse.py(698):             code = _escape(source, this, state)
 --- modulename: sre_parse, funcname: _escape
sre_parse.py(270):     code = CATEGORIES.get(escape)
sre_parse.py(271):     if code:
sre_parse.py(272):         return code
sre_parse.py(699):             subpatternappend(code)
 --- modulename: sre_parse, funcname: append
sre_parse.py(150):         self.data.append(code)
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(413):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(199):             try:
sre_parse.py(200):                 c = self.string[self.index + 1]
sre_parse.py(203):             char = char + c
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(414):         if this is None:
sre_parse.py(417):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(428):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(431):         elif this == "[":
sre_parse.py(488):         elif this and this[0] in REPEAT_CHARS:
sre_parse.py(490):             if this == "?":
sre_parse.py(492):             elif this == "*":
sre_parse.py(493):                 min, max = 0, MAXREPEAT
sre_parse.py(528):             if subpattern:
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(138):         return len(self.data)
sre_parse.py(529):                 item = subpattern[-1:]
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(138):         return len(self.data)
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(143):             return SubPattern(self.pattern, self.data[index])
 --- modulename: sre_parse, funcname: __init__
sre_parse.py(93):         self.pattern = pattern
sre_parse.py(94):         if data is None:
sre_parse.py(96):         self.data = data
sre_parse.py(97):         self.width = None
sre_parse.py(532):             if not item or (_len(item) == 1 and item[0][0] == AT):
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(138):         return len(self.data)
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(138):         return len(self.data)
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_parse.py(534):             if item[0][0] in REPEATCODES:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_parse.py(536):             if sourcematch("?"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(211):         return 0
sre_parse.py(539):                 subpattern[-1] = (MAX_REPEAT, (min, max, item))
 --- modulename: sre_parse, funcname: __setitem__
sre_parse.py(146):         self.data[index] = code
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(413):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(414):         if this is None:
sre_parse.py(417):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(428):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(431):         elif this == "[":
sre_parse.py(488):         elif this and this[0] in REPEAT_CHARS:
sre_parse.py(541):         elif this == ".":
sre_parse.py(544):         elif this == "(":
sre_parse.py(691):         elif this == "^":
sre_parse.py(694):         elif this == "$":
sre_parse.py(697):         elif this and this[0] == "\\":
sre_parse.py(698):             code = _escape(source, this, state)
 --- modulename: sre_parse, funcname: _escape
sre_parse.py(270):     code = CATEGORIES.get(escape)
sre_parse.py(271):     if code:
sre_parse.py(273):     code = ESCAPES.get(escape)
sre_parse.py(274):     if code:
sre_parse.py(276):     try:
sre_parse.py(277):         c = escape[1:2]
sre_parse.py(278):         if c == "x":
sre_parse.py(285):         elif c == "0":
sre_parse.py(290):         elif c in DIGITS:
sre_parse.py(311):         if len(escape) == 2:
sre_parse.py(312):             return LITERAL, ord(escape[1])
sre_parse.py(699):             subpatternappend(code)
 --- modulename: sre_parse, funcname: append
sre_parse.py(150):         self.data.append(code)
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(413):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(414):         if this is None:
sre_parse.py(417):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(428):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(429):             subpatternappend((LITERAL, ord(this)))
 --- modulename: sre_parse, funcname: append
sre_parse.py(150):         self.data.append(code)
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(413):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(414):         if this is None:
sre_parse.py(417):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(428):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(431):         elif this == "[":
sre_parse.py(488):         elif this and this[0] in REPEAT_CHARS:
sre_parse.py(490):             if this == "?":
sre_parse.py(491):                 min, max = 0, 1
sre_parse.py(528):             if subpattern:
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(138):         return len(self.data)
sre_parse.py(529):                 item = subpattern[-1:]
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(138):         return len(self.data)
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(143):             return SubPattern(self.pattern, self.data[index])
 --- modulename: sre_parse, funcname: __init__
sre_parse.py(93):         self.pattern = pattern
sre_parse.py(94):         if data is None:
sre_parse.py(96):         self.data = data
sre_parse.py(97):         self.width = None
sre_parse.py(532):             if not item or (_len(item) == 1 and item[0][0] == AT):
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(138):         return len(self.data)
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(138):         return len(self.data)
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_parse.py(534):             if item[0][0] in REPEATCODES:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_parse.py(536):             if sourcematch("?"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(211):         return 0
sre_parse.py(539):                 subpattern[-1] = (MAX_REPEAT, (min, max, item))
 --- modulename: sre_parse, funcname: __setitem__
sre_parse.py(146):         self.data[index] = code
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(413):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(414):         if this is None:
sre_parse.py(417):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(428):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(431):         elif this == "[":
sre_parse.py(488):         elif this and this[0] in REPEAT_CHARS:
sre_parse.py(541):         elif this == ".":
sre_parse.py(544):         elif this == "(":
sre_parse.py(545):             group = 1
sre_parse.py(546):             name = None
sre_parse.py(547):             condgroup = None
sre_parse.py(548):             if sourcematch("?"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(211):         return 0
sre_parse.py(666):             if group:
sre_parse.py(668):                 if group == 2:
sre_parse.py(672):                     group = state.opengroup(name)
 --- modulename: sre_parse, funcname: opengroup
sre_parse.py(75):         gid = self.groups
sre_parse.py(76):         self.groups = gid + 1
sre_parse.py(77):         if name is not None:
sre_parse.py(83):         self.open.append(gid)
sre_parse.py(84):         return gid
sre_parse.py(673):                 if condgroup:
sre_parse.py(676):                     p = _parse_sub(source, state)
 --- modulename: sre_parse, funcname: _parse_sub
sre_parse.py(320):     items = []
sre_parse.py(321):     itemsappend = items.append
sre_parse.py(322):     sourcematch = source.match
sre_parse.py(323):     while 1:
sre_parse.py(324):         itemsappend(_parse(source, state))
 --- modulename: sre_parse, funcname: _parse
sre_parse.py(397):     subpattern = SubPattern(state)
 --- modulename: sre_parse, funcname: __init__
sre_parse.py(93):         self.pattern = pattern
sre_parse.py(94):         if data is None:
sre_parse.py(95):             data = []
sre_parse.py(96):         self.data = data
sre_parse.py(97):         self.width = None
sre_parse.py(400):     subpatternappend = subpattern.append
sre_parse.py(401):     sourceget = source.get
sre_parse.py(402):     sourcematch = source.match
sre_parse.py(403):     _len = len
sre_parse.py(404):     PATTERNENDERS = _PATTERNENDERS
sre_parse.py(405):     ASSERTCHARS = _ASSERTCHARS
sre_parse.py(406):     LOOKBEHINDASSERTCHARS = _LOOKBEHINDASSERTCHARS
sre_parse.py(407):     REPEATCODES = _REPEATCODES
sre_parse.py(409):     while 1:
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(413):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(414):         if this is None:
sre_parse.py(417):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(428):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(431):         elif this == "[":
sre_parse.py(433):             set = []
sre_parse.py(434):             setappend = set.append
sre_parse.py(437):             if sourcematch("^"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(208):             if skip:
sre_parse.py(209):                 self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(210):             return 1
sre_parse.py(438):                 setappend((NEGATE, None))
sre_parse.py(440):             start = set[:]
sre_parse.py(441):             while 1:
sre_parse.py(442):                 this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(443):                 if this == "]" and set != start:
sre_parse.py(445):                 elif this and this[0] == "\\":
sre_parse.py(447):                 elif this:
sre_parse.py(448):                     code1 = LITERAL, ord(this)
sre_parse.py(451):                 if sourcematch("-"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(211):         return 0
sre_parse.py(475):                     if code1[0] is IN:
sre_parse.py(477):                     setappend(code1)
sre_parse.py(442):                 this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(443):                 if this == "]" and set != start:
sre_parse.py(444):                     break
sre_parse.py(480):             if _len(set)==1 and set[0][0] is LITERAL:
sre_parse.py(482):             elif _len(set)==2 and set[0][0] is NEGATE and set[1][0] is LITERAL:
sre_parse.py(483):                 subpatternappend((NOT_LITERAL, set[1][1])) # optimization
 --- modulename: sre_parse, funcname: append
sre_parse.py(150):         self.data.append(code)
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(413):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(414):         if this is None:
sre_parse.py(417):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(428):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(431):         elif this == "[":
sre_parse.py(488):         elif this and this[0] in REPEAT_CHARS:
sre_parse.py(490):             if this == "?":
sre_parse.py(492):             elif this == "*":
sre_parse.py(495):             elif this == "+":
sre_parse.py(496):                 min, max = 1, MAXREPEAT
sre_parse.py(528):             if subpattern:
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(138):         return len(self.data)
sre_parse.py(529):                 item = subpattern[-1:]
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(138):         return len(self.data)
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(143):             return SubPattern(self.pattern, self.data[index])
 --- modulename: sre_parse, funcname: __init__
sre_parse.py(93):         self.pattern = pattern
sre_parse.py(94):         if data is None:
sre_parse.py(96):         self.data = data
sre_parse.py(97):         self.width = None
sre_parse.py(532):             if not item or (_len(item) == 1 and item[0][0] == AT):
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(138):         return len(self.data)
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(138):         return len(self.data)
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_parse.py(534):             if item[0][0] in REPEATCODES:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_parse.py(536):             if sourcematch("?"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(211):         return 0
sre_parse.py(539):                 subpattern[-1] = (MAX_REPEAT, (min, max, item))
 --- modulename: sre_parse, funcname: __setitem__
sre_parse.py(146):         self.data[index] = code
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(412):             break # end of subpattern
sre_parse.py(704):     return subpattern
sre_parse.py(325):         if sourcematch("|"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(211):         return 0
sre_parse.py(327):         if not nested:
sre_parse.py(329):         if not source.next or sourcematch(")", 0):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(208):             if skip:
sre_parse.py(210):             return 1
sre_parse.py(330):             break
sre_parse.py(334):     if len(items) == 1:
sre_parse.py(335):         return items[0]
sre_parse.py(677):                 if not sourcematch(")"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(208):             if skip:
sre_parse.py(209):                 self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(210):             return 1
sre_parse.py(679):                 if group is not None:
sre_parse.py(680):                     state.closegroup(group)
 --- modulename: sre_parse, funcname: closegroup
sre_parse.py(86):         self.open.remove(gid)
sre_parse.py(681):                 subpatternappend((SUBPATTERN, (group, p)))
 --- modulename: sre_parse, funcname: append
sre_parse.py(150):         self.data.append(code)
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(413):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(414):         if this is None:
sre_parse.py(417):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(428):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(431):         elif this == "[":
sre_parse.py(488):         elif this and this[0] in REPEAT_CHARS:
sre_parse.py(541):         elif this == ".":
sre_parse.py(544):         elif this == "(":
sre_parse.py(545):             group = 1
sre_parse.py(546):             name = None
sre_parse.py(547):             condgroup = None
sre_parse.py(548):             if sourcematch("?"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(208):             if skip:
sre_parse.py(209):                 self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(210):             return 1
sre_parse.py(549):                 group = 0
sre_parse.py(551):                 if sourcematch("P"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(211):         return 0
sre_parse.py(600):                 elif sourcematch(":"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(208):             if skip:
sre_parse.py(209):                 self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(210):             return 1
sre_parse.py(602):                     group = 2
sre_parse.py(666):             if group:
sre_parse.py(668):                 if group == 2:
sre_parse.py(670):                     group = None
sre_parse.py(673):                 if condgroup:
sre_parse.py(676):                     p = _parse_sub(source, state)
 --- modulename: sre_parse, funcname: _parse_sub
sre_parse.py(320):     items = []
sre_parse.py(321):     itemsappend = items.append
sre_parse.py(322):     sourcematch = source.match
sre_parse.py(323):     while 1:
sre_parse.py(324):         itemsappend(_parse(source, state))
 --- modulename: sre_parse, funcname: _parse
sre_parse.py(397):     subpattern = SubPattern(state)
 --- modulename: sre_parse, funcname: __init__
sre_parse.py(93):         self.pattern = pattern
sre_parse.py(94):         if data is None:
sre_parse.py(95):             data = []
sre_parse.py(96):         self.data = data
sre_parse.py(97):         self.width = None
sre_parse.py(400):     subpatternappend = subpattern.append
sre_parse.py(401):     sourceget = source.get
sre_parse.py(402):     sourcematch = source.match
sre_parse.py(403):     _len = len
sre_parse.py(404):     PATTERNENDERS = _PATTERNENDERS
sre_parse.py(405):     ASSERTCHARS = _ASSERTCHARS
sre_parse.py(406):     LOOKBEHINDASSERTCHARS = _LOOKBEHINDASSERTCHARS
sre_parse.py(407):     REPEATCODES = _REPEATCODES
sre_parse.py(409):     while 1:
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(413):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(199):             try:
sre_parse.py(200):                 c = self.string[self.index + 1]
sre_parse.py(203):             char = char + c
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(414):         if this is None:
sre_parse.py(417):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(428):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(429):             subpatternappend((LITERAL, ord(this)))
 --- modulename: sre_parse, funcname: append
sre_parse.py(150):         self.data.append(code)
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(413):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(414):         if this is None:
sre_parse.py(417):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(428):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(431):         elif this == "[":
sre_parse.py(488):         elif this and this[0] in REPEAT_CHARS:
sre_parse.py(541):         elif this == ".":
sre_parse.py(544):         elif this == "(":
sre_parse.py(691):         elif this == "^":
sre_parse.py(694):         elif this == "$":
sre_parse.py(697):         elif this and this[0] == "\\":
sre_parse.py(698):             code = _escape(source, this, state)
 --- modulename: sre_parse, funcname: _escape
sre_parse.py(270):     code = CATEGORIES.get(escape)
sre_parse.py(271):     if code:
sre_parse.py(272):         return code
sre_parse.py(699):             subpatternappend(code)
 --- modulename: sre_parse, funcname: append
sre_parse.py(150):         self.data.append(code)
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(413):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(414):         if this is None:
sre_parse.py(417):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(428):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(431):         elif this == "[":
sre_parse.py(488):         elif this and this[0] in REPEAT_CHARS:
sre_parse.py(490):             if this == "?":
sre_parse.py(492):             elif this == "*":
sre_parse.py(493):                 min, max = 0, MAXREPEAT
sre_parse.py(528):             if subpattern:
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(138):         return len(self.data)
sre_parse.py(529):                 item = subpattern[-1:]
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(138):         return len(self.data)
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(143):             return SubPattern(self.pattern, self.data[index])
 --- modulename: sre_parse, funcname: __init__
sre_parse.py(93):         self.pattern = pattern
sre_parse.py(94):         if data is None:
sre_parse.py(96):         self.data = data
sre_parse.py(97):         self.width = None
sre_parse.py(532):             if not item or (_len(item) == 1 and item[0][0] == AT):
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(138):         return len(self.data)
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(138):         return len(self.data)
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_parse.py(534):             if item[0][0] in REPEATCODES:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_parse.py(536):             if sourcematch("?"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(211):         return 0
sre_parse.py(539):                 subpattern[-1] = (MAX_REPEAT, (min, max, item))
 --- modulename: sre_parse, funcname: __setitem__
sre_parse.py(146):         self.data[index] = code
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(413):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(414):         if this is None:
sre_parse.py(417):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(428):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(431):         elif this == "[":
sre_parse.py(488):         elif this and this[0] in REPEAT_CHARS:
sre_parse.py(541):         elif this == ".":
sre_parse.py(544):         elif this == "(":
sre_parse.py(545):             group = 1
sre_parse.py(546):             name = None
sre_parse.py(547):             condgroup = None
sre_parse.py(548):             if sourcematch("?"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(211):         return 0
sre_parse.py(666):             if group:
sre_parse.py(668):                 if group == 2:
sre_parse.py(672):                     group = state.opengroup(name)
 --- modulename: sre_parse, funcname: opengroup
sre_parse.py(75):         gid = self.groups
sre_parse.py(76):         self.groups = gid + 1
sre_parse.py(77):         if name is not None:
sre_parse.py(83):         self.open.append(gid)
sre_parse.py(84):         return gid
sre_parse.py(673):                 if condgroup:
sre_parse.py(676):                     p = _parse_sub(source, state)
 --- modulename: sre_parse, funcname: _parse_sub
sre_parse.py(320):     items = []
sre_parse.py(321):     itemsappend = items.append
sre_parse.py(322):     sourcematch = source.match
sre_parse.py(323):     while 1:
sre_parse.py(324):         itemsappend(_parse(source, state))
 --- modulename: sre_parse, funcname: _parse
sre_parse.py(397):     subpattern = SubPattern(state)
 --- modulename: sre_parse, funcname: __init__
sre_parse.py(93):         self.pattern = pattern
sre_parse.py(94):         if data is None:
sre_parse.py(95):             data = []
sre_parse.py(96):         self.data = data
sre_parse.py(97):         self.width = None
sre_parse.py(400):     subpatternappend = subpattern.append
sre_parse.py(401):     sourceget = source.get
sre_parse.py(402):     sourcematch = source.match
sre_parse.py(403):     _len = len
sre_parse.py(404):     PATTERNENDERS = _PATTERNENDERS
sre_parse.py(405):     ASSERTCHARS = _ASSERTCHARS
sre_parse.py(406):     LOOKBEHINDASSERTCHARS = _LOOKBEHINDASSERTCHARS
sre_parse.py(407):     REPEATCODES = _REPEATCODES
sre_parse.py(409):     while 1:
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(413):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(199):             try:
sre_parse.py(200):                 c = self.string[self.index + 1]
sre_parse.py(203):             char = char + c
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(414):         if this is None:
sre_parse.py(417):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(428):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(431):         elif this == "[":
sre_parse.py(433):             set = []
sre_parse.py(434):             setappend = set.append
sre_parse.py(437):             if sourcematch("^"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(211):         return 0
sre_parse.py(440):             start = set[:]
sre_parse.py(441):             while 1:
sre_parse.py(442):                 this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(443):                 if this == "]" and set != start:
sre_parse.py(445):                 elif this and this[0] == "\\":
sre_parse.py(446):                     code1 = _class_escape(source, this)
 --- modulename: sre_parse, funcname: _class_escape
sre_parse.py(238):     code = ESCAPES.get(escape)
sre_parse.py(239):     if code:
sre_parse.py(241):     code = CATEGORIES.get(escape)
sre_parse.py(242):     if code and code[0] == IN:
sre_parse.py(243):         return code
sre_parse.py(451):                 if sourcematch("-"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(211):         return 0
sre_parse.py(475):                     if code1[0] is IN:
sre_parse.py(476):                         code1 = code1[1][0]
sre_parse.py(477):                     setappend(code1)
sre_parse.py(442):                 this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(443):                 if this == "]" and set != start:
sre_parse.py(445):                 elif this and this[0] == "\\":
sre_parse.py(447):                 elif this:
sre_parse.py(448):                     code1 = LITERAL, ord(this)
sre_parse.py(451):                 if sourcematch("-"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(211):         return 0
sre_parse.py(475):                     if code1[0] is IN:
sre_parse.py(477):                     setappend(code1)
sre_parse.py(442):                 this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(443):                 if this == "]" and set != start:
sre_parse.py(444):                     break
sre_parse.py(480):             if _len(set)==1 and set[0][0] is LITERAL:
sre_parse.py(482):             elif _len(set)==2 and set[0][0] is NEGATE and set[1][0] is LITERAL:
sre_parse.py(486):                 subpatternappend((IN, set))
 --- modulename: sre_parse, funcname: append
sre_parse.py(150):         self.data.append(code)
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(413):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(414):         if this is None:
sre_parse.py(417):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(428):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(431):         elif this == "[":
sre_parse.py(488):         elif this and this[0] in REPEAT_CHARS:
sre_parse.py(490):             if this == "?":
sre_parse.py(492):             elif this == "*":
sre_parse.py(493):                 min, max = 0, MAXREPEAT
sre_parse.py(528):             if subpattern:
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(138):         return len(self.data)
sre_parse.py(529):                 item = subpattern[-1:]
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(138):         return len(self.data)
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(143):             return SubPattern(self.pattern, self.data[index])
 --- modulename: sre_parse, funcname: __init__
sre_parse.py(93):         self.pattern = pattern
sre_parse.py(94):         if data is None:
sre_parse.py(96):         self.data = data
sre_parse.py(97):         self.width = None
sre_parse.py(532):             if not item or (_len(item) == 1 and item[0][0] == AT):
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(138):         return len(self.data)
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(138):         return len(self.data)
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_parse.py(534):             if item[0][0] in REPEATCODES:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_parse.py(536):             if sourcematch("?"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(211):         return 0
sre_parse.py(539):                 subpattern[-1] = (MAX_REPEAT, (min, max, item))
 --- modulename: sre_parse, funcname: __setitem__
sre_parse.py(146):         self.data[index] = code
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(412):             break # end of subpattern
sre_parse.py(704):     return subpattern
sre_parse.py(325):         if sourcematch("|"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(211):         return 0
sre_parse.py(327):         if not nested:
sre_parse.py(329):         if not source.next or sourcematch(")", 0):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(208):             if skip:
sre_parse.py(210):             return 1
sre_parse.py(330):             break
sre_parse.py(334):     if len(items) == 1:
sre_parse.py(335):         return items[0]
sre_parse.py(677):                 if not sourcematch(")"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(208):             if skip:
sre_parse.py(209):                 self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(210):             return 1
sre_parse.py(679):                 if group is not None:
sre_parse.py(680):                     state.closegroup(group)
 --- modulename: sre_parse, funcname: closegroup
sre_parse.py(86):         self.open.remove(gid)
sre_parse.py(681):                 subpatternappend((SUBPATTERN, (group, p)))
 --- modulename: sre_parse, funcname: append
sre_parse.py(150):         self.data.append(code)
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(413):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(414):         if this is None:
sre_parse.py(417):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(428):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(431):         elif this == "[":
sre_parse.py(488):         elif this and this[0] in REPEAT_CHARS:
sre_parse.py(541):         elif this == ".":
sre_parse.py(544):         elif this == "(":
sre_parse.py(545):             group = 1
sre_parse.py(546):             name = None
sre_parse.py(547):             condgroup = None
sre_parse.py(548):             if sourcematch("?"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(208):             if skip:
sre_parse.py(209):                 self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(210):             return 1
sre_parse.py(549):                 group = 0
sre_parse.py(551):                 if sourcematch("P"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(211):         return 0
sre_parse.py(600):                 elif sourcematch(":"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(208):             if skip:
sre_parse.py(209):                 self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(210):             return 1
sre_parse.py(602):                     group = 2
sre_parse.py(666):             if group:
sre_parse.py(668):                 if group == 2:
sre_parse.py(670):                     group = None
sre_parse.py(673):                 if condgroup:
sre_parse.py(676):                     p = _parse_sub(source, state)
 --- modulename: sre_parse, funcname: _parse_sub
sre_parse.py(320):     items = []
sre_parse.py(321):     itemsappend = items.append
sre_parse.py(322):     sourcematch = source.match
sre_parse.py(323):     while 1:
sre_parse.py(324):         itemsappend(_parse(source, state))
 --- modulename: sre_parse, funcname: _parse
sre_parse.py(397):     subpattern = SubPattern(state)
 --- modulename: sre_parse, funcname: __init__
sre_parse.py(93):         self.pattern = pattern
sre_parse.py(94):         if data is None:
sre_parse.py(95):             data = []
sre_parse.py(96):         self.data = data
sre_parse.py(97):         self.width = None
sre_parse.py(400):     subpatternappend = subpattern.append
sre_parse.py(401):     sourceget = source.get
sre_parse.py(402):     sourcematch = source.match
sre_parse.py(403):     _len = len
sre_parse.py(404):     PATTERNENDERS = _PATTERNENDERS
sre_parse.py(405):     ASSERTCHARS = _ASSERTCHARS
sre_parse.py(406):     LOOKBEHINDASSERTCHARS = _LOOKBEHINDASSERTCHARS
sre_parse.py(407):     REPEATCODES = _REPEATCODES
sre_parse.py(409):     while 1:
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(413):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(199):             try:
sre_parse.py(200):                 c = self.string[self.index + 1]
sre_parse.py(203):             char = char + c
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(414):         if this is None:
sre_parse.py(417):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(428):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(429):             subpatternappend((LITERAL, ord(this)))
 --- modulename: sre_parse, funcname: append
sre_parse.py(150):         self.data.append(code)
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(413):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(414):         if this is None:
sre_parse.py(417):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(428):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(431):         elif this == "[":
sre_parse.py(488):         elif this and this[0] in REPEAT_CHARS:
sre_parse.py(541):         elif this == ".":
sre_parse.py(544):         elif this == "(":
sre_parse.py(691):         elif this == "^":
sre_parse.py(694):         elif this == "$":
sre_parse.py(697):         elif this and this[0] == "\\":
sre_parse.py(698):             code = _escape(source, this, state)
 --- modulename: sre_parse, funcname: _escape
sre_parse.py(270):     code = CATEGORIES.get(escape)
sre_parse.py(271):     if code:
sre_parse.py(272):         return code
sre_parse.py(699):             subpatternappend(code)
 --- modulename: sre_parse, funcname: append
sre_parse.py(150):         self.data.append(code)
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(413):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(414):         if this is None:
sre_parse.py(417):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(428):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(431):         elif this == "[":
sre_parse.py(488):         elif this and this[0] in REPEAT_CHARS:
sre_parse.py(490):             if this == "?":
sre_parse.py(492):             elif this == "*":
sre_parse.py(493):                 min, max = 0, MAXREPEAT
sre_parse.py(528):             if subpattern:
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(138):         return len(self.data)
sre_parse.py(529):                 item = subpattern[-1:]
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(138):         return len(self.data)
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(143):             return SubPattern(self.pattern, self.data[index])
 --- modulename: sre_parse, funcname: __init__
sre_parse.py(93):         self.pattern = pattern
sre_parse.py(94):         if data is None:
sre_parse.py(96):         self.data = data
sre_parse.py(97):         self.width = None
sre_parse.py(532):             if not item or (_len(item) == 1 and item[0][0] == AT):
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(138):         return len(self.data)
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(138):         return len(self.data)
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_parse.py(534):             if item[0][0] in REPEATCODES:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_parse.py(536):             if sourcematch("?"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(211):         return 0
sre_parse.py(539):                 subpattern[-1] = (MAX_REPEAT, (min, max, item))
 --- modulename: sre_parse, funcname: __setitem__
sre_parse.py(146):         self.data[index] = code
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(413):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(414):         if this is None:
sre_parse.py(417):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(428):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(431):         elif this == "[":
sre_parse.py(488):         elif this and this[0] in REPEAT_CHARS:
sre_parse.py(541):         elif this == ".":
sre_parse.py(544):         elif this == "(":
sre_parse.py(545):             group = 1
sre_parse.py(546):             name = None
sre_parse.py(547):             condgroup = None
sre_parse.py(548):             if sourcematch("?"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(211):         return 0
sre_parse.py(666):             if group:
sre_parse.py(668):                 if group == 2:
sre_parse.py(672):                     group = state.opengroup(name)
 --- modulename: sre_parse, funcname: opengroup
sre_parse.py(75):         gid = self.groups
sre_parse.py(76):         self.groups = gid + 1
sre_parse.py(77):         if name is not None:
sre_parse.py(83):         self.open.append(gid)
sre_parse.py(84):         return gid
sre_parse.py(673):                 if condgroup:
sre_parse.py(676):                     p = _parse_sub(source, state)
 --- modulename: sre_parse, funcname: _parse_sub
sre_parse.py(320):     items = []
sre_parse.py(321):     itemsappend = items.append
sre_parse.py(322):     sourcematch = source.match
sre_parse.py(323):     while 1:
sre_parse.py(324):         itemsappend(_parse(source, state))
 --- modulename: sre_parse, funcname: _parse
sre_parse.py(397):     subpattern = SubPattern(state)
 --- modulename: sre_parse, funcname: __init__
sre_parse.py(93):         self.pattern = pattern
sre_parse.py(94):         if data is None:
sre_parse.py(95):             data = []
sre_parse.py(96):         self.data = data
sre_parse.py(97):         self.width = None
sre_parse.py(400):     subpatternappend = subpattern.append
sre_parse.py(401):     sourceget = source.get
sre_parse.py(402):     sourcematch = source.match
sre_parse.py(403):     _len = len
sre_parse.py(404):     PATTERNENDERS = _PATTERNENDERS
sre_parse.py(405):     ASSERTCHARS = _ASSERTCHARS
sre_parse.py(406):     LOOKBEHINDASSERTCHARS = _LOOKBEHINDASSERTCHARS
sre_parse.py(407):     REPEATCODES = _REPEATCODES
sre_parse.py(409):     while 1:
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(413):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(199):             try:
sre_parse.py(200):                 c = self.string[self.index + 1]
sre_parse.py(203):             char = char + c
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(414):         if this is None:
sre_parse.py(417):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(428):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(431):         elif this == "[":
sre_parse.py(433):             set = []
sre_parse.py(434):             setappend = set.append
sre_parse.py(437):             if sourcematch("^"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(211):         return 0
sre_parse.py(440):             start = set[:]
sre_parse.py(441):             while 1:
sre_parse.py(442):                 this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(443):                 if this == "]" and set != start:
sre_parse.py(445):                 elif this and this[0] == "\\":
sre_parse.py(446):                     code1 = _class_escape(source, this)
 --- modulename: sre_parse, funcname: _class_escape
sre_parse.py(238):     code = ESCAPES.get(escape)
sre_parse.py(239):     if code:
sre_parse.py(241):     code = CATEGORIES.get(escape)
sre_parse.py(242):     if code and code[0] == IN:
sre_parse.py(243):         return code
sre_parse.py(451):                 if sourcematch("-"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(211):         return 0
sre_parse.py(475):                     if code1[0] is IN:
sre_parse.py(476):                         code1 = code1[1][0]
sre_parse.py(477):                     setappend(code1)
sre_parse.py(442):                 this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(443):                 if this == "]" and set != start:
sre_parse.py(445):                 elif this and this[0] == "\\":
sre_parse.py(447):                 elif this:
sre_parse.py(448):                     code1 = LITERAL, ord(this)
sre_parse.py(451):                 if sourcematch("-"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(211):         return 0
sre_parse.py(475):                     if code1[0] is IN:
sre_parse.py(477):                     setappend(code1)
sre_parse.py(442):                 this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(443):                 if this == "]" and set != start:
sre_parse.py(445):                 elif this and this[0] == "\\":
sre_parse.py(447):                 elif this:
sre_parse.py(448):                     code1 = LITERAL, ord(this)
sre_parse.py(451):                 if sourcematch("-"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(211):         return 0
sre_parse.py(475):                     if code1[0] is IN:
sre_parse.py(477):                     setappend(code1)
sre_parse.py(442):                 this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(443):                 if this == "]" and set != start:
sre_parse.py(444):                     break
sre_parse.py(480):             if _len(set)==1 and set[0][0] is LITERAL:
sre_parse.py(482):             elif _len(set)==2 and set[0][0] is NEGATE and set[1][0] is LITERAL:
sre_parse.py(486):                 subpatternappend((IN, set))
 --- modulename: sre_parse, funcname: append
sre_parse.py(150):         self.data.append(code)
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(413):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(414):         if this is None:
sre_parse.py(417):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(428):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(431):         elif this == "[":
sre_parse.py(488):         elif this and this[0] in REPEAT_CHARS:
sre_parse.py(490):             if this == "?":
sre_parse.py(492):             elif this == "*":
sre_parse.py(493):                 min, max = 0, MAXREPEAT
sre_parse.py(528):             if subpattern:
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(138):         return len(self.data)
sre_parse.py(529):                 item = subpattern[-1:]
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(138):         return len(self.data)
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(143):             return SubPattern(self.pattern, self.data[index])
 --- modulename: sre_parse, funcname: __init__
sre_parse.py(93):         self.pattern = pattern
sre_parse.py(94):         if data is None:
sre_parse.py(96):         self.data = data
sre_parse.py(97):         self.width = None
sre_parse.py(532):             if not item or (_len(item) == 1 and item[0][0] == AT):
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(138):         return len(self.data)
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(138):         return len(self.data)
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_parse.py(534):             if item[0][0] in REPEATCODES:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_parse.py(536):             if sourcematch("?"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(211):         return 0
sre_parse.py(539):                 subpattern[-1] = (MAX_REPEAT, (min, max, item))
 --- modulename: sre_parse, funcname: __setitem__
sre_parse.py(146):         self.data[index] = code
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(412):             break # end of subpattern
sre_parse.py(704):     return subpattern
sre_parse.py(325):         if sourcematch("|"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(211):         return 0
sre_parse.py(327):         if not nested:
sre_parse.py(329):         if not source.next or sourcematch(")", 0):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(208):             if skip:
sre_parse.py(210):             return 1
sre_parse.py(330):             break
sre_parse.py(334):     if len(items) == 1:
sre_parse.py(335):         return items[0]
sre_parse.py(677):                 if not sourcematch(")"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(208):             if skip:
sre_parse.py(209):                 self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(210):             return 1
sre_parse.py(679):                 if group is not None:
sre_parse.py(680):                     state.closegroup(group)
 --- modulename: sre_parse, funcname: closegroup
sre_parse.py(86):         self.open.remove(gid)
sre_parse.py(681):                 subpatternappend((SUBPATTERN, (group, p)))
 --- modulename: sre_parse, funcname: append
sre_parse.py(150):         self.data.append(code)
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(412):             break # end of subpattern
sre_parse.py(704):     return subpattern
sre_parse.py(325):         if sourcematch("|"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(211):         return 0
sre_parse.py(327):         if not nested:
sre_parse.py(329):         if not source.next or sourcematch(")", 0):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(208):             if skip:
sre_parse.py(210):             return 1
sre_parse.py(330):             break
sre_parse.py(334):     if len(items) == 1:
sre_parse.py(335):         return items[0]
sre_parse.py(677):                 if not sourcematch(")"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(208):             if skip:
sre_parse.py(209):                 self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(210):             return 1
sre_parse.py(679):                 if group is not None:
sre_parse.py(681):                 subpatternappend((SUBPATTERN, (group, p)))
 --- modulename: sre_parse, funcname: append
sre_parse.py(150):         self.data.append(code)
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(413):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(414):         if this is None:
sre_parse.py(417):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(428):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(431):         elif this == "[":
sre_parse.py(488):         elif this and this[0] in REPEAT_CHARS:
sre_parse.py(490):             if this == "?":
sre_parse.py(491):                 min, max = 0, 1
sre_parse.py(528):             if subpattern:
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(138):         return len(self.data)
sre_parse.py(529):                 item = subpattern[-1:]
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(138):         return len(self.data)
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(143):             return SubPattern(self.pattern, self.data[index])
 --- modulename: sre_parse, funcname: __init__
sre_parse.py(93):         self.pattern = pattern
sre_parse.py(94):         if data is None:
sre_parse.py(96):         self.data = data
sre_parse.py(97):         self.width = None
sre_parse.py(532):             if not item or (_len(item) == 1 and item[0][0] == AT):
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(138):         return len(self.data)
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(138):         return len(self.data)
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_parse.py(534):             if item[0][0] in REPEATCODES:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_parse.py(536):             if sourcematch("?"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(211):         return 0
sre_parse.py(539):                 subpattern[-1] = (MAX_REPEAT, (min, max, item))
 --- modulename: sre_parse, funcname: __setitem__
sre_parse.py(146):         self.data[index] = code
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(412):             break # end of subpattern
sre_parse.py(704):     return subpattern
sre_parse.py(325):         if sourcematch("|"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(211):         return 0
sre_parse.py(327):         if not nested:
sre_parse.py(329):         if not source.next or sourcematch(")", 0):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(208):             if skip:
sre_parse.py(210):             return 1
sre_parse.py(330):             break
sre_parse.py(334):     if len(items) == 1:
sre_parse.py(335):         return items[0]
sre_parse.py(677):                 if not sourcematch(")"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(208):             if skip:
sre_parse.py(209):                 self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(210):             return 1
sre_parse.py(679):                 if group is not None:
sre_parse.py(681):                 subpatternappend((SUBPATTERN, (group, p)))
 --- modulename: sre_parse, funcname: append
sre_parse.py(150):         self.data.append(code)
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(413):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(199):             try:
sre_parse.py(200):                 c = self.string[self.index + 1]
sre_parse.py(203):             char = char + c
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(414):         if this is None:
sre_parse.py(417):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(428):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(431):         elif this == "[":
sre_parse.py(488):         elif this and this[0] in REPEAT_CHARS:
sre_parse.py(490):             if this == "?":
sre_parse.py(491):                 min, max = 0, 1
sre_parse.py(528):             if subpattern:
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(138):         return len(self.data)
sre_parse.py(529):                 item = subpattern[-1:]
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(138):         return len(self.data)
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(143):             return SubPattern(self.pattern, self.data[index])
 --- modulename: sre_parse, funcname: __init__
sre_parse.py(93):         self.pattern = pattern
sre_parse.py(94):         if data is None:
sre_parse.py(96):         self.data = data
sre_parse.py(97):         self.width = None
sre_parse.py(532):             if not item or (_len(item) == 1 and item[0][0] == AT):
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(138):         return len(self.data)
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(138):         return len(self.data)
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_parse.py(534):             if item[0][0] in REPEATCODES:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_parse.py(536):             if sourcematch("?"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(211):         return 0
sre_parse.py(539):                 subpattern[-1] = (MAX_REPEAT, (min, max, item))
 --- modulename: sre_parse, funcname: __setitem__
sre_parse.py(146):         self.data[index] = code
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(413):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(199):             try:
sre_parse.py(200):                 c = self.string[self.index + 1]
sre_parse.py(203):             char = char + c
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(414):         if this is None:
sre_parse.py(417):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(428):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(431):         elif this == "[":
sre_parse.py(488):         elif this and this[0] in REPEAT_CHARS:
sre_parse.py(541):         elif this == ".":
sre_parse.py(544):         elif this == "(":
sre_parse.py(691):         elif this == "^":
sre_parse.py(694):         elif this == "$":
sre_parse.py(697):         elif this and this[0] == "\\":
sre_parse.py(698):             code = _escape(source, this, state)
 --- modulename: sre_parse, funcname: _escape
sre_parse.py(270):     code = CATEGORIES.get(escape)
sre_parse.py(271):     if code:
sre_parse.py(273):     code = ESCAPES.get(escape)
sre_parse.py(274):     if code:
sre_parse.py(276):     try:
sre_parse.py(277):         c = escape[1:2]
sre_parse.py(278):         if c == "x":
sre_parse.py(285):         elif c == "0":
sre_parse.py(290):         elif c in DIGITS:
sre_parse.py(311):         if len(escape) == 2:
sre_parse.py(312):             return LITERAL, ord(escape[1])
sre_parse.py(699):             subpatternappend(code)
 --- modulename: sre_parse, funcname: append
sre_parse.py(150):         self.data.append(code)
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(413):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(414):         if this is None:
sre_parse.py(417):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(428):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(431):         elif this == "[":
sre_parse.py(488):         elif this and this[0] in REPEAT_CHARS:
sre_parse.py(541):         elif this == ".":
sre_parse.py(544):         elif this == "(":
sre_parse.py(691):         elif this == "^":
sre_parse.py(694):         elif this == "$":
sre_parse.py(697):         elif this and this[0] == "\\":
sre_parse.py(698):             code = _escape(source, this, state)
 --- modulename: sre_parse, funcname: _escape
sre_parse.py(270):     code = CATEGORIES.get(escape)
sre_parse.py(271):     if code:
sre_parse.py(272):         return code
sre_parse.py(699):             subpatternappend(code)
 --- modulename: sre_parse, funcname: append
sre_parse.py(150):         self.data.append(code)
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(413):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(199):             try:
sre_parse.py(200):                 c = self.string[self.index + 1]
sre_parse.py(203):             char = char + c
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(414):         if this is None:
sre_parse.py(417):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(428):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(431):         elif this == "[":
sre_parse.py(488):         elif this and this[0] in REPEAT_CHARS:
sre_parse.py(490):             if this == "?":
sre_parse.py(492):             elif this == "*":
sre_parse.py(493):                 min, max = 0, MAXREPEAT
sre_parse.py(528):             if subpattern:
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(138):         return len(self.data)
sre_parse.py(529):                 item = subpattern[-1:]
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(138):         return len(self.data)
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(143):             return SubPattern(self.pattern, self.data[index])
 --- modulename: sre_parse, funcname: __init__
sre_parse.py(93):         self.pattern = pattern
sre_parse.py(94):         if data is None:
sre_parse.py(96):         self.data = data
sre_parse.py(97):         self.width = None
sre_parse.py(532):             if not item or (_len(item) == 1 and item[0][0] == AT):
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(138):         return len(self.data)
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(138):         return len(self.data)
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_parse.py(534):             if item[0][0] in REPEATCODES:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_parse.py(536):             if sourcematch("?"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(211):         return 0
sre_parse.py(539):                 subpattern[-1] = (MAX_REPEAT, (min, max, item))
 --- modulename: sre_parse, funcname: __setitem__
sre_parse.py(146):         self.data[index] = code
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(413):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(414):         if this is None:
sre_parse.py(417):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(428):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(431):         elif this == "[":
sre_parse.py(488):         elif this and this[0] in REPEAT_CHARS:
sre_parse.py(541):         elif this == ".":
sre_parse.py(544):         elif this == "(":
sre_parse.py(691):         elif this == "^":
sre_parse.py(694):         elif this == "$":
sre_parse.py(697):         elif this and this[0] == "\\":
sre_parse.py(698):             code = _escape(source, this, state)
 --- modulename: sre_parse, funcname: _escape
sre_parse.py(270):     code = CATEGORIES.get(escape)
sre_parse.py(271):     if code:
sre_parse.py(273):     code = ESCAPES.get(escape)
sre_parse.py(274):     if code:
sre_parse.py(276):     try:
sre_parse.py(277):         c = escape[1:2]
sre_parse.py(278):         if c == "x":
sre_parse.py(285):         elif c == "0":
sre_parse.py(290):         elif c in DIGITS:
sre_parse.py(311):         if len(escape) == 2:
sre_parse.py(312):             return LITERAL, ord(escape[1])
sre_parse.py(699):             subpatternappend(code)
 --- modulename: sre_parse, funcname: append
sre_parse.py(150):         self.data.append(code)
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(413):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(414):         if this is None:
sre_parse.py(417):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(428):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(431):         elif this == "[":
sre_parse.py(488):         elif this and this[0] in REPEAT_CHARS:
sre_parse.py(541):         elif this == ".":
sre_parse.py(544):         elif this == "(":
sre_parse.py(545):             group = 1
sre_parse.py(546):             name = None
sre_parse.py(547):             condgroup = None
sre_parse.py(548):             if sourcematch("?"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(211):         return 0
sre_parse.py(666):             if group:
sre_parse.py(668):                 if group == 2:
sre_parse.py(672):                     group = state.opengroup(name)
 --- modulename: sre_parse, funcname: opengroup
sre_parse.py(75):         gid = self.groups
sre_parse.py(76):         self.groups = gid + 1
sre_parse.py(77):         if name is not None:
sre_parse.py(83):         self.open.append(gid)
sre_parse.py(84):         return gid
sre_parse.py(673):                 if condgroup:
sre_parse.py(676):                     p = _parse_sub(source, state)
 --- modulename: sre_parse, funcname: _parse_sub
sre_parse.py(320):     items = []
sre_parse.py(321):     itemsappend = items.append
sre_parse.py(322):     sourcematch = source.match
sre_parse.py(323):     while 1:
sre_parse.py(324):         itemsappend(_parse(source, state))
 --- modulename: sre_parse, funcname: _parse
sre_parse.py(397):     subpattern = SubPattern(state)
 --- modulename: sre_parse, funcname: __init__
sre_parse.py(93):         self.pattern = pattern
sre_parse.py(94):         if data is None:
sre_parse.py(95):             data = []
sre_parse.py(96):         self.data = data
sre_parse.py(97):         self.width = None
sre_parse.py(400):     subpatternappend = subpattern.append
sre_parse.py(401):     sourceget = source.get
sre_parse.py(402):     sourcematch = source.match
sre_parse.py(403):     _len = len
sre_parse.py(404):     PATTERNENDERS = _PATTERNENDERS
sre_parse.py(405):     ASSERTCHARS = _ASSERTCHARS
sre_parse.py(406):     LOOKBEHINDASSERTCHARS = _LOOKBEHINDASSERTCHARS
sre_parse.py(407):     REPEATCODES = _REPEATCODES
sre_parse.py(409):     while 1:
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(413):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(414):         if this is None:
sre_parse.py(417):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(428):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(431):         elif this == "[":
sre_parse.py(433):             set = []
sre_parse.py(434):             setappend = set.append
sre_parse.py(437):             if sourcematch("^"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(208):             if skip:
sre_parse.py(209):                 self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(199):             try:
sre_parse.py(200):                 c = self.string[self.index + 1]
sre_parse.py(203):             char = char + c
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(210):             return 1
sre_parse.py(438):                 setappend((NEGATE, None))
sre_parse.py(440):             start = set[:]
sre_parse.py(441):             while 1:
sre_parse.py(442):                 this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(443):                 if this == "]" and set != start:
sre_parse.py(445):                 elif this and this[0] == "\\":
sre_parse.py(446):                     code1 = _class_escape(source, this)
 --- modulename: sre_parse, funcname: _class_escape
sre_parse.py(238):     code = ESCAPES.get(escape)
sre_parse.py(239):     if code:
sre_parse.py(241):     code = CATEGORIES.get(escape)
sre_parse.py(242):     if code and code[0] == IN:
sre_parse.py(244):     try:
sre_parse.py(245):         c = escape[1:2]
sre_parse.py(246):         if c == "x":
sre_parse.py(254):         elif c in OCTDIGITS:
sre_parse.py(260):         elif c in DIGITS:
sre_parse.py(262):         if len(escape) == 2:
sre_parse.py(263):             return LITERAL, ord(escape[1])
sre_parse.py(451):                 if sourcematch("-"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(211):         return 0
sre_parse.py(475):                     if code1[0] is IN:
sre_parse.py(477):                     setappend(code1)
sre_parse.py(442):                 this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(443):                 if this == "]" and set != start:
sre_parse.py(444):                     break
sre_parse.py(480):             if _len(set)==1 and set[0][0] is LITERAL:
sre_parse.py(482):             elif _len(set)==2 and set[0][0] is NEGATE and set[1][0] is LITERAL:
sre_parse.py(483):                 subpatternappend((NOT_LITERAL, set[1][1])) # optimization
 --- modulename: sre_parse, funcname: append
sre_parse.py(150):         self.data.append(code)
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(413):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(414):         if this is None:
sre_parse.py(417):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(428):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(431):         elif this == "[":
sre_parse.py(488):         elif this and this[0] in REPEAT_CHARS:
sre_parse.py(490):             if this == "?":
sre_parse.py(492):             elif this == "*":
sre_parse.py(495):             elif this == "+":
sre_parse.py(496):                 min, max = 1, MAXREPEAT
sre_parse.py(528):             if subpattern:
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(138):         return len(self.data)
sre_parse.py(529):                 item = subpattern[-1:]
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(138):         return len(self.data)
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(143):             return SubPattern(self.pattern, self.data[index])
 --- modulename: sre_parse, funcname: __init__
sre_parse.py(93):         self.pattern = pattern
sre_parse.py(94):         if data is None:
sre_parse.py(96):         self.data = data
sre_parse.py(97):         self.width = None
sre_parse.py(532):             if not item or (_len(item) == 1 and item[0][0] == AT):
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(138):         return len(self.data)
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(138):         return len(self.data)
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_parse.py(534):             if item[0][0] in REPEATCODES:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_parse.py(536):             if sourcematch("?"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(211):         return 0
sre_parse.py(539):                 subpattern[-1] = (MAX_REPEAT, (min, max, item))
 --- modulename: sre_parse, funcname: __setitem__
sre_parse.py(146):         self.data[index] = code
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(412):             break # end of subpattern
sre_parse.py(704):     return subpattern
sre_parse.py(325):         if sourcematch("|"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(211):         return 0
sre_parse.py(327):         if not nested:
sre_parse.py(329):         if not source.next or sourcematch(")", 0):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(208):             if skip:
sre_parse.py(210):             return 1
sre_parse.py(330):             break
sre_parse.py(334):     if len(items) == 1:
sre_parse.py(335):         return items[0]
sre_parse.py(677):                 if not sourcematch(")"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(208):             if skip:
sre_parse.py(209):                 self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(199):             try:
sre_parse.py(200):                 c = self.string[self.index + 1]
sre_parse.py(203):             char = char + c
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(210):             return 1
sre_parse.py(679):                 if group is not None:
sre_parse.py(680):                     state.closegroup(group)
 --- modulename: sre_parse, funcname: closegroup
sre_parse.py(86):         self.open.remove(gid)
sre_parse.py(681):                 subpatternappend((SUBPATTERN, (group, p)))
 --- modulename: sre_parse, funcname: append
sre_parse.py(150):         self.data.append(code)
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(413):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(414):         if this is None:
sre_parse.py(417):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(428):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(431):         elif this == "[":
sre_parse.py(488):         elif this and this[0] in REPEAT_CHARS:
sre_parse.py(541):         elif this == ".":
sre_parse.py(544):         elif this == "(":
sre_parse.py(691):         elif this == "^":
sre_parse.py(694):         elif this == "$":
sre_parse.py(697):         elif this and this[0] == "\\":
sre_parse.py(698):             code = _escape(source, this, state)
 --- modulename: sre_parse, funcname: _escape
sre_parse.py(270):     code = CATEGORIES.get(escape)
sre_parse.py(271):     if code:
sre_parse.py(273):     code = ESCAPES.get(escape)
sre_parse.py(274):     if code:
sre_parse.py(276):     try:
sre_parse.py(277):         c = escape[1:2]
sre_parse.py(278):         if c == "x":
sre_parse.py(285):         elif c == "0":
sre_parse.py(290):         elif c in DIGITS:
sre_parse.py(311):         if len(escape) == 2:
sre_parse.py(312):             return LITERAL, ord(escape[1])
sre_parse.py(699):             subpatternappend(code)
 --- modulename: sre_parse, funcname: append
sre_parse.py(150):         self.data.append(code)
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(413):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(195):             self.next = None
sre_parse.py(196):             return
sre_parse.py(215):         return this
sre_parse.py(414):         if this is None:
sre_parse.py(417):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(428):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(431):         elif this == "[":
sre_parse.py(488):         elif this and this[0] in REPEAT_CHARS:
sre_parse.py(490):             if this == "?":
sre_parse.py(491):                 min, max = 0, 1
sre_parse.py(528):             if subpattern:
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(138):         return len(self.data)
sre_parse.py(529):                 item = subpattern[-1:]
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(138):         return len(self.data)
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(143):             return SubPattern(self.pattern, self.data[index])
 --- modulename: sre_parse, funcname: __init__
sre_parse.py(93):         self.pattern = pattern
sre_parse.py(94):         if data is None:
sre_parse.py(96):         self.data = data
sre_parse.py(97):         self.width = None
sre_parse.py(532):             if not item or (_len(item) == 1 and item[0][0] == AT):
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(138):         return len(self.data)
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(138):         return len(self.data)
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_parse.py(534):             if item[0][0] in REPEATCODES:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_parse.py(536):             if sourcematch("?"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(211):         return 0
sre_parse.py(539):                 subpattern[-1] = (MAX_REPEAT, (min, max, item))
 --- modulename: sre_parse, funcname: __setitem__
sre_parse.py(146):         self.data[index] = code
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(413):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(195):             self.next = None
sre_parse.py(196):             return
sre_parse.py(215):         return this
sre_parse.py(414):         if this is None:
sre_parse.py(415):             break # end of pattern
sre_parse.py(704):     return subpattern
sre_parse.py(325):         if sourcematch("|"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(211):         return 0
sre_parse.py(327):         if not nested:
sre_parse.py(328):             break
sre_parse.py(334):     if len(items) == 1:
sre_parse.py(335):         return items[0]
sre_parse.py(718):     tail = source.get()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(195):             self.next = None
sre_parse.py(196):             return
sre_parse.py(215):         return this
sre_parse.py(719):     if tail == ")":
sre_parse.py(721):     elif tail:
sre_parse.py(724):     if not (flags & SRE_FLAG_VERBOSE) and p.pattern.flags & SRE_FLAG_VERBOSE:
sre_parse.py(729):     if flags & SRE_FLAG_DEBUG:
sre_parse.py(732):     return p
sre_compile.py(576):     code = _code(p, flags)
 --- modulename: sre_compile, funcname: _code
sre_compile.py(554):     flags = p.pattern.flags | flags
sre_compile.py(555):     code = []
sre_compile.py(558):     _compile_info(code, p, flags)
 --- modulename: sre_compile, funcname: _compile_info
sre_compile.py(437):     lo, hi = pattern.getwidth()
 --- modulename: sre_parse, funcname: getwidth
sre_parse.py(153):         if self.width:
sre_parse.py(155):         lo = hi = 0
sre_parse.py(156):         UNITCODES = (ANY, RANGE, IN, LITERAL, NOT_LITERAL, CATEGORY)
sre_parse.py(157):         REPEATCODES = (MIN_REPEAT, MAX_REPEAT)
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(159):             if op is BRANCH:
sre_parse.py(168):             elif op is CALL:
sre_parse.py(172):             elif op is SUBPATTERN:
sre_parse.py(173):                 i, j = av[1].getwidth()
 --- modulename: sre_parse, funcname: getwidth
sre_parse.py(153):         if self.width:
sre_parse.py(155):         lo = hi = 0
sre_parse.py(156):         UNITCODES = (ANY, RANGE, IN, LITERAL, NOT_LITERAL, CATEGORY)
sre_parse.py(157):         REPEATCODES = (MIN_REPEAT, MAX_REPEAT)
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(159):             if op is BRANCH:
sre_parse.py(168):             elif op is CALL:
sre_parse.py(172):             elif op is SUBPATTERN:
sre_parse.py(176):             elif op in REPEATCODES:
sre_parse.py(177):                 i, j = av[2].getwidth()
 --- modulename: sre_parse, funcname: getwidth
sre_parse.py(153):         if self.width:
sre_parse.py(155):         lo = hi = 0
sre_parse.py(156):         UNITCODES = (ANY, RANGE, IN, LITERAL, NOT_LITERAL, CATEGORY)
sre_parse.py(157):         REPEATCODES = (MIN_REPEAT, MAX_REPEAT)
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(159):             if op is BRANCH:
sre_parse.py(168):             elif op is CALL:
sre_parse.py(172):             elif op is SUBPATTERN:
sre_parse.py(176):             elif op in REPEATCODES:
sre_parse.py(180):             elif op in UNITCODES:
sre_parse.py(181):                 lo = lo + 1
sre_parse.py(182):                 hi = hi + 1
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(185):         self.width = min(lo, MAXREPEAT - 1), min(hi, MAXREPEAT)
sre_parse.py(186):         return self.width
sre_parse.py(178):                 lo = lo + i * av[0]
sre_parse.py(179):                 hi = hi + j * av[1]
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(185):         self.width = min(lo, MAXREPEAT - 1), min(hi, MAXREPEAT)
sre_parse.py(186):         return self.width
sre_parse.py(174):                 lo = lo + i
sre_parse.py(175):                 hi = hi + j
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(159):             if op is BRANCH:
sre_parse.py(168):             elif op is CALL:
sre_parse.py(172):             elif op is SUBPATTERN:
sre_parse.py(176):             elif op in REPEATCODES:
sre_parse.py(177):                 i, j = av[2].getwidth()
 --- modulename: sre_parse, funcname: getwidth
sre_parse.py(153):         if self.width:
sre_parse.py(155):         lo = hi = 0
sre_parse.py(156):         UNITCODES = (ANY, RANGE, IN, LITERAL, NOT_LITERAL, CATEGORY)
sre_parse.py(157):         REPEATCODES = (MIN_REPEAT, MAX_REPEAT)
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(159):             if op is BRANCH:
sre_parse.py(168):             elif op is CALL:
sre_parse.py(172):             elif op is SUBPATTERN:
sre_parse.py(176):             elif op in REPEATCODES:
sre_parse.py(180):             elif op in UNITCODES:
sre_parse.py(181):                 lo = lo + 1
sre_parse.py(182):                 hi = hi + 1
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(185):         self.width = min(lo, MAXREPEAT - 1), min(hi, MAXREPEAT)
sre_parse.py(186):         return self.width
sre_parse.py(178):                 lo = lo + i * av[0]
sre_parse.py(179):                 hi = hi + j * av[1]
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(159):             if op is BRANCH:
sre_parse.py(168):             elif op is CALL:
sre_parse.py(172):             elif op is SUBPATTERN:
sre_parse.py(176):             elif op in REPEATCODES:
sre_parse.py(180):             elif op in UNITCODES:
sre_parse.py(181):                 lo = lo + 1
sre_parse.py(182):                 hi = hi + 1
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(159):             if op is BRANCH:
sre_parse.py(168):             elif op is CALL:
sre_parse.py(172):             elif op is SUBPATTERN:
sre_parse.py(176):             elif op in REPEATCODES:
sre_parse.py(177):                 i, j = av[2].getwidth()
 --- modulename: sre_parse, funcname: getwidth
sre_parse.py(153):         if self.width:
sre_parse.py(155):         lo = hi = 0
sre_parse.py(156):         UNITCODES = (ANY, RANGE, IN, LITERAL, NOT_LITERAL, CATEGORY)
sre_parse.py(157):         REPEATCODES = (MIN_REPEAT, MAX_REPEAT)
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(159):             if op is BRANCH:
sre_parse.py(168):             elif op is CALL:
sre_parse.py(172):             elif op is SUBPATTERN:
sre_parse.py(176):             elif op in REPEATCODES:
sre_parse.py(180):             elif op in UNITCODES:
sre_parse.py(181):                 lo = lo + 1
sre_parse.py(182):                 hi = hi + 1
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(185):         self.width = min(lo, MAXREPEAT - 1), min(hi, MAXREPEAT)
sre_parse.py(186):         return self.width
sre_parse.py(178):                 lo = lo + i * av[0]
sre_parse.py(179):                 hi = hi + j * av[1]
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(159):             if op is BRANCH:
sre_parse.py(168):             elif op is CALL:
sre_parse.py(172):             elif op is SUBPATTERN:
sre_parse.py(173):                 i, j = av[1].getwidth()
 --- modulename: sre_parse, funcname: getwidth
sre_parse.py(153):         if self.width:
sre_parse.py(155):         lo = hi = 0
sre_parse.py(156):         UNITCODES = (ANY, RANGE, IN, LITERAL, NOT_LITERAL, CATEGORY)
sre_parse.py(157):         REPEATCODES = (MIN_REPEAT, MAX_REPEAT)
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(159):             if op is BRANCH:
sre_parse.py(168):             elif op is CALL:
sre_parse.py(172):             elif op is SUBPATTERN:
sre_parse.py(176):             elif op in REPEATCODES:
sre_parse.py(177):                 i, j = av[2].getwidth()
 --- modulename: sre_parse, funcname: getwidth
sre_parse.py(153):         if self.width:
sre_parse.py(155):         lo = hi = 0
sre_parse.py(156):         UNITCODES = (ANY, RANGE, IN, LITERAL, NOT_LITERAL, CATEGORY)
sre_parse.py(157):         REPEATCODES = (MIN_REPEAT, MAX_REPEAT)
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(159):             if op is BRANCH:
sre_parse.py(168):             elif op is CALL:
sre_parse.py(172):             elif op is SUBPATTERN:
sre_parse.py(176):             elif op in REPEATCODES:
sre_parse.py(180):             elif op in UNITCODES:
sre_parse.py(181):                 lo = lo + 1
sre_parse.py(182):                 hi = hi + 1
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(185):         self.width = min(lo, MAXREPEAT - 1), min(hi, MAXREPEAT)
sre_parse.py(186):         return self.width
sre_parse.py(178):                 lo = lo + i * av[0]
sre_parse.py(179):                 hi = hi + j * av[1]
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(185):         self.width = min(lo, MAXREPEAT - 1), min(hi, MAXREPEAT)
sre_parse.py(186):         return self.width
sre_parse.py(174):                 lo = lo + i
sre_parse.py(175):                 hi = hi + j
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(159):             if op is BRANCH:
sre_parse.py(168):             elif op is CALL:
sre_parse.py(172):             elif op is SUBPATTERN:
sre_parse.py(176):             elif op in REPEATCODES:
sre_parse.py(177):                 i, j = av[2].getwidth()
 --- modulename: sre_parse, funcname: getwidth
sre_parse.py(153):         if self.width:
sre_parse.py(155):         lo = hi = 0
sre_parse.py(156):         UNITCODES = (ANY, RANGE, IN, LITERAL, NOT_LITERAL, CATEGORY)
sre_parse.py(157):         REPEATCODES = (MIN_REPEAT, MAX_REPEAT)
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(159):             if op is BRANCH:
sre_parse.py(168):             elif op is CALL:
sre_parse.py(172):             elif op is SUBPATTERN:
sre_parse.py(173):                 i, j = av[1].getwidth()
 --- modulename: sre_parse, funcname: getwidth
sre_parse.py(153):         if self.width:
sre_parse.py(155):         lo = hi = 0
sre_parse.py(156):         UNITCODES = (ANY, RANGE, IN, LITERAL, NOT_LITERAL, CATEGORY)
sre_parse.py(157):         REPEATCODES = (MIN_REPEAT, MAX_REPEAT)
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(159):             if op is BRANCH:
sre_parse.py(168):             elif op is CALL:
sre_parse.py(172):             elif op is SUBPATTERN:
sre_parse.py(176):             elif op in REPEATCODES:
sre_parse.py(180):             elif op in UNITCODES:
sre_parse.py(181):                 lo = lo + 1
sre_parse.py(182):                 hi = hi + 1
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(159):             if op is BRANCH:
sre_parse.py(168):             elif op is CALL:
sre_parse.py(172):             elif op is SUBPATTERN:
sre_parse.py(176):             elif op in REPEATCODES:
sre_parse.py(177):                 i, j = av[2].getwidth()
 --- modulename: sre_parse, funcname: getwidth
sre_parse.py(153):         if self.width:
sre_parse.py(155):         lo = hi = 0
sre_parse.py(156):         UNITCODES = (ANY, RANGE, IN, LITERAL, NOT_LITERAL, CATEGORY)
sre_parse.py(157):         REPEATCODES = (MIN_REPEAT, MAX_REPEAT)
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(159):             if op is BRANCH:
sre_parse.py(168):             elif op is CALL:
sre_parse.py(172):             elif op is SUBPATTERN:
sre_parse.py(176):             elif op in REPEATCODES:
sre_parse.py(180):             elif op in UNITCODES:
sre_parse.py(181):                 lo = lo + 1
sre_parse.py(182):                 hi = hi + 1
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(185):         self.width = min(lo, MAXREPEAT - 1), min(hi, MAXREPEAT)
sre_parse.py(186):         return self.width
sre_parse.py(178):                 lo = lo + i * av[0]
sre_parse.py(179):                 hi = hi + j * av[1]
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(159):             if op is BRANCH:
sre_parse.py(168):             elif op is CALL:
sre_parse.py(172):             elif op is SUBPATTERN:
sre_parse.py(173):                 i, j = av[1].getwidth()
 --- modulename: sre_parse, funcname: getwidth
sre_parse.py(153):         if self.width:
sre_parse.py(155):         lo = hi = 0
sre_parse.py(156):         UNITCODES = (ANY, RANGE, IN, LITERAL, NOT_LITERAL, CATEGORY)
sre_parse.py(157):         REPEATCODES = (MIN_REPEAT, MAX_REPEAT)
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(159):             if op is BRANCH:
sre_parse.py(168):             elif op is CALL:
sre_parse.py(172):             elif op is SUBPATTERN:
sre_parse.py(176):             elif op in REPEATCODES:
sre_parse.py(177):                 i, j = av[2].getwidth()
 --- modulename: sre_parse, funcname: getwidth
sre_parse.py(153):         if self.width:
sre_parse.py(155):         lo = hi = 0
sre_parse.py(156):         UNITCODES = (ANY, RANGE, IN, LITERAL, NOT_LITERAL, CATEGORY)
sre_parse.py(157):         REPEATCODES = (MIN_REPEAT, MAX_REPEAT)
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(159):             if op is BRANCH:
sre_parse.py(168):             elif op is CALL:
sre_parse.py(172):             elif op is SUBPATTERN:
sre_parse.py(176):             elif op in REPEATCODES:
sre_parse.py(180):             elif op in UNITCODES:
sre_parse.py(181):                 lo = lo + 1
sre_parse.py(182):                 hi = hi + 1
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(185):         self.width = min(lo, MAXREPEAT - 1), min(hi, MAXREPEAT)
sre_parse.py(186):         return self.width
sre_parse.py(178):                 lo = lo + i * av[0]
sre_parse.py(179):                 hi = hi + j * av[1]
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(185):         self.width = min(lo, MAXREPEAT - 1), min(hi, MAXREPEAT)
sre_parse.py(186):         return self.width
sre_parse.py(174):                 lo = lo + i
sre_parse.py(175):                 hi = hi + j
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(159):             if op is BRANCH:
sre_parse.py(168):             elif op is CALL:
sre_parse.py(172):             elif op is SUBPATTERN:
sre_parse.py(176):             elif op in REPEATCODES:
sre_parse.py(177):                 i, j = av[2].getwidth()
 --- modulename: sre_parse, funcname: getwidth
sre_parse.py(153):         if self.width:
sre_parse.py(155):         lo = hi = 0
sre_parse.py(156):         UNITCODES = (ANY, RANGE, IN, LITERAL, NOT_LITERAL, CATEGORY)
sre_parse.py(157):         REPEATCODES = (MIN_REPEAT, MAX_REPEAT)
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(159):             if op is BRANCH:
sre_parse.py(168):             elif op is CALL:
sre_parse.py(172):             elif op is SUBPATTERN:
sre_parse.py(173):                 i, j = av[1].getwidth()
 --- modulename: sre_parse, funcname: getwidth
sre_parse.py(153):         if self.width:
sre_parse.py(155):         lo = hi = 0
sre_parse.py(156):         UNITCODES = (ANY, RANGE, IN, LITERAL, NOT_LITERAL, CATEGORY)
sre_parse.py(157):         REPEATCODES = (MIN_REPEAT, MAX_REPEAT)
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(159):             if op is BRANCH:
sre_parse.py(168):             elif op is CALL:
sre_parse.py(172):             elif op is SUBPATTERN:
sre_parse.py(176):             elif op in REPEATCODES:
sre_parse.py(180):             elif op in UNITCODES:
sre_parse.py(181):                 lo = lo + 1
sre_parse.py(182):                 hi = hi + 1
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(159):             if op is BRANCH:
sre_parse.py(168):             elif op is CALL:
sre_parse.py(172):             elif op is SUBPATTERN:
sre_parse.py(176):             elif op in REPEATCODES:
sre_parse.py(177):                 i, j = av[2].getwidth()
 --- modulename: sre_parse, funcname: getwidth
sre_parse.py(153):         if self.width:
sre_parse.py(155):         lo = hi = 0
sre_parse.py(156):         UNITCODES = (ANY, RANGE, IN, LITERAL, NOT_LITERAL, CATEGORY)
sre_parse.py(157):         REPEATCODES = (MIN_REPEAT, MAX_REPEAT)
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(159):             if op is BRANCH:
sre_parse.py(168):             elif op is CALL:
sre_parse.py(172):             elif op is SUBPATTERN:
sre_parse.py(176):             elif op in REPEATCODES:
sre_parse.py(180):             elif op in UNITCODES:
sre_parse.py(181):                 lo = lo + 1
sre_parse.py(182):                 hi = hi + 1
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(185):         self.width = min(lo, MAXREPEAT - 1), min(hi, MAXREPEAT)
sre_parse.py(186):         return self.width
sre_parse.py(178):                 lo = lo + i * av[0]
sre_parse.py(179):                 hi = hi + j * av[1]
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(159):             if op is BRANCH:
sre_parse.py(168):             elif op is CALL:
sre_parse.py(172):             elif op is SUBPATTERN:
sre_parse.py(173):                 i, j = av[1].getwidth()
 --- modulename: sre_parse, funcname: getwidth
sre_parse.py(153):         if self.width:
sre_parse.py(155):         lo = hi = 0
sre_parse.py(156):         UNITCODES = (ANY, RANGE, IN, LITERAL, NOT_LITERAL, CATEGORY)
sre_parse.py(157):         REPEATCODES = (MIN_REPEAT, MAX_REPEAT)
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(159):             if op is BRANCH:
sre_parse.py(168):             elif op is CALL:
sre_parse.py(172):             elif op is SUBPATTERN:
sre_parse.py(176):             elif op in REPEATCODES:
sre_parse.py(177):                 i, j = av[2].getwidth()
 --- modulename: sre_parse, funcname: getwidth
sre_parse.py(153):         if self.width:
sre_parse.py(155):         lo = hi = 0
sre_parse.py(156):         UNITCODES = (ANY, RANGE, IN, LITERAL, NOT_LITERAL, CATEGORY)
sre_parse.py(157):         REPEATCODES = (MIN_REPEAT, MAX_REPEAT)
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(159):             if op is BRANCH:
sre_parse.py(168):             elif op is CALL:
sre_parse.py(172):             elif op is SUBPATTERN:
sre_parse.py(176):             elif op in REPEATCODES:
sre_parse.py(180):             elif op in UNITCODES:
sre_parse.py(181):                 lo = lo + 1
sre_parse.py(182):                 hi = hi + 1
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(185):         self.width = min(lo, MAXREPEAT - 1), min(hi, MAXREPEAT)
sre_parse.py(186):         return self.width
sre_parse.py(178):                 lo = lo + i * av[0]
sre_parse.py(179):                 hi = hi + j * av[1]
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(185):         self.width = min(lo, MAXREPEAT - 1), min(hi, MAXREPEAT)
sre_parse.py(186):         return self.width
sre_parse.py(174):                 lo = lo + i
sre_parse.py(175):                 hi = hi + j
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(185):         self.width = min(lo, MAXREPEAT - 1), min(hi, MAXREPEAT)
sre_parse.py(186):         return self.width
sre_parse.py(174):                 lo = lo + i
sre_parse.py(175):                 hi = hi + j
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(185):         self.width = min(lo, MAXREPEAT - 1), min(hi, MAXREPEAT)
sre_parse.py(186):         return self.width
sre_parse.py(178):                 lo = lo + i * av[0]
sre_parse.py(179):                 hi = hi + j * av[1]
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(185):         self.width = min(lo, MAXREPEAT - 1), min(hi, MAXREPEAT)
sre_parse.py(186):         return self.width
sre_parse.py(174):                 lo = lo + i
sre_parse.py(175):                 hi = hi + j
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(185):         self.width = min(lo, MAXREPEAT - 1), min(hi, MAXREPEAT)
sre_parse.py(186):         return self.width
sre_parse.py(178):                 lo = lo + i * av[0]
sre_parse.py(179):                 hi = hi + j * av[1]
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(159):             if op is BRANCH:
sre_parse.py(168):             elif op is CALL:
sre_parse.py(172):             elif op is SUBPATTERN:
sre_parse.py(176):             elif op in REPEATCODES:
sre_parse.py(180):             elif op in UNITCODES:
sre_parse.py(181):                 lo = lo + 1
sre_parse.py(182):                 hi = hi + 1
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(159):             if op is BRANCH:
sre_parse.py(168):             elif op is CALL:
sre_parse.py(172):             elif op is SUBPATTERN:
sre_parse.py(176):             elif op in REPEATCODES:
sre_parse.py(177):                 i, j = av[2].getwidth()
 --- modulename: sre_parse, funcname: getwidth
sre_parse.py(153):         if self.width:
sre_parse.py(155):         lo = hi = 0
sre_parse.py(156):         UNITCODES = (ANY, RANGE, IN, LITERAL, NOT_LITERAL, CATEGORY)
sre_parse.py(157):         REPEATCODES = (MIN_REPEAT, MAX_REPEAT)
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(159):             if op is BRANCH:
sre_parse.py(168):             elif op is CALL:
sre_parse.py(172):             elif op is SUBPATTERN:
sre_parse.py(176):             elif op in REPEATCODES:
sre_parse.py(180):             elif op in UNITCODES:
sre_parse.py(181):                 lo = lo + 1
sre_parse.py(182):                 hi = hi + 1
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(185):         self.width = min(lo, MAXREPEAT - 1), min(hi, MAXREPEAT)
sre_parse.py(186):         return self.width
sre_parse.py(178):                 lo = lo + i * av[0]
sre_parse.py(179):                 hi = hi + j * av[1]
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(159):             if op is BRANCH:
sre_parse.py(168):             elif op is CALL:
sre_parse.py(172):             elif op is SUBPATTERN:
sre_parse.py(176):             elif op in REPEATCODES:
sre_parse.py(180):             elif op in UNITCODES:
sre_parse.py(181):                 lo = lo + 1
sre_parse.py(182):                 hi = hi + 1
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(159):             if op is BRANCH:
sre_parse.py(168):             elif op is CALL:
sre_parse.py(172):             elif op is SUBPATTERN:
sre_parse.py(173):                 i, j = av[1].getwidth()
 --- modulename: sre_parse, funcname: getwidth
sre_parse.py(153):         if self.width:
sre_parse.py(155):         lo = hi = 0
sre_parse.py(156):         UNITCODES = (ANY, RANGE, IN, LITERAL, NOT_LITERAL, CATEGORY)
sre_parse.py(157):         REPEATCODES = (MIN_REPEAT, MAX_REPEAT)
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(159):             if op is BRANCH:
sre_parse.py(168):             elif op is CALL:
sre_parse.py(172):             elif op is SUBPATTERN:
sre_parse.py(176):             elif op in REPEATCODES:
sre_parse.py(177):                 i, j = av[2].getwidth()
 --- modulename: sre_parse, funcname: getwidth
sre_parse.py(153):         if self.width:
sre_parse.py(155):         lo = hi = 0
sre_parse.py(156):         UNITCODES = (ANY, RANGE, IN, LITERAL, NOT_LITERAL, CATEGORY)
sre_parse.py(157):         REPEATCODES = (MIN_REPEAT, MAX_REPEAT)
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(159):             if op is BRANCH:
sre_parse.py(168):             elif op is CALL:
sre_parse.py(172):             elif op is SUBPATTERN:
sre_parse.py(176):             elif op in REPEATCODES:
sre_parse.py(180):             elif op in UNITCODES:
sre_parse.py(181):                 lo = lo + 1
sre_parse.py(182):                 hi = hi + 1
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(185):         self.width = min(lo, MAXREPEAT - 1), min(hi, MAXREPEAT)
sre_parse.py(186):         return self.width
sre_parse.py(178):                 lo = lo + i * av[0]
sre_parse.py(179):                 hi = hi + j * av[1]
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(185):         self.width = min(lo, MAXREPEAT - 1), min(hi, MAXREPEAT)
sre_parse.py(186):         return self.width
sre_parse.py(174):                 lo = lo + i
sre_parse.py(175):                 hi = hi + j
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(159):             if op is BRANCH:
sre_parse.py(168):             elif op is CALL:
sre_parse.py(172):             elif op is SUBPATTERN:
sre_parse.py(176):             elif op in REPEATCODES:
sre_parse.py(177):                 i, j = av[2].getwidth()
 --- modulename: sre_parse, funcname: getwidth
sre_parse.py(153):         if self.width:
sre_parse.py(155):         lo = hi = 0
sre_parse.py(156):         UNITCODES = (ANY, RANGE, IN, LITERAL, NOT_LITERAL, CATEGORY)
sre_parse.py(157):         REPEATCODES = (MIN_REPEAT, MAX_REPEAT)
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(159):             if op is BRANCH:
sre_parse.py(168):             elif op is CALL:
sre_parse.py(172):             elif op is SUBPATTERN:
sre_parse.py(176):             elif op in REPEATCODES:
sre_parse.py(180):             elif op in UNITCODES:
sre_parse.py(181):                 lo = lo + 1
sre_parse.py(182):                 hi = hi + 1
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(185):         self.width = min(lo, MAXREPEAT - 1), min(hi, MAXREPEAT)
sre_parse.py(186):         return self.width
sre_parse.py(178):                 lo = lo + i * av[0]
sre_parse.py(179):                 hi = hi + j * av[1]
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(185):         self.width = min(lo, MAXREPEAT - 1), min(hi, MAXREPEAT)
sre_parse.py(186):         return self.width
sre_compile.py(438):     if lo == 0:
sre_compile.py(441):     prefix = []
sre_compile.py(442):     prefixappend = prefix.append
sre_compile.py(443):     prefix_skip = 0
sre_compile.py(444):     charset = [] # not used
sre_compile.py(445):     charsetappend = charset.append
sre_compile.py(446):     if not (flags & SRE_FLAG_IGNORECASE):
sre_compile.py(448):         for op, av in pattern.data:
sre_compile.py(449):             if op is LITERAL:
sre_compile.py(453):             elif op is SUBPATTERN and len(av[1]) == 1:
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(138):         return len(self.data)
sre_compile.py(454):                 op, av = av[1][0]
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(455):                 if op is LITERAL:
sre_compile.py(458):                     break
sre_compile.py(462):         if not prefix and pattern.data:
sre_compile.py(463):             op, av = pattern.data[0]
sre_compile.py(464):             if op is SUBPATTERN and av[1]:
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(138):         return len(self.data)
sre_compile.py(465):                 op, av = av[1][0]
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(466):                 if op is LITERAL:
sre_compile.py(468):                 elif op is BRANCH:
sre_compile.py(501):     emit = code.append
sre_compile.py(502):     emit(OPCODES[INFO])
sre_compile.py(503):     skip = len(code); emit(0)
sre_compile.py(505):     mask = 0
sre_compile.py(506):     if prefix:
sre_compile.py(510):     elif charset:
sre_compile.py(512):     emit(mask)
sre_compile.py(514):     if lo < MAXCODE:
sre_compile.py(515):         emit(lo)
sre_compile.py(519):     if hi < MAXCODE:
sre_compile.py(520):         emit(hi)
sre_compile.py(524):     if prefix:
sre_compile.py(535):     elif charset:
sre_compile.py(537):     code[skip] = len(code) - skip
sre_compile.py(561):     _compile(code, p.data, flags)
 --- modulename: sre_compile, funcname: _compile
sre_compile.py(66):     emit = code.append
sre_compile.py(67):     _len = len
sre_compile.py(68):     LITERAL_CODES = _LITERAL_CODES
sre_compile.py(69):     REPEATING_CODES = _REPEATING_CODES
sre_compile.py(70):     SUCCESS_CODES = _SUCCESS_CODES
sre_compile.py(71):     ASSERT_CODES = _ASSERT_CODES
sre_compile.py(72):     if (flags & SRE_FLAG_IGNORECASE and
sre_compile.py(77):         fixes = None
sre_compile.py(78):     for op, av in pattern:
sre_compile.py(79):         if op in LITERAL_CODES:
sre_compile.py(98):         elif op is IN:
sre_compile.py(109):         elif op is ANY:
sre_compile.py(114):         elif op in REPEATING_CODES:
sre_compile.py(146):         elif op is SUBPATTERN:
sre_compile.py(147):             if av[0]:
sre_compile.py(148):                 emit(OPCODES[MARK])
sre_compile.py(149):                 emit((av[0]-1)*2)
sre_compile.py(151):             _compile(code, av[1], flags)
 --- modulename: sre_compile, funcname: _compile
sre_compile.py(66):     emit = code.append
sre_compile.py(67):     _len = len
sre_compile.py(68):     LITERAL_CODES = _LITERAL_CODES
sre_compile.py(69):     REPEATING_CODES = _REPEATING_CODES
sre_compile.py(70):     SUCCESS_CODES = _SUCCESS_CODES
sre_compile.py(71):     ASSERT_CODES = _ASSERT_CODES
sre_compile.py(72):     if (flags & SRE_FLAG_IGNORECASE and
sre_compile.py(77):         fixes = None
sre_compile.py(78):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(79):         if op in LITERAL_CODES:
sre_compile.py(98):         elif op is IN:
sre_compile.py(109):         elif op is ANY:
sre_compile.py(114):         elif op in REPEATING_CODES:
sre_compile.py(115):             if flags & SRE_FLAG_TEMPLATE:
sre_compile.py(124):             elif _simple(av) and op is not REPEAT:
 --- modulename: sre_compile, funcname: _simple
sre_compile.py(430):     lo, hi = av[2].getwidth()
 --- modulename: sre_parse, funcname: getwidth
sre_parse.py(153):         if self.width:
sre_parse.py(154):             return self.width
sre_compile.py(431):     return lo == hi == 1 and av[2][0][0] != SUBPATTERN
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(125):                 if op is MAX_REPEAT:
sre_compile.py(126):                     emit(OPCODES[REPEAT_ONE])
sre_compile.py(129):                 skip = _len(code); emit(0)
sre_compile.py(130):                 emit(av[0])
sre_compile.py(131):                 emit(av[1])
sre_compile.py(132):                 _compile(code, av[2], flags)
 --- modulename: sre_compile, funcname: _compile
sre_compile.py(66):     emit = code.append
sre_compile.py(67):     _len = len
sre_compile.py(68):     LITERAL_CODES = _LITERAL_CODES
sre_compile.py(69):     REPEATING_CODES = _REPEATING_CODES
sre_compile.py(70):     SUCCESS_CODES = _SUCCESS_CODES
sre_compile.py(71):     ASSERT_CODES = _ASSERT_CODES
sre_compile.py(72):     if (flags & SRE_FLAG_IGNORECASE and
sre_compile.py(77):         fixes = None
sre_compile.py(78):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(79):         if op in LITERAL_CODES:
sre_compile.py(98):         elif op is IN:
sre_compile.py(99):             if flags & SRE_FLAG_IGNORECASE:
sre_compile.py(104):                 emit(OPCODES[op])
sre_compile.py(105):                 fixup = None
sre_compile.py(106):             skip = _len(code); emit(0)
sre_compile.py(107):             _compile_charset(av, flags, code, fixup, fixes)
 --- modulename: sre_compile, funcname: _compile_charset
sre_compile.py(230):     emit = code.append
sre_compile.py(231):     for op, av in _optimize_charset(charset, fixup, fixes,
sre_compile.py(232):                                     flags & SRE_FLAG_UNICODE):
 --- modulename: sre_compile, funcname: _optimize_charset
sre_compile.py(258):     out = []
sre_compile.py(259):     tail = []
sre_compile.py(260):     charmap = bytearray(256)
sre_compile.py(261):     for op, av in charset:
sre_compile.py(262):         while True:
sre_compile.py(263):             try:
sre_compile.py(264):                 if op is LITERAL:
sre_compile.py(273):                 elif op is RANGE:
sre_compile.py(286):                 elif op is NEGATE:
sre_compile.py(289):                     tail.append((op, av))
sre_compile.py(310):             break
sre_compile.py(261):     for op, av in charset:
sre_compile.py(262):         while True:
sre_compile.py(263):             try:
sre_compile.py(264):                 if op is LITERAL:
sre_compile.py(265):                     if fixup:
sre_compile.py(272):                         charmap[av] = 1
sre_compile.py(310):             break
sre_compile.py(261):     for op, av in charset:
sre_compile.py(262):         while True:
sre_compile.py(263):             try:
sre_compile.py(264):                 if op is LITERAL:
sre_compile.py(265):                     if fixup:
sre_compile.py(272):                         charmap[av] = 1
sre_compile.py(310):             break
sre_compile.py(261):     for op, av in charset:
sre_compile.py(313):     runs = []
sre_compile.py(314):     q = 0
sre_compile.py(315):     while True:
sre_compile.py(316):         p = charmap.find(b'\1', q)
sre_compile.py(317):         if p < 0:
sre_compile.py(319):         if len(runs) >= 2:
sre_compile.py(322):         q = charmap.find(b'\0', p)
sre_compile.py(323):         if q < 0:
sre_compile.py(326):         runs.append((p, q))
sre_compile.py(315):     while True:
sre_compile.py(316):         p = charmap.find(b'\1', q)
sre_compile.py(317):         if p < 0:
sre_compile.py(319):         if len(runs) >= 2:
sre_compile.py(322):         q = charmap.find(b'\0', p)
sre_compile.py(323):         if q < 0:
sre_compile.py(326):         runs.append((p, q))
sre_compile.py(315):     while True:
sre_compile.py(316):         p = charmap.find(b'\1', q)
sre_compile.py(317):         if p < 0:
sre_compile.py(318):             break
sre_compile.py(327):     if runs is not None:
sre_compile.py(329):         for p, q in runs:
sre_compile.py(330):             if q - p == 1:
sre_compile.py(331):                 out.append((LITERAL, p))
sre_compile.py(329):         for p, q in runs:
sre_compile.py(330):             if q - p == 1:
sre_compile.py(331):                 out.append((LITERAL, p))
sre_compile.py(329):         for p, q in runs:
sre_compile.py(334):         out += tail
sre_compile.py(336):         if fixup or len(out) < len(charset):
sre_compile.py(339):         return charset
sre_compile.py(233):         emit(OPCODES[op])
sre_compile.py(234):         if op is NEGATE:
sre_compile.py(236):         elif op is LITERAL:
sre_compile.py(238):         elif op is RANGE:
sre_compile.py(241):         elif op is CHARSET:
sre_compile.py(243):         elif op is BIGCHARSET:
sre_compile.py(245):         elif op is CATEGORY:
sre_compile.py(246):             if flags & SRE_FLAG_LOCALE:
sre_compile.py(248):             elif flags & SRE_FLAG_UNICODE:
sre_compile.py(251):                 emit(CHCODES[av])
sre_compile.py(232):                                     flags & SRE_FLAG_UNICODE):
sre_compile.py(233):         emit(OPCODES[op])
sre_compile.py(234):         if op is NEGATE:
sre_compile.py(236):         elif op is LITERAL:
sre_compile.py(237):             emit(av)
sre_compile.py(232):                                     flags & SRE_FLAG_UNICODE):
sre_compile.py(233):         emit(OPCODES[op])
sre_compile.py(234):         if op is NEGATE:
sre_compile.py(236):         elif op is LITERAL:
sre_compile.py(237):             emit(av)
sre_compile.py(232):                                     flags & SRE_FLAG_UNICODE):
sre_compile.py(254):     emit(OPCODES[FAILURE])
sre_compile.py(108):             code[skip] = _len(code) - skip
sre_compile.py(78):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(133):                 emit(OPCODES[SUCCESS])
sre_compile.py(134):                 code[skip] = _len(code) - skip
sre_compile.py(78):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(152):             if av[0]:
sre_compile.py(153):                 emit(OPCODES[MARK])
sre_compile.py(154):                 emit((av[0]-1)*2+1)
sre_compile.py(78):     for op, av in pattern:
sre_compile.py(79):         if op in LITERAL_CODES:
sre_compile.py(98):         elif op is IN:
sre_compile.py(109):         elif op is ANY:
sre_compile.py(114):         elif op in REPEATING_CODES:
sre_compile.py(115):             if flags & SRE_FLAG_TEMPLATE:
sre_compile.py(124):             elif _simple(av) and op is not REPEAT:
 --- modulename: sre_compile, funcname: _simple
sre_compile.py(430):     lo, hi = av[2].getwidth()
 --- modulename: sre_parse, funcname: getwidth
sre_parse.py(153):         if self.width:
sre_parse.py(154):             return self.width
sre_compile.py(431):     return lo == hi == 1 and av[2][0][0] != SUBPATTERN
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(125):                 if op is MAX_REPEAT:
sre_compile.py(126):                     emit(OPCODES[REPEAT_ONE])
sre_compile.py(129):                 skip = _len(code); emit(0)
sre_compile.py(130):                 emit(av[0])
sre_compile.py(131):                 emit(av[1])
sre_compile.py(132):                 _compile(code, av[2], flags)
 --- modulename: sre_compile, funcname: _compile
sre_compile.py(66):     emit = code.append
sre_compile.py(67):     _len = len
sre_compile.py(68):     LITERAL_CODES = _LITERAL_CODES
sre_compile.py(69):     REPEATING_CODES = _REPEATING_CODES
sre_compile.py(70):     SUCCESS_CODES = _SUCCESS_CODES
sre_compile.py(71):     ASSERT_CODES = _ASSERT_CODES
sre_compile.py(72):     if (flags & SRE_FLAG_IGNORECASE and
sre_compile.py(77):         fixes = None
sre_compile.py(78):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(79):         if op in LITERAL_CODES:
sre_compile.py(98):         elif op is IN:
sre_compile.py(99):             if flags & SRE_FLAG_IGNORECASE:
sre_compile.py(104):                 emit(OPCODES[op])
sre_compile.py(105):                 fixup = None
sre_compile.py(106):             skip = _len(code); emit(0)
sre_compile.py(107):             _compile_charset(av, flags, code, fixup, fixes)
 --- modulename: sre_compile, funcname: _compile_charset
sre_compile.py(230):     emit = code.append
sre_compile.py(231):     for op, av in _optimize_charset(charset, fixup, fixes,
sre_compile.py(232):                                     flags & SRE_FLAG_UNICODE):
 --- modulename: sre_compile, funcname: _optimize_charset
sre_compile.py(258):     out = []
sre_compile.py(259):     tail = []
sre_compile.py(260):     charmap = bytearray(256)
sre_compile.py(261):     for op, av in charset:
sre_compile.py(262):         while True:
sre_compile.py(263):             try:
sre_compile.py(264):                 if op is LITERAL:
sre_compile.py(273):                 elif op is RANGE:
sre_compile.py(286):                 elif op is NEGATE:
sre_compile.py(289):                     tail.append((op, av))
sre_compile.py(310):             break
sre_compile.py(261):     for op, av in charset:
sre_compile.py(313):     runs = []
sre_compile.py(314):     q = 0
sre_compile.py(315):     while True:
sre_compile.py(316):         p = charmap.find(b'\1', q)
sre_compile.py(317):         if p < 0:
sre_compile.py(318):             break
sre_compile.py(327):     if runs is not None:
sre_compile.py(329):         for p, q in runs:
sre_compile.py(334):         out += tail
sre_compile.py(336):         if fixup or len(out) < len(charset):
sre_compile.py(339):         return charset
sre_compile.py(233):         emit(OPCODES[op])
sre_compile.py(234):         if op is NEGATE:
sre_compile.py(236):         elif op is LITERAL:
sre_compile.py(238):         elif op is RANGE:
sre_compile.py(241):         elif op is CHARSET:
sre_compile.py(243):         elif op is BIGCHARSET:
sre_compile.py(245):         elif op is CATEGORY:
sre_compile.py(246):             if flags & SRE_FLAG_LOCALE:
sre_compile.py(248):             elif flags & SRE_FLAG_UNICODE:
sre_compile.py(251):                 emit(CHCODES[av])
sre_compile.py(232):                                     flags & SRE_FLAG_UNICODE):
sre_compile.py(254):     emit(OPCODES[FAILURE])
sre_compile.py(108):             code[skip] = _len(code) - skip
sre_compile.py(78):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(133):                 emit(OPCODES[SUCCESS])
sre_compile.py(134):                 code[skip] = _len(code) - skip
sre_compile.py(78):     for op, av in pattern:
sre_compile.py(79):         if op in LITERAL_CODES:
sre_compile.py(80):             if flags & SRE_FLAG_IGNORECASE:
sre_compile.py(96):                 emit(OPCODES[op])
sre_compile.py(97):                 emit(av)
sre_compile.py(78):     for op, av in pattern:
sre_compile.py(79):         if op in LITERAL_CODES:
sre_compile.py(98):         elif op is IN:
sre_compile.py(109):         elif op is ANY:
sre_compile.py(114):         elif op in REPEATING_CODES:
sre_compile.py(115):             if flags & SRE_FLAG_TEMPLATE:
sre_compile.py(124):             elif _simple(av) and op is not REPEAT:
 --- modulename: sre_compile, funcname: _simple
sre_compile.py(430):     lo, hi = av[2].getwidth()
 --- modulename: sre_parse, funcname: getwidth
sre_parse.py(153):         if self.width:
sre_parse.py(154):             return self.width
sre_compile.py(431):     return lo == hi == 1 and av[2][0][0] != SUBPATTERN
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(125):                 if op is MAX_REPEAT:
sre_compile.py(126):                     emit(OPCODES[REPEAT_ONE])
sre_compile.py(129):                 skip = _len(code); emit(0)
sre_compile.py(130):                 emit(av[0])
sre_compile.py(131):                 emit(av[1])
sre_compile.py(132):                 _compile(code, av[2], flags)
 --- modulename: sre_compile, funcname: _compile
sre_compile.py(66):     emit = code.append
sre_compile.py(67):     _len = len
sre_compile.py(68):     LITERAL_CODES = _LITERAL_CODES
sre_compile.py(69):     REPEATING_CODES = _REPEATING_CODES
sre_compile.py(70):     SUCCESS_CODES = _SUCCESS_CODES
sre_compile.py(71):     ASSERT_CODES = _ASSERT_CODES
sre_compile.py(72):     if (flags & SRE_FLAG_IGNORECASE and
sre_compile.py(77):         fixes = None
sre_compile.py(78):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(79):         if op in LITERAL_CODES:
sre_compile.py(80):             if flags & SRE_FLAG_IGNORECASE:
sre_compile.py(96):                 emit(OPCODES[op])
sre_compile.py(97):                 emit(av)
sre_compile.py(78):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(133):                 emit(OPCODES[SUCCESS])
sre_compile.py(134):                 code[skip] = _len(code) - skip
sre_compile.py(78):     for op, av in pattern:
sre_compile.py(79):         if op in LITERAL_CODES:
sre_compile.py(98):         elif op is IN:
sre_compile.py(109):         elif op is ANY:
sre_compile.py(114):         elif op in REPEATING_CODES:
sre_compile.py(146):         elif op is SUBPATTERN:
sre_compile.py(147):             if av[0]:
sre_compile.py(148):                 emit(OPCODES[MARK])
sre_compile.py(149):                 emit((av[0]-1)*2)
sre_compile.py(151):             _compile(code, av[1], flags)
 --- modulename: sre_compile, funcname: _compile
sre_compile.py(66):     emit = code.append
sre_compile.py(67):     _len = len
sre_compile.py(68):     LITERAL_CODES = _LITERAL_CODES
sre_compile.py(69):     REPEATING_CODES = _REPEATING_CODES
sre_compile.py(70):     SUCCESS_CODES = _SUCCESS_CODES
sre_compile.py(71):     ASSERT_CODES = _ASSERT_CODES
sre_compile.py(72):     if (flags & SRE_FLAG_IGNORECASE and
sre_compile.py(77):         fixes = None
sre_compile.py(78):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(79):         if op in LITERAL_CODES:
sre_compile.py(98):         elif op is IN:
sre_compile.py(109):         elif op is ANY:
sre_compile.py(114):         elif op in REPEATING_CODES:
sre_compile.py(115):             if flags & SRE_FLAG_TEMPLATE:
sre_compile.py(124):             elif _simple(av) and op is not REPEAT:
 --- modulename: sre_compile, funcname: _simple
sre_compile.py(430):     lo, hi = av[2].getwidth()
 --- modulename: sre_parse, funcname: getwidth
sre_parse.py(153):         if self.width:
sre_parse.py(154):             return self.width
sre_compile.py(431):     return lo == hi == 1 and av[2][0][0] != SUBPATTERN
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(125):                 if op is MAX_REPEAT:
sre_compile.py(126):                     emit(OPCODES[REPEAT_ONE])
sre_compile.py(129):                 skip = _len(code); emit(0)
sre_compile.py(130):                 emit(av[0])
sre_compile.py(131):                 emit(av[1])
sre_compile.py(132):                 _compile(code, av[2], flags)
 --- modulename: sre_compile, funcname: _compile
sre_compile.py(66):     emit = code.append
sre_compile.py(67):     _len = len
sre_compile.py(68):     LITERAL_CODES = _LITERAL_CODES
sre_compile.py(69):     REPEATING_CODES = _REPEATING_CODES
sre_compile.py(70):     SUCCESS_CODES = _SUCCESS_CODES
sre_compile.py(71):     ASSERT_CODES = _ASSERT_CODES
sre_compile.py(72):     if (flags & SRE_FLAG_IGNORECASE and
sre_compile.py(77):         fixes = None
sre_compile.py(78):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(79):         if op in LITERAL_CODES:
sre_compile.py(80):             if flags & SRE_FLAG_IGNORECASE:
sre_compile.py(96):                 emit(OPCODES[op])
sre_compile.py(97):                 emit(av)
sre_compile.py(78):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(133):                 emit(OPCODES[SUCCESS])
sre_compile.py(134):                 code[skip] = _len(code) - skip
sre_compile.py(78):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(152):             if av[0]:
sre_compile.py(153):                 emit(OPCODES[MARK])
sre_compile.py(154):                 emit((av[0]-1)*2+1)
sre_compile.py(78):     for op, av in pattern:
sre_compile.py(79):         if op in LITERAL_CODES:
sre_compile.py(98):         elif op is IN:
sre_compile.py(109):         elif op is ANY:
sre_compile.py(114):         elif op in REPEATING_CODES:
sre_compile.py(115):             if flags & SRE_FLAG_TEMPLATE:
sre_compile.py(124):             elif _simple(av) and op is not REPEAT:
 --- modulename: sre_compile, funcname: _simple
sre_compile.py(430):     lo, hi = av[2].getwidth()
 --- modulename: sre_parse, funcname: getwidth
sre_parse.py(153):         if self.width:
sre_parse.py(154):             return self.width
sre_compile.py(431):     return lo == hi == 1 and av[2][0][0] != SUBPATTERN
sre_compile.py(136):                 emit(OPCODES[REPEAT])
sre_compile.py(137):                 skip = _len(code); emit(0)
sre_compile.py(138):                 emit(av[0])
sre_compile.py(139):                 emit(av[1])
sre_compile.py(140):                 _compile(code, av[2], flags)
 --- modulename: sre_compile, funcname: _compile
sre_compile.py(66):     emit = code.append
sre_compile.py(67):     _len = len
sre_compile.py(68):     LITERAL_CODES = _LITERAL_CODES
sre_compile.py(69):     REPEATING_CODES = _REPEATING_CODES
sre_compile.py(70):     SUCCESS_CODES = _SUCCESS_CODES
sre_compile.py(71):     ASSERT_CODES = _ASSERT_CODES
sre_compile.py(72):     if (flags & SRE_FLAG_IGNORECASE and
sre_compile.py(77):         fixes = None
sre_compile.py(78):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(79):         if op in LITERAL_CODES:
sre_compile.py(98):         elif op is IN:
sre_compile.py(109):         elif op is ANY:
sre_compile.py(114):         elif op in REPEATING_CODES:
sre_compile.py(146):         elif op is SUBPATTERN:
sre_compile.py(147):             if av[0]:
sre_compile.py(151):             _compile(code, av[1], flags)
 --- modulename: sre_compile, funcname: _compile
sre_compile.py(66):     emit = code.append
sre_compile.py(67):     _len = len
sre_compile.py(68):     LITERAL_CODES = _LITERAL_CODES
sre_compile.py(69):     REPEATING_CODES = _REPEATING_CODES
sre_compile.py(70):     SUCCESS_CODES = _SUCCESS_CODES
sre_compile.py(71):     ASSERT_CODES = _ASSERT_CODES
sre_compile.py(72):     if (flags & SRE_FLAG_IGNORECASE and
sre_compile.py(77):         fixes = None
sre_compile.py(78):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(79):         if op in LITERAL_CODES:
sre_compile.py(80):             if flags & SRE_FLAG_IGNORECASE:
sre_compile.py(96):                 emit(OPCODES[op])
sre_compile.py(97):                 emit(av)
sre_compile.py(78):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(79):         if op in LITERAL_CODES:
sre_compile.py(98):         elif op is IN:
sre_compile.py(109):         elif op is ANY:
sre_compile.py(114):         elif op in REPEATING_CODES:
sre_compile.py(115):             if flags & SRE_FLAG_TEMPLATE:
sre_compile.py(124):             elif _simple(av) and op is not REPEAT:
 --- modulename: sre_compile, funcname: _simple
sre_compile.py(430):     lo, hi = av[2].getwidth()
 --- modulename: sre_parse, funcname: getwidth
sre_parse.py(153):         if self.width:
sre_parse.py(154):             return self.width
sre_compile.py(431):     return lo == hi == 1 and av[2][0][0] != SUBPATTERN
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(125):                 if op is MAX_REPEAT:
sre_compile.py(126):                     emit(OPCODES[REPEAT_ONE])
sre_compile.py(129):                 skip = _len(code); emit(0)
sre_compile.py(130):                 emit(av[0])
sre_compile.py(131):                 emit(av[1])
sre_compile.py(132):                 _compile(code, av[2], flags)
 --- modulename: sre_compile, funcname: _compile
sre_compile.py(66):     emit = code.append
sre_compile.py(67):     _len = len
sre_compile.py(68):     LITERAL_CODES = _LITERAL_CODES
sre_compile.py(69):     REPEATING_CODES = _REPEATING_CODES
sre_compile.py(70):     SUCCESS_CODES = _SUCCESS_CODES
sre_compile.py(71):     ASSERT_CODES = _ASSERT_CODES
sre_compile.py(72):     if (flags & SRE_FLAG_IGNORECASE and
sre_compile.py(77):         fixes = None
sre_compile.py(78):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(79):         if op in LITERAL_CODES:
sre_compile.py(98):         elif op is IN:
sre_compile.py(99):             if flags & SRE_FLAG_IGNORECASE:
sre_compile.py(104):                 emit(OPCODES[op])
sre_compile.py(105):                 fixup = None
sre_compile.py(106):             skip = _len(code); emit(0)
sre_compile.py(107):             _compile_charset(av, flags, code, fixup, fixes)
 --- modulename: sre_compile, funcname: _compile_charset
sre_compile.py(230):     emit = code.append
sre_compile.py(231):     for op, av in _optimize_charset(charset, fixup, fixes,
sre_compile.py(232):                                     flags & SRE_FLAG_UNICODE):
 --- modulename: sre_compile, funcname: _optimize_charset
sre_compile.py(258):     out = []
sre_compile.py(259):     tail = []
sre_compile.py(260):     charmap = bytearray(256)
sre_compile.py(261):     for op, av in charset:
sre_compile.py(262):         while True:
sre_compile.py(263):             try:
sre_compile.py(264):                 if op is LITERAL:
sre_compile.py(273):                 elif op is RANGE:
sre_compile.py(286):                 elif op is NEGATE:
sre_compile.py(289):                     tail.append((op, av))
sre_compile.py(310):             break
sre_compile.py(261):     for op, av in charset:
sre_compile.py(313):     runs = []
sre_compile.py(314):     q = 0
sre_compile.py(315):     while True:
sre_compile.py(316):         p = charmap.find(b'\1', q)
sre_compile.py(317):         if p < 0:
sre_compile.py(318):             break
sre_compile.py(327):     if runs is not None:
sre_compile.py(329):         for p, q in runs:
sre_compile.py(334):         out += tail
sre_compile.py(336):         if fixup or len(out) < len(charset):
sre_compile.py(339):         return charset
sre_compile.py(233):         emit(OPCODES[op])
sre_compile.py(234):         if op is NEGATE:
sre_compile.py(236):         elif op is LITERAL:
sre_compile.py(238):         elif op is RANGE:
sre_compile.py(241):         elif op is CHARSET:
sre_compile.py(243):         elif op is BIGCHARSET:
sre_compile.py(245):         elif op is CATEGORY:
sre_compile.py(246):             if flags & SRE_FLAG_LOCALE:
sre_compile.py(248):             elif flags & SRE_FLAG_UNICODE:
sre_compile.py(251):                 emit(CHCODES[av])
sre_compile.py(232):                                     flags & SRE_FLAG_UNICODE):
sre_compile.py(254):     emit(OPCODES[FAILURE])
sre_compile.py(108):             code[skip] = _len(code) - skip
sre_compile.py(78):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(133):                 emit(OPCODES[SUCCESS])
sre_compile.py(134):                 code[skip] = _len(code) - skip
sre_compile.py(78):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(79):         if op in LITERAL_CODES:
sre_compile.py(98):         elif op is IN:
sre_compile.py(109):         elif op is ANY:
sre_compile.py(114):         elif op in REPEATING_CODES:
sre_compile.py(146):         elif op is SUBPATTERN:
sre_compile.py(147):             if av[0]:
sre_compile.py(148):                 emit(OPCODES[MARK])
sre_compile.py(149):                 emit((av[0]-1)*2)
sre_compile.py(151):             _compile(code, av[1], flags)
 --- modulename: sre_compile, funcname: _compile
sre_compile.py(66):     emit = code.append
sre_compile.py(67):     _len = len
sre_compile.py(68):     LITERAL_CODES = _LITERAL_CODES
sre_compile.py(69):     REPEATING_CODES = _REPEATING_CODES
sre_compile.py(70):     SUCCESS_CODES = _SUCCESS_CODES
sre_compile.py(71):     ASSERT_CODES = _ASSERT_CODES
sre_compile.py(72):     if (flags & SRE_FLAG_IGNORECASE and
sre_compile.py(77):         fixes = None
sre_compile.py(78):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(79):         if op in LITERAL_CODES:
sre_compile.py(98):         elif op is IN:
sre_compile.py(109):         elif op is ANY:
sre_compile.py(114):         elif op in REPEATING_CODES:
sre_compile.py(115):             if flags & SRE_FLAG_TEMPLATE:
sre_compile.py(124):             elif _simple(av) and op is not REPEAT:
 --- modulename: sre_compile, funcname: _simple
sre_compile.py(430):     lo, hi = av[2].getwidth()
 --- modulename: sre_parse, funcname: getwidth
sre_parse.py(153):         if self.width:
sre_parse.py(154):             return self.width
sre_compile.py(431):     return lo == hi == 1 and av[2][0][0] != SUBPATTERN
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(125):                 if op is MAX_REPEAT:
sre_compile.py(126):                     emit(OPCODES[REPEAT_ONE])
sre_compile.py(129):                 skip = _len(code); emit(0)
sre_compile.py(130):                 emit(av[0])
sre_compile.py(131):                 emit(av[1])
sre_compile.py(132):                 _compile(code, av[2], flags)
 --- modulename: sre_compile, funcname: _compile
sre_compile.py(66):     emit = code.append
sre_compile.py(67):     _len = len
sre_compile.py(68):     LITERAL_CODES = _LITERAL_CODES
sre_compile.py(69):     REPEATING_CODES = _REPEATING_CODES
sre_compile.py(70):     SUCCESS_CODES = _SUCCESS_CODES
sre_compile.py(71):     ASSERT_CODES = _ASSERT_CODES
sre_compile.py(72):     if (flags & SRE_FLAG_IGNORECASE and
sre_compile.py(77):         fixes = None
sre_compile.py(78):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(79):         if op in LITERAL_CODES:
sre_compile.py(98):         elif op is IN:
sre_compile.py(99):             if flags & SRE_FLAG_IGNORECASE:
sre_compile.py(104):                 emit(OPCODES[op])
sre_compile.py(105):                 fixup = None
sre_compile.py(106):             skip = _len(code); emit(0)
sre_compile.py(107):             _compile_charset(av, flags, code, fixup, fixes)
 --- modulename: sre_compile, funcname: _compile_charset
sre_compile.py(230):     emit = code.append
sre_compile.py(231):     for op, av in _optimize_charset(charset, fixup, fixes,
sre_compile.py(232):                                     flags & SRE_FLAG_UNICODE):
 --- modulename: sre_compile, funcname: _optimize_charset
sre_compile.py(258):     out = []
sre_compile.py(259):     tail = []
sre_compile.py(260):     charmap = bytearray(256)
sre_compile.py(261):     for op, av in charset:
sre_compile.py(262):         while True:
sre_compile.py(263):             try:
sre_compile.py(264):                 if op is LITERAL:
sre_compile.py(273):                 elif op is RANGE:
sre_compile.py(286):                 elif op is NEGATE:
sre_compile.py(289):                     tail.append((op, av))
sre_compile.py(310):             break
sre_compile.py(261):     for op, av in charset:
sre_compile.py(262):         while True:
sre_compile.py(263):             try:
sre_compile.py(264):                 if op is LITERAL:
sre_compile.py(265):                     if fixup:
sre_compile.py(272):                         charmap[av] = 1
sre_compile.py(310):             break
sre_compile.py(261):     for op, av in charset:
sre_compile.py(313):     runs = []
sre_compile.py(314):     q = 0
sre_compile.py(315):     while True:
sre_compile.py(316):         p = charmap.find(b'\1', q)
sre_compile.py(317):         if p < 0:
sre_compile.py(319):         if len(runs) >= 2:
sre_compile.py(322):         q = charmap.find(b'\0', p)
sre_compile.py(323):         if q < 0:
sre_compile.py(326):         runs.append((p, q))
sre_compile.py(315):     while True:
sre_compile.py(316):         p = charmap.find(b'\1', q)
sre_compile.py(317):         if p < 0:
sre_compile.py(318):             break
sre_compile.py(327):     if runs is not None:
sre_compile.py(329):         for p, q in runs:
sre_compile.py(330):             if q - p == 1:
sre_compile.py(331):                 out.append((LITERAL, p))
sre_compile.py(329):         for p, q in runs:
sre_compile.py(334):         out += tail
sre_compile.py(336):         if fixup or len(out) < len(charset):
sre_compile.py(339):         return charset
sre_compile.py(233):         emit(OPCODES[op])
sre_compile.py(234):         if op is NEGATE:
sre_compile.py(236):         elif op is LITERAL:
sre_compile.py(238):         elif op is RANGE:
sre_compile.py(241):         elif op is CHARSET:
sre_compile.py(243):         elif op is BIGCHARSET:
sre_compile.py(245):         elif op is CATEGORY:
sre_compile.py(246):             if flags & SRE_FLAG_LOCALE:
sre_compile.py(248):             elif flags & SRE_FLAG_UNICODE:
sre_compile.py(251):                 emit(CHCODES[av])
sre_compile.py(232):                                     flags & SRE_FLAG_UNICODE):
sre_compile.py(233):         emit(OPCODES[op])
sre_compile.py(234):         if op is NEGATE:
sre_compile.py(236):         elif op is LITERAL:
sre_compile.py(237):             emit(av)
sre_compile.py(232):                                     flags & SRE_FLAG_UNICODE):
sre_compile.py(254):     emit(OPCODES[FAILURE])
sre_compile.py(108):             code[skip] = _len(code) - skip
sre_compile.py(78):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(133):                 emit(OPCODES[SUCCESS])
sre_compile.py(134):                 code[skip] = _len(code) - skip
sre_compile.py(78):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(152):             if av[0]:
sre_compile.py(153):                 emit(OPCODES[MARK])
sre_compile.py(154):                 emit((av[0]-1)*2+1)
sre_compile.py(78):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(79):         if op in LITERAL_CODES:
sre_compile.py(98):         elif op is IN:
sre_compile.py(109):         elif op is ANY:
sre_compile.py(114):         elif op in REPEATING_CODES:
sre_compile.py(115):             if flags & SRE_FLAG_TEMPLATE:
sre_compile.py(124):             elif _simple(av) and op is not REPEAT:
 --- modulename: sre_compile, funcname: _simple
sre_compile.py(430):     lo, hi = av[2].getwidth()
 --- modulename: sre_parse, funcname: getwidth
sre_parse.py(153):         if self.width:
sre_parse.py(154):             return self.width
sre_compile.py(431):     return lo == hi == 1 and av[2][0][0] != SUBPATTERN
sre_compile.py(136):                 emit(OPCODES[REPEAT])
sre_compile.py(137):                 skip = _len(code); emit(0)
sre_compile.py(138):                 emit(av[0])
sre_compile.py(139):                 emit(av[1])
sre_compile.py(140):                 _compile(code, av[2], flags)
 --- modulename: sre_compile, funcname: _compile
sre_compile.py(66):     emit = code.append
sre_compile.py(67):     _len = len
sre_compile.py(68):     LITERAL_CODES = _LITERAL_CODES
sre_compile.py(69):     REPEATING_CODES = _REPEATING_CODES
sre_compile.py(70):     SUCCESS_CODES = _SUCCESS_CODES
sre_compile.py(71):     ASSERT_CODES = _ASSERT_CODES
sre_compile.py(72):     if (flags & SRE_FLAG_IGNORECASE and
sre_compile.py(77):         fixes = None
sre_compile.py(78):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(79):         if op in LITERAL_CODES:
sre_compile.py(98):         elif op is IN:
sre_compile.py(109):         elif op is ANY:
sre_compile.py(114):         elif op in REPEATING_CODES:
sre_compile.py(146):         elif op is SUBPATTERN:
sre_compile.py(147):             if av[0]:
sre_compile.py(151):             _compile(code, av[1], flags)
 --- modulename: sre_compile, funcname: _compile
sre_compile.py(66):     emit = code.append
sre_compile.py(67):     _len = len
sre_compile.py(68):     LITERAL_CODES = _LITERAL_CODES
sre_compile.py(69):     REPEATING_CODES = _REPEATING_CODES
sre_compile.py(70):     SUCCESS_CODES = _SUCCESS_CODES
sre_compile.py(71):     ASSERT_CODES = _ASSERT_CODES
sre_compile.py(72):     if (flags & SRE_FLAG_IGNORECASE and
sre_compile.py(77):         fixes = None
sre_compile.py(78):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(79):         if op in LITERAL_CODES:
sre_compile.py(80):             if flags & SRE_FLAG_IGNORECASE:
sre_compile.py(96):                 emit(OPCODES[op])
sre_compile.py(97):                 emit(av)
sre_compile.py(78):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(79):         if op in LITERAL_CODES:
sre_compile.py(98):         elif op is IN:
sre_compile.py(109):         elif op is ANY:
sre_compile.py(114):         elif op in REPEATING_CODES:
sre_compile.py(115):             if flags & SRE_FLAG_TEMPLATE:
sre_compile.py(124):             elif _simple(av) and op is not REPEAT:
 --- modulename: sre_compile, funcname: _simple
sre_compile.py(430):     lo, hi = av[2].getwidth()
 --- modulename: sre_parse, funcname: getwidth
sre_parse.py(153):         if self.width:
sre_parse.py(154):             return self.width
sre_compile.py(431):     return lo == hi == 1 and av[2][0][0] != SUBPATTERN
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(125):                 if op is MAX_REPEAT:
sre_compile.py(126):                     emit(OPCODES[REPEAT_ONE])
sre_compile.py(129):                 skip = _len(code); emit(0)
sre_compile.py(130):                 emit(av[0])
sre_compile.py(131):                 emit(av[1])
sre_compile.py(132):                 _compile(code, av[2], flags)
 --- modulename: sre_compile, funcname: _compile
sre_compile.py(66):     emit = code.append
sre_compile.py(67):     _len = len
sre_compile.py(68):     LITERAL_CODES = _LITERAL_CODES
sre_compile.py(69):     REPEATING_CODES = _REPEATING_CODES
sre_compile.py(70):     SUCCESS_CODES = _SUCCESS_CODES
sre_compile.py(71):     ASSERT_CODES = _ASSERT_CODES
sre_compile.py(72):     if (flags & SRE_FLAG_IGNORECASE and
sre_compile.py(77):         fixes = None
sre_compile.py(78):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(79):         if op in LITERAL_CODES:
sre_compile.py(98):         elif op is IN:
sre_compile.py(99):             if flags & SRE_FLAG_IGNORECASE:
sre_compile.py(104):                 emit(OPCODES[op])
sre_compile.py(105):                 fixup = None
sre_compile.py(106):             skip = _len(code); emit(0)
sre_compile.py(107):             _compile_charset(av, flags, code, fixup, fixes)
 --- modulename: sre_compile, funcname: _compile_charset
sre_compile.py(230):     emit = code.append
sre_compile.py(231):     for op, av in _optimize_charset(charset, fixup, fixes,
sre_compile.py(232):                                     flags & SRE_FLAG_UNICODE):
 --- modulename: sre_compile, funcname: _optimize_charset
sre_compile.py(258):     out = []
sre_compile.py(259):     tail = []
sre_compile.py(260):     charmap = bytearray(256)
sre_compile.py(261):     for op, av in charset:
sre_compile.py(262):         while True:
sre_compile.py(263):             try:
sre_compile.py(264):                 if op is LITERAL:
sre_compile.py(273):                 elif op is RANGE:
sre_compile.py(286):                 elif op is NEGATE:
sre_compile.py(289):                     tail.append((op, av))
sre_compile.py(310):             break
sre_compile.py(261):     for op, av in charset:
sre_compile.py(313):     runs = []
sre_compile.py(314):     q = 0
sre_compile.py(315):     while True:
sre_compile.py(316):         p = charmap.find(b'\1', q)
sre_compile.py(317):         if p < 0:
sre_compile.py(318):             break
sre_compile.py(327):     if runs is not None:
sre_compile.py(329):         for p, q in runs:
sre_compile.py(334):         out += tail
sre_compile.py(336):         if fixup or len(out) < len(charset):
sre_compile.py(339):         return charset
sre_compile.py(233):         emit(OPCODES[op])
sre_compile.py(234):         if op is NEGATE:
sre_compile.py(236):         elif op is LITERAL:
sre_compile.py(238):         elif op is RANGE:
sre_compile.py(241):         elif op is CHARSET:
sre_compile.py(243):         elif op is BIGCHARSET:
sre_compile.py(245):         elif op is CATEGORY:
sre_compile.py(246):             if flags & SRE_FLAG_LOCALE:
sre_compile.py(248):             elif flags & SRE_FLAG_UNICODE:
sre_compile.py(251):                 emit(CHCODES[av])
sre_compile.py(232):                                     flags & SRE_FLAG_UNICODE):
sre_compile.py(254):     emit(OPCODES[FAILURE])
sre_compile.py(108):             code[skip] = _len(code) - skip
sre_compile.py(78):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(133):                 emit(OPCODES[SUCCESS])
sre_compile.py(134):                 code[skip] = _len(code) - skip
sre_compile.py(78):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(79):         if op in LITERAL_CODES:
sre_compile.py(98):         elif op is IN:
sre_compile.py(109):         elif op is ANY:
sre_compile.py(114):         elif op in REPEATING_CODES:
sre_compile.py(146):         elif op is SUBPATTERN:
sre_compile.py(147):             if av[0]:
sre_compile.py(148):                 emit(OPCODES[MARK])
sre_compile.py(149):                 emit((av[0]-1)*2)
sre_compile.py(151):             _compile(code, av[1], flags)
 --- modulename: sre_compile, funcname: _compile
sre_compile.py(66):     emit = code.append
sre_compile.py(67):     _len = len
sre_compile.py(68):     LITERAL_CODES = _LITERAL_CODES
sre_compile.py(69):     REPEATING_CODES = _REPEATING_CODES
sre_compile.py(70):     SUCCESS_CODES = _SUCCESS_CODES
sre_compile.py(71):     ASSERT_CODES = _ASSERT_CODES
sre_compile.py(72):     if (flags & SRE_FLAG_IGNORECASE and
sre_compile.py(77):         fixes = None
sre_compile.py(78):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(79):         if op in LITERAL_CODES:
sre_compile.py(98):         elif op is IN:
sre_compile.py(109):         elif op is ANY:
sre_compile.py(114):         elif op in REPEATING_CODES:
sre_compile.py(115):             if flags & SRE_FLAG_TEMPLATE:
sre_compile.py(124):             elif _simple(av) and op is not REPEAT:
 --- modulename: sre_compile, funcname: _simple
sre_compile.py(430):     lo, hi = av[2].getwidth()
 --- modulename: sre_parse, funcname: getwidth
sre_parse.py(153):         if self.width:
sre_parse.py(154):             return self.width
sre_compile.py(431):     return lo == hi == 1 and av[2][0][0] != SUBPATTERN
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(125):                 if op is MAX_REPEAT:
sre_compile.py(126):                     emit(OPCODES[REPEAT_ONE])
sre_compile.py(129):                 skip = _len(code); emit(0)
sre_compile.py(130):                 emit(av[0])
sre_compile.py(131):                 emit(av[1])
sre_compile.py(132):                 _compile(code, av[2], flags)
 --- modulename: sre_compile, funcname: _compile
sre_compile.py(66):     emit = code.append
sre_compile.py(67):     _len = len
sre_compile.py(68):     LITERAL_CODES = _LITERAL_CODES
sre_compile.py(69):     REPEATING_CODES = _REPEATING_CODES
sre_compile.py(70):     SUCCESS_CODES = _SUCCESS_CODES
sre_compile.py(71):     ASSERT_CODES = _ASSERT_CODES
sre_compile.py(72):     if (flags & SRE_FLAG_IGNORECASE and
sre_compile.py(77):         fixes = None
sre_compile.py(78):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(79):         if op in LITERAL_CODES:
sre_compile.py(98):         elif op is IN:
sre_compile.py(99):             if flags & SRE_FLAG_IGNORECASE:
sre_compile.py(104):                 emit(OPCODES[op])
sre_compile.py(105):                 fixup = None
sre_compile.py(106):             skip = _len(code); emit(0)
sre_compile.py(107):             _compile_charset(av, flags, code, fixup, fixes)
 --- modulename: sre_compile, funcname: _compile_charset
sre_compile.py(230):     emit = code.append
sre_compile.py(231):     for op, av in _optimize_charset(charset, fixup, fixes,
sre_compile.py(232):                                     flags & SRE_FLAG_UNICODE):
 --- modulename: sre_compile, funcname: _optimize_charset
sre_compile.py(258):     out = []
sre_compile.py(259):     tail = []
sre_compile.py(260):     charmap = bytearray(256)
sre_compile.py(261):     for op, av in charset:
sre_compile.py(262):         while True:
sre_compile.py(263):             try:
sre_compile.py(264):                 if op is LITERAL:
sre_compile.py(273):                 elif op is RANGE:
sre_compile.py(286):                 elif op is NEGATE:
sre_compile.py(289):                     tail.append((op, av))
sre_compile.py(310):             break
sre_compile.py(261):     for op, av in charset:
sre_compile.py(262):         while True:
sre_compile.py(263):             try:
sre_compile.py(264):                 if op is LITERAL:
sre_compile.py(265):                     if fixup:
sre_compile.py(272):                         charmap[av] = 1
sre_compile.py(310):             break
sre_compile.py(261):     for op, av in charset:
sre_compile.py(262):         while True:
sre_compile.py(263):             try:
sre_compile.py(264):                 if op is LITERAL:
sre_compile.py(265):                     if fixup:
sre_compile.py(272):                         charmap[av] = 1
sre_compile.py(310):             break
sre_compile.py(261):     for op, av in charset:
sre_compile.py(313):     runs = []
sre_compile.py(314):     q = 0
sre_compile.py(315):     while True:
sre_compile.py(316):         p = charmap.find(b'\1', q)
sre_compile.py(317):         if p < 0:
sre_compile.py(319):         if len(runs) >= 2:
sre_compile.py(322):         q = charmap.find(b'\0', p)
sre_compile.py(323):         if q < 0:
sre_compile.py(326):         runs.append((p, q))
sre_compile.py(315):     while True:
sre_compile.py(316):         p = charmap.find(b'\1', q)
sre_compile.py(317):         if p < 0:
sre_compile.py(319):         if len(runs) >= 2:
sre_compile.py(322):         q = charmap.find(b'\0', p)
sre_compile.py(323):         if q < 0:
sre_compile.py(326):         runs.append((p, q))
sre_compile.py(315):     while True:
sre_compile.py(316):         p = charmap.find(b'\1', q)
sre_compile.py(317):         if p < 0:
sre_compile.py(318):             break
sre_compile.py(327):     if runs is not None:
sre_compile.py(329):         for p, q in runs:
sre_compile.py(330):             if q - p == 1:
sre_compile.py(331):                 out.append((LITERAL, p))
sre_compile.py(329):         for p, q in runs:
sre_compile.py(330):             if q - p == 1:
sre_compile.py(331):                 out.append((LITERAL, p))
sre_compile.py(329):         for p, q in runs:
sre_compile.py(334):         out += tail
sre_compile.py(336):         if fixup or len(out) < len(charset):
sre_compile.py(339):         return charset
sre_compile.py(233):         emit(OPCODES[op])
sre_compile.py(234):         if op is NEGATE:
sre_compile.py(236):         elif op is LITERAL:
sre_compile.py(238):         elif op is RANGE:
sre_compile.py(241):         elif op is CHARSET:
sre_compile.py(243):         elif op is BIGCHARSET:
sre_compile.py(245):         elif op is CATEGORY:
sre_compile.py(246):             if flags & SRE_FLAG_LOCALE:
sre_compile.py(248):             elif flags & SRE_FLAG_UNICODE:
sre_compile.py(251):                 emit(CHCODES[av])
sre_compile.py(232):                                     flags & SRE_FLAG_UNICODE):
sre_compile.py(233):         emit(OPCODES[op])
sre_compile.py(234):         if op is NEGATE:
sre_compile.py(236):         elif op is LITERAL:
sre_compile.py(237):             emit(av)
sre_compile.py(232):                                     flags & SRE_FLAG_UNICODE):
sre_compile.py(233):         emit(OPCODES[op])
sre_compile.py(234):         if op is NEGATE:
sre_compile.py(236):         elif op is LITERAL:
sre_compile.py(237):             emit(av)
sre_compile.py(232):                                     flags & SRE_FLAG_UNICODE):
sre_compile.py(254):     emit(OPCODES[FAILURE])
sre_compile.py(108):             code[skip] = _len(code) - skip
sre_compile.py(78):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(133):                 emit(OPCODES[SUCCESS])
sre_compile.py(134):                 code[skip] = _len(code) - skip
sre_compile.py(78):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(152):             if av[0]:
sre_compile.py(153):                 emit(OPCODES[MARK])
sre_compile.py(154):                 emit((av[0]-1)*2+1)
sre_compile.py(78):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(152):             if av[0]:
sre_compile.py(78):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(141):                 code[skip] = _len(code) - skip
sre_compile.py(142):                 if op is MAX_REPEAT:
sre_compile.py(143):                     emit(OPCODES[MAX_UNTIL])
sre_compile.py(78):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(152):             if av[0]:
sre_compile.py(78):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(141):                 code[skip] = _len(code) - skip
sre_compile.py(142):                 if op is MAX_REPEAT:
sre_compile.py(143):                     emit(OPCODES[MAX_UNTIL])
sre_compile.py(78):     for op, av in pattern:
sre_compile.py(79):         if op in LITERAL_CODES:
sre_compile.py(80):             if flags & SRE_FLAG_IGNORECASE:
sre_compile.py(96):                 emit(OPCODES[op])
sre_compile.py(97):                 emit(av)
sre_compile.py(78):     for op, av in pattern:
sre_compile.py(79):         if op in LITERAL_CODES:
sre_compile.py(98):         elif op is IN:
sre_compile.py(109):         elif op is ANY:
sre_compile.py(114):         elif op in REPEATING_CODES:
sre_compile.py(115):             if flags & SRE_FLAG_TEMPLATE:
sre_compile.py(124):             elif _simple(av) and op is not REPEAT:
 --- modulename: sre_compile, funcname: _simple
sre_compile.py(430):     lo, hi = av[2].getwidth()
 --- modulename: sre_parse, funcname: getwidth
sre_parse.py(153):         if self.width:
sre_parse.py(154):             return self.width
sre_compile.py(431):     return lo == hi == 1 and av[2][0][0] != SUBPATTERN
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(125):                 if op is MAX_REPEAT:
sre_compile.py(126):                     emit(OPCODES[REPEAT_ONE])
sre_compile.py(129):                 skip = _len(code); emit(0)
sre_compile.py(130):                 emit(av[0])
sre_compile.py(131):                 emit(av[1])
sre_compile.py(132):                 _compile(code, av[2], flags)
 --- modulename: sre_compile, funcname: _compile
sre_compile.py(66):     emit = code.append
sre_compile.py(67):     _len = len
sre_compile.py(68):     LITERAL_CODES = _LITERAL_CODES
sre_compile.py(69):     REPEATING_CODES = _REPEATING_CODES
sre_compile.py(70):     SUCCESS_CODES = _SUCCESS_CODES
sre_compile.py(71):     ASSERT_CODES = _ASSERT_CODES
sre_compile.py(72):     if (flags & SRE_FLAG_IGNORECASE and
sre_compile.py(77):         fixes = None
sre_compile.py(78):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(79):         if op in LITERAL_CODES:
sre_compile.py(98):         elif op is IN:
sre_compile.py(99):             if flags & SRE_FLAG_IGNORECASE:
sre_compile.py(104):                 emit(OPCODES[op])
sre_compile.py(105):                 fixup = None
sre_compile.py(106):             skip = _len(code); emit(0)
sre_compile.py(107):             _compile_charset(av, flags, code, fixup, fixes)
 --- modulename: sre_compile, funcname: _compile_charset
sre_compile.py(230):     emit = code.append
sre_compile.py(231):     for op, av in _optimize_charset(charset, fixup, fixes,
sre_compile.py(232):                                     flags & SRE_FLAG_UNICODE):
 --- modulename: sre_compile, funcname: _optimize_charset
sre_compile.py(258):     out = []
sre_compile.py(259):     tail = []
sre_compile.py(260):     charmap = bytearray(256)
sre_compile.py(261):     for op, av in charset:
sre_compile.py(262):         while True:
sre_compile.py(263):             try:
sre_compile.py(264):                 if op is LITERAL:
sre_compile.py(273):                 elif op is RANGE:
sre_compile.py(286):                 elif op is NEGATE:
sre_compile.py(289):                     tail.append((op, av))
sre_compile.py(310):             break
sre_compile.py(261):     for op, av in charset:
sre_compile.py(313):     runs = []
sre_compile.py(314):     q = 0
sre_compile.py(315):     while True:
sre_compile.py(316):         p = charmap.find(b'\1', q)
sre_compile.py(317):         if p < 0:
sre_compile.py(318):             break
sre_compile.py(327):     if runs is not None:
sre_compile.py(329):         for p, q in runs:
sre_compile.py(334):         out += tail
sre_compile.py(336):         if fixup or len(out) < len(charset):
sre_compile.py(339):         return charset
sre_compile.py(233):         emit(OPCODES[op])
sre_compile.py(234):         if op is NEGATE:
sre_compile.py(236):         elif op is LITERAL:
sre_compile.py(238):         elif op is RANGE:
sre_compile.py(241):         elif op is CHARSET:
sre_compile.py(243):         elif op is BIGCHARSET:
sre_compile.py(245):         elif op is CATEGORY:
sre_compile.py(246):             if flags & SRE_FLAG_LOCALE:
sre_compile.py(248):             elif flags & SRE_FLAG_UNICODE:
sre_compile.py(251):                 emit(CHCODES[av])
sre_compile.py(232):                                     flags & SRE_FLAG_UNICODE):
sre_compile.py(254):     emit(OPCODES[FAILURE])
sre_compile.py(108):             code[skip] = _len(code) - skip
sre_compile.py(78):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(133):                 emit(OPCODES[SUCCESS])
sre_compile.py(134):                 code[skip] = _len(code) - skip
sre_compile.py(78):     for op, av in pattern:
sre_compile.py(79):         if op in LITERAL_CODES:
sre_compile.py(80):             if flags & SRE_FLAG_IGNORECASE:
sre_compile.py(96):                 emit(OPCODES[op])
sre_compile.py(97):                 emit(av)
sre_compile.py(78):     for op, av in pattern:
sre_compile.py(79):         if op in LITERAL_CODES:
sre_compile.py(98):         elif op is IN:
sre_compile.py(109):         elif op is ANY:
sre_compile.py(114):         elif op in REPEATING_CODES:
sre_compile.py(146):         elif op is SUBPATTERN:
sre_compile.py(147):             if av[0]:
sre_compile.py(148):                 emit(OPCODES[MARK])
sre_compile.py(149):                 emit((av[0]-1)*2)
sre_compile.py(151):             _compile(code, av[1], flags)
 --- modulename: sre_compile, funcname: _compile
sre_compile.py(66):     emit = code.append
sre_compile.py(67):     _len = len
sre_compile.py(68):     LITERAL_CODES = _LITERAL_CODES
sre_compile.py(69):     REPEATING_CODES = _REPEATING_CODES
sre_compile.py(70):     SUCCESS_CODES = _SUCCESS_CODES
sre_compile.py(71):     ASSERT_CODES = _ASSERT_CODES
sre_compile.py(72):     if (flags & SRE_FLAG_IGNORECASE and
sre_compile.py(77):         fixes = None
sre_compile.py(78):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(79):         if op in LITERAL_CODES:
sre_compile.py(98):         elif op is IN:
sre_compile.py(109):         elif op is ANY:
sre_compile.py(114):         elif op in REPEATING_CODES:
sre_compile.py(115):             if flags & SRE_FLAG_TEMPLATE:
sre_compile.py(124):             elif _simple(av) and op is not REPEAT:
 --- modulename: sre_compile, funcname: _simple
sre_compile.py(430):     lo, hi = av[2].getwidth()
 --- modulename: sre_parse, funcname: getwidth
sre_parse.py(153):         if self.width:
sre_parse.py(154):             return self.width
sre_compile.py(431):     return lo == hi == 1 and av[2][0][0] != SUBPATTERN
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(125):                 if op is MAX_REPEAT:
sre_compile.py(126):                     emit(OPCODES[REPEAT_ONE])
sre_compile.py(129):                 skip = _len(code); emit(0)
sre_compile.py(130):                 emit(av[0])
sre_compile.py(131):                 emit(av[1])
sre_compile.py(132):                 _compile(code, av[2], flags)
 --- modulename: sre_compile, funcname: _compile
sre_compile.py(66):     emit = code.append
sre_compile.py(67):     _len = len
sre_compile.py(68):     LITERAL_CODES = _LITERAL_CODES
sre_compile.py(69):     REPEATING_CODES = _REPEATING_CODES
sre_compile.py(70):     SUCCESS_CODES = _SUCCESS_CODES
sre_compile.py(71):     ASSERT_CODES = _ASSERT_CODES
sre_compile.py(72):     if (flags & SRE_FLAG_IGNORECASE and
sre_compile.py(77):         fixes = None
sre_compile.py(78):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(79):         if op in LITERAL_CODES:
sre_compile.py(80):             if flags & SRE_FLAG_IGNORECASE:
sre_compile.py(96):                 emit(OPCODES[op])
sre_compile.py(97):                 emit(av)
sre_compile.py(78):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(133):                 emit(OPCODES[SUCCESS])
sre_compile.py(134):                 code[skip] = _len(code) - skip
sre_compile.py(78):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(152):             if av[0]:
sre_compile.py(153):                 emit(OPCODES[MARK])
sre_compile.py(154):                 emit((av[0]-1)*2+1)
sre_compile.py(78):     for op, av in pattern:
sre_compile.py(79):         if op in LITERAL_CODES:
sre_compile.py(98):         elif op is IN:
sre_compile.py(109):         elif op is ANY:
sre_compile.py(114):         elif op in REPEATING_CODES:
sre_compile.py(115):             if flags & SRE_FLAG_TEMPLATE:
sre_compile.py(124):             elif _simple(av) and op is not REPEAT:
 --- modulename: sre_compile, funcname: _simple
sre_compile.py(430):     lo, hi = av[2].getwidth()
 --- modulename: sre_parse, funcname: getwidth
sre_parse.py(153):         if self.width:
sre_parse.py(154):             return self.width
sre_compile.py(431):     return lo == hi == 1 and av[2][0][0] != SUBPATTERN
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(125):                 if op is MAX_REPEAT:
sre_compile.py(126):                     emit(OPCODES[REPEAT_ONE])
sre_compile.py(129):                 skip = _len(code); emit(0)
sre_compile.py(130):                 emit(av[0])
sre_compile.py(131):                 emit(av[1])
sre_compile.py(132):                 _compile(code, av[2], flags)
 --- modulename: sre_compile, funcname: _compile
sre_compile.py(66):     emit = code.append
sre_compile.py(67):     _len = len
sre_compile.py(68):     LITERAL_CODES = _LITERAL_CODES
sre_compile.py(69):     REPEATING_CODES = _REPEATING_CODES
sre_compile.py(70):     SUCCESS_CODES = _SUCCESS_CODES
sre_compile.py(71):     ASSERT_CODES = _ASSERT_CODES
sre_compile.py(72):     if (flags & SRE_FLAG_IGNORECASE and
sre_compile.py(77):         fixes = None
sre_compile.py(78):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(79):         if op in LITERAL_CODES:
sre_compile.py(80):             if flags & SRE_FLAG_IGNORECASE:
sre_compile.py(96):                 emit(OPCODES[op])
sre_compile.py(97):                 emit(av)
sre_compile.py(78):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(133):                 emit(OPCODES[SUCCESS])
sre_compile.py(134):                 code[skip] = _len(code) - skip
sre_compile.py(78):     for op, av in pattern:
sre_compile.py(563):     code.append(OPCODES[SUCCESS])
sre_compile.py(565):     return code
sre_compile.py(581):     if p.pattern.groups > 100:
sre_compile.py(587):     groupindex = p.pattern.groupdict
sre_compile.py(588):     indexgroup = [None] * p.pattern.groups
sre_compile.py(589):     for k, i in groupindex.items():
sre_compile.py(592):     return _sre.compile(
sre_compile.py(593):         pattern, flags | p.pattern.flags, code,
sre_compile.py(594):         p.pattern.groups-1,
sre_compile.py(595):         groupindex, indexgroup
re.py(252):     if not bypass_cache:
re.py(253):         if len(_cache) >= _MAXCACHE:
re.py(255):         if p.flags & LOCALE:
re.py(260):             loc = None
re.py(261):         _cache[cachekey] = p, loc
re.py(262):     return p
platform.py(1323): _ironpython_sys_version_parser = re.compile(
platform.py(1324):     r'IronPython\s*'
 --- modulename: re, funcname: compile
re.py(194):     return _compile(pattern, flags)
 --- modulename: re, funcname: _compile
re.py(232):     pattern, flags = key
re.py(233):     bypass_cache = flags & DEBUG
re.py(234):     if not bypass_cache:
re.py(235):         cachekey = (type(key[0]),) + key
re.py(236):         try:
re.py(237):             p, loc = _cache[cachekey]
re.py(240):         except KeyError:
re.py(241):             pass
re.py(242):     if isinstance(pattern, _pattern_type):
re.py(246):     if not sre_compile.isstring(pattern):
 --- modulename: sre_compile, funcname: isstring
sre_compile.py(547):     for tp in STRING_TYPES:
sre_compile.py(548):         if isinstance(obj, tp):
sre_compile.py(549):             return 1
re.py(248):     try:
re.py(249):         p = sre_compile.compile(pattern, flags)
 --- modulename: sre_compile, funcname: compile
sre_compile.py(570):     if isstring(p):
 --- modulename: sre_compile, funcname: isstring
sre_compile.py(547):     for tp in STRING_TYPES:
sre_compile.py(548):         if isinstance(obj, tp):
sre_compile.py(549):             return 1
sre_compile.py(571):         pattern = p
sre_compile.py(572):         p = sre_parse.parse(p, flags)
 --- modulename: sre_parse, funcname: parse
sre_parse.py(709):     source = Tokenizer(str)
 --- modulename: sre_parse, funcname: __init__
sre_parse.py(190):         self.string = string
sre_parse.py(191):         self.index = 0
sre_parse.py(192):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(711):     if pattern is None:
sre_parse.py(712):         pattern = Pattern()
 --- modulename: sre_parse, funcname: __init__
sre_parse.py(68):         self.flags = 0
sre_parse.py(69):         self.open = []
sre_parse.py(70):         self.groups = 1
sre_parse.py(71):         self.groupdict = {}
sre_parse.py(72):         self.lookbehind = 0
sre_parse.py(713):     pattern.flags = flags
sre_parse.py(714):     pattern.str = str
sre_parse.py(716):     p = _parse_sub(source, pattern, 0)
 --- modulename: sre_parse, funcname: _parse_sub
sre_parse.py(320):     items = []
sre_parse.py(321):     itemsappend = items.append
sre_parse.py(322):     sourcematch = source.match
sre_parse.py(323):     while 1:
sre_parse.py(324):         itemsappend(_parse(source, state))
 --- modulename: sre_parse, funcname: _parse
sre_parse.py(397):     subpattern = SubPattern(state)
 --- modulename: sre_parse, funcname: __init__
sre_parse.py(93):         self.pattern = pattern
sre_parse.py(94):         if data is None:
sre_parse.py(95):             data = []
sre_parse.py(96):         self.data = data
sre_parse.py(97):         self.width = None
sre_parse.py(400):     subpatternappend = subpattern.append
sre_parse.py(401):     sourceget = source.get
sre_parse.py(402):     sourcematch = source.match
sre_parse.py(403):     _len = len
sre_parse.py(404):     PATTERNENDERS = _PATTERNENDERS
sre_parse.py(405):     ASSERTCHARS = _ASSERTCHARS
sre_parse.py(406):     LOOKBEHINDASSERTCHARS = _LOOKBEHINDASSERTCHARS
sre_parse.py(407):     REPEATCODES = _REPEATCODES
sre_parse.py(409):     while 1:
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(413):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(414):         if this is None:
sre_parse.py(417):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(428):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(429):             subpatternappend((LITERAL, ord(this)))
 --- modulename: sre_parse, funcname: append
sre_parse.py(150):         self.data.append(code)
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(413):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(414):         if this is None:
sre_parse.py(417):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(428):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(429):             subpatternappend((LITERAL, ord(this)))
 --- modulename: sre_parse, funcname: append
sre_parse.py(150):         self.data.append(code)
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(413):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(414):         if this is None:
sre_parse.py(417):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(428):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(429):             subpatternappend((LITERAL, ord(this)))
 --- modulename: sre_parse, funcname: append
sre_parse.py(150):         self.data.append(code)
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(413):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(414):         if this is None:
sre_parse.py(417):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(428):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(429):             subpatternappend((LITERAL, ord(this)))
 --- modulename: sre_parse, funcname: append
sre_parse.py(150):         self.data.append(code)
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(413):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(414):         if this is None:
sre_parse.py(417):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(428):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(429):             subpatternappend((LITERAL, ord(this)))
 --- modulename: sre_parse, funcname: append
sre_parse.py(150):         self.data.append(code)
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(413):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(414):         if this is None:
sre_parse.py(417):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(428):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(429):             subpatternappend((LITERAL, ord(this)))
 --- modulename: sre_parse, funcname: append
sre_parse.py(150):         self.data.append(code)
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(413):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(414):         if this is None:
sre_parse.py(417):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(428):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(429):             subpatternappend((LITERAL, ord(this)))
 --- modulename: sre_parse, funcname: append
sre_parse.py(150):         self.data.append(code)
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(413):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(414):         if this is None:
sre_parse.py(417):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(428):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(429):             subpatternappend((LITERAL, ord(this)))
 --- modulename: sre_parse, funcname: append
sre_parse.py(150):         self.data.append(code)
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(413):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(414):         if this is None:
sre_parse.py(417):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(428):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(429):             subpatternappend((LITERAL, ord(this)))
 --- modulename: sre_parse, funcname: append
sre_parse.py(150):         self.data.append(code)
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(413):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(199):             try:
sre_parse.py(200):                 c = self.string[self.index + 1]
sre_parse.py(203):             char = char + c
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(414):         if this is None:
sre_parse.py(417):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(428):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(429):             subpatternappend((LITERAL, ord(this)))
 --- modulename: sre_parse, funcname: append
sre_parse.py(150):         self.data.append(code)
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(413):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(414):         if this is None:
sre_parse.py(417):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(428):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(431):         elif this == "[":
sre_parse.py(488):         elif this and this[0] in REPEAT_CHARS:
sre_parse.py(541):         elif this == ".":
sre_parse.py(544):         elif this == "(":
sre_parse.py(691):         elif this == "^":
sre_parse.py(694):         elif this == "$":
sre_parse.py(697):         elif this and this[0] == "\\":
sre_parse.py(698):             code = _escape(source, this, state)
 --- modulename: sre_parse, funcname: _escape
sre_parse.py(270):     code = CATEGORIES.get(escape)
sre_parse.py(271):     if code:
sre_parse.py(272):         return code
sre_parse.py(699):             subpatternappend(code)
 --- modulename: sre_parse, funcname: append
sre_parse.py(150):         self.data.append(code)
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(413):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(414):         if this is None:
sre_parse.py(417):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(428):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(431):         elif this == "[":
sre_parse.py(488):         elif this and this[0] in REPEAT_CHARS:
sre_parse.py(490):             if this == "?":
sre_parse.py(492):             elif this == "*":
sre_parse.py(493):                 min, max = 0, MAXREPEAT
sre_parse.py(528):             if subpattern:
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(138):         return len(self.data)
sre_parse.py(529):                 item = subpattern[-1:]
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(138):         return len(self.data)
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(143):             return SubPattern(self.pattern, self.data[index])
 --- modulename: sre_parse, funcname: __init__
sre_parse.py(93):         self.pattern = pattern
sre_parse.py(94):         if data is None:
sre_parse.py(96):         self.data = data
sre_parse.py(97):         self.width = None
sre_parse.py(532):             if not item or (_len(item) == 1 and item[0][0] == AT):
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(138):         return len(self.data)
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(138):         return len(self.data)
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_parse.py(534):             if item[0][0] in REPEATCODES:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_parse.py(536):             if sourcematch("?"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(211):         return 0
sre_parse.py(539):                 subpattern[-1] = (MAX_REPEAT, (min, max, item))
 --- modulename: sre_parse, funcname: __setitem__
sre_parse.py(146):         self.data[index] = code
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(413):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(414):         if this is None:
sre_parse.py(417):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(428):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(431):         elif this == "[":
sre_parse.py(488):         elif this and this[0] in REPEAT_CHARS:
sre_parse.py(541):         elif this == ".":
sre_parse.py(544):         elif this == "(":
sre_parse.py(545):             group = 1
sre_parse.py(546):             name = None
sre_parse.py(547):             condgroup = None
sre_parse.py(548):             if sourcematch("?"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(211):         return 0
sre_parse.py(666):             if group:
sre_parse.py(668):                 if group == 2:
sre_parse.py(672):                     group = state.opengroup(name)
 --- modulename: sre_parse, funcname: opengroup
sre_parse.py(75):         gid = self.groups
sre_parse.py(76):         self.groups = gid + 1
sre_parse.py(77):         if name is not None:
sre_parse.py(83):         self.open.append(gid)
sre_parse.py(84):         return gid
sre_parse.py(673):                 if condgroup:
sre_parse.py(676):                     p = _parse_sub(source, state)
 --- modulename: sre_parse, funcname: _parse_sub
sre_parse.py(320):     items = []
sre_parse.py(321):     itemsappend = items.append
sre_parse.py(322):     sourcematch = source.match
sre_parse.py(323):     while 1:
sre_parse.py(324):         itemsappend(_parse(source, state))
 --- modulename: sre_parse, funcname: _parse
sre_parse.py(397):     subpattern = SubPattern(state)
 --- modulename: sre_parse, funcname: __init__
sre_parse.py(93):         self.pattern = pattern
sre_parse.py(94):         if data is None:
sre_parse.py(95):             data = []
sre_parse.py(96):         self.data = data
sre_parse.py(97):         self.width = None
sre_parse.py(400):     subpatternappend = subpattern.append
sre_parse.py(401):     sourceget = source.get
sre_parse.py(402):     sourcematch = source.match
sre_parse.py(403):     _len = len
sre_parse.py(404):     PATTERNENDERS = _PATTERNENDERS
sre_parse.py(405):     ASSERTCHARS = _ASSERTCHARS
sre_parse.py(406):     LOOKBEHINDASSERTCHARS = _LOOKBEHINDASSERTCHARS
sre_parse.py(407):     REPEATCODES = _REPEATCODES
sre_parse.py(409):     while 1:
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(413):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(199):             try:
sre_parse.py(200):                 c = self.string[self.index + 1]
sre_parse.py(203):             char = char + c
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(414):         if this is None:
sre_parse.py(417):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(428):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(431):         elif this == "[":
sre_parse.py(433):             set = []
sre_parse.py(434):             setappend = set.append
sre_parse.py(437):             if sourcematch("^"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(211):         return 0
sre_parse.py(440):             start = set[:]
sre_parse.py(441):             while 1:
sre_parse.py(442):                 this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(199):             try:
sre_parse.py(200):                 c = self.string[self.index + 1]
sre_parse.py(203):             char = char + c
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(443):                 if this == "]" and set != start:
sre_parse.py(445):                 elif this and this[0] == "\\":
sre_parse.py(446):                     code1 = _class_escape(source, this)
 --- modulename: sre_parse, funcname: _class_escape
sre_parse.py(238):     code = ESCAPES.get(escape)
sre_parse.py(239):     if code:
sre_parse.py(241):     code = CATEGORIES.get(escape)
sre_parse.py(242):     if code and code[0] == IN:
sre_parse.py(243):         return code
sre_parse.py(451):                 if sourcematch("-"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(211):         return 0
sre_parse.py(475):                     if code1[0] is IN:
sre_parse.py(476):                         code1 = code1[1][0]
sre_parse.py(477):                     setappend(code1)
sre_parse.py(442):                 this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(443):                 if this == "]" and set != start:
sre_parse.py(445):                 elif this and this[0] == "\\":
sre_parse.py(446):                     code1 = _class_escape(source, this)
 --- modulename: sre_parse, funcname: _class_escape
sre_parse.py(238):     code = ESCAPES.get(escape)
sre_parse.py(239):     if code:
sre_parse.py(241):     code = CATEGORIES.get(escape)
sre_parse.py(242):     if code and code[0] == IN:
sre_parse.py(244):     try:
sre_parse.py(245):         c = escape[1:2]
sre_parse.py(246):         if c == "x":
sre_parse.py(254):         elif c in OCTDIGITS:
sre_parse.py(260):         elif c in DIGITS:
sre_parse.py(262):         if len(escape) == 2:
sre_parse.py(263):             return LITERAL, ord(escape[1])
sre_parse.py(451):                 if sourcematch("-"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(211):         return 0
sre_parse.py(475):                     if code1[0] is IN:
sre_parse.py(477):                     setappend(code1)
sre_parse.py(442):                 this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(443):                 if this == "]" and set != start:
sre_parse.py(444):                     break
sre_parse.py(480):             if _len(set)==1 and set[0][0] is LITERAL:
sre_parse.py(482):             elif _len(set)==2 and set[0][0] is NEGATE and set[1][0] is LITERAL:
sre_parse.py(486):                 subpatternappend((IN, set))
 --- modulename: sre_parse, funcname: append
sre_parse.py(150):         self.data.append(code)
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(413):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(414):         if this is None:
sre_parse.py(417):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(428):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(431):         elif this == "[":
sre_parse.py(488):         elif this and this[0] in REPEAT_CHARS:
sre_parse.py(490):             if this == "?":
sre_parse.py(492):             elif this == "*":
sre_parse.py(495):             elif this == "+":
sre_parse.py(496):                 min, max = 1, MAXREPEAT
sre_parse.py(528):             if subpattern:
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(138):         return len(self.data)
sre_parse.py(529):                 item = subpattern[-1:]
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(138):         return len(self.data)
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(143):             return SubPattern(self.pattern, self.data[index])
 --- modulename: sre_parse, funcname: __init__
sre_parse.py(93):         self.pattern = pattern
sre_parse.py(94):         if data is None:
sre_parse.py(96):         self.data = data
sre_parse.py(97):         self.width = None
sre_parse.py(532):             if not item or (_len(item) == 1 and item[0][0] == AT):
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(138):         return len(self.data)
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(138):         return len(self.data)
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_parse.py(534):             if item[0][0] in REPEATCODES:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_parse.py(536):             if sourcematch("?"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(211):         return 0
sre_parse.py(539):                 subpattern[-1] = (MAX_REPEAT, (min, max, item))
 --- modulename: sre_parse, funcname: __setitem__
sre_parse.py(146):         self.data[index] = code
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(412):             break # end of subpattern
sre_parse.py(704):     return subpattern
sre_parse.py(325):         if sourcematch("|"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(211):         return 0
sre_parse.py(327):         if not nested:
sre_parse.py(329):         if not source.next or sourcematch(")", 0):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(208):             if skip:
sre_parse.py(210):             return 1
sre_parse.py(330):             break
sre_parse.py(334):     if len(items) == 1:
sre_parse.py(335):         return items[0]
sre_parse.py(677):                 if not sourcematch(")"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(208):             if skip:
sre_parse.py(209):                 self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(210):             return 1
sre_parse.py(679):                 if group is not None:
sre_parse.py(680):                     state.closegroup(group)
 --- modulename: sre_parse, funcname: closegroup
sre_parse.py(86):         self.open.remove(gid)
sre_parse.py(681):                 subpatternappend((SUBPATTERN, (group, p)))
 --- modulename: sre_parse, funcname: append
sre_parse.py(150):         self.data.append(code)
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(413):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(414):         if this is None:
sre_parse.py(417):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(428):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(431):         elif this == "[":
sre_parse.py(488):         elif this and this[0] in REPEAT_CHARS:
sre_parse.py(541):         elif this == ".":
sre_parse.py(544):         elif this == "(":
sre_parse.py(545):             group = 1
sre_parse.py(546):             name = None
sre_parse.py(547):             condgroup = None
sre_parse.py(548):             if sourcematch("?"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(208):             if skip:
sre_parse.py(209):                 self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(210):             return 1
sre_parse.py(549):                 group = 0
sre_parse.py(551):                 if sourcematch("P"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(211):         return 0
sre_parse.py(600):                 elif sourcematch(":"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(208):             if skip:
sre_parse.py(209):                 self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(210):             return 1
sre_parse.py(602):                     group = 2
sre_parse.py(666):             if group:
sre_parse.py(668):                 if group == 2:
sre_parse.py(670):                     group = None
sre_parse.py(673):                 if condgroup:
sre_parse.py(676):                     p = _parse_sub(source, state)
 --- modulename: sre_parse, funcname: _parse_sub
sre_parse.py(320):     items = []
sre_parse.py(321):     itemsappend = items.append
sre_parse.py(322):     sourcematch = source.match
sre_parse.py(323):     while 1:
sre_parse.py(324):         itemsappend(_parse(source, state))
 --- modulename: sre_parse, funcname: _parse
sre_parse.py(397):     subpattern = SubPattern(state)
 --- modulename: sre_parse, funcname: __init__
sre_parse.py(93):         self.pattern = pattern
sre_parse.py(94):         if data is None:
sre_parse.py(95):             data = []
sre_parse.py(96):         self.data = data
sre_parse.py(97):         self.width = None
sre_parse.py(400):     subpatternappend = subpattern.append
sre_parse.py(401):     sourceget = source.get
sre_parse.py(402):     sourcematch = source.match
sre_parse.py(403):     _len = len
sre_parse.py(404):     PATTERNENDERS = _PATTERNENDERS
sre_parse.py(405):     ASSERTCHARS = _ASSERTCHARS
sre_parse.py(406):     LOOKBEHINDASSERTCHARS = _LOOKBEHINDASSERTCHARS
sre_parse.py(407):     REPEATCODES = _REPEATCODES
sre_parse.py(409):     while 1:
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(413):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(199):             try:
sre_parse.py(200):                 c = self.string[self.index + 1]
sre_parse.py(203):             char = char + c
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(414):         if this is None:
sre_parse.py(417):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(428):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(429):             subpatternappend((LITERAL, ord(this)))
 --- modulename: sre_parse, funcname: append
sre_parse.py(150):         self.data.append(code)
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(413):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(414):         if this is None:
sre_parse.py(417):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(428):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(431):         elif this == "[":
sre_parse.py(488):         elif this and this[0] in REPEAT_CHARS:
sre_parse.py(541):         elif this == ".":
sre_parse.py(544):         elif this == "(":
sre_parse.py(691):         elif this == "^":
sre_parse.py(694):         elif this == "$":
sre_parse.py(697):         elif this and this[0] == "\\":
sre_parse.py(698):             code = _escape(source, this, state)
 --- modulename: sre_parse, funcname: _escape
sre_parse.py(270):     code = CATEGORIES.get(escape)
sre_parse.py(271):     if code:
sre_parse.py(273):     code = ESCAPES.get(escape)
sre_parse.py(274):     if code:
sre_parse.py(276):     try:
sre_parse.py(277):         c = escape[1:2]
sre_parse.py(278):         if c == "x":
sre_parse.py(285):         elif c == "0":
sre_parse.py(290):         elif c in DIGITS:
sre_parse.py(311):         if len(escape) == 2:
sre_parse.py(312):             return LITERAL, ord(escape[1])
sre_parse.py(699):             subpatternappend(code)
 --- modulename: sre_parse, funcname: append
sre_parse.py(150):         self.data.append(code)
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(413):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(414):         if this is None:
sre_parse.py(417):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(428):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(431):         elif this == "[":
sre_parse.py(488):         elif this and this[0] in REPEAT_CHARS:
sre_parse.py(541):         elif this == ".":
sre_parse.py(544):         elif this == "(":
sre_parse.py(545):             group = 1
sre_parse.py(546):             name = None
sre_parse.py(547):             condgroup = None
sre_parse.py(548):             if sourcematch("?"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(211):         return 0
sre_parse.py(666):             if group:
sre_parse.py(668):                 if group == 2:
sre_parse.py(672):                     group = state.opengroup(name)
 --- modulename: sre_parse, funcname: opengroup
sre_parse.py(75):         gid = self.groups
sre_parse.py(76):         self.groups = gid + 1
sre_parse.py(77):         if name is not None:
sre_parse.py(83):         self.open.append(gid)
sre_parse.py(84):         return gid
sre_parse.py(673):                 if condgroup:
sre_parse.py(676):                     p = _parse_sub(source, state)
 --- modulename: sre_parse, funcname: _parse_sub
sre_parse.py(320):     items = []
sre_parse.py(321):     itemsappend = items.append
sre_parse.py(322):     sourcematch = source.match
sre_parse.py(323):     while 1:
sre_parse.py(324):         itemsappend(_parse(source, state))
 --- modulename: sre_parse, funcname: _parse
sre_parse.py(397):     subpattern = SubPattern(state)
 --- modulename: sre_parse, funcname: __init__
sre_parse.py(93):         self.pattern = pattern
sre_parse.py(94):         if data is None:
sre_parse.py(95):             data = []
sre_parse.py(96):         self.data = data
sre_parse.py(97):         self.width = None
sre_parse.py(400):     subpatternappend = subpattern.append
sre_parse.py(401):     sourceget = source.get
sre_parse.py(402):     sourcematch = source.match
sre_parse.py(403):     _len = len
sre_parse.py(404):     PATTERNENDERS = _PATTERNENDERS
sre_parse.py(405):     ASSERTCHARS = _ASSERTCHARS
sre_parse.py(406):     LOOKBEHINDASSERTCHARS = _LOOKBEHINDASSERTCHARS
sre_parse.py(407):     REPEATCODES = _REPEATCODES
sre_parse.py(409):     while 1:
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(413):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(199):             try:
sre_parse.py(200):                 c = self.string[self.index + 1]
sre_parse.py(203):             char = char + c
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(414):         if this is None:
sre_parse.py(417):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(428):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(431):         elif this == "[":
sre_parse.py(433):             set = []
sre_parse.py(434):             setappend = set.append
sre_parse.py(437):             if sourcematch("^"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(211):         return 0
sre_parse.py(440):             start = set[:]
sre_parse.py(441):             while 1:
sre_parse.py(442):                 this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(199):             try:
sre_parse.py(200):                 c = self.string[self.index + 1]
sre_parse.py(203):             char = char + c
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(443):                 if this == "]" and set != start:
sre_parse.py(445):                 elif this and this[0] == "\\":
sre_parse.py(446):                     code1 = _class_escape(source, this)
 --- modulename: sre_parse, funcname: _class_escape
sre_parse.py(238):     code = ESCAPES.get(escape)
sre_parse.py(239):     if code:
sre_parse.py(241):     code = CATEGORIES.get(escape)
sre_parse.py(242):     if code and code[0] == IN:
sre_parse.py(243):         return code
sre_parse.py(451):                 if sourcematch("-"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(211):         return 0
sre_parse.py(475):                     if code1[0] is IN:
sre_parse.py(476):                         code1 = code1[1][0]
sre_parse.py(477):                     setappend(code1)
sre_parse.py(442):                 this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(443):                 if this == "]" and set != start:
sre_parse.py(445):                 elif this and this[0] == "\\":
sre_parse.py(446):                     code1 = _class_escape(source, this)
 --- modulename: sre_parse, funcname: _class_escape
sre_parse.py(238):     code = ESCAPES.get(escape)
sre_parse.py(239):     if code:
sre_parse.py(241):     code = CATEGORIES.get(escape)
sre_parse.py(242):     if code and code[0] == IN:
sre_parse.py(244):     try:
sre_parse.py(245):         c = escape[1:2]
sre_parse.py(246):         if c == "x":
sre_parse.py(254):         elif c in OCTDIGITS:
sre_parse.py(260):         elif c in DIGITS:
sre_parse.py(262):         if len(escape) == 2:
sre_parse.py(263):             return LITERAL, ord(escape[1])
sre_parse.py(451):                 if sourcematch("-"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(211):         return 0
sre_parse.py(475):                     if code1[0] is IN:
sre_parse.py(477):                     setappend(code1)
sre_parse.py(442):                 this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(443):                 if this == "]" and set != start:
sre_parse.py(444):                     break
sre_parse.py(480):             if _len(set)==1 and set[0][0] is LITERAL:
sre_parse.py(482):             elif _len(set)==2 and set[0][0] is NEGATE and set[1][0] is LITERAL:
sre_parse.py(486):                 subpatternappend((IN, set))
 --- modulename: sre_parse, funcname: append
sre_parse.py(150):         self.data.append(code)
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(413):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(414):         if this is None:
sre_parse.py(417):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(428):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(431):         elif this == "[":
sre_parse.py(488):         elif this and this[0] in REPEAT_CHARS:
sre_parse.py(490):             if this == "?":
sre_parse.py(492):             elif this == "*":
sre_parse.py(495):             elif this == "+":
sre_parse.py(496):                 min, max = 1, MAXREPEAT
sre_parse.py(528):             if subpattern:
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(138):         return len(self.data)
sre_parse.py(529):                 item = subpattern[-1:]
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(138):         return len(self.data)
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(143):             return SubPattern(self.pattern, self.data[index])
 --- modulename: sre_parse, funcname: __init__
sre_parse.py(93):         self.pattern = pattern
sre_parse.py(94):         if data is None:
sre_parse.py(96):         self.data = data
sre_parse.py(97):         self.width = None
sre_parse.py(532):             if not item or (_len(item) == 1 and item[0][0] == AT):
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(138):         return len(self.data)
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(138):         return len(self.data)
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_parse.py(534):             if item[0][0] in REPEATCODES:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_parse.py(536):             if sourcematch("?"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(211):         return 0
sre_parse.py(539):                 subpattern[-1] = (MAX_REPEAT, (min, max, item))
 --- modulename: sre_parse, funcname: __setitem__
sre_parse.py(146):         self.data[index] = code
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(412):             break # end of subpattern
sre_parse.py(704):     return subpattern
sre_parse.py(325):         if sourcematch("|"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(211):         return 0
sre_parse.py(327):         if not nested:
sre_parse.py(329):         if not source.next or sourcematch(")", 0):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(208):             if skip:
sre_parse.py(210):             return 1
sre_parse.py(330):             break
sre_parse.py(334):     if len(items) == 1:
sre_parse.py(335):         return items[0]
sre_parse.py(677):                 if not sourcematch(")"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(208):             if skip:
sre_parse.py(209):                 self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(199):             try:
sre_parse.py(200):                 c = self.string[self.index + 1]
sre_parse.py(203):             char = char + c
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(210):             return 1
sre_parse.py(679):                 if group is not None:
sre_parse.py(680):                     state.closegroup(group)
 --- modulename: sre_parse, funcname: closegroup
sre_parse.py(86):         self.open.remove(gid)
sre_parse.py(681):                 subpatternappend((SUBPATTERN, (group, p)))
 --- modulename: sre_parse, funcname: append
sre_parse.py(150):         self.data.append(code)
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(413):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(414):         if this is None:
sre_parse.py(417):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(428):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(431):         elif this == "[":
sre_parse.py(488):         elif this and this[0] in REPEAT_CHARS:
sre_parse.py(541):         elif this == ".":
sre_parse.py(544):         elif this == "(":
sre_parse.py(691):         elif this == "^":
sre_parse.py(694):         elif this == "$":
sre_parse.py(697):         elif this and this[0] == "\\":
sre_parse.py(698):             code = _escape(source, this, state)
 --- modulename: sre_parse, funcname: _escape
sre_parse.py(270):     code = CATEGORIES.get(escape)
sre_parse.py(271):     if code:
sre_parse.py(273):     code = ESCAPES.get(escape)
sre_parse.py(274):     if code:
sre_parse.py(276):     try:
sre_parse.py(277):         c = escape[1:2]
sre_parse.py(278):         if c == "x":
sre_parse.py(285):         elif c == "0":
sre_parse.py(290):         elif c in DIGITS:
sre_parse.py(311):         if len(escape) == 2:
sre_parse.py(312):             return LITERAL, ord(escape[1])
sre_parse.py(699):             subpatternappend(code)
 --- modulename: sre_parse, funcname: append
sre_parse.py(150):         self.data.append(code)
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(412):             break # end of subpattern
sre_parse.py(704):     return subpattern
sre_parse.py(325):         if sourcematch("|"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(211):         return 0
sre_parse.py(327):         if not nested:
sre_parse.py(329):         if not source.next or sourcematch(")", 0):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(208):             if skip:
sre_parse.py(210):             return 1
sre_parse.py(330):             break
sre_parse.py(334):     if len(items) == 1:
sre_parse.py(335):         return items[0]
sre_parse.py(677):                 if not sourcematch(")"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(208):             if skip:
sre_parse.py(209):                 self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(210):             return 1
sre_parse.py(679):                 if group is not None:
sre_parse.py(681):                 subpatternappend((SUBPATTERN, (group, p)))
 --- modulename: sre_parse, funcname: append
sre_parse.py(150):         self.data.append(code)
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(413):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(414):         if this is None:
sre_parse.py(417):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(428):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(431):         elif this == "[":
sre_parse.py(488):         elif this and this[0] in REPEAT_CHARS:
sre_parse.py(490):             if this == "?":
sre_parse.py(491):                 min, max = 0, 1
sre_parse.py(528):             if subpattern:
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(138):         return len(self.data)
sre_parse.py(529):                 item = subpattern[-1:]
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(138):         return len(self.data)
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(143):             return SubPattern(self.pattern, self.data[index])
 --- modulename: sre_parse, funcname: __init__
sre_parse.py(93):         self.pattern = pattern
sre_parse.py(94):         if data is None:
sre_parse.py(96):         self.data = data
sre_parse.py(97):         self.width = None
sre_parse.py(532):             if not item or (_len(item) == 1 and item[0][0] == AT):
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(138):         return len(self.data)
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(138):         return len(self.data)
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_parse.py(534):             if item[0][0] in REPEATCODES:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_parse.py(536):             if sourcematch("?"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(211):         return 0
sre_parse.py(539):                 subpattern[-1] = (MAX_REPEAT, (min, max, item))
 --- modulename: sre_parse, funcname: __setitem__
sre_parse.py(146):         self.data[index] = code
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(413):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(414):         if this is None:
sre_parse.py(417):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(428):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(429):             subpatternappend((LITERAL, ord(this)))
 --- modulename: sre_parse, funcname: append
sre_parse.py(150):         self.data.append(code)
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(413):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(414):         if this is None:
sre_parse.py(417):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(428):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(429):             subpatternappend((LITERAL, ord(this)))
 --- modulename: sre_parse, funcname: append
sre_parse.py(150):         self.data.append(code)
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(413):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(414):         if this is None:
sre_parse.py(417):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(428):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(429):             subpatternappend((LITERAL, ord(this)))
 --- modulename: sre_parse, funcname: append
sre_parse.py(150):         self.data.append(code)
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(413):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(414):         if this is None:
sre_parse.py(417):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(428):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(429):             subpatternappend((LITERAL, ord(this)))
 --- modulename: sre_parse, funcname: append
sre_parse.py(150):         self.data.append(code)
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(413):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(414):         if this is None:
sre_parse.py(417):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(428):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(431):         elif this == "[":
sre_parse.py(488):         elif this and this[0] in REPEAT_CHARS:
sre_parse.py(541):         elif this == ".":
sre_parse.py(544):         elif this == "(":
sre_parse.py(545):             group = 1
sre_parse.py(546):             name = None
sre_parse.py(547):             condgroup = None
sre_parse.py(548):             if sourcematch("?"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(211):         return 0
sre_parse.py(666):             if group:
sre_parse.py(668):                 if group == 2:
sre_parse.py(672):                     group = state.opengroup(name)
 --- modulename: sre_parse, funcname: opengroup
sre_parse.py(75):         gid = self.groups
sre_parse.py(76):         self.groups = gid + 1
sre_parse.py(77):         if name is not None:
sre_parse.py(83):         self.open.append(gid)
sre_parse.py(84):         return gid
sre_parse.py(673):                 if condgroup:
sre_parse.py(676):                     p = _parse_sub(source, state)
 --- modulename: sre_parse, funcname: _parse_sub
sre_parse.py(320):     items = []
sre_parse.py(321):     itemsappend = items.append
sre_parse.py(322):     sourcematch = source.match
sre_parse.py(323):     while 1:
sre_parse.py(324):         itemsappend(_parse(source, state))
 --- modulename: sre_parse, funcname: _parse
sre_parse.py(397):     subpattern = SubPattern(state)
 --- modulename: sre_parse, funcname: __init__
sre_parse.py(93):         self.pattern = pattern
sre_parse.py(94):         if data is None:
sre_parse.py(95):             data = []
sre_parse.py(96):         self.data = data
sre_parse.py(97):         self.width = None
sre_parse.py(400):     subpatternappend = subpattern.append
sre_parse.py(401):     sourceget = source.get
sre_parse.py(402):     sourcematch = source.match
sre_parse.py(403):     _len = len
sre_parse.py(404):     PATTERNENDERS = _PATTERNENDERS
sre_parse.py(405):     ASSERTCHARS = _ASSERTCHARS
sre_parse.py(406):     LOOKBEHINDASSERTCHARS = _LOOKBEHINDASSERTCHARS
sre_parse.py(407):     REPEATCODES = _REPEATCODES
sre_parse.py(409):     while 1:
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(413):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(414):         if this is None:
sre_parse.py(417):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(428):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(431):         elif this == "[":
sre_parse.py(488):         elif this and this[0] in REPEAT_CHARS:
sre_parse.py(541):         elif this == ".":
sre_parse.py(542):             subpatternappend((ANY, None))
 --- modulename: sre_parse, funcname: append
sre_parse.py(150):         self.data.append(code)
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(413):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(414):         if this is None:
sre_parse.py(417):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(428):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(429):             subpatternappend((LITERAL, ord(this)))
 --- modulename: sre_parse, funcname: append
sre_parse.py(150):         self.data.append(code)
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(413):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(414):         if this is None:
sre_parse.py(417):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(428):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(429):             subpatternappend((LITERAL, ord(this)))
 --- modulename: sre_parse, funcname: append
sre_parse.py(150):         self.data.append(code)
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(413):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(414):         if this is None:
sre_parse.py(417):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(428):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(429):             subpatternappend((LITERAL, ord(this)))
 --- modulename: sre_parse, funcname: append
sre_parse.py(150):         self.data.append(code)
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(413):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(414):         if this is None:
sre_parse.py(417):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(428):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(429):             subpatternappend((LITERAL, ord(this)))
 --- modulename: sre_parse, funcname: append
sre_parse.py(150):         self.data.append(code)
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(413):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(199):             try:
sre_parse.py(200):                 c = self.string[self.index + 1]
sre_parse.py(203):             char = char + c
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(414):         if this is None:
sre_parse.py(417):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(428):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(431):         elif this == "[":
sre_parse.py(433):             set = []
sre_parse.py(434):             setappend = set.append
sre_parse.py(437):             if sourcematch("^"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(211):         return 0
sre_parse.py(440):             start = set[:]
sre_parse.py(441):             while 1:
sre_parse.py(442):                 this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(199):             try:
sre_parse.py(200):                 c = self.string[self.index + 1]
sre_parse.py(203):             char = char + c
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(443):                 if this == "]" and set != start:
sre_parse.py(445):                 elif this and this[0] == "\\":
sre_parse.py(446):                     code1 = _class_escape(source, this)
 --- modulename: sre_parse, funcname: _class_escape
sre_parse.py(238):     code = ESCAPES.get(escape)
sre_parse.py(239):     if code:
sre_parse.py(241):     code = CATEGORIES.get(escape)
sre_parse.py(242):     if code and code[0] == IN:
sre_parse.py(243):         return code
sre_parse.py(451):                 if sourcematch("-"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(211):         return 0
sre_parse.py(475):                     if code1[0] is IN:
sre_parse.py(476):                         code1 = code1[1][0]
sre_parse.py(477):                     setappend(code1)
sre_parse.py(442):                 this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(443):                 if this == "]" and set != start:
sre_parse.py(445):                 elif this and this[0] == "\\":
sre_parse.py(446):                     code1 = _class_escape(source, this)
 --- modulename: sre_parse, funcname: _class_escape
sre_parse.py(238):     code = ESCAPES.get(escape)
sre_parse.py(239):     if code:
sre_parse.py(241):     code = CATEGORIES.get(escape)
sre_parse.py(242):     if code and code[0] == IN:
sre_parse.py(244):     try:
sre_parse.py(245):         c = escape[1:2]
sre_parse.py(246):         if c == "x":
sre_parse.py(254):         elif c in OCTDIGITS:
sre_parse.py(260):         elif c in DIGITS:
sre_parse.py(262):         if len(escape) == 2:
sre_parse.py(263):             return LITERAL, ord(escape[1])
sre_parse.py(451):                 if sourcematch("-"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(211):         return 0
sre_parse.py(475):                     if code1[0] is IN:
sre_parse.py(477):                     setappend(code1)
sre_parse.py(442):                 this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(443):                 if this == "]" and set != start:
sre_parse.py(444):                     break
sre_parse.py(480):             if _len(set)==1 and set[0][0] is LITERAL:
sre_parse.py(482):             elif _len(set)==2 and set[0][0] is NEGATE and set[1][0] is LITERAL:
sre_parse.py(486):                 subpatternappend((IN, set))
 --- modulename: sre_parse, funcname: append
sre_parse.py(150):         self.data.append(code)
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(413):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(414):         if this is None:
sre_parse.py(417):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(428):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(431):         elif this == "[":
sre_parse.py(488):         elif this and this[0] in REPEAT_CHARS:
sre_parse.py(490):             if this == "?":
sre_parse.py(492):             elif this == "*":
sre_parse.py(495):             elif this == "+":
sre_parse.py(496):                 min, max = 1, MAXREPEAT
sre_parse.py(528):             if subpattern:
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(138):         return len(self.data)
sre_parse.py(529):                 item = subpattern[-1:]
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(138):         return len(self.data)
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(143):             return SubPattern(self.pattern, self.data[index])
 --- modulename: sre_parse, funcname: __init__
sre_parse.py(93):         self.pattern = pattern
sre_parse.py(94):         if data is None:
sre_parse.py(96):         self.data = data
sre_parse.py(97):         self.width = None
sre_parse.py(532):             if not item or (_len(item) == 1 and item[0][0] == AT):
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(138):         return len(self.data)
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(138):         return len(self.data)
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_parse.py(534):             if item[0][0] in REPEATCODES:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_parse.py(536):             if sourcematch("?"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(211):         return 0
sre_parse.py(539):                 subpattern[-1] = (MAX_REPEAT, (min, max, item))
 --- modulename: sre_parse, funcname: __setitem__
sre_parse.py(146):         self.data[index] = code
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(412):             break # end of subpattern
sre_parse.py(704):     return subpattern
sre_parse.py(325):         if sourcematch("|"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(211):         return 0
sre_parse.py(327):         if not nested:
sre_parse.py(329):         if not source.next or sourcematch(")", 0):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(208):             if skip:
sre_parse.py(210):             return 1
sre_parse.py(330):             break
sre_parse.py(334):     if len(items) == 1:
sre_parse.py(335):         return items[0]
sre_parse.py(677):                 if not sourcematch(")"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(208):             if skip:
sre_parse.py(209):                 self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(195):             self.next = None
sre_parse.py(196):             return
sre_parse.py(210):             return 1
sre_parse.py(679):                 if group is not None:
sre_parse.py(680):                     state.closegroup(group)
 --- modulename: sre_parse, funcname: closegroup
sre_parse.py(86):         self.open.remove(gid)
sre_parse.py(681):                 subpatternappend((SUBPATTERN, (group, p)))
 --- modulename: sre_parse, funcname: append
sre_parse.py(150):         self.data.append(code)
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(413):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(195):             self.next = None
sre_parse.py(196):             return
sre_parse.py(215):         return this
sre_parse.py(414):         if this is None:
sre_parse.py(415):             break # end of pattern
sre_parse.py(704):     return subpattern
sre_parse.py(325):         if sourcematch("|"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(211):         return 0
sre_parse.py(327):         if not nested:
sre_parse.py(328):             break
sre_parse.py(334):     if len(items) == 1:
sre_parse.py(335):         return items[0]
sre_parse.py(718):     tail = source.get()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(195):             self.next = None
sre_parse.py(196):             return
sre_parse.py(215):         return this
sre_parse.py(719):     if tail == ")":
sre_parse.py(721):     elif tail:
sre_parse.py(724):     if not (flags & SRE_FLAG_VERBOSE) and p.pattern.flags & SRE_FLAG_VERBOSE:
sre_parse.py(729):     if flags & SRE_FLAG_DEBUG:
sre_parse.py(732):     return p
sre_compile.py(576):     code = _code(p, flags)
 --- modulename: sre_compile, funcname: _code
sre_compile.py(554):     flags = p.pattern.flags | flags
sre_compile.py(555):     code = []
sre_compile.py(558):     _compile_info(code, p, flags)
 --- modulename: sre_compile, funcname: _compile_info
sre_compile.py(437):     lo, hi = pattern.getwidth()
 --- modulename: sre_parse, funcname: getwidth
sre_parse.py(153):         if self.width:
sre_parse.py(155):         lo = hi = 0
sre_parse.py(156):         UNITCODES = (ANY, RANGE, IN, LITERAL, NOT_LITERAL, CATEGORY)
sre_parse.py(157):         REPEATCODES = (MIN_REPEAT, MAX_REPEAT)
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(159):             if op is BRANCH:
sre_parse.py(168):             elif op is CALL:
sre_parse.py(172):             elif op is SUBPATTERN:
sre_parse.py(176):             elif op in REPEATCODES:
sre_parse.py(180):             elif op in UNITCODES:
sre_parse.py(181):                 lo = lo + 1
sre_parse.py(182):                 hi = hi + 1
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(159):             if op is BRANCH:
sre_parse.py(168):             elif op is CALL:
sre_parse.py(172):             elif op is SUBPATTERN:
sre_parse.py(176):             elif op in REPEATCODES:
sre_parse.py(180):             elif op in UNITCODES:
sre_parse.py(181):                 lo = lo + 1
sre_parse.py(182):                 hi = hi + 1
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(159):             if op is BRANCH:
sre_parse.py(168):             elif op is CALL:
sre_parse.py(172):             elif op is SUBPATTERN:
sre_parse.py(176):             elif op in REPEATCODES:
sre_parse.py(180):             elif op in UNITCODES:
sre_parse.py(181):                 lo = lo + 1
sre_parse.py(182):                 hi = hi + 1
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(159):             if op is BRANCH:
sre_parse.py(168):             elif op is CALL:
sre_parse.py(172):             elif op is SUBPATTERN:
sre_parse.py(176):             elif op in REPEATCODES:
sre_parse.py(180):             elif op in UNITCODES:
sre_parse.py(181):                 lo = lo + 1
sre_parse.py(182):                 hi = hi + 1
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(159):             if op is BRANCH:
sre_parse.py(168):             elif op is CALL:
sre_parse.py(172):             elif op is SUBPATTERN:
sre_parse.py(176):             elif op in REPEATCODES:
sre_parse.py(180):             elif op in UNITCODES:
sre_parse.py(181):                 lo = lo + 1
sre_parse.py(182):                 hi = hi + 1
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(159):             if op is BRANCH:
sre_parse.py(168):             elif op is CALL:
sre_parse.py(172):             elif op is SUBPATTERN:
sre_parse.py(176):             elif op in REPEATCODES:
sre_parse.py(180):             elif op in UNITCODES:
sre_parse.py(181):                 lo = lo + 1
sre_parse.py(182):                 hi = hi + 1
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(159):             if op is BRANCH:
sre_parse.py(168):             elif op is CALL:
sre_parse.py(172):             elif op is SUBPATTERN:
sre_parse.py(176):             elif op in REPEATCODES:
sre_parse.py(180):             elif op in UNITCODES:
sre_parse.py(181):                 lo = lo + 1
sre_parse.py(182):                 hi = hi + 1
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(159):             if op is BRANCH:
sre_parse.py(168):             elif op is CALL:
sre_parse.py(172):             elif op is SUBPATTERN:
sre_parse.py(176):             elif op in REPEATCODES:
sre_parse.py(180):             elif op in UNITCODES:
sre_parse.py(181):                 lo = lo + 1
sre_parse.py(182):                 hi = hi + 1
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(159):             if op is BRANCH:
sre_parse.py(168):             elif op is CALL:
sre_parse.py(172):             elif op is SUBPATTERN:
sre_parse.py(176):             elif op in REPEATCODES:
sre_parse.py(180):             elif op in UNITCODES:
sre_parse.py(181):                 lo = lo + 1
sre_parse.py(182):                 hi = hi + 1
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(159):             if op is BRANCH:
sre_parse.py(168):             elif op is CALL:
sre_parse.py(172):             elif op is SUBPATTERN:
sre_parse.py(176):             elif op in REPEATCODES:
sre_parse.py(180):             elif op in UNITCODES:
sre_parse.py(181):                 lo = lo + 1
sre_parse.py(182):                 hi = hi + 1
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(159):             if op is BRANCH:
sre_parse.py(168):             elif op is CALL:
sre_parse.py(172):             elif op is SUBPATTERN:
sre_parse.py(176):             elif op in REPEATCODES:
sre_parse.py(177):                 i, j = av[2].getwidth()
 --- modulename: sre_parse, funcname: getwidth
sre_parse.py(153):         if self.width:
sre_parse.py(155):         lo = hi = 0
sre_parse.py(156):         UNITCODES = (ANY, RANGE, IN, LITERAL, NOT_LITERAL, CATEGORY)
sre_parse.py(157):         REPEATCODES = (MIN_REPEAT, MAX_REPEAT)
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(159):             if op is BRANCH:
sre_parse.py(168):             elif op is CALL:
sre_parse.py(172):             elif op is SUBPATTERN:
sre_parse.py(176):             elif op in REPEATCODES:
sre_parse.py(180):             elif op in UNITCODES:
sre_parse.py(181):                 lo = lo + 1
sre_parse.py(182):                 hi = hi + 1
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(185):         self.width = min(lo, MAXREPEAT - 1), min(hi, MAXREPEAT)
sre_parse.py(186):         return self.width
sre_parse.py(178):                 lo = lo + i * av[0]
sre_parse.py(179):                 hi = hi + j * av[1]
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(159):             if op is BRANCH:
sre_parse.py(168):             elif op is CALL:
sre_parse.py(172):             elif op is SUBPATTERN:
sre_parse.py(173):                 i, j = av[1].getwidth()
 --- modulename: sre_parse, funcname: getwidth
sre_parse.py(153):         if self.width:
sre_parse.py(155):         lo = hi = 0
sre_parse.py(156):         UNITCODES = (ANY, RANGE, IN, LITERAL, NOT_LITERAL, CATEGORY)
sre_parse.py(157):         REPEATCODES = (MIN_REPEAT, MAX_REPEAT)
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(159):             if op is BRANCH:
sre_parse.py(168):             elif op is CALL:
sre_parse.py(172):             elif op is SUBPATTERN:
sre_parse.py(176):             elif op in REPEATCODES:
sre_parse.py(177):                 i, j = av[2].getwidth()
 --- modulename: sre_parse, funcname: getwidth
sre_parse.py(153):         if self.width:
sre_parse.py(155):         lo = hi = 0
sre_parse.py(156):         UNITCODES = (ANY, RANGE, IN, LITERAL, NOT_LITERAL, CATEGORY)
sre_parse.py(157):         REPEATCODES = (MIN_REPEAT, MAX_REPEAT)
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(159):             if op is BRANCH:
sre_parse.py(168):             elif op is CALL:
sre_parse.py(172):             elif op is SUBPATTERN:
sre_parse.py(176):             elif op in REPEATCODES:
sre_parse.py(180):             elif op in UNITCODES:
sre_parse.py(181):                 lo = lo + 1
sre_parse.py(182):                 hi = hi + 1
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(185):         self.width = min(lo, MAXREPEAT - 1), min(hi, MAXREPEAT)
sre_parse.py(186):         return self.width
sre_parse.py(178):                 lo = lo + i * av[0]
sre_parse.py(179):                 hi = hi + j * av[1]
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(185):         self.width = min(lo, MAXREPEAT - 1), min(hi, MAXREPEAT)
sre_parse.py(186):         return self.width
sre_parse.py(174):                 lo = lo + i
sre_parse.py(175):                 hi = hi + j
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(159):             if op is BRANCH:
sre_parse.py(168):             elif op is CALL:
sre_parse.py(172):             elif op is SUBPATTERN:
sre_parse.py(176):             elif op in REPEATCODES:
sre_parse.py(177):                 i, j = av[2].getwidth()
 --- modulename: sre_parse, funcname: getwidth
sre_parse.py(153):         if self.width:
sre_parse.py(155):         lo = hi = 0
sre_parse.py(156):         UNITCODES = (ANY, RANGE, IN, LITERAL, NOT_LITERAL, CATEGORY)
sre_parse.py(157):         REPEATCODES = (MIN_REPEAT, MAX_REPEAT)
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(159):             if op is BRANCH:
sre_parse.py(168):             elif op is CALL:
sre_parse.py(172):             elif op is SUBPATTERN:
sre_parse.py(173):                 i, j = av[1].getwidth()
 --- modulename: sre_parse, funcname: getwidth
sre_parse.py(153):         if self.width:
sre_parse.py(155):         lo = hi = 0
sre_parse.py(156):         UNITCODES = (ANY, RANGE, IN, LITERAL, NOT_LITERAL, CATEGORY)
sre_parse.py(157):         REPEATCODES = (MIN_REPEAT, MAX_REPEAT)
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(159):             if op is BRANCH:
sre_parse.py(168):             elif op is CALL:
sre_parse.py(172):             elif op is SUBPATTERN:
sre_parse.py(176):             elif op in REPEATCODES:
sre_parse.py(180):             elif op in UNITCODES:
sre_parse.py(181):                 lo = lo + 1
sre_parse.py(182):                 hi = hi + 1
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(159):             if op is BRANCH:
sre_parse.py(168):             elif op is CALL:
sre_parse.py(172):             elif op is SUBPATTERN:
sre_parse.py(176):             elif op in REPEATCODES:
sre_parse.py(180):             elif op in UNITCODES:
sre_parse.py(181):                 lo = lo + 1
sre_parse.py(182):                 hi = hi + 1
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(159):             if op is BRANCH:
sre_parse.py(168):             elif op is CALL:
sre_parse.py(172):             elif op is SUBPATTERN:
sre_parse.py(173):                 i, j = av[1].getwidth()
 --- modulename: sre_parse, funcname: getwidth
sre_parse.py(153):         if self.width:
sre_parse.py(155):         lo = hi = 0
sre_parse.py(156):         UNITCODES = (ANY, RANGE, IN, LITERAL, NOT_LITERAL, CATEGORY)
sre_parse.py(157):         REPEATCODES = (MIN_REPEAT, MAX_REPEAT)
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(159):             if op is BRANCH:
sre_parse.py(168):             elif op is CALL:
sre_parse.py(172):             elif op is SUBPATTERN:
sre_parse.py(176):             elif op in REPEATCODES:
sre_parse.py(177):                 i, j = av[2].getwidth()
 --- modulename: sre_parse, funcname: getwidth
sre_parse.py(153):         if self.width:
sre_parse.py(155):         lo = hi = 0
sre_parse.py(156):         UNITCODES = (ANY, RANGE, IN, LITERAL, NOT_LITERAL, CATEGORY)
sre_parse.py(157):         REPEATCODES = (MIN_REPEAT, MAX_REPEAT)
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(159):             if op is BRANCH:
sre_parse.py(168):             elif op is CALL:
sre_parse.py(172):             elif op is SUBPATTERN:
sre_parse.py(176):             elif op in REPEATCODES:
sre_parse.py(180):             elif op in UNITCODES:
sre_parse.py(181):                 lo = lo + 1
sre_parse.py(182):                 hi = hi + 1
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(185):         self.width = min(lo, MAXREPEAT - 1), min(hi, MAXREPEAT)
sre_parse.py(186):         return self.width
sre_parse.py(178):                 lo = lo + i * av[0]
sre_parse.py(179):                 hi = hi + j * av[1]
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(185):         self.width = min(lo, MAXREPEAT - 1), min(hi, MAXREPEAT)
sre_parse.py(186):         return self.width
sre_parse.py(174):                 lo = lo + i
sre_parse.py(175):                 hi = hi + j
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(159):             if op is BRANCH:
sre_parse.py(168):             elif op is CALL:
sre_parse.py(172):             elif op is SUBPATTERN:
sre_parse.py(176):             elif op in REPEATCODES:
sre_parse.py(180):             elif op in UNITCODES:
sre_parse.py(181):                 lo = lo + 1
sre_parse.py(182):                 hi = hi + 1
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(185):         self.width = min(lo, MAXREPEAT - 1), min(hi, MAXREPEAT)
sre_parse.py(186):         return self.width
sre_parse.py(174):                 lo = lo + i
sre_parse.py(175):                 hi = hi + j
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(185):         self.width = min(lo, MAXREPEAT - 1), min(hi, MAXREPEAT)
sre_parse.py(186):         return self.width
sre_parse.py(178):                 lo = lo + i * av[0]
sre_parse.py(179):                 hi = hi + j * av[1]
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(159):             if op is BRANCH:
sre_parse.py(168):             elif op is CALL:
sre_parse.py(172):             elif op is SUBPATTERN:
sre_parse.py(176):             elif op in REPEATCODES:
sre_parse.py(180):             elif op in UNITCODES:
sre_parse.py(181):                 lo = lo + 1
sre_parse.py(182):                 hi = hi + 1
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(159):             if op is BRANCH:
sre_parse.py(168):             elif op is CALL:
sre_parse.py(172):             elif op is SUBPATTERN:
sre_parse.py(176):             elif op in REPEATCODES:
sre_parse.py(180):             elif op in UNITCODES:
sre_parse.py(181):                 lo = lo + 1
sre_parse.py(182):                 hi = hi + 1
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(159):             if op is BRANCH:
sre_parse.py(168):             elif op is CALL:
sre_parse.py(172):             elif op is SUBPATTERN:
sre_parse.py(176):             elif op in REPEATCODES:
sre_parse.py(180):             elif op in UNITCODES:
sre_parse.py(181):                 lo = lo + 1
sre_parse.py(182):                 hi = hi + 1
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(159):             if op is BRANCH:
sre_parse.py(168):             elif op is CALL:
sre_parse.py(172):             elif op is SUBPATTERN:
sre_parse.py(176):             elif op in REPEATCODES:
sre_parse.py(180):             elif op in UNITCODES:
sre_parse.py(181):                 lo = lo + 1
sre_parse.py(182):                 hi = hi + 1
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(159):             if op is BRANCH:
sre_parse.py(168):             elif op is CALL:
sre_parse.py(172):             elif op is SUBPATTERN:
sre_parse.py(173):                 i, j = av[1].getwidth()
 --- modulename: sre_parse, funcname: getwidth
sre_parse.py(153):         if self.width:
sre_parse.py(155):         lo = hi = 0
sre_parse.py(156):         UNITCODES = (ANY, RANGE, IN, LITERAL, NOT_LITERAL, CATEGORY)
sre_parse.py(157):         REPEATCODES = (MIN_REPEAT, MAX_REPEAT)
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(159):             if op is BRANCH:
sre_parse.py(168):             elif op is CALL:
sre_parse.py(172):             elif op is SUBPATTERN:
sre_parse.py(176):             elif op in REPEATCODES:
sre_parse.py(180):             elif op in UNITCODES:
sre_parse.py(181):                 lo = lo + 1
sre_parse.py(182):                 hi = hi + 1
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(159):             if op is BRANCH:
sre_parse.py(168):             elif op is CALL:
sre_parse.py(172):             elif op is SUBPATTERN:
sre_parse.py(176):             elif op in REPEATCODES:
sre_parse.py(180):             elif op in UNITCODES:
sre_parse.py(181):                 lo = lo + 1
sre_parse.py(182):                 hi = hi + 1
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(159):             if op is BRANCH:
sre_parse.py(168):             elif op is CALL:
sre_parse.py(172):             elif op is SUBPATTERN:
sre_parse.py(176):             elif op in REPEATCODES:
sre_parse.py(180):             elif op in UNITCODES:
sre_parse.py(181):                 lo = lo + 1
sre_parse.py(182):                 hi = hi + 1
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(159):             if op is BRANCH:
sre_parse.py(168):             elif op is CALL:
sre_parse.py(172):             elif op is SUBPATTERN:
sre_parse.py(176):             elif op in REPEATCODES:
sre_parse.py(180):             elif op in UNITCODES:
sre_parse.py(181):                 lo = lo + 1
sre_parse.py(182):                 hi = hi + 1
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(159):             if op is BRANCH:
sre_parse.py(168):             elif op is CALL:
sre_parse.py(172):             elif op is SUBPATTERN:
sre_parse.py(176):             elif op in REPEATCODES:
sre_parse.py(180):             elif op in UNITCODES:
sre_parse.py(181):                 lo = lo + 1
sre_parse.py(182):                 hi = hi + 1
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(159):             if op is BRANCH:
sre_parse.py(168):             elif op is CALL:
sre_parse.py(172):             elif op is SUBPATTERN:
sre_parse.py(176):             elif op in REPEATCODES:
sre_parse.py(177):                 i, j = av[2].getwidth()
 --- modulename: sre_parse, funcname: getwidth
sre_parse.py(153):         if self.width:
sre_parse.py(155):         lo = hi = 0
sre_parse.py(156):         UNITCODES = (ANY, RANGE, IN, LITERAL, NOT_LITERAL, CATEGORY)
sre_parse.py(157):         REPEATCODES = (MIN_REPEAT, MAX_REPEAT)
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(159):             if op is BRANCH:
sre_parse.py(168):             elif op is CALL:
sre_parse.py(172):             elif op is SUBPATTERN:
sre_parse.py(176):             elif op in REPEATCODES:
sre_parse.py(180):             elif op in UNITCODES:
sre_parse.py(181):                 lo = lo + 1
sre_parse.py(182):                 hi = hi + 1
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(185):         self.width = min(lo, MAXREPEAT - 1), min(hi, MAXREPEAT)
sre_parse.py(186):         return self.width
sre_parse.py(178):                 lo = lo + i * av[0]
sre_parse.py(179):                 hi = hi + j * av[1]
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(185):         self.width = min(lo, MAXREPEAT - 1), min(hi, MAXREPEAT)
sre_parse.py(186):         return self.width
sre_parse.py(174):                 lo = lo + i
sre_parse.py(175):                 hi = hi + j
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(185):         self.width = min(lo, MAXREPEAT - 1), min(hi, MAXREPEAT)
sre_parse.py(186):         return self.width
sre_compile.py(438):     if lo == 0:
sre_compile.py(441):     prefix = []
sre_compile.py(442):     prefixappend = prefix.append
sre_compile.py(443):     prefix_skip = 0
sre_compile.py(444):     charset = [] # not used
sre_compile.py(445):     charsetappend = charset.append
sre_compile.py(446):     if not (flags & SRE_FLAG_IGNORECASE):
sre_compile.py(448):         for op, av in pattern.data:
sre_compile.py(449):             if op is LITERAL:
sre_compile.py(450):                 if len(prefix) == prefix_skip:
sre_compile.py(451):                     prefix_skip = prefix_skip + 1
sre_compile.py(452):                 prefixappend(av)
sre_compile.py(448):         for op, av in pattern.data:
sre_compile.py(449):             if op is LITERAL:
sre_compile.py(450):                 if len(prefix) == prefix_skip:
sre_compile.py(451):                     prefix_skip = prefix_skip + 1
sre_compile.py(452):                 prefixappend(av)
sre_compile.py(448):         for op, av in pattern.data:
sre_compile.py(449):             if op is LITERAL:
sre_compile.py(450):                 if len(prefix) == prefix_skip:
sre_compile.py(451):                     prefix_skip = prefix_skip + 1
sre_compile.py(452):                 prefixappend(av)
sre_compile.py(448):         for op, av in pattern.data:
sre_compile.py(449):             if op is LITERAL:
sre_compile.py(450):                 if len(prefix) == prefix_skip:
sre_compile.py(451):                     prefix_skip = prefix_skip + 1
sre_compile.py(452):                 prefixappend(av)
sre_compile.py(448):         for op, av in pattern.data:
sre_compile.py(449):             if op is LITERAL:
sre_compile.py(450):                 if len(prefix) == prefix_skip:
sre_compile.py(451):                     prefix_skip = prefix_skip + 1
sre_compile.py(452):                 prefixappend(av)
sre_compile.py(448):         for op, av in pattern.data:
sre_compile.py(449):             if op is LITERAL:
sre_compile.py(450):                 if len(prefix) == prefix_skip:
sre_compile.py(451):                     prefix_skip = prefix_skip + 1
sre_compile.py(452):                 prefixappend(av)
sre_compile.py(448):         for op, av in pattern.data:
sre_compile.py(449):             if op is LITERAL:
sre_compile.py(450):                 if len(prefix) == prefix_skip:
sre_compile.py(451):                     prefix_skip = prefix_skip + 1
sre_compile.py(452):                 prefixappend(av)
sre_compile.py(448):         for op, av in pattern.data:
sre_compile.py(449):             if op is LITERAL:
sre_compile.py(450):                 if len(prefix) == prefix_skip:
sre_compile.py(451):                     prefix_skip = prefix_skip + 1
sre_compile.py(452):                 prefixappend(av)
sre_compile.py(448):         for op, av in pattern.data:
sre_compile.py(449):             if op is LITERAL:
sre_compile.py(450):                 if len(prefix) == prefix_skip:
sre_compile.py(451):                     prefix_skip = prefix_skip + 1
sre_compile.py(452):                 prefixappend(av)
sre_compile.py(448):         for op, av in pattern.data:
sre_compile.py(449):             if op is LITERAL:
sre_compile.py(450):                 if len(prefix) == prefix_skip:
sre_compile.py(451):                     prefix_skip = prefix_skip + 1
sre_compile.py(452):                 prefixappend(av)
sre_compile.py(448):         for op, av in pattern.data:
sre_compile.py(449):             if op is LITERAL:
sre_compile.py(453):             elif op is SUBPATTERN and len(av[1]) == 1:
sre_compile.py(460):                 break
sre_compile.py(462):         if not prefix and pattern.data:
sre_compile.py(501):     emit = code.append
sre_compile.py(502):     emit(OPCODES[INFO])
sre_compile.py(503):     skip = len(code); emit(0)
sre_compile.py(505):     mask = 0
sre_compile.py(506):     if prefix:
sre_compile.py(507):         mask = SRE_INFO_PREFIX
sre_compile.py(508):         if len(prefix) == prefix_skip == len(pattern.data):
sre_compile.py(512):     emit(mask)
sre_compile.py(514):     if lo < MAXCODE:
sre_compile.py(515):         emit(lo)
sre_compile.py(519):     if hi < MAXCODE:
sre_compile.py(520):         emit(hi)
sre_compile.py(524):     if prefix:
sre_compile.py(525):         emit(len(prefix)) # length
sre_compile.py(526):         emit(prefix_skip) # skip
sre_compile.py(527):         code.extend(prefix)
sre_compile.py(529):         table = [-1] + ([0]*len(prefix))
sre_compile.py(530):         for i in xrange(len(prefix)):
sre_compile.py(531):             table[i+1] = table[i]+1
sre_compile.py(532):             while table[i+1] > 0 and prefix[i] != prefix[table[i+1]-1]:
sre_compile.py(530):         for i in xrange(len(prefix)):
sre_compile.py(531):             table[i+1] = table[i]+1
sre_compile.py(532):             while table[i+1] > 0 and prefix[i] != prefix[table[i+1]-1]:
sre_compile.py(533):                 table[i+1] = table[table[i+1]-1]+1
sre_compile.py(532):             while table[i+1] > 0 and prefix[i] != prefix[table[i+1]-1]:
sre_compile.py(530):         for i in xrange(len(prefix)):
sre_compile.py(531):             table[i+1] = table[i]+1
sre_compile.py(532):             while table[i+1] > 0 and prefix[i] != prefix[table[i+1]-1]:
sre_compile.py(533):                 table[i+1] = table[table[i+1]-1]+1
sre_compile.py(532):             while table[i+1] > 0 and prefix[i] != prefix[table[i+1]-1]:
sre_compile.py(530):         for i in xrange(len(prefix)):
sre_compile.py(531):             table[i+1] = table[i]+1
sre_compile.py(532):             while table[i+1] > 0 and prefix[i] != prefix[table[i+1]-1]:
sre_compile.py(533):                 table[i+1] = table[table[i+1]-1]+1
sre_compile.py(532):             while table[i+1] > 0 and prefix[i] != prefix[table[i+1]-1]:
sre_compile.py(530):         for i in xrange(len(prefix)):
sre_compile.py(531):             table[i+1] = table[i]+1
sre_compile.py(532):             while table[i+1] > 0 and prefix[i] != prefix[table[i+1]-1]:
sre_compile.py(533):                 table[i+1] = table[table[i+1]-1]+1
sre_compile.py(532):             while table[i+1] > 0 and prefix[i] != prefix[table[i+1]-1]:
sre_compile.py(530):         for i in xrange(len(prefix)):
sre_compile.py(531):             table[i+1] = table[i]+1
sre_compile.py(532):             while table[i+1] > 0 and prefix[i] != prefix[table[i+1]-1]:
sre_compile.py(533):                 table[i+1] = table[table[i+1]-1]+1
sre_compile.py(532):             while table[i+1] > 0 and prefix[i] != prefix[table[i+1]-1]:
sre_compile.py(530):         for i in xrange(len(prefix)):
sre_compile.py(531):             table[i+1] = table[i]+1
sre_compile.py(532):             while table[i+1] > 0 and prefix[i] != prefix[table[i+1]-1]:
sre_compile.py(533):                 table[i+1] = table[table[i+1]-1]+1
sre_compile.py(532):             while table[i+1] > 0 and prefix[i] != prefix[table[i+1]-1]:
sre_compile.py(530):         for i in xrange(len(prefix)):
sre_compile.py(531):             table[i+1] = table[i]+1
sre_compile.py(532):             while table[i+1] > 0 and prefix[i] != prefix[table[i+1]-1]:
sre_compile.py(533):                 table[i+1] = table[table[i+1]-1]+1
sre_compile.py(532):             while table[i+1] > 0 and prefix[i] != prefix[table[i+1]-1]:
sre_compile.py(530):         for i in xrange(len(prefix)):
sre_compile.py(531):             table[i+1] = table[i]+1
sre_compile.py(532):             while table[i+1] > 0 and prefix[i] != prefix[table[i+1]-1]:
sre_compile.py(533):                 table[i+1] = table[table[i+1]-1]+1
sre_compile.py(532):             while table[i+1] > 0 and prefix[i] != prefix[table[i+1]-1]:
sre_compile.py(530):         for i in xrange(len(prefix)):
sre_compile.py(531):             table[i+1] = table[i]+1
sre_compile.py(532):             while table[i+1] > 0 and prefix[i] != prefix[table[i+1]-1]:
sre_compile.py(533):                 table[i+1] = table[table[i+1]-1]+1
sre_compile.py(532):             while table[i+1] > 0 and prefix[i] != prefix[table[i+1]-1]:
sre_compile.py(530):         for i in xrange(len(prefix)):
sre_compile.py(534):         code.extend(table[1:]) # don't store first entry
sre_compile.py(537):     code[skip] = len(code) - skip
sre_compile.py(561):     _compile(code, p.data, flags)
 --- modulename: sre_compile, funcname: _compile
sre_compile.py(66):     emit = code.append
sre_compile.py(67):     _len = len
sre_compile.py(68):     LITERAL_CODES = _LITERAL_CODES
sre_compile.py(69):     REPEATING_CODES = _REPEATING_CODES
sre_compile.py(70):     SUCCESS_CODES = _SUCCESS_CODES
sre_compile.py(71):     ASSERT_CODES = _ASSERT_CODES
sre_compile.py(72):     if (flags & SRE_FLAG_IGNORECASE and
sre_compile.py(77):         fixes = None
sre_compile.py(78):     for op, av in pattern:
sre_compile.py(79):         if op in LITERAL_CODES:
sre_compile.py(80):             if flags & SRE_FLAG_IGNORECASE:
sre_compile.py(96):                 emit(OPCODES[op])
sre_compile.py(97):                 emit(av)
sre_compile.py(78):     for op, av in pattern:
sre_compile.py(79):         if op in LITERAL_CODES:
sre_compile.py(80):             if flags & SRE_FLAG_IGNORECASE:
sre_compile.py(96):                 emit(OPCODES[op])
sre_compile.py(97):                 emit(av)
sre_compile.py(78):     for op, av in pattern:
sre_compile.py(79):         if op in LITERAL_CODES:
sre_compile.py(80):             if flags & SRE_FLAG_IGNORECASE:
sre_compile.py(96):                 emit(OPCODES[op])
sre_compile.py(97):                 emit(av)
sre_compile.py(78):     for op, av in pattern:
sre_compile.py(79):         if op in LITERAL_CODES:
sre_compile.py(80):             if flags & SRE_FLAG_IGNORECASE:
sre_compile.py(96):                 emit(OPCODES[op])
sre_compile.py(97):                 emit(av)
sre_compile.py(78):     for op, av in pattern:
sre_compile.py(79):         if op in LITERAL_CODES:
sre_compile.py(80):             if flags & SRE_FLAG_IGNORECASE:
sre_compile.py(96):                 emit(OPCODES[op])
sre_compile.py(97):                 emit(av)
sre_compile.py(78):     for op, av in pattern:
sre_compile.py(79):         if op in LITERAL_CODES:
sre_compile.py(80):             if flags & SRE_FLAG_IGNORECASE:
sre_compile.py(96):                 emit(OPCODES[op])
sre_compile.py(97):                 emit(av)
sre_compile.py(78):     for op, av in pattern:
sre_compile.py(79):         if op in LITERAL_CODES:
sre_compile.py(80):             if flags & SRE_FLAG_IGNORECASE:
sre_compile.py(96):                 emit(OPCODES[op])
sre_compile.py(97):                 emit(av)
sre_compile.py(78):     for op, av in pattern:
sre_compile.py(79):         if op in LITERAL_CODES:
sre_compile.py(80):             if flags & SRE_FLAG_IGNORECASE:
sre_compile.py(96):                 emit(OPCODES[op])
sre_compile.py(97):                 emit(av)
sre_compile.py(78):     for op, av in pattern:
sre_compile.py(79):         if op in LITERAL_CODES:
sre_compile.py(80):             if flags & SRE_FLAG_IGNORECASE:
sre_compile.py(96):                 emit(OPCODES[op])
sre_compile.py(97):                 emit(av)
sre_compile.py(78):     for op, av in pattern:
sre_compile.py(79):         if op in LITERAL_CODES:
sre_compile.py(80):             if flags & SRE_FLAG_IGNORECASE:
sre_compile.py(96):                 emit(OPCODES[op])
sre_compile.py(97):                 emit(av)
sre_compile.py(78):     for op, av in pattern:
sre_compile.py(79):         if op in LITERAL_CODES:
sre_compile.py(98):         elif op is IN:
sre_compile.py(109):         elif op is ANY:
sre_compile.py(114):         elif op in REPEATING_CODES:
sre_compile.py(115):             if flags & SRE_FLAG_TEMPLATE:
sre_compile.py(124):             elif _simple(av) and op is not REPEAT:
 --- modulename: sre_compile, funcname: _simple
sre_compile.py(430):     lo, hi = av[2].getwidth()
 --- modulename: sre_parse, funcname: getwidth
sre_parse.py(153):         if self.width:
sre_parse.py(154):             return self.width
sre_compile.py(431):     return lo == hi == 1 and av[2][0][0] != SUBPATTERN
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(125):                 if op is MAX_REPEAT:
sre_compile.py(126):                     emit(OPCODES[REPEAT_ONE])
sre_compile.py(129):                 skip = _len(code); emit(0)
sre_compile.py(130):                 emit(av[0])
sre_compile.py(131):                 emit(av[1])
sre_compile.py(132):                 _compile(code, av[2], flags)
 --- modulename: sre_compile, funcname: _compile
sre_compile.py(66):     emit = code.append
sre_compile.py(67):     _len = len
sre_compile.py(68):     LITERAL_CODES = _LITERAL_CODES
sre_compile.py(69):     REPEATING_CODES = _REPEATING_CODES
sre_compile.py(70):     SUCCESS_CODES = _SUCCESS_CODES
sre_compile.py(71):     ASSERT_CODES = _ASSERT_CODES
sre_compile.py(72):     if (flags & SRE_FLAG_IGNORECASE and
sre_compile.py(77):         fixes = None
sre_compile.py(78):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(79):         if op in LITERAL_CODES:
sre_compile.py(98):         elif op is IN:
sre_compile.py(99):             if flags & SRE_FLAG_IGNORECASE:
sre_compile.py(104):                 emit(OPCODES[op])
sre_compile.py(105):                 fixup = None
sre_compile.py(106):             skip = _len(code); emit(0)
sre_compile.py(107):             _compile_charset(av, flags, code, fixup, fixes)
 --- modulename: sre_compile, funcname: _compile_charset
sre_compile.py(230):     emit = code.append
sre_compile.py(231):     for op, av in _optimize_charset(charset, fixup, fixes,
sre_compile.py(232):                                     flags & SRE_FLAG_UNICODE):
 --- modulename: sre_compile, funcname: _optimize_charset
sre_compile.py(258):     out = []
sre_compile.py(259):     tail = []
sre_compile.py(260):     charmap = bytearray(256)
sre_compile.py(261):     for op, av in charset:
sre_compile.py(262):         while True:
sre_compile.py(263):             try:
sre_compile.py(264):                 if op is LITERAL:
sre_compile.py(273):                 elif op is RANGE:
sre_compile.py(286):                 elif op is NEGATE:
sre_compile.py(289):                     tail.append((op, av))
sre_compile.py(310):             break
sre_compile.py(261):     for op, av in charset:
sre_compile.py(313):     runs = []
sre_compile.py(314):     q = 0
sre_compile.py(315):     while True:
sre_compile.py(316):         p = charmap.find(b'\1', q)
sre_compile.py(317):         if p < 0:
sre_compile.py(318):             break
sre_compile.py(327):     if runs is not None:
sre_compile.py(329):         for p, q in runs:
sre_compile.py(334):         out += tail
sre_compile.py(336):         if fixup or len(out) < len(charset):
sre_compile.py(339):         return charset
sre_compile.py(233):         emit(OPCODES[op])
sre_compile.py(234):         if op is NEGATE:
sre_compile.py(236):         elif op is LITERAL:
sre_compile.py(238):         elif op is RANGE:
sre_compile.py(241):         elif op is CHARSET:
sre_compile.py(243):         elif op is BIGCHARSET:
sre_compile.py(245):         elif op is CATEGORY:
sre_compile.py(246):             if flags & SRE_FLAG_LOCALE:
sre_compile.py(248):             elif flags & SRE_FLAG_UNICODE:
sre_compile.py(251):                 emit(CHCODES[av])
sre_compile.py(232):                                     flags & SRE_FLAG_UNICODE):
sre_compile.py(254):     emit(OPCODES[FAILURE])
sre_compile.py(108):             code[skip] = _len(code) - skip
sre_compile.py(78):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(133):                 emit(OPCODES[SUCCESS])
sre_compile.py(134):                 code[skip] = _len(code) - skip
sre_compile.py(78):     for op, av in pattern:
sre_compile.py(79):         if op in LITERAL_CODES:
sre_compile.py(98):         elif op is IN:
sre_compile.py(109):         elif op is ANY:
sre_compile.py(114):         elif op in REPEATING_CODES:
sre_compile.py(146):         elif op is SUBPATTERN:
sre_compile.py(147):             if av[0]:
sre_compile.py(148):                 emit(OPCODES[MARK])
sre_compile.py(149):                 emit((av[0]-1)*2)
sre_compile.py(151):             _compile(code, av[1], flags)
 --- modulename: sre_compile, funcname: _compile
sre_compile.py(66):     emit = code.append
sre_compile.py(67):     _len = len
sre_compile.py(68):     LITERAL_CODES = _LITERAL_CODES
sre_compile.py(69):     REPEATING_CODES = _REPEATING_CODES
sre_compile.py(70):     SUCCESS_CODES = _SUCCESS_CODES
sre_compile.py(71):     ASSERT_CODES = _ASSERT_CODES
sre_compile.py(72):     if (flags & SRE_FLAG_IGNORECASE and
sre_compile.py(77):         fixes = None
sre_compile.py(78):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(79):         if op in LITERAL_CODES:
sre_compile.py(98):         elif op is IN:
sre_compile.py(109):         elif op is ANY:
sre_compile.py(114):         elif op in REPEATING_CODES:
sre_compile.py(115):             if flags & SRE_FLAG_TEMPLATE:
sre_compile.py(124):             elif _simple(av) and op is not REPEAT:
 --- modulename: sre_compile, funcname: _simple
sre_compile.py(430):     lo, hi = av[2].getwidth()
 --- modulename: sre_parse, funcname: getwidth
sre_parse.py(153):         if self.width:
sre_parse.py(154):             return self.width
sre_compile.py(431):     return lo == hi == 1 and av[2][0][0] != SUBPATTERN
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(125):                 if op is MAX_REPEAT:
sre_compile.py(126):                     emit(OPCODES[REPEAT_ONE])
sre_compile.py(129):                 skip = _len(code); emit(0)
sre_compile.py(130):                 emit(av[0])
sre_compile.py(131):                 emit(av[1])
sre_compile.py(132):                 _compile(code, av[2], flags)
 --- modulename: sre_compile, funcname: _compile
sre_compile.py(66):     emit = code.append
sre_compile.py(67):     _len = len
sre_compile.py(68):     LITERAL_CODES = _LITERAL_CODES
sre_compile.py(69):     REPEATING_CODES = _REPEATING_CODES
sre_compile.py(70):     SUCCESS_CODES = _SUCCESS_CODES
sre_compile.py(71):     ASSERT_CODES = _ASSERT_CODES
sre_compile.py(72):     if (flags & SRE_FLAG_IGNORECASE and
sre_compile.py(77):         fixes = None
sre_compile.py(78):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(79):         if op in LITERAL_CODES:
sre_compile.py(98):         elif op is IN:
sre_compile.py(99):             if flags & SRE_FLAG_IGNORECASE:
sre_compile.py(104):                 emit(OPCODES[op])
sre_compile.py(105):                 fixup = None
sre_compile.py(106):             skip = _len(code); emit(0)
sre_compile.py(107):             _compile_charset(av, flags, code, fixup, fixes)
 --- modulename: sre_compile, funcname: _compile_charset
sre_compile.py(230):     emit = code.append
sre_compile.py(231):     for op, av in _optimize_charset(charset, fixup, fixes,
sre_compile.py(232):                                     flags & SRE_FLAG_UNICODE):
 --- modulename: sre_compile, funcname: _optimize_charset
sre_compile.py(258):     out = []
sre_compile.py(259):     tail = []
sre_compile.py(260):     charmap = bytearray(256)
sre_compile.py(261):     for op, av in charset:
sre_compile.py(262):         while True:
sre_compile.py(263):             try:
sre_compile.py(264):                 if op is LITERAL:
sre_compile.py(273):                 elif op is RANGE:
sre_compile.py(286):                 elif op is NEGATE:
sre_compile.py(289):                     tail.append((op, av))
sre_compile.py(310):             break
sre_compile.py(261):     for op, av in charset:
sre_compile.py(262):         while True:
sre_compile.py(263):             try:
sre_compile.py(264):                 if op is LITERAL:
sre_compile.py(265):                     if fixup:
sre_compile.py(272):                         charmap[av] = 1
sre_compile.py(310):             break
sre_compile.py(261):     for op, av in charset:
sre_compile.py(313):     runs = []
sre_compile.py(314):     q = 0
sre_compile.py(315):     while True:
sre_compile.py(316):         p = charmap.find(b'\1', q)
sre_compile.py(317):         if p < 0:
sre_compile.py(319):         if len(runs) >= 2:
sre_compile.py(322):         q = charmap.find(b'\0', p)
sre_compile.py(323):         if q < 0:
sre_compile.py(326):         runs.append((p, q))
sre_compile.py(315):     while True:
sre_compile.py(316):         p = charmap.find(b'\1', q)
sre_compile.py(317):         if p < 0:
sre_compile.py(318):             break
sre_compile.py(327):     if runs is not None:
sre_compile.py(329):         for p, q in runs:
sre_compile.py(330):             if q - p == 1:
sre_compile.py(331):                 out.append((LITERAL, p))
sre_compile.py(329):         for p, q in runs:
sre_compile.py(334):         out += tail
sre_compile.py(336):         if fixup or len(out) < len(charset):
sre_compile.py(339):         return charset
sre_compile.py(233):         emit(OPCODES[op])
sre_compile.py(234):         if op is NEGATE:
sre_compile.py(236):         elif op is LITERAL:
sre_compile.py(238):         elif op is RANGE:
sre_compile.py(241):         elif op is CHARSET:
sre_compile.py(243):         elif op is BIGCHARSET:
sre_compile.py(245):         elif op is CATEGORY:
sre_compile.py(246):             if flags & SRE_FLAG_LOCALE:
sre_compile.py(248):             elif flags & SRE_FLAG_UNICODE:
sre_compile.py(251):                 emit(CHCODES[av])
sre_compile.py(232):                                     flags & SRE_FLAG_UNICODE):
sre_compile.py(233):         emit(OPCODES[op])
sre_compile.py(234):         if op is NEGATE:
sre_compile.py(236):         elif op is LITERAL:
sre_compile.py(237):             emit(av)
sre_compile.py(232):                                     flags & SRE_FLAG_UNICODE):
sre_compile.py(254):     emit(OPCODES[FAILURE])
sre_compile.py(108):             code[skip] = _len(code) - skip
sre_compile.py(78):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(133):                 emit(OPCODES[SUCCESS])
sre_compile.py(134):                 code[skip] = _len(code) - skip
sre_compile.py(78):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(152):             if av[0]:
sre_compile.py(153):                 emit(OPCODES[MARK])
sre_compile.py(154):                 emit((av[0]-1)*2+1)
sre_compile.py(78):     for op, av in pattern:
sre_compile.py(79):         if op in LITERAL_CODES:
sre_compile.py(98):         elif op is IN:
sre_compile.py(109):         elif op is ANY:
sre_compile.py(114):         elif op in REPEATING_CODES:
sre_compile.py(115):             if flags & SRE_FLAG_TEMPLATE:
sre_compile.py(124):             elif _simple(av) and op is not REPEAT:
 --- modulename: sre_compile, funcname: _simple
sre_compile.py(430):     lo, hi = av[2].getwidth()
 --- modulename: sre_parse, funcname: getwidth
sre_parse.py(153):         if self.width:
sre_parse.py(154):             return self.width
sre_compile.py(431):     return lo == hi == 1 and av[2][0][0] != SUBPATTERN
sre_compile.py(136):                 emit(OPCODES[REPEAT])
sre_compile.py(137):                 skip = _len(code); emit(0)
sre_compile.py(138):                 emit(av[0])
sre_compile.py(139):                 emit(av[1])
sre_compile.py(140):                 _compile(code, av[2], flags)
 --- modulename: sre_compile, funcname: _compile
sre_compile.py(66):     emit = code.append
sre_compile.py(67):     _len = len
sre_compile.py(68):     LITERAL_CODES = _LITERAL_CODES
sre_compile.py(69):     REPEATING_CODES = _REPEATING_CODES
sre_compile.py(70):     SUCCESS_CODES = _SUCCESS_CODES
sre_compile.py(71):     ASSERT_CODES = _ASSERT_CODES
sre_compile.py(72):     if (flags & SRE_FLAG_IGNORECASE and
sre_compile.py(77):         fixes = None
sre_compile.py(78):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(79):         if op in LITERAL_CODES:
sre_compile.py(98):         elif op is IN:
sre_compile.py(109):         elif op is ANY:
sre_compile.py(114):         elif op in REPEATING_CODES:
sre_compile.py(146):         elif op is SUBPATTERN:
sre_compile.py(147):             if av[0]:
sre_compile.py(151):             _compile(code, av[1], flags)
 --- modulename: sre_compile, funcname: _compile
sre_compile.py(66):     emit = code.append
sre_compile.py(67):     _len = len
sre_compile.py(68):     LITERAL_CODES = _LITERAL_CODES
sre_compile.py(69):     REPEATING_CODES = _REPEATING_CODES
sre_compile.py(70):     SUCCESS_CODES = _SUCCESS_CODES
sre_compile.py(71):     ASSERT_CODES = _ASSERT_CODES
sre_compile.py(72):     if (flags & SRE_FLAG_IGNORECASE and
sre_compile.py(77):         fixes = None
sre_compile.py(78):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(79):         if op in LITERAL_CODES:
sre_compile.py(80):             if flags & SRE_FLAG_IGNORECASE:
sre_compile.py(96):                 emit(OPCODES[op])
sre_compile.py(97):                 emit(av)
sre_compile.py(78):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(79):         if op in LITERAL_CODES:
sre_compile.py(80):             if flags & SRE_FLAG_IGNORECASE:
sre_compile.py(96):                 emit(OPCODES[op])
sre_compile.py(97):                 emit(av)
sre_compile.py(78):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(79):         if op in LITERAL_CODES:
sre_compile.py(98):         elif op is IN:
sre_compile.py(109):         elif op is ANY:
sre_compile.py(114):         elif op in REPEATING_CODES:
sre_compile.py(146):         elif op is SUBPATTERN:
sre_compile.py(147):             if av[0]:
sre_compile.py(148):                 emit(OPCODES[MARK])
sre_compile.py(149):                 emit((av[0]-1)*2)
sre_compile.py(151):             _compile(code, av[1], flags)
 --- modulename: sre_compile, funcname: _compile
sre_compile.py(66):     emit = code.append
sre_compile.py(67):     _len = len
sre_compile.py(68):     LITERAL_CODES = _LITERAL_CODES
sre_compile.py(69):     REPEATING_CODES = _REPEATING_CODES
sre_compile.py(70):     SUCCESS_CODES = _SUCCESS_CODES
sre_compile.py(71):     ASSERT_CODES = _ASSERT_CODES
sre_compile.py(72):     if (flags & SRE_FLAG_IGNORECASE and
sre_compile.py(77):         fixes = None
sre_compile.py(78):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(79):         if op in LITERAL_CODES:
sre_compile.py(98):         elif op is IN:
sre_compile.py(109):         elif op is ANY:
sre_compile.py(114):         elif op in REPEATING_CODES:
sre_compile.py(115):             if flags & SRE_FLAG_TEMPLATE:
sre_compile.py(124):             elif _simple(av) and op is not REPEAT:
 --- modulename: sre_compile, funcname: _simple
sre_compile.py(430):     lo, hi = av[2].getwidth()
 --- modulename: sre_parse, funcname: getwidth
sre_parse.py(153):         if self.width:
sre_parse.py(154):             return self.width
sre_compile.py(431):     return lo == hi == 1 and av[2][0][0] != SUBPATTERN
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(125):                 if op is MAX_REPEAT:
sre_compile.py(126):                     emit(OPCODES[REPEAT_ONE])
sre_compile.py(129):                 skip = _len(code); emit(0)
sre_compile.py(130):                 emit(av[0])
sre_compile.py(131):                 emit(av[1])
sre_compile.py(132):                 _compile(code, av[2], flags)
 --- modulename: sre_compile, funcname: _compile
sre_compile.py(66):     emit = code.append
sre_compile.py(67):     _len = len
sre_compile.py(68):     LITERAL_CODES = _LITERAL_CODES
sre_compile.py(69):     REPEATING_CODES = _REPEATING_CODES
sre_compile.py(70):     SUCCESS_CODES = _SUCCESS_CODES
sre_compile.py(71):     ASSERT_CODES = _ASSERT_CODES
sre_compile.py(72):     if (flags & SRE_FLAG_IGNORECASE and
sre_compile.py(77):         fixes = None
sre_compile.py(78):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(79):         if op in LITERAL_CODES:
sre_compile.py(98):         elif op is IN:
sre_compile.py(99):             if flags & SRE_FLAG_IGNORECASE:
sre_compile.py(104):                 emit(OPCODES[op])
sre_compile.py(105):                 fixup = None
sre_compile.py(106):             skip = _len(code); emit(0)
sre_compile.py(107):             _compile_charset(av, flags, code, fixup, fixes)
 --- modulename: sre_compile, funcname: _compile_charset
sre_compile.py(230):     emit = code.append
sre_compile.py(231):     for op, av in _optimize_charset(charset, fixup, fixes,
sre_compile.py(232):                                     flags & SRE_FLAG_UNICODE):
 --- modulename: sre_compile, funcname: _optimize_charset
sre_compile.py(258):     out = []
sre_compile.py(259):     tail = []
sre_compile.py(260):     charmap = bytearray(256)
sre_compile.py(261):     for op, av in charset:
sre_compile.py(262):         while True:
sre_compile.py(263):             try:
sre_compile.py(264):                 if op is LITERAL:
sre_compile.py(273):                 elif op is RANGE:
sre_compile.py(286):                 elif op is NEGATE:
sre_compile.py(289):                     tail.append((op, av))
sre_compile.py(310):             break
sre_compile.py(261):     for op, av in charset:
sre_compile.py(262):         while True:
sre_compile.py(263):             try:
sre_compile.py(264):                 if op is LITERAL:
sre_compile.py(265):                     if fixup:
sre_compile.py(272):                         charmap[av] = 1
sre_compile.py(310):             break
sre_compile.py(261):     for op, av in charset:
sre_compile.py(313):     runs = []
sre_compile.py(314):     q = 0
sre_compile.py(315):     while True:
sre_compile.py(316):         p = charmap.find(b'\1', q)
sre_compile.py(317):         if p < 0:
sre_compile.py(319):         if len(runs) >= 2:
sre_compile.py(322):         q = charmap.find(b'\0', p)
sre_compile.py(323):         if q < 0:
sre_compile.py(326):         runs.append((p, q))
sre_compile.py(315):     while True:
sre_compile.py(316):         p = charmap.find(b'\1', q)
sre_compile.py(317):         if p < 0:
sre_compile.py(318):             break
sre_compile.py(327):     if runs is not None:
sre_compile.py(329):         for p, q in runs:
sre_compile.py(330):             if q - p == 1:
sre_compile.py(331):                 out.append((LITERAL, p))
sre_compile.py(329):         for p, q in runs:
sre_compile.py(334):         out += tail
sre_compile.py(336):         if fixup or len(out) < len(charset):
sre_compile.py(339):         return charset
sre_compile.py(233):         emit(OPCODES[op])
sre_compile.py(234):         if op is NEGATE:
sre_compile.py(236):         elif op is LITERAL:
sre_compile.py(238):         elif op is RANGE:
sre_compile.py(241):         elif op is CHARSET:
sre_compile.py(243):         elif op is BIGCHARSET:
sre_compile.py(245):         elif op is CATEGORY:
sre_compile.py(246):             if flags & SRE_FLAG_LOCALE:
sre_compile.py(248):             elif flags & SRE_FLAG_UNICODE:
sre_compile.py(251):                 emit(CHCODES[av])
sre_compile.py(232):                                     flags & SRE_FLAG_UNICODE):
sre_compile.py(233):         emit(OPCODES[op])
sre_compile.py(234):         if op is NEGATE:
sre_compile.py(236):         elif op is LITERAL:
sre_compile.py(237):             emit(av)
sre_compile.py(232):                                     flags & SRE_FLAG_UNICODE):
sre_compile.py(254):     emit(OPCODES[FAILURE])
sre_compile.py(108):             code[skip] = _len(code) - skip
sre_compile.py(78):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(133):                 emit(OPCODES[SUCCESS])
sre_compile.py(134):                 code[skip] = _len(code) - skip
sre_compile.py(78):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(152):             if av[0]:
sre_compile.py(153):                 emit(OPCODES[MARK])
sre_compile.py(154):                 emit((av[0]-1)*2+1)
sre_compile.py(78):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(79):         if op in LITERAL_CODES:
sre_compile.py(80):             if flags & SRE_FLAG_IGNORECASE:
sre_compile.py(96):                 emit(OPCODES[op])
sre_compile.py(97):                 emit(av)
sre_compile.py(78):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(152):             if av[0]:
sre_compile.py(78):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(141):                 code[skip] = _len(code) - skip
sre_compile.py(142):                 if op is MAX_REPEAT:
sre_compile.py(143):                     emit(OPCODES[MAX_UNTIL])
sre_compile.py(78):     for op, av in pattern:
sre_compile.py(79):         if op in LITERAL_CODES:
sre_compile.py(80):             if flags & SRE_FLAG_IGNORECASE:
sre_compile.py(96):                 emit(OPCODES[op])
sre_compile.py(97):                 emit(av)
sre_compile.py(78):     for op, av in pattern:
sre_compile.py(79):         if op in LITERAL_CODES:
sre_compile.py(80):             if flags & SRE_FLAG_IGNORECASE:
sre_compile.py(96):                 emit(OPCODES[op])
sre_compile.py(97):                 emit(av)
sre_compile.py(78):     for op, av in pattern:
sre_compile.py(79):         if op in LITERAL_CODES:
sre_compile.py(80):             if flags & SRE_FLAG_IGNORECASE:
sre_compile.py(96):                 emit(OPCODES[op])
sre_compile.py(97):                 emit(av)
sre_compile.py(78):     for op, av in pattern:
sre_compile.py(79):         if op in LITERAL_CODES:
sre_compile.py(80):             if flags & SRE_FLAG_IGNORECASE:
sre_compile.py(96):                 emit(OPCODES[op])
sre_compile.py(97):                 emit(av)
sre_compile.py(78):     for op, av in pattern:
sre_compile.py(79):         if op in LITERAL_CODES:
sre_compile.py(98):         elif op is IN:
sre_compile.py(109):         elif op is ANY:
sre_compile.py(114):         elif op in REPEATING_CODES:
sre_compile.py(146):         elif op is SUBPATTERN:
sre_compile.py(147):             if av[0]:
sre_compile.py(148):                 emit(OPCODES[MARK])
sre_compile.py(149):                 emit((av[0]-1)*2)
sre_compile.py(151):             _compile(code, av[1], flags)
 --- modulename: sre_compile, funcname: _compile
sre_compile.py(66):     emit = code.append
sre_compile.py(67):     _len = len
sre_compile.py(68):     LITERAL_CODES = _LITERAL_CODES
sre_compile.py(69):     REPEATING_CODES = _REPEATING_CODES
sre_compile.py(70):     SUCCESS_CODES = _SUCCESS_CODES
sre_compile.py(71):     ASSERT_CODES = _ASSERT_CODES
sre_compile.py(72):     if (flags & SRE_FLAG_IGNORECASE and
sre_compile.py(77):         fixes = None
sre_compile.py(78):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(79):         if op in LITERAL_CODES:
sre_compile.py(98):         elif op is IN:
sre_compile.py(109):         elif op is ANY:
sre_compile.py(110):             if flags & SRE_FLAG_DOTALL:
sre_compile.py(113):                 emit(OPCODES[ANY])
sre_compile.py(78):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(79):         if op in LITERAL_CODES:
sre_compile.py(80):             if flags & SRE_FLAG_IGNORECASE:
sre_compile.py(96):                 emit(OPCODES[op])
sre_compile.py(97):                 emit(av)
sre_compile.py(78):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(79):         if op in LITERAL_CODES:
sre_compile.py(80):             if flags & SRE_FLAG_IGNORECASE:
sre_compile.py(96):                 emit(OPCODES[op])
sre_compile.py(97):                 emit(av)
sre_compile.py(78):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(79):         if op in LITERAL_CODES:
sre_compile.py(80):             if flags & SRE_FLAG_IGNORECASE:
sre_compile.py(96):                 emit(OPCODES[op])
sre_compile.py(97):                 emit(av)
sre_compile.py(78):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(79):         if op in LITERAL_CODES:
sre_compile.py(80):             if flags & SRE_FLAG_IGNORECASE:
sre_compile.py(96):                 emit(OPCODES[op])
sre_compile.py(97):                 emit(av)
sre_compile.py(78):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(79):         if op in LITERAL_CODES:
sre_compile.py(98):         elif op is IN:
sre_compile.py(109):         elif op is ANY:
sre_compile.py(114):         elif op in REPEATING_CODES:
sre_compile.py(115):             if flags & SRE_FLAG_TEMPLATE:
sre_compile.py(124):             elif _simple(av) and op is not REPEAT:
 --- modulename: sre_compile, funcname: _simple
sre_compile.py(430):     lo, hi = av[2].getwidth()
 --- modulename: sre_parse, funcname: getwidth
sre_parse.py(153):         if self.width:
sre_parse.py(154):             return self.width
sre_compile.py(431):     return lo == hi == 1 and av[2][0][0] != SUBPATTERN
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(125):                 if op is MAX_REPEAT:
sre_compile.py(126):                     emit(OPCODES[REPEAT_ONE])
sre_compile.py(129):                 skip = _len(code); emit(0)
sre_compile.py(130):                 emit(av[0])
sre_compile.py(131):                 emit(av[1])
sre_compile.py(132):                 _compile(code, av[2], flags)
 --- modulename: sre_compile, funcname: _compile
sre_compile.py(66):     emit = code.append
sre_compile.py(67):     _len = len
sre_compile.py(68):     LITERAL_CODES = _LITERAL_CODES
sre_compile.py(69):     REPEATING_CODES = _REPEATING_CODES
sre_compile.py(70):     SUCCESS_CODES = _SUCCESS_CODES
sre_compile.py(71):     ASSERT_CODES = _ASSERT_CODES
sre_compile.py(72):     if (flags & SRE_FLAG_IGNORECASE and
sre_compile.py(77):         fixes = None
sre_compile.py(78):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(79):         if op in LITERAL_CODES:
sre_compile.py(98):         elif op is IN:
sre_compile.py(99):             if flags & SRE_FLAG_IGNORECASE:
sre_compile.py(104):                 emit(OPCODES[op])
sre_compile.py(105):                 fixup = None
sre_compile.py(106):             skip = _len(code); emit(0)
sre_compile.py(107):             _compile_charset(av, flags, code, fixup, fixes)
 --- modulename: sre_compile, funcname: _compile_charset
sre_compile.py(230):     emit = code.append
sre_compile.py(231):     for op, av in _optimize_charset(charset, fixup, fixes,
sre_compile.py(232):                                     flags & SRE_FLAG_UNICODE):
 --- modulename: sre_compile, funcname: _optimize_charset
sre_compile.py(258):     out = []
sre_compile.py(259):     tail = []
sre_compile.py(260):     charmap = bytearray(256)
sre_compile.py(261):     for op, av in charset:
sre_compile.py(262):         while True:
sre_compile.py(263):             try:
sre_compile.py(264):                 if op is LITERAL:
sre_compile.py(273):                 elif op is RANGE:
sre_compile.py(286):                 elif op is NEGATE:
sre_compile.py(289):                     tail.append((op, av))
sre_compile.py(310):             break
sre_compile.py(261):     for op, av in charset:
sre_compile.py(262):         while True:
sre_compile.py(263):             try:
sre_compile.py(264):                 if op is LITERAL:
sre_compile.py(265):                     if fixup:
sre_compile.py(272):                         charmap[av] = 1
sre_compile.py(310):             break
sre_compile.py(261):     for op, av in charset:
sre_compile.py(313):     runs = []
sre_compile.py(314):     q = 0
sre_compile.py(315):     while True:
sre_compile.py(316):         p = charmap.find(b'\1', q)
sre_compile.py(317):         if p < 0:
sre_compile.py(319):         if len(runs) >= 2:
sre_compile.py(322):         q = charmap.find(b'\0', p)
sre_compile.py(323):         if q < 0:
sre_compile.py(326):         runs.append((p, q))
sre_compile.py(315):     while True:
sre_compile.py(316):         p = charmap.find(b'\1', q)
sre_compile.py(317):         if p < 0:
sre_compile.py(318):             break
sre_compile.py(327):     if runs is not None:
sre_compile.py(329):         for p, q in runs:
sre_compile.py(330):             if q - p == 1:
sre_compile.py(331):                 out.append((LITERAL, p))
sre_compile.py(329):         for p, q in runs:
sre_compile.py(334):         out += tail
sre_compile.py(336):         if fixup or len(out) < len(charset):
sre_compile.py(339):         return charset
sre_compile.py(233):         emit(OPCODES[op])
sre_compile.py(234):         if op is NEGATE:
sre_compile.py(236):         elif op is LITERAL:
sre_compile.py(238):         elif op is RANGE:
sre_compile.py(241):         elif op is CHARSET:
sre_compile.py(243):         elif op is BIGCHARSET:
sre_compile.py(245):         elif op is CATEGORY:
sre_compile.py(246):             if flags & SRE_FLAG_LOCALE:
sre_compile.py(248):             elif flags & SRE_FLAG_UNICODE:
sre_compile.py(251):                 emit(CHCODES[av])
sre_compile.py(232):                                     flags & SRE_FLAG_UNICODE):
sre_compile.py(233):         emit(OPCODES[op])
sre_compile.py(234):         if op is NEGATE:
sre_compile.py(236):         elif op is LITERAL:
sre_compile.py(237):             emit(av)
sre_compile.py(232):                                     flags & SRE_FLAG_UNICODE):
sre_compile.py(254):     emit(OPCODES[FAILURE])
sre_compile.py(108):             code[skip] = _len(code) - skip
sre_compile.py(78):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(133):                 emit(OPCODES[SUCCESS])
sre_compile.py(134):                 code[skip] = _len(code) - skip
sre_compile.py(78):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(152):             if av[0]:
sre_compile.py(153):                 emit(OPCODES[MARK])
sre_compile.py(154):                 emit((av[0]-1)*2+1)
sre_compile.py(78):     for op, av in pattern:
sre_compile.py(563):     code.append(OPCODES[SUCCESS])
sre_compile.py(565):     return code
sre_compile.py(581):     if p.pattern.groups > 100:
sre_compile.py(587):     groupindex = p.pattern.groupdict
sre_compile.py(588):     indexgroup = [None] * p.pattern.groups
sre_compile.py(589):     for k, i in groupindex.items():
sre_compile.py(592):     return _sre.compile(
sre_compile.py(593):         pattern, flags | p.pattern.flags, code,
sre_compile.py(594):         p.pattern.groups-1,
sre_compile.py(595):         groupindex, indexgroup
re.py(252):     if not bypass_cache:
re.py(253):         if len(_cache) >= _MAXCACHE:
re.py(255):         if p.flags & LOCALE:
re.py(260):             loc = None
re.py(261):         _cache[cachekey] = p, loc
re.py(262):     return p
platform.py(1330): _ironpython26_sys_version_parser = re.compile(
platform.py(1331):     r'([\d.]+)\s*'
 --- modulename: re, funcname: compile
re.py(194):     return _compile(pattern, flags)
 --- modulename: re, funcname: _compile
re.py(232):     pattern, flags = key
re.py(233):     bypass_cache = flags & DEBUG
re.py(234):     if not bypass_cache:
re.py(235):         cachekey = (type(key[0]),) + key
re.py(236):         try:
re.py(237):             p, loc = _cache[cachekey]
re.py(240):         except KeyError:
re.py(241):             pass
re.py(242):     if isinstance(pattern, _pattern_type):
re.py(246):     if not sre_compile.isstring(pattern):
 --- modulename: sre_compile, funcname: isstring
sre_compile.py(547):     for tp in STRING_TYPES:
sre_compile.py(548):         if isinstance(obj, tp):
sre_compile.py(549):             return 1
re.py(248):     try:
re.py(249):         p = sre_compile.compile(pattern, flags)
 --- modulename: sre_compile, funcname: compile
sre_compile.py(570):     if isstring(p):
 --- modulename: sre_compile, funcname: isstring
sre_compile.py(547):     for tp in STRING_TYPES:
sre_compile.py(548):         if isinstance(obj, tp):
sre_compile.py(549):             return 1
sre_compile.py(571):         pattern = p
sre_compile.py(572):         p = sre_parse.parse(p, flags)
 --- modulename: sre_parse, funcname: parse
sre_parse.py(709):     source = Tokenizer(str)
 --- modulename: sre_parse, funcname: __init__
sre_parse.py(190):         self.string = string
sre_parse.py(191):         self.index = 0
sre_parse.py(192):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(711):     if pattern is None:
sre_parse.py(712):         pattern = Pattern()
 --- modulename: sre_parse, funcname: __init__
sre_parse.py(68):         self.flags = 0
sre_parse.py(69):         self.open = []
sre_parse.py(70):         self.groups = 1
sre_parse.py(71):         self.groupdict = {}
sre_parse.py(72):         self.lookbehind = 0
sre_parse.py(713):     pattern.flags = flags
sre_parse.py(714):     pattern.str = str
sre_parse.py(716):     p = _parse_sub(source, pattern, 0)
 --- modulename: sre_parse, funcname: _parse_sub
sre_parse.py(320):     items = []
sre_parse.py(321):     itemsappend = items.append
sre_parse.py(322):     sourcematch = source.match
sre_parse.py(323):     while 1:
sre_parse.py(324):         itemsappend(_parse(source, state))
 --- modulename: sre_parse, funcname: _parse
sre_parse.py(397):     subpattern = SubPattern(state)
 --- modulename: sre_parse, funcname: __init__
sre_parse.py(93):         self.pattern = pattern
sre_parse.py(94):         if data is None:
sre_parse.py(95):             data = []
sre_parse.py(96):         self.data = data
sre_parse.py(97):         self.width = None
sre_parse.py(400):     subpatternappend = subpattern.append
sre_parse.py(401):     sourceget = source.get
sre_parse.py(402):     sourcematch = source.match
sre_parse.py(403):     _len = len
sre_parse.py(404):     PATTERNENDERS = _PATTERNENDERS
sre_parse.py(405):     ASSERTCHARS = _ASSERTCHARS
sre_parse.py(406):     LOOKBEHINDASSERTCHARS = _LOOKBEHINDASSERTCHARS
sre_parse.py(407):     REPEATCODES = _REPEATCODES
sre_parse.py(409):     while 1:
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(413):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(414):         if this is None:
sre_parse.py(417):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(428):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(431):         elif this == "[":
sre_parse.py(488):         elif this and this[0] in REPEAT_CHARS:
sre_parse.py(541):         elif this == ".":
sre_parse.py(544):         elif this == "(":
sre_parse.py(545):             group = 1
sre_parse.py(546):             name = None
sre_parse.py(547):             condgroup = None
sre_parse.py(548):             if sourcematch("?"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(211):         return 0
sre_parse.py(666):             if group:
sre_parse.py(668):                 if group == 2:
sre_parse.py(672):                     group = state.opengroup(name)
 --- modulename: sre_parse, funcname: opengroup
sre_parse.py(75):         gid = self.groups
sre_parse.py(76):         self.groups = gid + 1
sre_parse.py(77):         if name is not None:
sre_parse.py(83):         self.open.append(gid)
sre_parse.py(84):         return gid
sre_parse.py(673):                 if condgroup:
sre_parse.py(676):                     p = _parse_sub(source, state)
 --- modulename: sre_parse, funcname: _parse_sub
sre_parse.py(320):     items = []
sre_parse.py(321):     itemsappend = items.append
sre_parse.py(322):     sourcematch = source.match
sre_parse.py(323):     while 1:
sre_parse.py(324):         itemsappend(_parse(source, state))
 --- modulename: sre_parse, funcname: _parse
sre_parse.py(397):     subpattern = SubPattern(state)
 --- modulename: sre_parse, funcname: __init__
sre_parse.py(93):         self.pattern = pattern
sre_parse.py(94):         if data is None:
sre_parse.py(95):             data = []
sre_parse.py(96):         self.data = data
sre_parse.py(97):         self.width = None
sre_parse.py(400):     subpatternappend = subpattern.append
sre_parse.py(401):     sourceget = source.get
sre_parse.py(402):     sourcematch = source.match
sre_parse.py(403):     _len = len
sre_parse.py(404):     PATTERNENDERS = _PATTERNENDERS
sre_parse.py(405):     ASSERTCHARS = _ASSERTCHARS
sre_parse.py(406):     LOOKBEHINDASSERTCHARS = _LOOKBEHINDASSERTCHARS
sre_parse.py(407):     REPEATCODES = _REPEATCODES
sre_parse.py(409):     while 1:
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(413):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(199):             try:
sre_parse.py(200):                 c = self.string[self.index + 1]
sre_parse.py(203):             char = char + c
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(414):         if this is None:
sre_parse.py(417):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(428):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(431):         elif this == "[":
sre_parse.py(433):             set = []
sre_parse.py(434):             setappend = set.append
sre_parse.py(437):             if sourcematch("^"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(211):         return 0
sre_parse.py(440):             start = set[:]
sre_parse.py(441):             while 1:
sre_parse.py(442):                 this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(443):                 if this == "]" and set != start:
sre_parse.py(445):                 elif this and this[0] == "\\":
sre_parse.py(446):                     code1 = _class_escape(source, this)
 --- modulename: sre_parse, funcname: _class_escape
sre_parse.py(238):     code = ESCAPES.get(escape)
sre_parse.py(239):     if code:
sre_parse.py(241):     code = CATEGORIES.get(escape)
sre_parse.py(242):     if code and code[0] == IN:
sre_parse.py(243):         return code
sre_parse.py(451):                 if sourcematch("-"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(211):         return 0
sre_parse.py(475):                     if code1[0] is IN:
sre_parse.py(476):                         code1 = code1[1][0]
sre_parse.py(477):                     setappend(code1)
sre_parse.py(442):                 this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(443):                 if this == "]" and set != start:
sre_parse.py(445):                 elif this and this[0] == "\\":
sre_parse.py(447):                 elif this:
sre_parse.py(448):                     code1 = LITERAL, ord(this)
sre_parse.py(451):                 if sourcematch("-"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(211):         return 0
sre_parse.py(475):                     if code1[0] is IN:
sre_parse.py(477):                     setappend(code1)
sre_parse.py(442):                 this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(443):                 if this == "]" and set != start:
sre_parse.py(444):                     break
sre_parse.py(480):             if _len(set)==1 and set[0][0] is LITERAL:
sre_parse.py(482):             elif _len(set)==2 and set[0][0] is NEGATE and set[1][0] is LITERAL:
sre_parse.py(486):                 subpatternappend((IN, set))
 --- modulename: sre_parse, funcname: append
sre_parse.py(150):         self.data.append(code)
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(413):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(414):         if this is None:
sre_parse.py(417):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(428):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(431):         elif this == "[":
sre_parse.py(488):         elif this and this[0] in REPEAT_CHARS:
sre_parse.py(490):             if this == "?":
sre_parse.py(492):             elif this == "*":
sre_parse.py(495):             elif this == "+":
sre_parse.py(496):                 min, max = 1, MAXREPEAT
sre_parse.py(528):             if subpattern:
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(138):         return len(self.data)
sre_parse.py(529):                 item = subpattern[-1:]
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(138):         return len(self.data)
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(143):             return SubPattern(self.pattern, self.data[index])
 --- modulename: sre_parse, funcname: __init__
sre_parse.py(93):         self.pattern = pattern
sre_parse.py(94):         if data is None:
sre_parse.py(96):         self.data = data
sre_parse.py(97):         self.width = None
sre_parse.py(532):             if not item or (_len(item) == 1 and item[0][0] == AT):
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(138):         return len(self.data)
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(138):         return len(self.data)
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_parse.py(534):             if item[0][0] in REPEATCODES:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_parse.py(536):             if sourcematch("?"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(211):         return 0
sre_parse.py(539):                 subpattern[-1] = (MAX_REPEAT, (min, max, item))
 --- modulename: sre_parse, funcname: __setitem__
sre_parse.py(146):         self.data[index] = code
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(412):             break # end of subpattern
sre_parse.py(704):     return subpattern
sre_parse.py(325):         if sourcematch("|"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(211):         return 0
sre_parse.py(327):         if not nested:
sre_parse.py(329):         if not source.next or sourcematch(")", 0):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(208):             if skip:
sre_parse.py(210):             return 1
sre_parse.py(330):             break
sre_parse.py(334):     if len(items) == 1:
sre_parse.py(335):         return items[0]
sre_parse.py(677):                 if not sourcematch(")"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(208):             if skip:
sre_parse.py(209):                 self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(199):             try:
sre_parse.py(200):                 c = self.string[self.index + 1]
sre_parse.py(203):             char = char + c
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(210):             return 1
sre_parse.py(679):                 if group is not None:
sre_parse.py(680):                     state.closegroup(group)
 --- modulename: sre_parse, funcname: closegroup
sre_parse.py(86):         self.open.remove(gid)
sre_parse.py(681):                 subpatternappend((SUBPATTERN, (group, p)))
 --- modulename: sre_parse, funcname: append
sre_parse.py(150):         self.data.append(code)
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(413):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(414):         if this is None:
sre_parse.py(417):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(428):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(431):         elif this == "[":
sre_parse.py(488):         elif this and this[0] in REPEAT_CHARS:
sre_parse.py(541):         elif this == ".":
sre_parse.py(544):         elif this == "(":
sre_parse.py(691):         elif this == "^":
sre_parse.py(694):         elif this == "$":
sre_parse.py(697):         elif this and this[0] == "\\":
sre_parse.py(698):             code = _escape(source, this, state)
 --- modulename: sre_parse, funcname: _escape
sre_parse.py(270):     code = CATEGORIES.get(escape)
sre_parse.py(271):     if code:
sre_parse.py(272):         return code
sre_parse.py(699):             subpatternappend(code)
 --- modulename: sre_parse, funcname: append
sre_parse.py(150):         self.data.append(code)
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(413):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(199):             try:
sre_parse.py(200):                 c = self.string[self.index + 1]
sre_parse.py(203):             char = char + c
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(414):         if this is None:
sre_parse.py(417):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(428):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(431):         elif this == "[":
sre_parse.py(488):         elif this and this[0] in REPEAT_CHARS:
sre_parse.py(490):             if this == "?":
sre_parse.py(492):             elif this == "*":
sre_parse.py(493):                 min, max = 0, MAXREPEAT
sre_parse.py(528):             if subpattern:
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(138):         return len(self.data)
sre_parse.py(529):                 item = subpattern[-1:]
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(138):         return len(self.data)
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(143):             return SubPattern(self.pattern, self.data[index])
 --- modulename: sre_parse, funcname: __init__
sre_parse.py(93):         self.pattern = pattern
sre_parse.py(94):         if data is None:
sre_parse.py(96):         self.data = data
sre_parse.py(97):         self.width = None
sre_parse.py(532):             if not item or (_len(item) == 1 and item[0][0] == AT):
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(138):         return len(self.data)
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(138):         return len(self.data)
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_parse.py(534):             if item[0][0] in REPEATCODES:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_parse.py(536):             if sourcematch("?"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(211):         return 0
sre_parse.py(539):                 subpattern[-1] = (MAX_REPEAT, (min, max, item))
 --- modulename: sre_parse, funcname: __setitem__
sre_parse.py(146):         self.data[index] = code
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(413):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(414):         if this is None:
sre_parse.py(417):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(428):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(431):         elif this == "[":
sre_parse.py(488):         elif this and this[0] in REPEAT_CHARS:
sre_parse.py(541):         elif this == ".":
sre_parse.py(544):         elif this == "(":
sre_parse.py(691):         elif this == "^":
sre_parse.py(694):         elif this == "$":
sre_parse.py(697):         elif this and this[0] == "\\":
sre_parse.py(698):             code = _escape(source, this, state)
 --- modulename: sre_parse, funcname: _escape
sre_parse.py(270):     code = CATEGORIES.get(escape)
sre_parse.py(271):     if code:
sre_parse.py(273):     code = ESCAPES.get(escape)
sre_parse.py(274):     if code:
sre_parse.py(276):     try:
sre_parse.py(277):         c = escape[1:2]
sre_parse.py(278):         if c == "x":
sre_parse.py(285):         elif c == "0":
sre_parse.py(290):         elif c in DIGITS:
sre_parse.py(311):         if len(escape) == 2:
sre_parse.py(312):             return LITERAL, ord(escape[1])
sre_parse.py(699):             subpatternappend(code)
 --- modulename: sre_parse, funcname: append
sre_parse.py(150):         self.data.append(code)
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(413):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(414):         if this is None:
sre_parse.py(417):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(428):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(429):             subpatternappend((LITERAL, ord(this)))
 --- modulename: sre_parse, funcname: append
sre_parse.py(150):         self.data.append(code)
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(413):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(414):         if this is None:
sre_parse.py(417):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(428):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(429):             subpatternappend((LITERAL, ord(this)))
 --- modulename: sre_parse, funcname: append
sre_parse.py(150):         self.data.append(code)
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(413):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(414):         if this is None:
sre_parse.py(417):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(428):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(429):             subpatternappend((LITERAL, ord(this)))
 --- modulename: sre_parse, funcname: append
sre_parse.py(150):         self.data.append(code)
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(413):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(414):         if this is None:
sre_parse.py(417):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(428):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(429):             subpatternappend((LITERAL, ord(this)))
 --- modulename: sre_parse, funcname: append
sre_parse.py(150):         self.data.append(code)
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(413):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(414):         if this is None:
sre_parse.py(417):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(428):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(429):             subpatternappend((LITERAL, ord(this)))
 --- modulename: sre_parse, funcname: append
sre_parse.py(150):         self.data.append(code)
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(413):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(414):         if this is None:
sre_parse.py(417):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(428):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(429):             subpatternappend((LITERAL, ord(this)))
 --- modulename: sre_parse, funcname: append
sre_parse.py(150):         self.data.append(code)
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(413):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(414):         if this is None:
sre_parse.py(417):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(428):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(429):             subpatternappend((LITERAL, ord(this)))
 --- modulename: sre_parse, funcname: append
sre_parse.py(150):         self.data.append(code)
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(413):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(414):         if this is None:
sre_parse.py(417):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(428):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(429):             subpatternappend((LITERAL, ord(this)))
 --- modulename: sre_parse, funcname: append
sre_parse.py(150):         self.data.append(code)
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(413):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(414):         if this is None:
sre_parse.py(417):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(428):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(429):             subpatternappend((LITERAL, ord(this)))
 --- modulename: sre_parse, funcname: append
sre_parse.py(150):         self.data.append(code)
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(413):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(199):             try:
sre_parse.py(200):                 c = self.string[self.index + 1]
sre_parse.py(203):             char = char + c
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(414):         if this is None:
sre_parse.py(417):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(428):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(429):             subpatternappend((LITERAL, ord(this)))
 --- modulename: sre_parse, funcname: append
sre_parse.py(150):         self.data.append(code)
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(413):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(414):         if this is None:
sre_parse.py(417):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(428):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(431):         elif this == "[":
sre_parse.py(488):         elif this and this[0] in REPEAT_CHARS:
sre_parse.py(541):         elif this == ".":
sre_parse.py(544):         elif this == "(":
sre_parse.py(691):         elif this == "^":
sre_parse.py(694):         elif this == "$":
sre_parse.py(697):         elif this and this[0] == "\\":
sre_parse.py(698):             code = _escape(source, this, state)
 --- modulename: sre_parse, funcname: _escape
sre_parse.py(270):     code = CATEGORIES.get(escape)
sre_parse.py(271):     if code:
sre_parse.py(272):         return code
sre_parse.py(699):             subpatternappend(code)
 --- modulename: sre_parse, funcname: append
sre_parse.py(150):         self.data.append(code)
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(413):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(414):         if this is None:
sre_parse.py(417):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(428):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(431):         elif this == "[":
sre_parse.py(488):         elif this and this[0] in REPEAT_CHARS:
sre_parse.py(490):             if this == "?":
sre_parse.py(492):             elif this == "*":
sre_parse.py(493):                 min, max = 0, MAXREPEAT
sre_parse.py(528):             if subpattern:
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(138):         return len(self.data)
sre_parse.py(529):                 item = subpattern[-1:]
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(138):         return len(self.data)
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(143):             return SubPattern(self.pattern, self.data[index])
 --- modulename: sre_parse, funcname: __init__
sre_parse.py(93):         self.pattern = pattern
sre_parse.py(94):         if data is None:
sre_parse.py(96):         self.data = data
sre_parse.py(97):         self.width = None
sre_parse.py(532):             if not item or (_len(item) == 1 and item[0][0] == AT):
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(138):         return len(self.data)
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(138):         return len(self.data)
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_parse.py(534):             if item[0][0] in REPEATCODES:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_parse.py(536):             if sourcematch("?"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(211):         return 0
sre_parse.py(539):                 subpattern[-1] = (MAX_REPEAT, (min, max, item))
 --- modulename: sre_parse, funcname: __setitem__
sre_parse.py(146):         self.data[index] = code
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(413):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(199):             try:
sre_parse.py(200):                 c = self.string[self.index + 1]
sre_parse.py(203):             char = char + c
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(414):         if this is None:
sre_parse.py(417):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(428):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(431):         elif this == "[":
sre_parse.py(433):             set = []
sre_parse.py(434):             setappend = set.append
sre_parse.py(437):             if sourcematch("^"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(211):         return 0
sre_parse.py(440):             start = set[:]
sre_parse.py(441):             while 1:
sre_parse.py(442):                 this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(443):                 if this == "]" and set != start:
sre_parse.py(445):                 elif this and this[0] == "\\":
sre_parse.py(446):                     code1 = _class_escape(source, this)
 --- modulename: sre_parse, funcname: _class_escape
sre_parse.py(238):     code = ESCAPES.get(escape)
sre_parse.py(239):     if code:
sre_parse.py(241):     code = CATEGORIES.get(escape)
sre_parse.py(242):     if code and code[0] == IN:
sre_parse.py(243):         return code
sre_parse.py(451):                 if sourcematch("-"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(211):         return 0
sre_parse.py(475):                     if code1[0] is IN:
sre_parse.py(476):                         code1 = code1[1][0]
sre_parse.py(477):                     setappend(code1)
sre_parse.py(442):                 this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(443):                 if this == "]" and set != start:
sre_parse.py(445):                 elif this and this[0] == "\\":
sre_parse.py(447):                 elif this:
sre_parse.py(448):                     code1 = LITERAL, ord(this)
sre_parse.py(451):                 if sourcematch("-"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(211):         return 0
sre_parse.py(475):                     if code1[0] is IN:
sre_parse.py(477):                     setappend(code1)
sre_parse.py(442):                 this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(443):                 if this == "]" and set != start:
sre_parse.py(444):                     break
sre_parse.py(480):             if _len(set)==1 and set[0][0] is LITERAL:
sre_parse.py(482):             elif _len(set)==2 and set[0][0] is NEGATE and set[1][0] is LITERAL:
sre_parse.py(486):                 subpatternappend((IN, set))
 --- modulename: sre_parse, funcname: append
sre_parse.py(150):         self.data.append(code)
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(413):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(199):             try:
sre_parse.py(200):                 c = self.string[self.index + 1]
sre_parse.py(203):             char = char + c
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(414):         if this is None:
sre_parse.py(417):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(428):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(431):         elif this == "[":
sre_parse.py(488):         elif this and this[0] in REPEAT_CHARS:
sre_parse.py(490):             if this == "?":
sre_parse.py(492):             elif this == "*":
sre_parse.py(495):             elif this == "+":
sre_parse.py(496):                 min, max = 1, MAXREPEAT
sre_parse.py(528):             if subpattern:
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(138):         return len(self.data)
sre_parse.py(529):                 item = subpattern[-1:]
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(138):         return len(self.data)
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(143):             return SubPattern(self.pattern, self.data[index])
 --- modulename: sre_parse, funcname: __init__
sre_parse.py(93):         self.pattern = pattern
sre_parse.py(94):         if data is None:
sre_parse.py(96):         self.data = data
sre_parse.py(97):         self.width = None
sre_parse.py(532):             if not item or (_len(item) == 1 and item[0][0] == AT):
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(138):         return len(self.data)
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(138):         return len(self.data)
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_parse.py(534):             if item[0][0] in REPEATCODES:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_parse.py(536):             if sourcematch("?"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(211):         return 0
sre_parse.py(539):                 subpattern[-1] = (MAX_REPEAT, (min, max, item))
 --- modulename: sre_parse, funcname: __setitem__
sre_parse.py(146):         self.data[index] = code
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(413):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(414):         if this is None:
sre_parse.py(417):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(428):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(431):         elif this == "[":
sre_parse.py(488):         elif this and this[0] in REPEAT_CHARS:
sre_parse.py(541):         elif this == ".":
sre_parse.py(544):         elif this == "(":
sre_parse.py(691):         elif this == "^":
sre_parse.py(694):         elif this == "$":
sre_parse.py(697):         elif this and this[0] == "\\":
sre_parse.py(698):             code = _escape(source, this, state)
 --- modulename: sre_parse, funcname: _escape
sre_parse.py(270):     code = CATEGORIES.get(escape)
sre_parse.py(271):     if code:
sre_parse.py(272):         return code
sre_parse.py(699):             subpatternappend(code)
 --- modulename: sre_parse, funcname: append
sre_parse.py(150):         self.data.append(code)
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(413):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(199):             try:
sre_parse.py(200):                 c = self.string[self.index + 1]
sre_parse.py(203):             char = char + c
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(414):         if this is None:
sre_parse.py(417):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(428):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(431):         elif this == "[":
sre_parse.py(488):         elif this and this[0] in REPEAT_CHARS:
sre_parse.py(490):             if this == "?":
sre_parse.py(492):             elif this == "*":
sre_parse.py(493):                 min, max = 0, MAXREPEAT
sre_parse.py(528):             if subpattern:
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(138):         return len(self.data)
sre_parse.py(529):                 item = subpattern[-1:]
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(138):         return len(self.data)
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(143):             return SubPattern(self.pattern, self.data[index])
 --- modulename: sre_parse, funcname: __init__
sre_parse.py(93):         self.pattern = pattern
sre_parse.py(94):         if data is None:
sre_parse.py(96):         self.data = data
sre_parse.py(97):         self.width = None
sre_parse.py(532):             if not item or (_len(item) == 1 and item[0][0] == AT):
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(138):         return len(self.data)
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(138):         return len(self.data)
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_parse.py(534):             if item[0][0] in REPEATCODES:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_parse.py(536):             if sourcematch("?"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(211):         return 0
sre_parse.py(539):                 subpattern[-1] = (MAX_REPEAT, (min, max, item))
 --- modulename: sre_parse, funcname: __setitem__
sre_parse.py(146):         self.data[index] = code
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(413):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(414):         if this is None:
sre_parse.py(417):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(428):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(431):         elif this == "[":
sre_parse.py(488):         elif this and this[0] in REPEAT_CHARS:
sre_parse.py(541):         elif this == ".":
sre_parse.py(544):         elif this == "(":
sre_parse.py(691):         elif this == "^":
sre_parse.py(694):         elif this == "$":
sre_parse.py(697):         elif this and this[0] == "\\":
sre_parse.py(698):             code = _escape(source, this, state)
 --- modulename: sre_parse, funcname: _escape
sre_parse.py(270):     code = CATEGORIES.get(escape)
sre_parse.py(271):     if code:
sre_parse.py(273):     code = ESCAPES.get(escape)
sre_parse.py(274):     if code:
sre_parse.py(276):     try:
sre_parse.py(277):         c = escape[1:2]
sre_parse.py(278):         if c == "x":
sre_parse.py(285):         elif c == "0":
sre_parse.py(290):         elif c in DIGITS:
sre_parse.py(311):         if len(escape) == 2:
sre_parse.py(312):             return LITERAL, ord(escape[1])
sre_parse.py(699):             subpatternappend(code)
 --- modulename: sre_parse, funcname: append
sre_parse.py(150):         self.data.append(code)
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(413):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(414):         if this is None:
sre_parse.py(417):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(428):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(431):         elif this == "[":
sre_parse.py(488):         elif this and this[0] in REPEAT_CHARS:
sre_parse.py(541):         elif this == ".":
sre_parse.py(544):         elif this == "(":
sre_parse.py(545):             group = 1
sre_parse.py(546):             name = None
sre_parse.py(547):             condgroup = None
sre_parse.py(548):             if sourcematch("?"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(211):         return 0
sre_parse.py(666):             if group:
sre_parse.py(668):                 if group == 2:
sre_parse.py(672):                     group = state.opengroup(name)
 --- modulename: sre_parse, funcname: opengroup
sre_parse.py(75):         gid = self.groups
sre_parse.py(76):         self.groups = gid + 1
sre_parse.py(77):         if name is not None:
sre_parse.py(83):         self.open.append(gid)
sre_parse.py(84):         return gid
sre_parse.py(673):                 if condgroup:
sre_parse.py(676):                     p = _parse_sub(source, state)
 --- modulename: sre_parse, funcname: _parse_sub
sre_parse.py(320):     items = []
sre_parse.py(321):     itemsappend = items.append
sre_parse.py(322):     sourcematch = source.match
sre_parse.py(323):     while 1:
sre_parse.py(324):         itemsappend(_parse(source, state))
 --- modulename: sre_parse, funcname: _parse
sre_parse.py(397):     subpattern = SubPattern(state)
 --- modulename: sre_parse, funcname: __init__
sre_parse.py(93):         self.pattern = pattern
sre_parse.py(94):         if data is None:
sre_parse.py(95):             data = []
sre_parse.py(96):         self.data = data
sre_parse.py(97):         self.width = None
sre_parse.py(400):     subpatternappend = subpattern.append
sre_parse.py(401):     sourceget = source.get
sre_parse.py(402):     sourcematch = source.match
sre_parse.py(403):     _len = len
sre_parse.py(404):     PATTERNENDERS = _PATTERNENDERS
sre_parse.py(405):     ASSERTCHARS = _ASSERTCHARS
sre_parse.py(406):     LOOKBEHINDASSERTCHARS = _LOOKBEHINDASSERTCHARS
sre_parse.py(407):     REPEATCODES = _REPEATCODES
sre_parse.py(409):     while 1:
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(413):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(199):             try:
sre_parse.py(200):                 c = self.string[self.index + 1]
sre_parse.py(203):             char = char + c
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(414):         if this is None:
sre_parse.py(417):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(428):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(431):         elif this == "[":
sre_parse.py(433):             set = []
sre_parse.py(434):             setappend = set.append
sre_parse.py(437):             if sourcematch("^"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(211):         return 0
sre_parse.py(440):             start = set[:]
sre_parse.py(441):             while 1:
sre_parse.py(442):                 this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(443):                 if this == "]" and set != start:
sre_parse.py(445):                 elif this and this[0] == "\\":
sre_parse.py(446):                     code1 = _class_escape(source, this)
 --- modulename: sre_parse, funcname: _class_escape
sre_parse.py(238):     code = ESCAPES.get(escape)
sre_parse.py(239):     if code:
sre_parse.py(241):     code = CATEGORIES.get(escape)
sre_parse.py(242):     if code and code[0] == IN:
sre_parse.py(243):         return code
sre_parse.py(451):                 if sourcematch("-"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(211):         return 0
sre_parse.py(475):                     if code1[0] is IN:
sre_parse.py(476):                         code1 = code1[1][0]
sre_parse.py(477):                     setappend(code1)
sre_parse.py(442):                 this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(443):                 if this == "]" and set != start:
sre_parse.py(445):                 elif this and this[0] == "\\":
sre_parse.py(447):                 elif this:
sre_parse.py(448):                     code1 = LITERAL, ord(this)
sre_parse.py(451):                 if sourcematch("-"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(211):         return 0
sre_parse.py(475):                     if code1[0] is IN:
sre_parse.py(477):                     setappend(code1)
sre_parse.py(442):                 this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(443):                 if this == "]" and set != start:
sre_parse.py(444):                     break
sre_parse.py(480):             if _len(set)==1 and set[0][0] is LITERAL:
sre_parse.py(482):             elif _len(set)==2 and set[0][0] is NEGATE and set[1][0] is LITERAL:
sre_parse.py(486):                 subpatternappend((IN, set))
 --- modulename: sre_parse, funcname: append
sre_parse.py(150):         self.data.append(code)
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(413):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(414):         if this is None:
sre_parse.py(417):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(428):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(431):         elif this == "[":
sre_parse.py(488):         elif this and this[0] in REPEAT_CHARS:
sre_parse.py(490):             if this == "?":
sre_parse.py(492):             elif this == "*":
sre_parse.py(495):             elif this == "+":
sre_parse.py(496):                 min, max = 1, MAXREPEAT
sre_parse.py(528):             if subpattern:
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(138):         return len(self.data)
sre_parse.py(529):                 item = subpattern[-1:]
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(138):         return len(self.data)
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(143):             return SubPattern(self.pattern, self.data[index])
 --- modulename: sre_parse, funcname: __init__
sre_parse.py(93):         self.pattern = pattern
sre_parse.py(94):         if data is None:
sre_parse.py(96):         self.data = data
sre_parse.py(97):         self.width = None
sre_parse.py(532):             if not item or (_len(item) == 1 and item[0][0] == AT):
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(138):         return len(self.data)
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(138):         return len(self.data)
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_parse.py(534):             if item[0][0] in REPEATCODES:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_parse.py(536):             if sourcematch("?"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(211):         return 0
sre_parse.py(539):                 subpattern[-1] = (MAX_REPEAT, (min, max, item))
 --- modulename: sre_parse, funcname: __setitem__
sre_parse.py(146):         self.data[index] = code
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(412):             break # end of subpattern
sre_parse.py(704):     return subpattern
sre_parse.py(325):         if sourcematch("|"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(211):         return 0
sre_parse.py(327):         if not nested:
sre_parse.py(329):         if not source.next or sourcematch(")", 0):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(208):             if skip:
sre_parse.py(210):             return 1
sre_parse.py(330):             break
sre_parse.py(334):     if len(items) == 1:
sre_parse.py(335):         return items[0]
sre_parse.py(677):                 if not sourcematch(")"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(208):             if skip:
sre_parse.py(209):                 self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(199):             try:
sre_parse.py(200):                 c = self.string[self.index + 1]
sre_parse.py(203):             char = char + c
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(210):             return 1
sre_parse.py(679):                 if group is not None:
sre_parse.py(680):                     state.closegroup(group)
 --- modulename: sre_parse, funcname: closegroup
sre_parse.py(86):         self.open.remove(gid)
sre_parse.py(681):                 subpatternappend((SUBPATTERN, (group, p)))
 --- modulename: sre_parse, funcname: append
sre_parse.py(150):         self.data.append(code)
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(413):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(414):         if this is None:
sre_parse.py(417):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(428):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(431):         elif this == "[":
sre_parse.py(488):         elif this and this[0] in REPEAT_CHARS:
sre_parse.py(541):         elif this == ".":
sre_parse.py(544):         elif this == "(":
sre_parse.py(691):         elif this == "^":
sre_parse.py(694):         elif this == "$":
sre_parse.py(697):         elif this and this[0] == "\\":
sre_parse.py(698):             code = _escape(source, this, state)
 --- modulename: sre_parse, funcname: _escape
sre_parse.py(270):     code = CATEGORIES.get(escape)
sre_parse.py(271):     if code:
sre_parse.py(273):     code = ESCAPES.get(escape)
sre_parse.py(274):     if code:
sre_parse.py(276):     try:
sre_parse.py(277):         c = escape[1:2]
sre_parse.py(278):         if c == "x":
sre_parse.py(285):         elif c == "0":
sre_parse.py(290):         elif c in DIGITS:
sre_parse.py(311):         if len(escape) == 2:
sre_parse.py(312):             return LITERAL, ord(escape[1])
sre_parse.py(699):             subpatternappend(code)
 --- modulename: sre_parse, funcname: append
sre_parse.py(150):         self.data.append(code)
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(413):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(414):         if this is None:
sre_parse.py(417):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(428):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(429):             subpatternappend((LITERAL, ord(this)))
 --- modulename: sre_parse, funcname: append
sre_parse.py(150):         self.data.append(code)
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(413):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(414):         if this is None:
sre_parse.py(417):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(428):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(429):             subpatternappend((LITERAL, ord(this)))
 --- modulename: sre_parse, funcname: append
sre_parse.py(150):         self.data.append(code)
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(413):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(414):         if this is None:
sre_parse.py(417):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(428):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(429):             subpatternappend((LITERAL, ord(this)))
 --- modulename: sre_parse, funcname: append
sre_parse.py(150):         self.data.append(code)
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(413):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(414):         if this is None:
sre_parse.py(417):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(428):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(429):             subpatternappend((LITERAL, ord(this)))
 --- modulename: sre_parse, funcname: append
sre_parse.py(150):         self.data.append(code)
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(413):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(414):         if this is None:
sre_parse.py(417):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(428):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(431):         elif this == "[":
sre_parse.py(488):         elif this and this[0] in REPEAT_CHARS:
sre_parse.py(541):         elif this == ".":
sre_parse.py(544):         elif this == "(":
sre_parse.py(545):             group = 1
sre_parse.py(546):             name = None
sre_parse.py(547):             condgroup = None
sre_parse.py(548):             if sourcematch("?"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(211):         return 0
sre_parse.py(666):             if group:
sre_parse.py(668):                 if group == 2:
sre_parse.py(672):                     group = state.opengroup(name)
 --- modulename: sre_parse, funcname: opengroup
sre_parse.py(75):         gid = self.groups
sre_parse.py(76):         self.groups = gid + 1
sre_parse.py(77):         if name is not None:
sre_parse.py(83):         self.open.append(gid)
sre_parse.py(84):         return gid
sre_parse.py(673):                 if condgroup:
sre_parse.py(676):                     p = _parse_sub(source, state)
 --- modulename: sre_parse, funcname: _parse_sub
sre_parse.py(320):     items = []
sre_parse.py(321):     itemsappend = items.append
sre_parse.py(322):     sourcematch = source.match
sre_parse.py(323):     while 1:
sre_parse.py(324):         itemsappend(_parse(source, state))
 --- modulename: sre_parse, funcname: _parse
sre_parse.py(397):     subpattern = SubPattern(state)
 --- modulename: sre_parse, funcname: __init__
sre_parse.py(93):         self.pattern = pattern
sre_parse.py(94):         if data is None:
sre_parse.py(95):             data = []
sre_parse.py(96):         self.data = data
sre_parse.py(97):         self.width = None
sre_parse.py(400):     subpatternappend = subpattern.append
sre_parse.py(401):     sourceget = source.get
sre_parse.py(402):     sourcematch = source.match
sre_parse.py(403):     _len = len
sre_parse.py(404):     PATTERNENDERS = _PATTERNENDERS
sre_parse.py(405):     ASSERTCHARS = _ASSERTCHARS
sre_parse.py(406):     LOOKBEHINDASSERTCHARS = _LOOKBEHINDASSERTCHARS
sre_parse.py(407):     REPEATCODES = _REPEATCODES
sre_parse.py(409):     while 1:
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(413):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(199):             try:
sre_parse.py(200):                 c = self.string[self.index + 1]
sre_parse.py(203):             char = char + c
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(414):         if this is None:
sre_parse.py(417):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(428):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(431):         elif this == "[":
sre_parse.py(433):             set = []
sre_parse.py(434):             setappend = set.append
sre_parse.py(437):             if sourcematch("^"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(211):         return 0
sre_parse.py(440):             start = set[:]
sre_parse.py(441):             while 1:
sre_parse.py(442):                 this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(443):                 if this == "]" and set != start:
sre_parse.py(445):                 elif this and this[0] == "\\":
sre_parse.py(446):                     code1 = _class_escape(source, this)
 --- modulename: sre_parse, funcname: _class_escape
sre_parse.py(238):     code = ESCAPES.get(escape)
sre_parse.py(239):     if code:
sre_parse.py(241):     code = CATEGORIES.get(escape)
sre_parse.py(242):     if code and code[0] == IN:
sre_parse.py(243):         return code
sre_parse.py(451):                 if sourcematch("-"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(211):         return 0
sre_parse.py(475):                     if code1[0] is IN:
sre_parse.py(476):                         code1 = code1[1][0]
sre_parse.py(477):                     setappend(code1)
sre_parse.py(442):                 this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(443):                 if this == "]" and set != start:
sre_parse.py(445):                 elif this and this[0] == "\\":
sre_parse.py(447):                 elif this:
sre_parse.py(448):                     code1 = LITERAL, ord(this)
sre_parse.py(451):                 if sourcematch("-"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(211):         return 0
sre_parse.py(475):                     if code1[0] is IN:
sre_parse.py(477):                     setappend(code1)
sre_parse.py(442):                 this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(443):                 if this == "]" and set != start:
sre_parse.py(444):                     break
sre_parse.py(480):             if _len(set)==1 and set[0][0] is LITERAL:
sre_parse.py(482):             elif _len(set)==2 and set[0][0] is NEGATE and set[1][0] is LITERAL:
sre_parse.py(486):                 subpatternappend((IN, set))
 --- modulename: sre_parse, funcname: append
sre_parse.py(150):         self.data.append(code)
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(413):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(414):         if this is None:
sre_parse.py(417):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(428):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(431):         elif this == "[":
sre_parse.py(488):         elif this and this[0] in REPEAT_CHARS:
sre_parse.py(490):             if this == "?":
sre_parse.py(492):             elif this == "*":
sre_parse.py(495):             elif this == "+":
sre_parse.py(496):                 min, max = 1, MAXREPEAT
sre_parse.py(528):             if subpattern:
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(138):         return len(self.data)
sre_parse.py(529):                 item = subpattern[-1:]
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(138):         return len(self.data)
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(143):             return SubPattern(self.pattern, self.data[index])
 --- modulename: sre_parse, funcname: __init__
sre_parse.py(93):         self.pattern = pattern
sre_parse.py(94):         if data is None:
sre_parse.py(96):         self.data = data
sre_parse.py(97):         self.width = None
sre_parse.py(532):             if not item or (_len(item) == 1 and item[0][0] == AT):
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(138):         return len(self.data)
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(138):         return len(self.data)
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_parse.py(534):             if item[0][0] in REPEATCODES:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_parse.py(536):             if sourcematch("?"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(211):         return 0
sre_parse.py(539):                 subpattern[-1] = (MAX_REPEAT, (min, max, item))
 --- modulename: sre_parse, funcname: __setitem__
sre_parse.py(146):         self.data[index] = code
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(413):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(414):         if this is None:
sre_parse.py(417):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(428):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(429):             subpatternappend((LITERAL, ord(this)))
 --- modulename: sre_parse, funcname: append
sre_parse.py(150):         self.data.append(code)
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(413):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(199):             try:
sre_parse.py(200):                 c = self.string[self.index + 1]
sre_parse.py(203):             char = char + c
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(414):         if this is None:
sre_parse.py(417):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(428):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(431):         elif this == "[":
sre_parse.py(433):             set = []
sre_parse.py(434):             setappend = set.append
sre_parse.py(437):             if sourcematch("^"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(211):         return 0
sre_parse.py(440):             start = set[:]
sre_parse.py(441):             while 1:
sre_parse.py(442):                 this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(443):                 if this == "]" and set != start:
sre_parse.py(445):                 elif this and this[0] == "\\":
sre_parse.py(446):                     code1 = _class_escape(source, this)
 --- modulename: sre_parse, funcname: _class_escape
sre_parse.py(238):     code = ESCAPES.get(escape)
sre_parse.py(239):     if code:
sre_parse.py(241):     code = CATEGORIES.get(escape)
sre_parse.py(242):     if code and code[0] == IN:
sre_parse.py(243):         return code
sre_parse.py(451):                 if sourcematch("-"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(211):         return 0
sre_parse.py(475):                     if code1[0] is IN:
sre_parse.py(476):                         code1 = code1[1][0]
sre_parse.py(477):                     setappend(code1)
sre_parse.py(442):                 this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(443):                 if this == "]" and set != start:
sre_parse.py(445):                 elif this and this[0] == "\\":
sre_parse.py(447):                 elif this:
sre_parse.py(448):                     code1 = LITERAL, ord(this)
sre_parse.py(451):                 if sourcematch("-"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(211):         return 0
sre_parse.py(475):                     if code1[0] is IN:
sre_parse.py(477):                     setappend(code1)
sre_parse.py(442):                 this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(443):                 if this == "]" and set != start:
sre_parse.py(444):                     break
sre_parse.py(480):             if _len(set)==1 and set[0][0] is LITERAL:
sre_parse.py(482):             elif _len(set)==2 and set[0][0] is NEGATE and set[1][0] is LITERAL:
sre_parse.py(486):                 subpatternappend((IN, set))
 --- modulename: sre_parse, funcname: append
sre_parse.py(150):         self.data.append(code)
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(413):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(414):         if this is None:
sre_parse.py(417):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(428):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(431):         elif this == "[":
sre_parse.py(488):         elif this and this[0] in REPEAT_CHARS:
sre_parse.py(490):             if this == "?":
sre_parse.py(492):             elif this == "*":
sre_parse.py(495):             elif this == "+":
sre_parse.py(496):                 min, max = 1, MAXREPEAT
sre_parse.py(528):             if subpattern:
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(138):         return len(self.data)
sre_parse.py(529):                 item = subpattern[-1:]
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(138):         return len(self.data)
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(143):             return SubPattern(self.pattern, self.data[index])
 --- modulename: sre_parse, funcname: __init__
sre_parse.py(93):         self.pattern = pattern
sre_parse.py(94):         if data is None:
sre_parse.py(96):         self.data = data
sre_parse.py(97):         self.width = None
sre_parse.py(532):             if not item or (_len(item) == 1 and item[0][0] == AT):
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(138):         return len(self.data)
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(138):         return len(self.data)
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_parse.py(534):             if item[0][0] in REPEATCODES:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_parse.py(536):             if sourcematch("?"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(211):         return 0
sre_parse.py(539):                 subpattern[-1] = (MAX_REPEAT, (min, max, item))
 --- modulename: sre_parse, funcname: __setitem__
sre_parse.py(146):         self.data[index] = code
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(413):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(414):         if this is None:
sre_parse.py(417):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(428):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(431):         elif this == "[":
sre_parse.py(488):         elif this and this[0] in REPEAT_CHARS:
sre_parse.py(541):         elif this == ".":
sre_parse.py(544):         elif this == "(":
sre_parse.py(545):             group = 1
sre_parse.py(546):             name = None
sre_parse.py(547):             condgroup = None
sre_parse.py(548):             if sourcematch("?"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(208):             if skip:
sre_parse.py(209):                 self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(210):             return 1
sre_parse.py(549):                 group = 0
sre_parse.py(551):                 if sourcematch("P"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(211):         return 0
sre_parse.py(600):                 elif sourcematch(":"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(208):             if skip:
sre_parse.py(209):                 self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(210):             return 1
sre_parse.py(602):                     group = 2
sre_parse.py(666):             if group:
sre_parse.py(668):                 if group == 2:
sre_parse.py(670):                     group = None
sre_parse.py(673):                 if condgroup:
sre_parse.py(676):                     p = _parse_sub(source, state)
 --- modulename: sre_parse, funcname: _parse_sub
sre_parse.py(320):     items = []
sre_parse.py(321):     itemsappend = items.append
sre_parse.py(322):     sourcematch = source.match
sre_parse.py(323):     while 1:
sre_parse.py(324):         itemsappend(_parse(source, state))
 --- modulename: sre_parse, funcname: _parse
sre_parse.py(397):     subpattern = SubPattern(state)
 --- modulename: sre_parse, funcname: __init__
sre_parse.py(93):         self.pattern = pattern
sre_parse.py(94):         if data is None:
sre_parse.py(95):             data = []
sre_parse.py(96):         self.data = data
sre_parse.py(97):         self.width = None
sre_parse.py(400):     subpatternappend = subpattern.append
sre_parse.py(401):     sourceget = source.get
sre_parse.py(402):     sourcematch = source.match
sre_parse.py(403):     _len = len
sre_parse.py(404):     PATTERNENDERS = _PATTERNENDERS
sre_parse.py(405):     ASSERTCHARS = _ASSERTCHARS
sre_parse.py(406):     LOOKBEHINDASSERTCHARS = _LOOKBEHINDASSERTCHARS
sre_parse.py(407):     REPEATCODES = _REPEATCODES
sre_parse.py(409):     while 1:
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(413):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(199):             try:
sre_parse.py(200):                 c = self.string[self.index + 1]
sre_parse.py(203):             char = char + c
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(414):         if this is None:
sre_parse.py(417):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(428):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(429):             subpatternappend((LITERAL, ord(this)))
 --- modulename: sre_parse, funcname: append
sre_parse.py(150):         self.data.append(code)
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(413):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(199):             try:
sre_parse.py(200):                 c = self.string[self.index + 1]
sre_parse.py(203):             char = char + c
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(414):         if this is None:
sre_parse.py(417):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(428):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(431):         elif this == "[":
sre_parse.py(488):         elif this and this[0] in REPEAT_CHARS:
sre_parse.py(541):         elif this == ".":
sre_parse.py(544):         elif this == "(":
sre_parse.py(691):         elif this == "^":
sre_parse.py(694):         elif this == "$":
sre_parse.py(697):         elif this and this[0] == "\\":
sre_parse.py(698):             code = _escape(source, this, state)
 --- modulename: sre_parse, funcname: _escape
sre_parse.py(270):     code = CATEGORIES.get(escape)
sre_parse.py(271):     if code:
sre_parse.py(273):     code = ESCAPES.get(escape)
sre_parse.py(274):     if code:
sre_parse.py(276):     try:
sre_parse.py(277):         c = escape[1:2]
sre_parse.py(278):         if c == "x":
sre_parse.py(285):         elif c == "0":
sre_parse.py(290):         elif c in DIGITS:
sre_parse.py(311):         if len(escape) == 2:
sre_parse.py(312):             return LITERAL, ord(escape[1])
sre_parse.py(699):             subpatternappend(code)
 --- modulename: sre_parse, funcname: append
sre_parse.py(150):         self.data.append(code)
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(413):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(414):         if this is None:
sre_parse.py(417):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(428):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(431):         elif this == "[":
sre_parse.py(488):         elif this and this[0] in REPEAT_CHARS:
sre_parse.py(541):         elif this == ".":
sre_parse.py(544):         elif this == "(":
sre_parse.py(691):         elif this == "^":
sre_parse.py(694):         elif this == "$":
sre_parse.py(697):         elif this and this[0] == "\\":
sre_parse.py(698):             code = _escape(source, this, state)
 --- modulename: sre_parse, funcname: _escape
sre_parse.py(270):     code = CATEGORIES.get(escape)
sre_parse.py(271):     if code:
sre_parse.py(272):         return code
sre_parse.py(699):             subpatternappend(code)
 --- modulename: sre_parse, funcname: append
sre_parse.py(150):         self.data.append(code)
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(413):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(414):         if this is None:
sre_parse.py(417):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(428):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(431):         elif this == "[":
sre_parse.py(488):         elif this and this[0] in REPEAT_CHARS:
sre_parse.py(490):             if this == "?":
sre_parse.py(492):             elif this == "*":
sre_parse.py(495):             elif this == "+":
sre_parse.py(496):                 min, max = 1, MAXREPEAT
sre_parse.py(528):             if subpattern:
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(138):         return len(self.data)
sre_parse.py(529):                 item = subpattern[-1:]
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(138):         return len(self.data)
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(143):             return SubPattern(self.pattern, self.data[index])
 --- modulename: sre_parse, funcname: __init__
sre_parse.py(93):         self.pattern = pattern
sre_parse.py(94):         if data is None:
sre_parse.py(96):         self.data = data
sre_parse.py(97):         self.width = None
sre_parse.py(532):             if not item or (_len(item) == 1 and item[0][0] == AT):
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(138):         return len(self.data)
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(138):         return len(self.data)
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_parse.py(534):             if item[0][0] in REPEATCODES:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_parse.py(536):             if sourcematch("?"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(211):         return 0
sre_parse.py(539):                 subpattern[-1] = (MAX_REPEAT, (min, max, item))
 --- modulename: sre_parse, funcname: __setitem__
sre_parse.py(146):         self.data[index] = code
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(413):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(414):         if this is None:
sre_parse.py(417):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(428):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(429):             subpatternappend((LITERAL, ord(this)))
 --- modulename: sre_parse, funcname: append
sre_parse.py(150):         self.data.append(code)
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(413):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(414):         if this is None:
sre_parse.py(417):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(428):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(429):             subpatternappend((LITERAL, ord(this)))
 --- modulename: sre_parse, funcname: append
sre_parse.py(150):         self.data.append(code)
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(413):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(414):         if this is None:
sre_parse.py(417):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(428):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(429):             subpatternappend((LITERAL, ord(this)))
 --- modulename: sre_parse, funcname: append
sre_parse.py(150):         self.data.append(code)
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(413):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(199):             try:
sre_parse.py(200):                 c = self.string[self.index + 1]
sre_parse.py(203):             char = char + c
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(414):         if this is None:
sre_parse.py(417):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(428):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(429):             subpatternappend((LITERAL, ord(this)))
 --- modulename: sre_parse, funcname: append
sre_parse.py(150):         self.data.append(code)
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(413):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(414):         if this is None:
sre_parse.py(417):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(428):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(431):         elif this == "[":
sre_parse.py(488):         elif this and this[0] in REPEAT_CHARS:
sre_parse.py(541):         elif this == ".":
sre_parse.py(544):         elif this == "(":
sre_parse.py(691):         elif this == "^":
sre_parse.py(694):         elif this == "$":
sre_parse.py(697):         elif this and this[0] == "\\":
sre_parse.py(698):             code = _escape(source, this, state)
 --- modulename: sre_parse, funcname: _escape
sre_parse.py(270):     code = CATEGORIES.get(escape)
sre_parse.py(271):     if code:
sre_parse.py(273):     code = ESCAPES.get(escape)
sre_parse.py(274):     if code:
sre_parse.py(276):     try:
sre_parse.py(277):         c = escape[1:2]
sre_parse.py(278):         if c == "x":
sre_parse.py(285):         elif c == "0":
sre_parse.py(290):         elif c in DIGITS:
sre_parse.py(311):         if len(escape) == 2:
sre_parse.py(312):             return LITERAL, ord(escape[1])
sre_parse.py(699):             subpatternappend(code)
 --- modulename: sre_parse, funcname: append
sre_parse.py(150):         self.data.append(code)
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(412):             break # end of subpattern
sre_parse.py(704):     return subpattern
sre_parse.py(325):         if sourcematch("|"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(211):         return 0
sre_parse.py(327):         if not nested:
sre_parse.py(329):         if not source.next or sourcematch(")", 0):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(208):             if skip:
sre_parse.py(210):             return 1
sre_parse.py(330):             break
sre_parse.py(334):     if len(items) == 1:
sre_parse.py(335):         return items[0]
sre_parse.py(677):                 if not sourcematch(")"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(208):             if skip:
sre_parse.py(209):                 self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(210):             return 1
sre_parse.py(679):                 if group is not None:
sre_parse.py(681):                 subpatternappend((SUBPATTERN, (group, p)))
 --- modulename: sre_parse, funcname: append
sre_parse.py(150):         self.data.append(code)
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(413):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(414):         if this is None:
sre_parse.py(417):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(428):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(431):         elif this == "[":
sre_parse.py(488):         elif this and this[0] in REPEAT_CHARS:
sre_parse.py(490):             if this == "?":
sre_parse.py(491):                 min, max = 0, 1
sre_parse.py(528):             if subpattern:
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(138):         return len(self.data)
sre_parse.py(529):                 item = subpattern[-1:]
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(138):         return len(self.data)
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(143):             return SubPattern(self.pattern, self.data[index])
 --- modulename: sre_parse, funcname: __init__
sre_parse.py(93):         self.pattern = pattern
sre_parse.py(94):         if data is None:
sre_parse.py(96):         self.data = data
sre_parse.py(97):         self.width = None
sre_parse.py(532):             if not item or (_len(item) == 1 and item[0][0] == AT):
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(138):         return len(self.data)
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(138):         return len(self.data)
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_parse.py(534):             if item[0][0] in REPEATCODES:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_parse.py(536):             if sourcematch("?"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(211):         return 0
sre_parse.py(539):                 subpattern[-1] = (MAX_REPEAT, (min, max, item))
 --- modulename: sre_parse, funcname: __setitem__
sre_parse.py(146):         self.data[index] = code
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(412):             break # end of subpattern
sre_parse.py(704):     return subpattern
sre_parse.py(325):         if sourcematch("|"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(211):         return 0
sre_parse.py(327):         if not nested:
sre_parse.py(329):         if not source.next or sourcematch(")", 0):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(208):             if skip:
sre_parse.py(210):             return 1
sre_parse.py(330):             break
sre_parse.py(334):     if len(items) == 1:
sre_parse.py(335):         return items[0]
sre_parse.py(677):                 if not sourcematch(")"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(208):             if skip:
sre_parse.py(209):                 self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(199):             try:
sre_parse.py(200):                 c = self.string[self.index + 1]
sre_parse.py(203):             char = char + c
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(210):             return 1
sre_parse.py(679):                 if group is not None:
sre_parse.py(680):                     state.closegroup(group)
 --- modulename: sre_parse, funcname: closegroup
sre_parse.py(86):         self.open.remove(gid)
sre_parse.py(681):                 subpatternappend((SUBPATTERN, (group, p)))
 --- modulename: sre_parse, funcname: append
sre_parse.py(150):         self.data.append(code)
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(413):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(195):             self.next = None
sre_parse.py(196):             return
sre_parse.py(215):         return this
sre_parse.py(414):         if this is None:
sre_parse.py(417):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(428):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(431):         elif this == "[":
sre_parse.py(488):         elif this and this[0] in REPEAT_CHARS:
sre_parse.py(541):         elif this == ".":
sre_parse.py(544):         elif this == "(":
sre_parse.py(691):         elif this == "^":
sre_parse.py(694):         elif this == "$":
sre_parse.py(697):         elif this and this[0] == "\\":
sre_parse.py(698):             code = _escape(source, this, state)
 --- modulename: sre_parse, funcname: _escape
sre_parse.py(270):     code = CATEGORIES.get(escape)
sre_parse.py(271):     if code:
sre_parse.py(273):     code = ESCAPES.get(escape)
sre_parse.py(274):     if code:
sre_parse.py(276):     try:
sre_parse.py(277):         c = escape[1:2]
sre_parse.py(278):         if c == "x":
sre_parse.py(285):         elif c == "0":
sre_parse.py(290):         elif c in DIGITS:
sre_parse.py(311):         if len(escape) == 2:
sre_parse.py(312):             return LITERAL, ord(escape[1])
sre_parse.py(699):             subpatternappend(code)
 --- modulename: sre_parse, funcname: append
sre_parse.py(150):         self.data.append(code)
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(413):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(195):             self.next = None
sre_parse.py(196):             return
sre_parse.py(215):         return this
sre_parse.py(414):         if this is None:
sre_parse.py(415):             break # end of pattern
sre_parse.py(704):     return subpattern
sre_parse.py(325):         if sourcematch("|"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(211):         return 0
sre_parse.py(327):         if not nested:
sre_parse.py(328):             break
sre_parse.py(334):     if len(items) == 1:
sre_parse.py(335):         return items[0]
sre_parse.py(718):     tail = source.get()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(195):             self.next = None
sre_parse.py(196):             return
sre_parse.py(215):         return this
sre_parse.py(719):     if tail == ")":
sre_parse.py(721):     elif tail:
sre_parse.py(724):     if not (flags & SRE_FLAG_VERBOSE) and p.pattern.flags & SRE_FLAG_VERBOSE:
sre_parse.py(729):     if flags & SRE_FLAG_DEBUG:
sre_parse.py(732):     return p
sre_compile.py(576):     code = _code(p, flags)
 --- modulename: sre_compile, funcname: _code
sre_compile.py(554):     flags = p.pattern.flags | flags
sre_compile.py(555):     code = []
sre_compile.py(558):     _compile_info(code, p, flags)
 --- modulename: sre_compile, funcname: _compile_info
sre_compile.py(437):     lo, hi = pattern.getwidth()
 --- modulename: sre_parse, funcname: getwidth
sre_parse.py(153):         if self.width:
sre_parse.py(155):         lo = hi = 0
sre_parse.py(156):         UNITCODES = (ANY, RANGE, IN, LITERAL, NOT_LITERAL, CATEGORY)
sre_parse.py(157):         REPEATCODES = (MIN_REPEAT, MAX_REPEAT)
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(159):             if op is BRANCH:
sre_parse.py(168):             elif op is CALL:
sre_parse.py(172):             elif op is SUBPATTERN:
sre_parse.py(173):                 i, j = av[1].getwidth()
 --- modulename: sre_parse, funcname: getwidth
sre_parse.py(153):         if self.width:
sre_parse.py(155):         lo = hi = 0
sre_parse.py(156):         UNITCODES = (ANY, RANGE, IN, LITERAL, NOT_LITERAL, CATEGORY)
sre_parse.py(157):         REPEATCODES = (MIN_REPEAT, MAX_REPEAT)
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(159):             if op is BRANCH:
sre_parse.py(168):             elif op is CALL:
sre_parse.py(172):             elif op is SUBPATTERN:
sre_parse.py(176):             elif op in REPEATCODES:
sre_parse.py(177):                 i, j = av[2].getwidth()
 --- modulename: sre_parse, funcname: getwidth
sre_parse.py(153):         if self.width:
sre_parse.py(155):         lo = hi = 0
sre_parse.py(156):         UNITCODES = (ANY, RANGE, IN, LITERAL, NOT_LITERAL, CATEGORY)
sre_parse.py(157):         REPEATCODES = (MIN_REPEAT, MAX_REPEAT)
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(159):             if op is BRANCH:
sre_parse.py(168):             elif op is CALL:
sre_parse.py(172):             elif op is SUBPATTERN:
sre_parse.py(176):             elif op in REPEATCODES:
sre_parse.py(180):             elif op in UNITCODES:
sre_parse.py(181):                 lo = lo + 1
sre_parse.py(182):                 hi = hi + 1
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(185):         self.width = min(lo, MAXREPEAT - 1), min(hi, MAXREPEAT)
sre_parse.py(186):         return self.width
sre_parse.py(178):                 lo = lo + i * av[0]
sre_parse.py(179):                 hi = hi + j * av[1]
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(185):         self.width = min(lo, MAXREPEAT - 1), min(hi, MAXREPEAT)
sre_parse.py(186):         return self.width
sre_parse.py(174):                 lo = lo + i
sre_parse.py(175):                 hi = hi + j
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(159):             if op is BRANCH:
sre_parse.py(168):             elif op is CALL:
sre_parse.py(172):             elif op is SUBPATTERN:
sre_parse.py(176):             elif op in REPEATCODES:
sre_parse.py(177):                 i, j = av[2].getwidth()
 --- modulename: sre_parse, funcname: getwidth
sre_parse.py(153):         if self.width:
sre_parse.py(155):         lo = hi = 0
sre_parse.py(156):         UNITCODES = (ANY, RANGE, IN, LITERAL, NOT_LITERAL, CATEGORY)
sre_parse.py(157):         REPEATCODES = (MIN_REPEAT, MAX_REPEAT)
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(159):             if op is BRANCH:
sre_parse.py(168):             elif op is CALL:
sre_parse.py(172):             elif op is SUBPATTERN:
sre_parse.py(176):             elif op in REPEATCODES:
sre_parse.py(180):             elif op in UNITCODES:
sre_parse.py(181):                 lo = lo + 1
sre_parse.py(182):                 hi = hi + 1
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(185):         self.width = min(lo, MAXREPEAT - 1), min(hi, MAXREPEAT)
sre_parse.py(186):         return self.width
sre_parse.py(178):                 lo = lo + i * av[0]
sre_parse.py(179):                 hi = hi + j * av[1]
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(159):             if op is BRANCH:
sre_parse.py(168):             elif op is CALL:
sre_parse.py(172):             elif op is SUBPATTERN:
sre_parse.py(176):             elif op in REPEATCODES:
sre_parse.py(180):             elif op in UNITCODES:
sre_parse.py(181):                 lo = lo + 1
sre_parse.py(182):                 hi = hi + 1
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(159):             if op is BRANCH:
sre_parse.py(168):             elif op is CALL:
sre_parse.py(172):             elif op is SUBPATTERN:
sre_parse.py(176):             elif op in REPEATCODES:
sre_parse.py(180):             elif op in UNITCODES:
sre_parse.py(181):                 lo = lo + 1
sre_parse.py(182):                 hi = hi + 1
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(159):             if op is BRANCH:
sre_parse.py(168):             elif op is CALL:
sre_parse.py(172):             elif op is SUBPATTERN:
sre_parse.py(176):             elif op in REPEATCODES:
sre_parse.py(180):             elif op in UNITCODES:
sre_parse.py(181):                 lo = lo + 1
sre_parse.py(182):                 hi = hi + 1
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(159):             if op is BRANCH:
sre_parse.py(168):             elif op is CALL:
sre_parse.py(172):             elif op is SUBPATTERN:
sre_parse.py(176):             elif op in REPEATCODES:
sre_parse.py(180):             elif op in UNITCODES:
sre_parse.py(181):                 lo = lo + 1
sre_parse.py(182):                 hi = hi + 1
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(159):             if op is BRANCH:
sre_parse.py(168):             elif op is CALL:
sre_parse.py(172):             elif op is SUBPATTERN:
sre_parse.py(176):             elif op in REPEATCODES:
sre_parse.py(180):             elif op in UNITCODES:
sre_parse.py(181):                 lo = lo + 1
sre_parse.py(182):                 hi = hi + 1
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(159):             if op is BRANCH:
sre_parse.py(168):             elif op is CALL:
sre_parse.py(172):             elif op is SUBPATTERN:
sre_parse.py(176):             elif op in REPEATCODES:
sre_parse.py(180):             elif op in UNITCODES:
sre_parse.py(181):                 lo = lo + 1
sre_parse.py(182):                 hi = hi + 1
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(159):             if op is BRANCH:
sre_parse.py(168):             elif op is CALL:
sre_parse.py(172):             elif op is SUBPATTERN:
sre_parse.py(176):             elif op in REPEATCODES:
sre_parse.py(180):             elif op in UNITCODES:
sre_parse.py(181):                 lo = lo + 1
sre_parse.py(182):                 hi = hi + 1
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(159):             if op is BRANCH:
sre_parse.py(168):             elif op is CALL:
sre_parse.py(172):             elif op is SUBPATTERN:
sre_parse.py(176):             elif op in REPEATCODES:
sre_parse.py(180):             elif op in UNITCODES:
sre_parse.py(181):                 lo = lo + 1
sre_parse.py(182):                 hi = hi + 1
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(159):             if op is BRANCH:
sre_parse.py(168):             elif op is CALL:
sre_parse.py(172):             elif op is SUBPATTERN:
sre_parse.py(176):             elif op in REPEATCODES:
sre_parse.py(180):             elif op in UNITCODES:
sre_parse.py(181):                 lo = lo + 1
sre_parse.py(182):                 hi = hi + 1
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(159):             if op is BRANCH:
sre_parse.py(168):             elif op is CALL:
sre_parse.py(172):             elif op is SUBPATTERN:
sre_parse.py(176):             elif op in REPEATCODES:
sre_parse.py(180):             elif op in UNITCODES:
sre_parse.py(181):                 lo = lo + 1
sre_parse.py(182):                 hi = hi + 1
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(159):             if op is BRANCH:
sre_parse.py(168):             elif op is CALL:
sre_parse.py(172):             elif op is SUBPATTERN:
sre_parse.py(176):             elif op in REPEATCODES:
sre_parse.py(180):             elif op in UNITCODES:
sre_parse.py(181):                 lo = lo + 1
sre_parse.py(182):                 hi = hi + 1
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(159):             if op is BRANCH:
sre_parse.py(168):             elif op is CALL:
sre_parse.py(172):             elif op is SUBPATTERN:
sre_parse.py(176):             elif op in REPEATCODES:
sre_parse.py(177):                 i, j = av[2].getwidth()
 --- modulename: sre_parse, funcname: getwidth
sre_parse.py(153):         if self.width:
sre_parse.py(155):         lo = hi = 0
sre_parse.py(156):         UNITCODES = (ANY, RANGE, IN, LITERAL, NOT_LITERAL, CATEGORY)
sre_parse.py(157):         REPEATCODES = (MIN_REPEAT, MAX_REPEAT)
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(159):             if op is BRANCH:
sre_parse.py(168):             elif op is CALL:
sre_parse.py(172):             elif op is SUBPATTERN:
sre_parse.py(176):             elif op in REPEATCODES:
sre_parse.py(180):             elif op in UNITCODES:
sre_parse.py(181):                 lo = lo + 1
sre_parse.py(182):                 hi = hi + 1
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(185):         self.width = min(lo, MAXREPEAT - 1), min(hi, MAXREPEAT)
sre_parse.py(186):         return self.width
sre_parse.py(178):                 lo = lo + i * av[0]
sre_parse.py(179):                 hi = hi + j * av[1]
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(159):             if op is BRANCH:
sre_parse.py(168):             elif op is CALL:
sre_parse.py(172):             elif op is SUBPATTERN:
sre_parse.py(176):             elif op in REPEATCODES:
sre_parse.py(177):                 i, j = av[2].getwidth()
 --- modulename: sre_parse, funcname: getwidth
sre_parse.py(153):         if self.width:
sre_parse.py(155):         lo = hi = 0
sre_parse.py(156):         UNITCODES = (ANY, RANGE, IN, LITERAL, NOT_LITERAL, CATEGORY)
sre_parse.py(157):         REPEATCODES = (MIN_REPEAT, MAX_REPEAT)
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(159):             if op is BRANCH:
sre_parse.py(168):             elif op is CALL:
sre_parse.py(172):             elif op is SUBPATTERN:
sre_parse.py(176):             elif op in REPEATCODES:
sre_parse.py(180):             elif op in UNITCODES:
sre_parse.py(181):                 lo = lo + 1
sre_parse.py(182):                 hi = hi + 1
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(185):         self.width = min(lo, MAXREPEAT - 1), min(hi, MAXREPEAT)
sre_parse.py(186):         return self.width
sre_parse.py(178):                 lo = lo + i * av[0]
sre_parse.py(179):                 hi = hi + j * av[1]
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(159):             if op is BRANCH:
sre_parse.py(168):             elif op is CALL:
sre_parse.py(172):             elif op is SUBPATTERN:
sre_parse.py(176):             elif op in REPEATCODES:
sre_parse.py(177):                 i, j = av[2].getwidth()
 --- modulename: sre_parse, funcname: getwidth
sre_parse.py(153):         if self.width:
sre_parse.py(155):         lo = hi = 0
sre_parse.py(156):         UNITCODES = (ANY, RANGE, IN, LITERAL, NOT_LITERAL, CATEGORY)
sre_parse.py(157):         REPEATCODES = (MIN_REPEAT, MAX_REPEAT)
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(159):             if op is BRANCH:
sre_parse.py(168):             elif op is CALL:
sre_parse.py(172):             elif op is SUBPATTERN:
sre_parse.py(176):             elif op in REPEATCODES:
sre_parse.py(180):             elif op in UNITCODES:
sre_parse.py(181):                 lo = lo + 1
sre_parse.py(182):                 hi = hi + 1
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(185):         self.width = min(lo, MAXREPEAT - 1), min(hi, MAXREPEAT)
sre_parse.py(186):         return self.width
sre_parse.py(178):                 lo = lo + i * av[0]
sre_parse.py(179):                 hi = hi + j * av[1]
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(159):             if op is BRANCH:
sre_parse.py(168):             elif op is CALL:
sre_parse.py(172):             elif op is SUBPATTERN:
sre_parse.py(176):             elif op in REPEATCODES:
sre_parse.py(180):             elif op in UNITCODES:
sre_parse.py(181):                 lo = lo + 1
sre_parse.py(182):                 hi = hi + 1
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(159):             if op is BRANCH:
sre_parse.py(168):             elif op is CALL:
sre_parse.py(172):             elif op is SUBPATTERN:
sre_parse.py(173):                 i, j = av[1].getwidth()
 --- modulename: sre_parse, funcname: getwidth
sre_parse.py(153):         if self.width:
sre_parse.py(155):         lo = hi = 0
sre_parse.py(156):         UNITCODES = (ANY, RANGE, IN, LITERAL, NOT_LITERAL, CATEGORY)
sre_parse.py(157):         REPEATCODES = (MIN_REPEAT, MAX_REPEAT)
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(159):             if op is BRANCH:
sre_parse.py(168):             elif op is CALL:
sre_parse.py(172):             elif op is SUBPATTERN:
sre_parse.py(176):             elif op in REPEATCODES:
sre_parse.py(177):                 i, j = av[2].getwidth()
 --- modulename: sre_parse, funcname: getwidth
sre_parse.py(153):         if self.width:
sre_parse.py(155):         lo = hi = 0
sre_parse.py(156):         UNITCODES = (ANY, RANGE, IN, LITERAL, NOT_LITERAL, CATEGORY)
sre_parse.py(157):         REPEATCODES = (MIN_REPEAT, MAX_REPEAT)
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(159):             if op is BRANCH:
sre_parse.py(168):             elif op is CALL:
sre_parse.py(172):             elif op is SUBPATTERN:
sre_parse.py(176):             elif op in REPEATCODES:
sre_parse.py(180):             elif op in UNITCODES:
sre_parse.py(181):                 lo = lo + 1
sre_parse.py(182):                 hi = hi + 1
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(185):         self.width = min(lo, MAXREPEAT - 1), min(hi, MAXREPEAT)
sre_parse.py(186):         return self.width
sre_parse.py(178):                 lo = lo + i * av[0]
sre_parse.py(179):                 hi = hi + j * av[1]
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(185):         self.width = min(lo, MAXREPEAT - 1), min(hi, MAXREPEAT)
sre_parse.py(186):         return self.width
sre_parse.py(174):                 lo = lo + i
sre_parse.py(175):                 hi = hi + j
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(159):             if op is BRANCH:
sre_parse.py(168):             elif op is CALL:
sre_parse.py(172):             elif op is SUBPATTERN:
sre_parse.py(176):             elif op in REPEATCODES:
sre_parse.py(180):             elif op in UNITCODES:
sre_parse.py(181):                 lo = lo + 1
sre_parse.py(182):                 hi = hi + 1
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(159):             if op is BRANCH:
sre_parse.py(168):             elif op is CALL:
sre_parse.py(172):             elif op is SUBPATTERN:
sre_parse.py(176):             elif op in REPEATCODES:
sre_parse.py(180):             elif op in UNITCODES:
sre_parse.py(181):                 lo = lo + 1
sre_parse.py(182):                 hi = hi + 1
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(159):             if op is BRANCH:
sre_parse.py(168):             elif op is CALL:
sre_parse.py(172):             elif op is SUBPATTERN:
sre_parse.py(176):             elif op in REPEATCODES:
sre_parse.py(180):             elif op in UNITCODES:
sre_parse.py(181):                 lo = lo + 1
sre_parse.py(182):                 hi = hi + 1
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(159):             if op is BRANCH:
sre_parse.py(168):             elif op is CALL:
sre_parse.py(172):             elif op is SUBPATTERN:
sre_parse.py(176):             elif op in REPEATCODES:
sre_parse.py(180):             elif op in UNITCODES:
sre_parse.py(181):                 lo = lo + 1
sre_parse.py(182):                 hi = hi + 1
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(159):             if op is BRANCH:
sre_parse.py(168):             elif op is CALL:
sre_parse.py(172):             elif op is SUBPATTERN:
sre_parse.py(176):             elif op in REPEATCODES:
sre_parse.py(180):             elif op in UNITCODES:
sre_parse.py(181):                 lo = lo + 1
sre_parse.py(182):                 hi = hi + 1
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(159):             if op is BRANCH:
sre_parse.py(168):             elif op is CALL:
sre_parse.py(172):             elif op is SUBPATTERN:
sre_parse.py(173):                 i, j = av[1].getwidth()
 --- modulename: sre_parse, funcname: getwidth
sre_parse.py(153):         if self.width:
sre_parse.py(155):         lo = hi = 0
sre_parse.py(156):         UNITCODES = (ANY, RANGE, IN, LITERAL, NOT_LITERAL, CATEGORY)
sre_parse.py(157):         REPEATCODES = (MIN_REPEAT, MAX_REPEAT)
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(159):             if op is BRANCH:
sre_parse.py(168):             elif op is CALL:
sre_parse.py(172):             elif op is SUBPATTERN:
sre_parse.py(176):             elif op in REPEATCODES:
sre_parse.py(177):                 i, j = av[2].getwidth()
 --- modulename: sre_parse, funcname: getwidth
sre_parse.py(153):         if self.width:
sre_parse.py(155):         lo = hi = 0
sre_parse.py(156):         UNITCODES = (ANY, RANGE, IN, LITERAL, NOT_LITERAL, CATEGORY)
sre_parse.py(157):         REPEATCODES = (MIN_REPEAT, MAX_REPEAT)
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(159):             if op is BRANCH:
sre_parse.py(168):             elif op is CALL:
sre_parse.py(172):             elif op is SUBPATTERN:
sre_parse.py(176):             elif op in REPEATCODES:
sre_parse.py(180):             elif op in UNITCODES:
sre_parse.py(181):                 lo = lo + 1
sre_parse.py(182):                 hi = hi + 1
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(185):         self.width = min(lo, MAXREPEAT - 1), min(hi, MAXREPEAT)
sre_parse.py(186):         return self.width
sre_parse.py(178):                 lo = lo + i * av[0]
sre_parse.py(179):                 hi = hi + j * av[1]
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(159):             if op is BRANCH:
sre_parse.py(168):             elif op is CALL:
sre_parse.py(172):             elif op is SUBPATTERN:
sre_parse.py(176):             elif op in REPEATCODES:
sre_parse.py(180):             elif op in UNITCODES:
sre_parse.py(181):                 lo = lo + 1
sre_parse.py(182):                 hi = hi + 1
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(159):             if op is BRANCH:
sre_parse.py(168):             elif op is CALL:
sre_parse.py(172):             elif op is SUBPATTERN:
sre_parse.py(176):             elif op in REPEATCODES:
sre_parse.py(177):                 i, j = av[2].getwidth()
 --- modulename: sre_parse, funcname: getwidth
sre_parse.py(153):         if self.width:
sre_parse.py(155):         lo = hi = 0
sre_parse.py(156):         UNITCODES = (ANY, RANGE, IN, LITERAL, NOT_LITERAL, CATEGORY)
sre_parse.py(157):         REPEATCODES = (MIN_REPEAT, MAX_REPEAT)
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(159):             if op is BRANCH:
sre_parse.py(168):             elif op is CALL:
sre_parse.py(172):             elif op is SUBPATTERN:
sre_parse.py(176):             elif op in REPEATCODES:
sre_parse.py(180):             elif op in UNITCODES:
sre_parse.py(181):                 lo = lo + 1
sre_parse.py(182):                 hi = hi + 1
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(185):         self.width = min(lo, MAXREPEAT - 1), min(hi, MAXREPEAT)
sre_parse.py(186):         return self.width
sre_parse.py(178):                 lo = lo + i * av[0]
sre_parse.py(179):                 hi = hi + j * av[1]
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(159):             if op is BRANCH:
sre_parse.py(168):             elif op is CALL:
sre_parse.py(172):             elif op is SUBPATTERN:
sre_parse.py(176):             elif op in REPEATCODES:
sre_parse.py(177):                 i, j = av[2].getwidth()
 --- modulename: sre_parse, funcname: getwidth
sre_parse.py(153):         if self.width:
sre_parse.py(155):         lo = hi = 0
sre_parse.py(156):         UNITCODES = (ANY, RANGE, IN, LITERAL, NOT_LITERAL, CATEGORY)
sre_parse.py(157):         REPEATCODES = (MIN_REPEAT, MAX_REPEAT)
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(159):             if op is BRANCH:
sre_parse.py(168):             elif op is CALL:
sre_parse.py(172):             elif op is SUBPATTERN:
sre_parse.py(173):                 i, j = av[1].getwidth()
 --- modulename: sre_parse, funcname: getwidth
sre_parse.py(153):         if self.width:
sre_parse.py(155):         lo = hi = 0
sre_parse.py(156):         UNITCODES = (ANY, RANGE, IN, LITERAL, NOT_LITERAL, CATEGORY)
sre_parse.py(157):         REPEATCODES = (MIN_REPEAT, MAX_REPEAT)
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(159):             if op is BRANCH:
sre_parse.py(168):             elif op is CALL:
sre_parse.py(172):             elif op is SUBPATTERN:
sre_parse.py(176):             elif op in REPEATCODES:
sre_parse.py(180):             elif op in UNITCODES:
sre_parse.py(181):                 lo = lo + 1
sre_parse.py(182):                 hi = hi + 1
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(159):             if op is BRANCH:
sre_parse.py(168):             elif op is CALL:
sre_parse.py(172):             elif op is SUBPATTERN:
sre_parse.py(176):             elif op in REPEATCODES:
sre_parse.py(180):             elif op in UNITCODES:
sre_parse.py(181):                 lo = lo + 1
sre_parse.py(182):                 hi = hi + 1
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(159):             if op is BRANCH:
sre_parse.py(168):             elif op is CALL:
sre_parse.py(172):             elif op is SUBPATTERN:
sre_parse.py(176):             elif op in REPEATCODES:
sre_parse.py(177):                 i, j = av[2].getwidth()
 --- modulename: sre_parse, funcname: getwidth
sre_parse.py(153):         if self.width:
sre_parse.py(155):         lo = hi = 0
sre_parse.py(156):         UNITCODES = (ANY, RANGE, IN, LITERAL, NOT_LITERAL, CATEGORY)
sre_parse.py(157):         REPEATCODES = (MIN_REPEAT, MAX_REPEAT)
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(159):             if op is BRANCH:
sre_parse.py(168):             elif op is CALL:
sre_parse.py(172):             elif op is SUBPATTERN:
sre_parse.py(176):             elif op in REPEATCODES:
sre_parse.py(180):             elif op in UNITCODES:
sre_parse.py(181):                 lo = lo + 1
sre_parse.py(182):                 hi = hi + 1
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(185):         self.width = min(lo, MAXREPEAT - 1), min(hi, MAXREPEAT)
sre_parse.py(186):         return self.width
sre_parse.py(178):                 lo = lo + i * av[0]
sre_parse.py(179):                 hi = hi + j * av[1]
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(159):             if op is BRANCH:
sre_parse.py(168):             elif op is CALL:
sre_parse.py(172):             elif op is SUBPATTERN:
sre_parse.py(176):             elif op in REPEATCODES:
sre_parse.py(180):             elif op in UNITCODES:
sre_parse.py(181):                 lo = lo + 1
sre_parse.py(182):                 hi = hi + 1
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(159):             if op is BRANCH:
sre_parse.py(168):             elif op is CALL:
sre_parse.py(172):             elif op is SUBPATTERN:
sre_parse.py(176):             elif op in REPEATCODES:
sre_parse.py(180):             elif op in UNITCODES:
sre_parse.py(181):                 lo = lo + 1
sre_parse.py(182):                 hi = hi + 1
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(159):             if op is BRANCH:
sre_parse.py(168):             elif op is CALL:
sre_parse.py(172):             elif op is SUBPATTERN:
sre_parse.py(176):             elif op in REPEATCODES:
sre_parse.py(180):             elif op in UNITCODES:
sre_parse.py(181):                 lo = lo + 1
sre_parse.py(182):                 hi = hi + 1
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(159):             if op is BRANCH:
sre_parse.py(168):             elif op is CALL:
sre_parse.py(172):             elif op is SUBPATTERN:
sre_parse.py(176):             elif op in REPEATCODES:
sre_parse.py(180):             elif op in UNITCODES:
sre_parse.py(181):                 lo = lo + 1
sre_parse.py(182):                 hi = hi + 1
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(159):             if op is BRANCH:
sre_parse.py(168):             elif op is CALL:
sre_parse.py(172):             elif op is SUBPATTERN:
sre_parse.py(176):             elif op in REPEATCODES:
sre_parse.py(180):             elif op in UNITCODES:
sre_parse.py(181):                 lo = lo + 1
sre_parse.py(182):                 hi = hi + 1
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(185):         self.width = min(lo, MAXREPEAT - 1), min(hi, MAXREPEAT)
sre_parse.py(186):         return self.width
sre_parse.py(174):                 lo = lo + i
sre_parse.py(175):                 hi = hi + j
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(185):         self.width = min(lo, MAXREPEAT - 1), min(hi, MAXREPEAT)
sre_parse.py(186):         return self.width
sre_parse.py(178):                 lo = lo + i * av[0]
sre_parse.py(179):                 hi = hi + j * av[1]
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(185):         self.width = min(lo, MAXREPEAT - 1), min(hi, MAXREPEAT)
sre_parse.py(186):         return self.width
sre_parse.py(174):                 lo = lo + i
sre_parse.py(175):                 hi = hi + j
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(159):             if op is BRANCH:
sre_parse.py(168):             elif op is CALL:
sre_parse.py(172):             elif op is SUBPATTERN:
sre_parse.py(176):             elif op in REPEATCODES:
sre_parse.py(180):             elif op in UNITCODES:
sre_parse.py(181):                 lo = lo + 1
sre_parse.py(182):                 hi = hi + 1
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(185):         self.width = min(lo, MAXREPEAT - 1), min(hi, MAXREPEAT)
sre_parse.py(186):         return self.width
sre_compile.py(438):     if lo == 0:
sre_compile.py(441):     prefix = []
sre_compile.py(442):     prefixappend = prefix.append
sre_compile.py(443):     prefix_skip = 0
sre_compile.py(444):     charset = [] # not used
sre_compile.py(445):     charsetappend = charset.append
sre_compile.py(446):     if not (flags & SRE_FLAG_IGNORECASE):
sre_compile.py(448):         for op, av in pattern.data:
sre_compile.py(449):             if op is LITERAL:
sre_compile.py(453):             elif op is SUBPATTERN and len(av[1]) == 1:
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(138):         return len(self.data)
sre_compile.py(454):                 op, av = av[1][0]
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(455):                 if op is LITERAL:
sre_compile.py(458):                     break
sre_compile.py(462):         if not prefix and pattern.data:
sre_compile.py(463):             op, av = pattern.data[0]
sre_compile.py(464):             if op is SUBPATTERN and av[1]:
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(138):         return len(self.data)
sre_compile.py(465):                 op, av = av[1][0]
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(466):                 if op is LITERAL:
sre_compile.py(468):                 elif op is BRANCH:
sre_compile.py(501):     emit = code.append
sre_compile.py(502):     emit(OPCODES[INFO])
sre_compile.py(503):     skip = len(code); emit(0)
sre_compile.py(505):     mask = 0
sre_compile.py(506):     if prefix:
sre_compile.py(510):     elif charset:
sre_compile.py(512):     emit(mask)
sre_compile.py(514):     if lo < MAXCODE:
sre_compile.py(515):         emit(lo)
sre_compile.py(519):     if hi < MAXCODE:
sre_compile.py(520):         emit(hi)
sre_compile.py(524):     if prefix:
sre_compile.py(535):     elif charset:
sre_compile.py(537):     code[skip] = len(code) - skip
sre_compile.py(561):     _compile(code, p.data, flags)
 --- modulename: sre_compile, funcname: _compile
sre_compile.py(66):     emit = code.append
sre_compile.py(67):     _len = len
sre_compile.py(68):     LITERAL_CODES = _LITERAL_CODES
sre_compile.py(69):     REPEATING_CODES = _REPEATING_CODES
sre_compile.py(70):     SUCCESS_CODES = _SUCCESS_CODES
sre_compile.py(71):     ASSERT_CODES = _ASSERT_CODES
sre_compile.py(72):     if (flags & SRE_FLAG_IGNORECASE and
sre_compile.py(77):         fixes = None
sre_compile.py(78):     for op, av in pattern:
sre_compile.py(79):         if op in LITERAL_CODES:
sre_compile.py(98):         elif op is IN:
sre_compile.py(109):         elif op is ANY:
sre_compile.py(114):         elif op in REPEATING_CODES:
sre_compile.py(146):         elif op is SUBPATTERN:
sre_compile.py(147):             if av[0]:
sre_compile.py(148):                 emit(OPCODES[MARK])
sre_compile.py(149):                 emit((av[0]-1)*2)
sre_compile.py(151):             _compile(code, av[1], flags)
 --- modulename: sre_compile, funcname: _compile
sre_compile.py(66):     emit = code.append
sre_compile.py(67):     _len = len
sre_compile.py(68):     LITERAL_CODES = _LITERAL_CODES
sre_compile.py(69):     REPEATING_CODES = _REPEATING_CODES
sre_compile.py(70):     SUCCESS_CODES = _SUCCESS_CODES
sre_compile.py(71):     ASSERT_CODES = _ASSERT_CODES
sre_compile.py(72):     if (flags & SRE_FLAG_IGNORECASE and
sre_compile.py(77):         fixes = None
sre_compile.py(78):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(79):         if op in LITERAL_CODES:
sre_compile.py(98):         elif op is IN:
sre_compile.py(109):         elif op is ANY:
sre_compile.py(114):         elif op in REPEATING_CODES:
sre_compile.py(115):             if flags & SRE_FLAG_TEMPLATE:
sre_compile.py(124):             elif _simple(av) and op is not REPEAT:
 --- modulename: sre_compile, funcname: _simple
sre_compile.py(430):     lo, hi = av[2].getwidth()
 --- modulename: sre_parse, funcname: getwidth
sre_parse.py(153):         if self.width:
sre_parse.py(154):             return self.width
sre_compile.py(431):     return lo == hi == 1 and av[2][0][0] != SUBPATTERN
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(125):                 if op is MAX_REPEAT:
sre_compile.py(126):                     emit(OPCODES[REPEAT_ONE])
sre_compile.py(129):                 skip = _len(code); emit(0)
sre_compile.py(130):                 emit(av[0])
sre_compile.py(131):                 emit(av[1])
sre_compile.py(132):                 _compile(code, av[2], flags)
 --- modulename: sre_compile, funcname: _compile
sre_compile.py(66):     emit = code.append
sre_compile.py(67):     _len = len
sre_compile.py(68):     LITERAL_CODES = _LITERAL_CODES
sre_compile.py(69):     REPEATING_CODES = _REPEATING_CODES
sre_compile.py(70):     SUCCESS_CODES = _SUCCESS_CODES
sre_compile.py(71):     ASSERT_CODES = _ASSERT_CODES
sre_compile.py(72):     if (flags & SRE_FLAG_IGNORECASE and
sre_compile.py(77):         fixes = None
sre_compile.py(78):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(79):         if op in LITERAL_CODES:
sre_compile.py(98):         elif op is IN:
sre_compile.py(99):             if flags & SRE_FLAG_IGNORECASE:
sre_compile.py(104):                 emit(OPCODES[op])
sre_compile.py(105):                 fixup = None
sre_compile.py(106):             skip = _len(code); emit(0)
sre_compile.py(107):             _compile_charset(av, flags, code, fixup, fixes)
 --- modulename: sre_compile, funcname: _compile_charset
sre_compile.py(230):     emit = code.append
sre_compile.py(231):     for op, av in _optimize_charset(charset, fixup, fixes,
sre_compile.py(232):                                     flags & SRE_FLAG_UNICODE):
 --- modulename: sre_compile, funcname: _optimize_charset
sre_compile.py(258):     out = []
sre_compile.py(259):     tail = []
sre_compile.py(260):     charmap = bytearray(256)
sre_compile.py(261):     for op, av in charset:
sre_compile.py(262):         while True:
sre_compile.py(263):             try:
sre_compile.py(264):                 if op is LITERAL:
sre_compile.py(273):                 elif op is RANGE:
sre_compile.py(286):                 elif op is NEGATE:
sre_compile.py(289):                     tail.append((op, av))
sre_compile.py(310):             break
sre_compile.py(261):     for op, av in charset:
sre_compile.py(262):         while True:
sre_compile.py(263):             try:
sre_compile.py(264):                 if op is LITERAL:
sre_compile.py(265):                     if fixup:
sre_compile.py(272):                         charmap[av] = 1
sre_compile.py(310):             break
sre_compile.py(261):     for op, av in charset:
sre_compile.py(313):     runs = []
sre_compile.py(314):     q = 0
sre_compile.py(315):     while True:
sre_compile.py(316):         p = charmap.find(b'\1', q)
sre_compile.py(317):         if p < 0:
sre_compile.py(319):         if len(runs) >= 2:
sre_compile.py(322):         q = charmap.find(b'\0', p)
sre_compile.py(323):         if q < 0:
sre_compile.py(326):         runs.append((p, q))
sre_compile.py(315):     while True:
sre_compile.py(316):         p = charmap.find(b'\1', q)
sre_compile.py(317):         if p < 0:
sre_compile.py(318):             break
sre_compile.py(327):     if runs is not None:
sre_compile.py(329):         for p, q in runs:
sre_compile.py(330):             if q - p == 1:
sre_compile.py(331):                 out.append((LITERAL, p))
sre_compile.py(329):         for p, q in runs:
sre_compile.py(334):         out += tail
sre_compile.py(336):         if fixup or len(out) < len(charset):
sre_compile.py(339):         return charset
sre_compile.py(233):         emit(OPCODES[op])
sre_compile.py(234):         if op is NEGATE:
sre_compile.py(236):         elif op is LITERAL:
sre_compile.py(238):         elif op is RANGE:
sre_compile.py(241):         elif op is CHARSET:
sre_compile.py(243):         elif op is BIGCHARSET:
sre_compile.py(245):         elif op is CATEGORY:
sre_compile.py(246):             if flags & SRE_FLAG_LOCALE:
sre_compile.py(248):             elif flags & SRE_FLAG_UNICODE:
sre_compile.py(251):                 emit(CHCODES[av])
sre_compile.py(232):                                     flags & SRE_FLAG_UNICODE):
sre_compile.py(233):         emit(OPCODES[op])
sre_compile.py(234):         if op is NEGATE:
sre_compile.py(236):         elif op is LITERAL:
sre_compile.py(237):             emit(av)
sre_compile.py(232):                                     flags & SRE_FLAG_UNICODE):
sre_compile.py(254):     emit(OPCODES[FAILURE])
sre_compile.py(108):             code[skip] = _len(code) - skip
sre_compile.py(78):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(133):                 emit(OPCODES[SUCCESS])
sre_compile.py(134):                 code[skip] = _len(code) - skip
sre_compile.py(78):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(152):             if av[0]:
sre_compile.py(153):                 emit(OPCODES[MARK])
sre_compile.py(154):                 emit((av[0]-1)*2+1)
sre_compile.py(78):     for op, av in pattern:
sre_compile.py(79):         if op in LITERAL_CODES:
sre_compile.py(98):         elif op is IN:
sre_compile.py(109):         elif op is ANY:
sre_compile.py(114):         elif op in REPEATING_CODES:
sre_compile.py(115):             if flags & SRE_FLAG_TEMPLATE:
sre_compile.py(124):             elif _simple(av) and op is not REPEAT:
 --- modulename: sre_compile, funcname: _simple
sre_compile.py(430):     lo, hi = av[2].getwidth()
 --- modulename: sre_parse, funcname: getwidth
sre_parse.py(153):         if self.width:
sre_parse.py(154):             return self.width
sre_compile.py(431):     return lo == hi == 1 and av[2][0][0] != SUBPATTERN
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(125):                 if op is MAX_REPEAT:
sre_compile.py(126):                     emit(OPCODES[REPEAT_ONE])
sre_compile.py(129):                 skip = _len(code); emit(0)
sre_compile.py(130):                 emit(av[0])
sre_compile.py(131):                 emit(av[1])
sre_compile.py(132):                 _compile(code, av[2], flags)
 --- modulename: sre_compile, funcname: _compile
sre_compile.py(66):     emit = code.append
sre_compile.py(67):     _len = len
sre_compile.py(68):     LITERAL_CODES = _LITERAL_CODES
sre_compile.py(69):     REPEATING_CODES = _REPEATING_CODES
sre_compile.py(70):     SUCCESS_CODES = _SUCCESS_CODES
sre_compile.py(71):     ASSERT_CODES = _ASSERT_CODES
sre_compile.py(72):     if (flags & SRE_FLAG_IGNORECASE and
sre_compile.py(77):         fixes = None
sre_compile.py(78):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(79):         if op in LITERAL_CODES:
sre_compile.py(98):         elif op is IN:
sre_compile.py(99):             if flags & SRE_FLAG_IGNORECASE:
sre_compile.py(104):                 emit(OPCODES[op])
sre_compile.py(105):                 fixup = None
sre_compile.py(106):             skip = _len(code); emit(0)
sre_compile.py(107):             _compile_charset(av, flags, code, fixup, fixes)
 --- modulename: sre_compile, funcname: _compile_charset
sre_compile.py(230):     emit = code.append
sre_compile.py(231):     for op, av in _optimize_charset(charset, fixup, fixes,
sre_compile.py(232):                                     flags & SRE_FLAG_UNICODE):
 --- modulename: sre_compile, funcname: _optimize_charset
sre_compile.py(258):     out = []
sre_compile.py(259):     tail = []
sre_compile.py(260):     charmap = bytearray(256)
sre_compile.py(261):     for op, av in charset:
sre_compile.py(262):         while True:
sre_compile.py(263):             try:
sre_compile.py(264):                 if op is LITERAL:
sre_compile.py(273):                 elif op is RANGE:
sre_compile.py(286):                 elif op is NEGATE:
sre_compile.py(289):                     tail.append((op, av))
sre_compile.py(310):             break
sre_compile.py(261):     for op, av in charset:
sre_compile.py(313):     runs = []
sre_compile.py(314):     q = 0
sre_compile.py(315):     while True:
sre_compile.py(316):         p = charmap.find(b'\1', q)
sre_compile.py(317):         if p < 0:
sre_compile.py(318):             break
sre_compile.py(327):     if runs is not None:
sre_compile.py(329):         for p, q in runs:
sre_compile.py(334):         out += tail
sre_compile.py(336):         if fixup or len(out) < len(charset):
sre_compile.py(339):         return charset
sre_compile.py(233):         emit(OPCODES[op])
sre_compile.py(234):         if op is NEGATE:
sre_compile.py(236):         elif op is LITERAL:
sre_compile.py(238):         elif op is RANGE:
sre_compile.py(241):         elif op is CHARSET:
sre_compile.py(243):         elif op is BIGCHARSET:
sre_compile.py(245):         elif op is CATEGORY:
sre_compile.py(246):             if flags & SRE_FLAG_LOCALE:
sre_compile.py(248):             elif flags & SRE_FLAG_UNICODE:
sre_compile.py(251):                 emit(CHCODES[av])
sre_compile.py(232):                                     flags & SRE_FLAG_UNICODE):
sre_compile.py(254):     emit(OPCODES[FAILURE])
sre_compile.py(108):             code[skip] = _len(code) - skip
sre_compile.py(78):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(133):                 emit(OPCODES[SUCCESS])
sre_compile.py(134):                 code[skip] = _len(code) - skip
sre_compile.py(78):     for op, av in pattern:
sre_compile.py(79):         if op in LITERAL_CODES:
sre_compile.py(80):             if flags & SRE_FLAG_IGNORECASE:
sre_compile.py(96):                 emit(OPCODES[op])
sre_compile.py(97):                 emit(av)
sre_compile.py(78):     for op, av in pattern:
sre_compile.py(79):         if op in LITERAL_CODES:
sre_compile.py(80):             if flags & SRE_FLAG_IGNORECASE:
sre_compile.py(96):                 emit(OPCODES[op])
sre_compile.py(97):                 emit(av)
sre_compile.py(78):     for op, av in pattern:
sre_compile.py(79):         if op in LITERAL_CODES:
sre_compile.py(80):             if flags & SRE_FLAG_IGNORECASE:
sre_compile.py(96):                 emit(OPCODES[op])
sre_compile.py(97):                 emit(av)
sre_compile.py(78):     for op, av in pattern:
sre_compile.py(79):         if op in LITERAL_CODES:
sre_compile.py(80):             if flags & SRE_FLAG_IGNORECASE:
sre_compile.py(96):                 emit(OPCODES[op])
sre_compile.py(97):                 emit(av)
sre_compile.py(78):     for op, av in pattern:
sre_compile.py(79):         if op in LITERAL_CODES:
sre_compile.py(80):             if flags & SRE_FLAG_IGNORECASE:
sre_compile.py(96):                 emit(OPCODES[op])
sre_compile.py(97):                 emit(av)
sre_compile.py(78):     for op, av in pattern:
sre_compile.py(79):         if op in LITERAL_CODES:
sre_compile.py(80):             if flags & SRE_FLAG_IGNORECASE:
sre_compile.py(96):                 emit(OPCODES[op])
sre_compile.py(97):                 emit(av)
sre_compile.py(78):     for op, av in pattern:
sre_compile.py(79):         if op in LITERAL_CODES:
sre_compile.py(80):             if flags & SRE_FLAG_IGNORECASE:
sre_compile.py(96):                 emit(OPCODES[op])
sre_compile.py(97):                 emit(av)
sre_compile.py(78):     for op, av in pattern:
sre_compile.py(79):         if op in LITERAL_CODES:
sre_compile.py(80):             if flags & SRE_FLAG_IGNORECASE:
sre_compile.py(96):                 emit(OPCODES[op])
sre_compile.py(97):                 emit(av)
sre_compile.py(78):     for op, av in pattern:
sre_compile.py(79):         if op in LITERAL_CODES:
sre_compile.py(80):             if flags & SRE_FLAG_IGNORECASE:
sre_compile.py(96):                 emit(OPCODES[op])
sre_compile.py(97):                 emit(av)
sre_compile.py(78):     for op, av in pattern:
sre_compile.py(79):         if op in LITERAL_CODES:
sre_compile.py(80):             if flags & SRE_FLAG_IGNORECASE:
sre_compile.py(96):                 emit(OPCODES[op])
sre_compile.py(97):                 emit(av)
sre_compile.py(78):     for op, av in pattern:
sre_compile.py(79):         if op in LITERAL_CODES:
sre_compile.py(80):             if flags & SRE_FLAG_IGNORECASE:
sre_compile.py(96):                 emit(OPCODES[op])
sre_compile.py(97):                 emit(av)
sre_compile.py(78):     for op, av in pattern:
sre_compile.py(79):         if op in LITERAL_CODES:
sre_compile.py(98):         elif op is IN:
sre_compile.py(109):         elif op is ANY:
sre_compile.py(114):         elif op in REPEATING_CODES:
sre_compile.py(115):             if flags & SRE_FLAG_TEMPLATE:
sre_compile.py(124):             elif _simple(av) and op is not REPEAT:
 --- modulename: sre_compile, funcname: _simple
sre_compile.py(430):     lo, hi = av[2].getwidth()
 --- modulename: sre_parse, funcname: getwidth
sre_parse.py(153):         if self.width:
sre_parse.py(154):             return self.width
sre_compile.py(431):     return lo == hi == 1 and av[2][0][0] != SUBPATTERN
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(125):                 if op is MAX_REPEAT:
sre_compile.py(126):                     emit(OPCODES[REPEAT_ONE])
sre_compile.py(129):                 skip = _len(code); emit(0)
sre_compile.py(130):                 emit(av[0])
sre_compile.py(131):                 emit(av[1])
sre_compile.py(132):                 _compile(code, av[2], flags)
 --- modulename: sre_compile, funcname: _compile
sre_compile.py(66):     emit = code.append
sre_compile.py(67):     _len = len
sre_compile.py(68):     LITERAL_CODES = _LITERAL_CODES
sre_compile.py(69):     REPEATING_CODES = _REPEATING_CODES
sre_compile.py(70):     SUCCESS_CODES = _SUCCESS_CODES
sre_compile.py(71):     ASSERT_CODES = _ASSERT_CODES
sre_compile.py(72):     if (flags & SRE_FLAG_IGNORECASE and
sre_compile.py(77):         fixes = None
sre_compile.py(78):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(79):         if op in LITERAL_CODES:
sre_compile.py(98):         elif op is IN:
sre_compile.py(99):             if flags & SRE_FLAG_IGNORECASE:
sre_compile.py(104):                 emit(OPCODES[op])
sre_compile.py(105):                 fixup = None
sre_compile.py(106):             skip = _len(code); emit(0)
sre_compile.py(107):             _compile_charset(av, flags, code, fixup, fixes)
 --- modulename: sre_compile, funcname: _compile_charset
sre_compile.py(230):     emit = code.append
sre_compile.py(231):     for op, av in _optimize_charset(charset, fixup, fixes,
sre_compile.py(232):                                     flags & SRE_FLAG_UNICODE):
 --- modulename: sre_compile, funcname: _optimize_charset
sre_compile.py(258):     out = []
sre_compile.py(259):     tail = []
sre_compile.py(260):     charmap = bytearray(256)
sre_compile.py(261):     for op, av in charset:
sre_compile.py(262):         while True:
sre_compile.py(263):             try:
sre_compile.py(264):                 if op is LITERAL:
sre_compile.py(273):                 elif op is RANGE:
sre_compile.py(286):                 elif op is NEGATE:
sre_compile.py(289):                     tail.append((op, av))
sre_compile.py(310):             break
sre_compile.py(261):     for op, av in charset:
sre_compile.py(313):     runs = []
sre_compile.py(314):     q = 0
sre_compile.py(315):     while True:
sre_compile.py(316):         p = charmap.find(b'\1', q)
sre_compile.py(317):         if p < 0:
sre_compile.py(318):             break
sre_compile.py(327):     if runs is not None:
sre_compile.py(329):         for p, q in runs:
sre_compile.py(334):         out += tail
sre_compile.py(336):         if fixup or len(out) < len(charset):
sre_compile.py(339):         return charset
sre_compile.py(233):         emit(OPCODES[op])
sre_compile.py(234):         if op is NEGATE:
sre_compile.py(236):         elif op is LITERAL:
sre_compile.py(238):         elif op is RANGE:
sre_compile.py(241):         elif op is CHARSET:
sre_compile.py(243):         elif op is BIGCHARSET:
sre_compile.py(245):         elif op is CATEGORY:
sre_compile.py(246):             if flags & SRE_FLAG_LOCALE:
sre_compile.py(248):             elif flags & SRE_FLAG_UNICODE:
sre_compile.py(251):                 emit(CHCODES[av])
sre_compile.py(232):                                     flags & SRE_FLAG_UNICODE):
sre_compile.py(254):     emit(OPCODES[FAILURE])
sre_compile.py(108):             code[skip] = _len(code) - skip
sre_compile.py(78):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(133):                 emit(OPCODES[SUCCESS])
sre_compile.py(134):                 code[skip] = _len(code) - skip
sre_compile.py(78):     for op, av in pattern:
sre_compile.py(79):         if op in LITERAL_CODES:
sre_compile.py(98):         elif op is IN:
sre_compile.py(109):         elif op is ANY:
sre_compile.py(114):         elif op in REPEATING_CODES:
sre_compile.py(115):             if flags & SRE_FLAG_TEMPLATE:
sre_compile.py(124):             elif _simple(av) and op is not REPEAT:
 --- modulename: sre_compile, funcname: _simple
sre_compile.py(430):     lo, hi = av[2].getwidth()
 --- modulename: sre_parse, funcname: getwidth
sre_parse.py(153):         if self.width:
sre_parse.py(154):             return self.width
sre_compile.py(431):     return lo == hi == 1 and av[2][0][0] != SUBPATTERN
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(125):                 if op is MAX_REPEAT:
sre_compile.py(126):                     emit(OPCODES[REPEAT_ONE])
sre_compile.py(129):                 skip = _len(code); emit(0)
sre_compile.py(130):                 emit(av[0])
sre_compile.py(131):                 emit(av[1])
sre_compile.py(132):                 _compile(code, av[2], flags)
 --- modulename: sre_compile, funcname: _compile
sre_compile.py(66):     emit = code.append
sre_compile.py(67):     _len = len
sre_compile.py(68):     LITERAL_CODES = _LITERAL_CODES
sre_compile.py(69):     REPEATING_CODES = _REPEATING_CODES
sre_compile.py(70):     SUCCESS_CODES = _SUCCESS_CODES
sre_compile.py(71):     ASSERT_CODES = _ASSERT_CODES
sre_compile.py(72):     if (flags & SRE_FLAG_IGNORECASE and
sre_compile.py(77):         fixes = None
sre_compile.py(78):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(79):         if op in LITERAL_CODES:
sre_compile.py(98):         elif op is IN:
sre_compile.py(99):             if flags & SRE_FLAG_IGNORECASE:
sre_compile.py(104):                 emit(OPCODES[op])
sre_compile.py(105):                 fixup = None
sre_compile.py(106):             skip = _len(code); emit(0)
sre_compile.py(107):             _compile_charset(av, flags, code, fixup, fixes)
 --- modulename: sre_compile, funcname: _compile_charset
sre_compile.py(230):     emit = code.append
sre_compile.py(231):     for op, av in _optimize_charset(charset, fixup, fixes,
sre_compile.py(232):                                     flags & SRE_FLAG_UNICODE):
 --- modulename: sre_compile, funcname: _optimize_charset
sre_compile.py(258):     out = []
sre_compile.py(259):     tail = []
sre_compile.py(260):     charmap = bytearray(256)
sre_compile.py(261):     for op, av in charset:
sre_compile.py(262):         while True:
sre_compile.py(263):             try:
sre_compile.py(264):                 if op is LITERAL:
sre_compile.py(273):                 elif op is RANGE:
sre_compile.py(286):                 elif op is NEGATE:
sre_compile.py(289):                     tail.append((op, av))
sre_compile.py(310):             break
sre_compile.py(261):     for op, av in charset:
sre_compile.py(262):         while True:
sre_compile.py(263):             try:
sre_compile.py(264):                 if op is LITERAL:
sre_compile.py(265):                     if fixup:
sre_compile.py(272):                         charmap[av] = 1
sre_compile.py(310):             break
sre_compile.py(261):     for op, av in charset:
sre_compile.py(313):     runs = []
sre_compile.py(314):     q = 0
sre_compile.py(315):     while True:
sre_compile.py(316):         p = charmap.find(b'\1', q)
sre_compile.py(317):         if p < 0:
sre_compile.py(319):         if len(runs) >= 2:
sre_compile.py(322):         q = charmap.find(b'\0', p)
sre_compile.py(323):         if q < 0:
sre_compile.py(326):         runs.append((p, q))
sre_compile.py(315):     while True:
sre_compile.py(316):         p = charmap.find(b'\1', q)
sre_compile.py(317):         if p < 0:
sre_compile.py(318):             break
sre_compile.py(327):     if runs is not None:
sre_compile.py(329):         for p, q in runs:
sre_compile.py(330):             if q - p == 1:
sre_compile.py(331):                 out.append((LITERAL, p))
sre_compile.py(329):         for p, q in runs:
sre_compile.py(334):         out += tail
sre_compile.py(336):         if fixup or len(out) < len(charset):
sre_compile.py(339):         return charset
sre_compile.py(233):         emit(OPCODES[op])
sre_compile.py(234):         if op is NEGATE:
sre_compile.py(236):         elif op is LITERAL:
sre_compile.py(238):         elif op is RANGE:
sre_compile.py(241):         elif op is CHARSET:
sre_compile.py(243):         elif op is BIGCHARSET:
sre_compile.py(245):         elif op is CATEGORY:
sre_compile.py(246):             if flags & SRE_FLAG_LOCALE:
sre_compile.py(248):             elif flags & SRE_FLAG_UNICODE:
sre_compile.py(251):                 emit(CHCODES[av])
sre_compile.py(232):                                     flags & SRE_FLAG_UNICODE):
sre_compile.py(233):         emit(OPCODES[op])
sre_compile.py(234):         if op is NEGATE:
sre_compile.py(236):         elif op is LITERAL:
sre_compile.py(237):             emit(av)
sre_compile.py(232):                                     flags & SRE_FLAG_UNICODE):
sre_compile.py(254):     emit(OPCODES[FAILURE])
sre_compile.py(108):             code[skip] = _len(code) - skip
sre_compile.py(78):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(133):                 emit(OPCODES[SUCCESS])
sre_compile.py(134):                 code[skip] = _len(code) - skip
sre_compile.py(78):     for op, av in pattern:
sre_compile.py(79):         if op in LITERAL_CODES:
sre_compile.py(98):         elif op is IN:
sre_compile.py(109):         elif op is ANY:
sre_compile.py(114):         elif op in REPEATING_CODES:
sre_compile.py(115):             if flags & SRE_FLAG_TEMPLATE:
sre_compile.py(124):             elif _simple(av) and op is not REPEAT:
 --- modulename: sre_compile, funcname: _simple
sre_compile.py(430):     lo, hi = av[2].getwidth()
 --- modulename: sre_parse, funcname: getwidth
sre_parse.py(153):         if self.width:
sre_parse.py(154):             return self.width
sre_compile.py(431):     return lo == hi == 1 and av[2][0][0] != SUBPATTERN
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(125):                 if op is MAX_REPEAT:
sre_compile.py(126):                     emit(OPCODES[REPEAT_ONE])
sre_compile.py(129):                 skip = _len(code); emit(0)
sre_compile.py(130):                 emit(av[0])
sre_compile.py(131):                 emit(av[1])
sre_compile.py(132):                 _compile(code, av[2], flags)
 --- modulename: sre_compile, funcname: _compile
sre_compile.py(66):     emit = code.append
sre_compile.py(67):     _len = len
sre_compile.py(68):     LITERAL_CODES = _LITERAL_CODES
sre_compile.py(69):     REPEATING_CODES = _REPEATING_CODES
sre_compile.py(70):     SUCCESS_CODES = _SUCCESS_CODES
sre_compile.py(71):     ASSERT_CODES = _ASSERT_CODES
sre_compile.py(72):     if (flags & SRE_FLAG_IGNORECASE and
sre_compile.py(77):         fixes = None
sre_compile.py(78):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(79):         if op in LITERAL_CODES:
sre_compile.py(98):         elif op is IN:
sre_compile.py(99):             if flags & SRE_FLAG_IGNORECASE:
sre_compile.py(104):                 emit(OPCODES[op])
sre_compile.py(105):                 fixup = None
sre_compile.py(106):             skip = _len(code); emit(0)
sre_compile.py(107):             _compile_charset(av, flags, code, fixup, fixes)
 --- modulename: sre_compile, funcname: _compile_charset
sre_compile.py(230):     emit = code.append
sre_compile.py(231):     for op, av in _optimize_charset(charset, fixup, fixes,
sre_compile.py(232):                                     flags & SRE_FLAG_UNICODE):
 --- modulename: sre_compile, funcname: _optimize_charset
sre_compile.py(258):     out = []
sre_compile.py(259):     tail = []
sre_compile.py(260):     charmap = bytearray(256)
sre_compile.py(261):     for op, av in charset:
sre_compile.py(262):         while True:
sre_compile.py(263):             try:
sre_compile.py(264):                 if op is LITERAL:
sre_compile.py(273):                 elif op is RANGE:
sre_compile.py(286):                 elif op is NEGATE:
sre_compile.py(289):                     tail.append((op, av))
sre_compile.py(310):             break
sre_compile.py(261):     for op, av in charset:
sre_compile.py(313):     runs = []
sre_compile.py(314):     q = 0
sre_compile.py(315):     while True:
sre_compile.py(316):         p = charmap.find(b'\1', q)
sre_compile.py(317):         if p < 0:
sre_compile.py(318):             break
sre_compile.py(327):     if runs is not None:
sre_compile.py(329):         for p, q in runs:
sre_compile.py(334):         out += tail
sre_compile.py(336):         if fixup or len(out) < len(charset):
sre_compile.py(339):         return charset
sre_compile.py(233):         emit(OPCODES[op])
sre_compile.py(234):         if op is NEGATE:
sre_compile.py(236):         elif op is LITERAL:
sre_compile.py(238):         elif op is RANGE:
sre_compile.py(241):         elif op is CHARSET:
sre_compile.py(243):         elif op is BIGCHARSET:
sre_compile.py(245):         elif op is CATEGORY:
sre_compile.py(246):             if flags & SRE_FLAG_LOCALE:
sre_compile.py(248):             elif flags & SRE_FLAG_UNICODE:
sre_compile.py(251):                 emit(CHCODES[av])
sre_compile.py(232):                                     flags & SRE_FLAG_UNICODE):
sre_compile.py(254):     emit(OPCODES[FAILURE])
sre_compile.py(108):             code[skip] = _len(code) - skip
sre_compile.py(78):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(133):                 emit(OPCODES[SUCCESS])
sre_compile.py(134):                 code[skip] = _len(code) - skip
sre_compile.py(78):     for op, av in pattern:
sre_compile.py(79):         if op in LITERAL_CODES:
sre_compile.py(80):             if flags & SRE_FLAG_IGNORECASE:
sre_compile.py(96):                 emit(OPCODES[op])
sre_compile.py(97):                 emit(av)
sre_compile.py(78):     for op, av in pattern:
sre_compile.py(79):         if op in LITERAL_CODES:
sre_compile.py(98):         elif op is IN:
sre_compile.py(109):         elif op is ANY:
sre_compile.py(114):         elif op in REPEATING_CODES:
sre_compile.py(146):         elif op is SUBPATTERN:
sre_compile.py(147):             if av[0]:
sre_compile.py(148):                 emit(OPCODES[MARK])
sre_compile.py(149):                 emit((av[0]-1)*2)
sre_compile.py(151):             _compile(code, av[1], flags)
 --- modulename: sre_compile, funcname: _compile
sre_compile.py(66):     emit = code.append
sre_compile.py(67):     _len = len
sre_compile.py(68):     LITERAL_CODES = _LITERAL_CODES
sre_compile.py(69):     REPEATING_CODES = _REPEATING_CODES
sre_compile.py(70):     SUCCESS_CODES = _SUCCESS_CODES
sre_compile.py(71):     ASSERT_CODES = _ASSERT_CODES
sre_compile.py(72):     if (flags & SRE_FLAG_IGNORECASE and
sre_compile.py(77):         fixes = None
sre_compile.py(78):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(79):         if op in LITERAL_CODES:
sre_compile.py(98):         elif op is IN:
sre_compile.py(109):         elif op is ANY:
sre_compile.py(114):         elif op in REPEATING_CODES:
sre_compile.py(115):             if flags & SRE_FLAG_TEMPLATE:
sre_compile.py(124):             elif _simple(av) and op is not REPEAT:
 --- modulename: sre_compile, funcname: _simple
sre_compile.py(430):     lo, hi = av[2].getwidth()
 --- modulename: sre_parse, funcname: getwidth
sre_parse.py(153):         if self.width:
sre_parse.py(154):             return self.width
sre_compile.py(431):     return lo == hi == 1 and av[2][0][0] != SUBPATTERN
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(125):                 if op is MAX_REPEAT:
sre_compile.py(126):                     emit(OPCODES[REPEAT_ONE])
sre_compile.py(129):                 skip = _len(code); emit(0)
sre_compile.py(130):                 emit(av[0])
sre_compile.py(131):                 emit(av[1])
sre_compile.py(132):                 _compile(code, av[2], flags)
 --- modulename: sre_compile, funcname: _compile
sre_compile.py(66):     emit = code.append
sre_compile.py(67):     _len = len
sre_compile.py(68):     LITERAL_CODES = _LITERAL_CODES
sre_compile.py(69):     REPEATING_CODES = _REPEATING_CODES
sre_compile.py(70):     SUCCESS_CODES = _SUCCESS_CODES
sre_compile.py(71):     ASSERT_CODES = _ASSERT_CODES
sre_compile.py(72):     if (flags & SRE_FLAG_IGNORECASE and
sre_compile.py(77):         fixes = None
sre_compile.py(78):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(79):         if op in LITERAL_CODES:
sre_compile.py(98):         elif op is IN:
sre_compile.py(99):             if flags & SRE_FLAG_IGNORECASE:
sre_compile.py(104):                 emit(OPCODES[op])
sre_compile.py(105):                 fixup = None
sre_compile.py(106):             skip = _len(code); emit(0)
sre_compile.py(107):             _compile_charset(av, flags, code, fixup, fixes)
 --- modulename: sre_compile, funcname: _compile_charset
sre_compile.py(230):     emit = code.append
sre_compile.py(231):     for op, av in _optimize_charset(charset, fixup, fixes,
sre_compile.py(232):                                     flags & SRE_FLAG_UNICODE):
 --- modulename: sre_compile, funcname: _optimize_charset
sre_compile.py(258):     out = []
sre_compile.py(259):     tail = []
sre_compile.py(260):     charmap = bytearray(256)
sre_compile.py(261):     for op, av in charset:
sre_compile.py(262):         while True:
sre_compile.py(263):             try:
sre_compile.py(264):                 if op is LITERAL:
sre_compile.py(273):                 elif op is RANGE:
sre_compile.py(286):                 elif op is NEGATE:
sre_compile.py(289):                     tail.append((op, av))
sre_compile.py(310):             break
sre_compile.py(261):     for op, av in charset:
sre_compile.py(262):         while True:
sre_compile.py(263):             try:
sre_compile.py(264):                 if op is LITERAL:
sre_compile.py(265):                     if fixup:
sre_compile.py(272):                         charmap[av] = 1
sre_compile.py(310):             break
sre_compile.py(261):     for op, av in charset:
sre_compile.py(313):     runs = []
sre_compile.py(314):     q = 0
sre_compile.py(315):     while True:
sre_compile.py(316):         p = charmap.find(b'\1', q)
sre_compile.py(317):         if p < 0:
sre_compile.py(319):         if len(runs) >= 2:
sre_compile.py(322):         q = charmap.find(b'\0', p)
sre_compile.py(323):         if q < 0:
sre_compile.py(326):         runs.append((p, q))
sre_compile.py(315):     while True:
sre_compile.py(316):         p = charmap.find(b'\1', q)
sre_compile.py(317):         if p < 0:
sre_compile.py(318):             break
sre_compile.py(327):     if runs is not None:
sre_compile.py(329):         for p, q in runs:
sre_compile.py(330):             if q - p == 1:
sre_compile.py(331):                 out.append((LITERAL, p))
sre_compile.py(329):         for p, q in runs:
sre_compile.py(334):         out += tail
sre_compile.py(336):         if fixup or len(out) < len(charset):
sre_compile.py(339):         return charset
sre_compile.py(233):         emit(OPCODES[op])
sre_compile.py(234):         if op is NEGATE:
sre_compile.py(236):         elif op is LITERAL:
sre_compile.py(238):         elif op is RANGE:
sre_compile.py(241):         elif op is CHARSET:
sre_compile.py(243):         elif op is BIGCHARSET:
sre_compile.py(245):         elif op is CATEGORY:
sre_compile.py(246):             if flags & SRE_FLAG_LOCALE:
sre_compile.py(248):             elif flags & SRE_FLAG_UNICODE:
sre_compile.py(251):                 emit(CHCODES[av])
sre_compile.py(232):                                     flags & SRE_FLAG_UNICODE):
sre_compile.py(233):         emit(OPCODES[op])
sre_compile.py(234):         if op is NEGATE:
sre_compile.py(236):         elif op is LITERAL:
sre_compile.py(237):             emit(av)
sre_compile.py(232):                                     flags & SRE_FLAG_UNICODE):
sre_compile.py(254):     emit(OPCODES[FAILURE])
sre_compile.py(108):             code[skip] = _len(code) - skip
sre_compile.py(78):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(133):                 emit(OPCODES[SUCCESS])
sre_compile.py(134):                 code[skip] = _len(code) - skip
sre_compile.py(78):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(152):             if av[0]:
sre_compile.py(153):                 emit(OPCODES[MARK])
sre_compile.py(154):                 emit((av[0]-1)*2+1)
sre_compile.py(78):     for op, av in pattern:
sre_compile.py(79):         if op in LITERAL_CODES:
sre_compile.py(80):             if flags & SRE_FLAG_IGNORECASE:
sre_compile.py(96):                 emit(OPCODES[op])
sre_compile.py(97):                 emit(av)
sre_compile.py(78):     for op, av in pattern:
sre_compile.py(79):         if op in LITERAL_CODES:
sre_compile.py(80):             if flags & SRE_FLAG_IGNORECASE:
sre_compile.py(96):                 emit(OPCODES[op])
sre_compile.py(97):                 emit(av)
sre_compile.py(78):     for op, av in pattern:
sre_compile.py(79):         if op in LITERAL_CODES:
sre_compile.py(80):             if flags & SRE_FLAG_IGNORECASE:
sre_compile.py(96):                 emit(OPCODES[op])
sre_compile.py(97):                 emit(av)
sre_compile.py(78):     for op, av in pattern:
sre_compile.py(79):         if op in LITERAL_CODES:
sre_compile.py(80):             if flags & SRE_FLAG_IGNORECASE:
sre_compile.py(96):                 emit(OPCODES[op])
sre_compile.py(97):                 emit(av)
sre_compile.py(78):     for op, av in pattern:
sre_compile.py(79):         if op in LITERAL_CODES:
sre_compile.py(80):             if flags & SRE_FLAG_IGNORECASE:
sre_compile.py(96):                 emit(OPCODES[op])
sre_compile.py(97):                 emit(av)
sre_compile.py(78):     for op, av in pattern:
sre_compile.py(79):         if op in LITERAL_CODES:
sre_compile.py(98):         elif op is IN:
sre_compile.py(109):         elif op is ANY:
sre_compile.py(114):         elif op in REPEATING_CODES:
sre_compile.py(146):         elif op is SUBPATTERN:
sre_compile.py(147):             if av[0]:
sre_compile.py(148):                 emit(OPCODES[MARK])
sre_compile.py(149):                 emit((av[0]-1)*2)
sre_compile.py(151):             _compile(code, av[1], flags)
 --- modulename: sre_compile, funcname: _compile
sre_compile.py(66):     emit = code.append
sre_compile.py(67):     _len = len
sre_compile.py(68):     LITERAL_CODES = _LITERAL_CODES
sre_compile.py(69):     REPEATING_CODES = _REPEATING_CODES
sre_compile.py(70):     SUCCESS_CODES = _SUCCESS_CODES
sre_compile.py(71):     ASSERT_CODES = _ASSERT_CODES
sre_compile.py(72):     if (flags & SRE_FLAG_IGNORECASE and
sre_compile.py(77):         fixes = None
sre_compile.py(78):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(79):         if op in LITERAL_CODES:
sre_compile.py(98):         elif op is IN:
sre_compile.py(109):         elif op is ANY:
sre_compile.py(114):         elif op in REPEATING_CODES:
sre_compile.py(115):             if flags & SRE_FLAG_TEMPLATE:
sre_compile.py(124):             elif _simple(av) and op is not REPEAT:
 --- modulename: sre_compile, funcname: _simple
sre_compile.py(430):     lo, hi = av[2].getwidth()
 --- modulename: sre_parse, funcname: getwidth
sre_parse.py(153):         if self.width:
sre_parse.py(154):             return self.width
sre_compile.py(431):     return lo == hi == 1 and av[2][0][0] != SUBPATTERN
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(125):                 if op is MAX_REPEAT:
sre_compile.py(126):                     emit(OPCODES[REPEAT_ONE])
sre_compile.py(129):                 skip = _len(code); emit(0)
sre_compile.py(130):                 emit(av[0])
sre_compile.py(131):                 emit(av[1])
sre_compile.py(132):                 _compile(code, av[2], flags)
 --- modulename: sre_compile, funcname: _compile
sre_compile.py(66):     emit = code.append
sre_compile.py(67):     _len = len
sre_compile.py(68):     LITERAL_CODES = _LITERAL_CODES
sre_compile.py(69):     REPEATING_CODES = _REPEATING_CODES
sre_compile.py(70):     SUCCESS_CODES = _SUCCESS_CODES
sre_compile.py(71):     ASSERT_CODES = _ASSERT_CODES
sre_compile.py(72):     if (flags & SRE_FLAG_IGNORECASE and
sre_compile.py(77):         fixes = None
sre_compile.py(78):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(79):         if op in LITERAL_CODES:
sre_compile.py(98):         elif op is IN:
sre_compile.py(99):             if flags & SRE_FLAG_IGNORECASE:
sre_compile.py(104):                 emit(OPCODES[op])
sre_compile.py(105):                 fixup = None
sre_compile.py(106):             skip = _len(code); emit(0)
sre_compile.py(107):             _compile_charset(av, flags, code, fixup, fixes)
 --- modulename: sre_compile, funcname: _compile_charset
sre_compile.py(230):     emit = code.append
sre_compile.py(231):     for op, av in _optimize_charset(charset, fixup, fixes,
sre_compile.py(232):                                     flags & SRE_FLAG_UNICODE):
 --- modulename: sre_compile, funcname: _optimize_charset
sre_compile.py(258):     out = []
sre_compile.py(259):     tail = []
sre_compile.py(260):     charmap = bytearray(256)
sre_compile.py(261):     for op, av in charset:
sre_compile.py(262):         while True:
sre_compile.py(263):             try:
sre_compile.py(264):                 if op is LITERAL:
sre_compile.py(273):                 elif op is RANGE:
sre_compile.py(286):                 elif op is NEGATE:
sre_compile.py(289):                     tail.append((op, av))
sre_compile.py(310):             break
sre_compile.py(261):     for op, av in charset:
sre_compile.py(262):         while True:
sre_compile.py(263):             try:
sre_compile.py(264):                 if op is LITERAL:
sre_compile.py(265):                     if fixup:
sre_compile.py(272):                         charmap[av] = 1
sre_compile.py(310):             break
sre_compile.py(261):     for op, av in charset:
sre_compile.py(313):     runs = []
sre_compile.py(314):     q = 0
sre_compile.py(315):     while True:
sre_compile.py(316):         p = charmap.find(b'\1', q)
sre_compile.py(317):         if p < 0:
sre_compile.py(319):         if len(runs) >= 2:
sre_compile.py(322):         q = charmap.find(b'\0', p)
sre_compile.py(323):         if q < 0:
sre_compile.py(326):         runs.append((p, q))
sre_compile.py(315):     while True:
sre_compile.py(316):         p = charmap.find(b'\1', q)
sre_compile.py(317):         if p < 0:
sre_compile.py(318):             break
sre_compile.py(327):     if runs is not None:
sre_compile.py(329):         for p, q in runs:
sre_compile.py(330):             if q - p == 1:
sre_compile.py(331):                 out.append((LITERAL, p))
sre_compile.py(329):         for p, q in runs:
sre_compile.py(334):         out += tail
sre_compile.py(336):         if fixup or len(out) < len(charset):
sre_compile.py(339):         return charset
sre_compile.py(233):         emit(OPCODES[op])
sre_compile.py(234):         if op is NEGATE:
sre_compile.py(236):         elif op is LITERAL:
sre_compile.py(238):         elif op is RANGE:
sre_compile.py(241):         elif op is CHARSET:
sre_compile.py(243):         elif op is BIGCHARSET:
sre_compile.py(245):         elif op is CATEGORY:
sre_compile.py(246):             if flags & SRE_FLAG_LOCALE:
sre_compile.py(248):             elif flags & SRE_FLAG_UNICODE:
sre_compile.py(251):                 emit(CHCODES[av])
sre_compile.py(232):                                     flags & SRE_FLAG_UNICODE):
sre_compile.py(233):         emit(OPCODES[op])
sre_compile.py(234):         if op is NEGATE:
sre_compile.py(236):         elif op is LITERAL:
sre_compile.py(237):             emit(av)
sre_compile.py(232):                                     flags & SRE_FLAG_UNICODE):
sre_compile.py(254):     emit(OPCODES[FAILURE])
sre_compile.py(108):             code[skip] = _len(code) - skip
sre_compile.py(78):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(133):                 emit(OPCODES[SUCCESS])
sre_compile.py(134):                 code[skip] = _len(code) - skip
sre_compile.py(78):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(79):         if op in LITERAL_CODES:
sre_compile.py(80):             if flags & SRE_FLAG_IGNORECASE:
sre_compile.py(96):                 emit(OPCODES[op])
sre_compile.py(97):                 emit(av)
sre_compile.py(78):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(79):         if op in LITERAL_CODES:
sre_compile.py(98):         elif op is IN:
sre_compile.py(109):         elif op is ANY:
sre_compile.py(114):         elif op in REPEATING_CODES:
sre_compile.py(115):             if flags & SRE_FLAG_TEMPLATE:
sre_compile.py(124):             elif _simple(av) and op is not REPEAT:
 --- modulename: sre_compile, funcname: _simple
sre_compile.py(430):     lo, hi = av[2].getwidth()
 --- modulename: sre_parse, funcname: getwidth
sre_parse.py(153):         if self.width:
sre_parse.py(154):             return self.width
sre_compile.py(431):     return lo == hi == 1 and av[2][0][0] != SUBPATTERN
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(125):                 if op is MAX_REPEAT:
sre_compile.py(126):                     emit(OPCODES[REPEAT_ONE])
sre_compile.py(129):                 skip = _len(code); emit(0)
sre_compile.py(130):                 emit(av[0])
sre_compile.py(131):                 emit(av[1])
sre_compile.py(132):                 _compile(code, av[2], flags)
 --- modulename: sre_compile, funcname: _compile
sre_compile.py(66):     emit = code.append
sre_compile.py(67):     _len = len
sre_compile.py(68):     LITERAL_CODES = _LITERAL_CODES
sre_compile.py(69):     REPEATING_CODES = _REPEATING_CODES
sre_compile.py(70):     SUCCESS_CODES = _SUCCESS_CODES
sre_compile.py(71):     ASSERT_CODES = _ASSERT_CODES
sre_compile.py(72):     if (flags & SRE_FLAG_IGNORECASE and
sre_compile.py(77):         fixes = None
sre_compile.py(78):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(79):         if op in LITERAL_CODES:
sre_compile.py(98):         elif op is IN:
sre_compile.py(99):             if flags & SRE_FLAG_IGNORECASE:
sre_compile.py(104):                 emit(OPCODES[op])
sre_compile.py(105):                 fixup = None
sre_compile.py(106):             skip = _len(code); emit(0)
sre_compile.py(107):             _compile_charset(av, flags, code, fixup, fixes)
 --- modulename: sre_compile, funcname: _compile_charset
sre_compile.py(230):     emit = code.append
sre_compile.py(231):     for op, av in _optimize_charset(charset, fixup, fixes,
sre_compile.py(232):                                     flags & SRE_FLAG_UNICODE):
 --- modulename: sre_compile, funcname: _optimize_charset
sre_compile.py(258):     out = []
sre_compile.py(259):     tail = []
sre_compile.py(260):     charmap = bytearray(256)
sre_compile.py(261):     for op, av in charset:
sre_compile.py(262):         while True:
sre_compile.py(263):             try:
sre_compile.py(264):                 if op is LITERAL:
sre_compile.py(273):                 elif op is RANGE:
sre_compile.py(286):                 elif op is NEGATE:
sre_compile.py(289):                     tail.append((op, av))
sre_compile.py(310):             break
sre_compile.py(261):     for op, av in charset:
sre_compile.py(262):         while True:
sre_compile.py(263):             try:
sre_compile.py(264):                 if op is LITERAL:
sre_compile.py(265):                     if fixup:
sre_compile.py(272):                         charmap[av] = 1
sre_compile.py(310):             break
sre_compile.py(261):     for op, av in charset:
sre_compile.py(313):     runs = []
sre_compile.py(314):     q = 0
sre_compile.py(315):     while True:
sre_compile.py(316):         p = charmap.find(b'\1', q)
sre_compile.py(317):         if p < 0:
sre_compile.py(319):         if len(runs) >= 2:
sre_compile.py(322):         q = charmap.find(b'\0', p)
sre_compile.py(323):         if q < 0:
sre_compile.py(326):         runs.append((p, q))
sre_compile.py(315):     while True:
sre_compile.py(316):         p = charmap.find(b'\1', q)
sre_compile.py(317):         if p < 0:
sre_compile.py(318):             break
sre_compile.py(327):     if runs is not None:
sre_compile.py(329):         for p, q in runs:
sre_compile.py(330):             if q - p == 1:
sre_compile.py(331):                 out.append((LITERAL, p))
sre_compile.py(329):         for p, q in runs:
sre_compile.py(334):         out += tail
sre_compile.py(336):         if fixup or len(out) < len(charset):
sre_compile.py(339):         return charset
sre_compile.py(233):         emit(OPCODES[op])
sre_compile.py(234):         if op is NEGATE:
sre_compile.py(236):         elif op is LITERAL:
sre_compile.py(238):         elif op is RANGE:
sre_compile.py(241):         elif op is CHARSET:
sre_compile.py(243):         elif op is BIGCHARSET:
sre_compile.py(245):         elif op is CATEGORY:
sre_compile.py(246):             if flags & SRE_FLAG_LOCALE:
sre_compile.py(248):             elif flags & SRE_FLAG_UNICODE:
sre_compile.py(251):                 emit(CHCODES[av])
sre_compile.py(232):                                     flags & SRE_FLAG_UNICODE):
sre_compile.py(233):         emit(OPCODES[op])
sre_compile.py(234):         if op is NEGATE:
sre_compile.py(236):         elif op is LITERAL:
sre_compile.py(237):             emit(av)
sre_compile.py(232):                                     flags & SRE_FLAG_UNICODE):
sre_compile.py(254):     emit(OPCODES[FAILURE])
sre_compile.py(108):             code[skip] = _len(code) - skip
sre_compile.py(78):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(133):                 emit(OPCODES[SUCCESS])
sre_compile.py(134):                 code[skip] = _len(code) - skip
sre_compile.py(78):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(79):         if op in LITERAL_CODES:
sre_compile.py(98):         elif op is IN:
sre_compile.py(109):         elif op is ANY:
sre_compile.py(114):         elif op in REPEATING_CODES:
sre_compile.py(115):             if flags & SRE_FLAG_TEMPLATE:
sre_compile.py(124):             elif _simple(av) and op is not REPEAT:
 --- modulename: sre_compile, funcname: _simple
sre_compile.py(430):     lo, hi = av[2].getwidth()
 --- modulename: sre_parse, funcname: getwidth
sre_parse.py(153):         if self.width:
sre_parse.py(154):             return self.width
sre_compile.py(431):     return lo == hi == 1 and av[2][0][0] != SUBPATTERN
sre_compile.py(136):                 emit(OPCODES[REPEAT])
sre_compile.py(137):                 skip = _len(code); emit(0)
sre_compile.py(138):                 emit(av[0])
sre_compile.py(139):                 emit(av[1])
sre_compile.py(140):                 _compile(code, av[2], flags)
 --- modulename: sre_compile, funcname: _compile
sre_compile.py(66):     emit = code.append
sre_compile.py(67):     _len = len
sre_compile.py(68):     LITERAL_CODES = _LITERAL_CODES
sre_compile.py(69):     REPEATING_CODES = _REPEATING_CODES
sre_compile.py(70):     SUCCESS_CODES = _SUCCESS_CODES
sre_compile.py(71):     ASSERT_CODES = _ASSERT_CODES
sre_compile.py(72):     if (flags & SRE_FLAG_IGNORECASE and
sre_compile.py(77):         fixes = None
sre_compile.py(78):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(79):         if op in LITERAL_CODES:
sre_compile.py(98):         elif op is IN:
sre_compile.py(109):         elif op is ANY:
sre_compile.py(114):         elif op in REPEATING_CODES:
sre_compile.py(146):         elif op is SUBPATTERN:
sre_compile.py(147):             if av[0]:
sre_compile.py(151):             _compile(code, av[1], flags)
 --- modulename: sre_compile, funcname: _compile
sre_compile.py(66):     emit = code.append
sre_compile.py(67):     _len = len
sre_compile.py(68):     LITERAL_CODES = _LITERAL_CODES
sre_compile.py(69):     REPEATING_CODES = _REPEATING_CODES
sre_compile.py(70):     SUCCESS_CODES = _SUCCESS_CODES
sre_compile.py(71):     ASSERT_CODES = _ASSERT_CODES
sre_compile.py(72):     if (flags & SRE_FLAG_IGNORECASE and
sre_compile.py(77):         fixes = None
sre_compile.py(78):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(79):         if op in LITERAL_CODES:
sre_compile.py(80):             if flags & SRE_FLAG_IGNORECASE:
sre_compile.py(96):                 emit(OPCODES[op])
sre_compile.py(97):                 emit(av)
sre_compile.py(78):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(79):         if op in LITERAL_CODES:
sre_compile.py(80):             if flags & SRE_FLAG_IGNORECASE:
sre_compile.py(96):                 emit(OPCODES[op])
sre_compile.py(97):                 emit(av)
sre_compile.py(78):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(79):         if op in LITERAL_CODES:
sre_compile.py(98):         elif op is IN:
sre_compile.py(109):         elif op is ANY:
sre_compile.py(114):         elif op in REPEATING_CODES:
sre_compile.py(115):             if flags & SRE_FLAG_TEMPLATE:
sre_compile.py(124):             elif _simple(av) and op is not REPEAT:
 --- modulename: sre_compile, funcname: _simple
sre_compile.py(430):     lo, hi = av[2].getwidth()
 --- modulename: sre_parse, funcname: getwidth
sre_parse.py(153):         if self.width:
sre_parse.py(154):             return self.width
sre_compile.py(431):     return lo == hi == 1 and av[2][0][0] != SUBPATTERN
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(125):                 if op is MAX_REPEAT:
sre_compile.py(126):                     emit(OPCODES[REPEAT_ONE])
sre_compile.py(129):                 skip = _len(code); emit(0)
sre_compile.py(130):                 emit(av[0])
sre_compile.py(131):                 emit(av[1])
sre_compile.py(132):                 _compile(code, av[2], flags)
 --- modulename: sre_compile, funcname: _compile
sre_compile.py(66):     emit = code.append
sre_compile.py(67):     _len = len
sre_compile.py(68):     LITERAL_CODES = _LITERAL_CODES
sre_compile.py(69):     REPEATING_CODES = _REPEATING_CODES
sre_compile.py(70):     SUCCESS_CODES = _SUCCESS_CODES
sre_compile.py(71):     ASSERT_CODES = _ASSERT_CODES
sre_compile.py(72):     if (flags & SRE_FLAG_IGNORECASE and
sre_compile.py(77):         fixes = None
sre_compile.py(78):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(79):         if op in LITERAL_CODES:
sre_compile.py(98):         elif op is IN:
sre_compile.py(99):             if flags & SRE_FLAG_IGNORECASE:
sre_compile.py(104):                 emit(OPCODES[op])
sre_compile.py(105):                 fixup = None
sre_compile.py(106):             skip = _len(code); emit(0)
sre_compile.py(107):             _compile_charset(av, flags, code, fixup, fixes)
 --- modulename: sre_compile, funcname: _compile_charset
sre_compile.py(230):     emit = code.append
sre_compile.py(231):     for op, av in _optimize_charset(charset, fixup, fixes,
sre_compile.py(232):                                     flags & SRE_FLAG_UNICODE):
 --- modulename: sre_compile, funcname: _optimize_charset
sre_compile.py(258):     out = []
sre_compile.py(259):     tail = []
sre_compile.py(260):     charmap = bytearray(256)
sre_compile.py(261):     for op, av in charset:
sre_compile.py(262):         while True:
sre_compile.py(263):             try:
sre_compile.py(264):                 if op is LITERAL:
sre_compile.py(273):                 elif op is RANGE:
sre_compile.py(286):                 elif op is NEGATE:
sre_compile.py(289):                     tail.append((op, av))
sre_compile.py(310):             break
sre_compile.py(261):     for op, av in charset:
sre_compile.py(313):     runs = []
sre_compile.py(314):     q = 0
sre_compile.py(315):     while True:
sre_compile.py(316):         p = charmap.find(b'\1', q)
sre_compile.py(317):         if p < 0:
sre_compile.py(318):             break
sre_compile.py(327):     if runs is not None:
sre_compile.py(329):         for p, q in runs:
sre_compile.py(334):         out += tail
sre_compile.py(336):         if fixup or len(out) < len(charset):
sre_compile.py(339):         return charset
sre_compile.py(233):         emit(OPCODES[op])
sre_compile.py(234):         if op is NEGATE:
sre_compile.py(236):         elif op is LITERAL:
sre_compile.py(238):         elif op is RANGE:
sre_compile.py(241):         elif op is CHARSET:
sre_compile.py(243):         elif op is BIGCHARSET:
sre_compile.py(245):         elif op is CATEGORY:
sre_compile.py(246):             if flags & SRE_FLAG_LOCALE:
sre_compile.py(248):             elif flags & SRE_FLAG_UNICODE:
sre_compile.py(251):                 emit(CHCODES[av])
sre_compile.py(232):                                     flags & SRE_FLAG_UNICODE):
sre_compile.py(254):     emit(OPCODES[FAILURE])
sre_compile.py(108):             code[skip] = _len(code) - skip
sre_compile.py(78):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(133):                 emit(OPCODES[SUCCESS])
sre_compile.py(134):                 code[skip] = _len(code) - skip
sre_compile.py(78):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(79):         if op in LITERAL_CODES:
sre_compile.py(80):             if flags & SRE_FLAG_IGNORECASE:
sre_compile.py(96):                 emit(OPCODES[op])
sre_compile.py(97):                 emit(av)
sre_compile.py(78):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(79):         if op in LITERAL_CODES:
sre_compile.py(80):             if flags & SRE_FLAG_IGNORECASE:
sre_compile.py(96):                 emit(OPCODES[op])
sre_compile.py(97):                 emit(av)
sre_compile.py(78):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(79):         if op in LITERAL_CODES:
sre_compile.py(80):             if flags & SRE_FLAG_IGNORECASE:
sre_compile.py(96):                 emit(OPCODES[op])
sre_compile.py(97):                 emit(av)
sre_compile.py(78):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(79):         if op in LITERAL_CODES:
sre_compile.py(80):             if flags & SRE_FLAG_IGNORECASE:
sre_compile.py(96):                 emit(OPCODES[op])
sre_compile.py(97):                 emit(av)
sre_compile.py(78):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(79):         if op in LITERAL_CODES:
sre_compile.py(80):             if flags & SRE_FLAG_IGNORECASE:
sre_compile.py(96):                 emit(OPCODES[op])
sre_compile.py(97):                 emit(av)
sre_compile.py(78):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(152):             if av[0]:
sre_compile.py(78):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(141):                 code[skip] = _len(code) - skip
sre_compile.py(142):                 if op is MAX_REPEAT:
sre_compile.py(143):                     emit(OPCODES[MAX_UNTIL])
sre_compile.py(78):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(152):             if av[0]:
sre_compile.py(153):                 emit(OPCODES[MARK])
sre_compile.py(154):                 emit((av[0]-1)*2+1)
sre_compile.py(78):     for op, av in pattern:
sre_compile.py(79):         if op in LITERAL_CODES:
sre_compile.py(80):             if flags & SRE_FLAG_IGNORECASE:
sre_compile.py(96):                 emit(OPCODES[op])
sre_compile.py(97):                 emit(av)
sre_compile.py(78):     for op, av in pattern:
sre_compile.py(563):     code.append(OPCODES[SUCCESS])
sre_compile.py(565):     return code
sre_compile.py(581):     if p.pattern.groups > 100:
sre_compile.py(587):     groupindex = p.pattern.groupdict
sre_compile.py(588):     indexgroup = [None] * p.pattern.groups
sre_compile.py(589):     for k, i in groupindex.items():
sre_compile.py(592):     return _sre.compile(
sre_compile.py(593):         pattern, flags | p.pattern.flags, code,
sre_compile.py(594):         p.pattern.groups-1,
sre_compile.py(595):         groupindex, indexgroup
re.py(252):     if not bypass_cache:
re.py(253):         if len(_cache) >= _MAXCACHE:
re.py(255):         if p.flags & LOCALE:
re.py(260):             loc = None
re.py(261):         _cache[cachekey] = p, loc
re.py(262):     return p
platform.py(1337): _pypy_sys_version_parser = re.compile(
platform.py(1338):     r'([\w.+]+)\s*'
 --- modulename: re, funcname: compile
re.py(194):     return _compile(pattern, flags)
 --- modulename: re, funcname: _compile
re.py(232):     pattern, flags = key
re.py(233):     bypass_cache = flags & DEBUG
re.py(234):     if not bypass_cache:
re.py(235):         cachekey = (type(key[0]),) + key
re.py(236):         try:
re.py(237):             p, loc = _cache[cachekey]
re.py(240):         except KeyError:
re.py(241):             pass
re.py(242):     if isinstance(pattern, _pattern_type):
re.py(246):     if not sre_compile.isstring(pattern):
 --- modulename: sre_compile, funcname: isstring
sre_compile.py(547):     for tp in STRING_TYPES:
sre_compile.py(548):         if isinstance(obj, tp):
sre_compile.py(549):             return 1
re.py(248):     try:
re.py(249):         p = sre_compile.compile(pattern, flags)
 --- modulename: sre_compile, funcname: compile
sre_compile.py(570):     if isstring(p):
 --- modulename: sre_compile, funcname: isstring
sre_compile.py(547):     for tp in STRING_TYPES:
sre_compile.py(548):         if isinstance(obj, tp):
sre_compile.py(549):             return 1
sre_compile.py(571):         pattern = p
sre_compile.py(572):         p = sre_parse.parse(p, flags)
 --- modulename: sre_parse, funcname: parse
sre_parse.py(709):     source = Tokenizer(str)
 --- modulename: sre_parse, funcname: __init__
sre_parse.py(190):         self.string = string
sre_parse.py(191):         self.index = 0
sre_parse.py(192):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(711):     if pattern is None:
sre_parse.py(712):         pattern = Pattern()
 --- modulename: sre_parse, funcname: __init__
sre_parse.py(68):         self.flags = 0
sre_parse.py(69):         self.open = []
sre_parse.py(70):         self.groups = 1
sre_parse.py(71):         self.groupdict = {}
sre_parse.py(72):         self.lookbehind = 0
sre_parse.py(713):     pattern.flags = flags
sre_parse.py(714):     pattern.str = str
sre_parse.py(716):     p = _parse_sub(source, pattern, 0)
 --- modulename: sre_parse, funcname: _parse_sub
sre_parse.py(320):     items = []
sre_parse.py(321):     itemsappend = items.append
sre_parse.py(322):     sourcematch = source.match
sre_parse.py(323):     while 1:
sre_parse.py(324):         itemsappend(_parse(source, state))
 --- modulename: sre_parse, funcname: _parse
sre_parse.py(397):     subpattern = SubPattern(state)
 --- modulename: sre_parse, funcname: __init__
sre_parse.py(93):         self.pattern = pattern
sre_parse.py(94):         if data is None:
sre_parse.py(95):             data = []
sre_parse.py(96):         self.data = data
sre_parse.py(97):         self.width = None
sre_parse.py(400):     subpatternappend = subpattern.append
sre_parse.py(401):     sourceget = source.get
sre_parse.py(402):     sourcematch = source.match
sre_parse.py(403):     _len = len
sre_parse.py(404):     PATTERNENDERS = _PATTERNENDERS
sre_parse.py(405):     ASSERTCHARS = _ASSERTCHARS
sre_parse.py(406):     LOOKBEHINDASSERTCHARS = _LOOKBEHINDASSERTCHARS
sre_parse.py(407):     REPEATCODES = _REPEATCODES
sre_parse.py(409):     while 1:
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(413):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(414):         if this is None:
sre_parse.py(417):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(428):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(431):         elif this == "[":
sre_parse.py(488):         elif this and this[0] in REPEAT_CHARS:
sre_parse.py(541):         elif this == ".":
sre_parse.py(544):         elif this == "(":
sre_parse.py(545):             group = 1
sre_parse.py(546):             name = None
sre_parse.py(547):             condgroup = None
sre_parse.py(548):             if sourcematch("?"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(211):         return 0
sre_parse.py(666):             if group:
sre_parse.py(668):                 if group == 2:
sre_parse.py(672):                     group = state.opengroup(name)
 --- modulename: sre_parse, funcname: opengroup
sre_parse.py(75):         gid = self.groups
sre_parse.py(76):         self.groups = gid + 1
sre_parse.py(77):         if name is not None:
sre_parse.py(83):         self.open.append(gid)
sre_parse.py(84):         return gid
sre_parse.py(673):                 if condgroup:
sre_parse.py(676):                     p = _parse_sub(source, state)
 --- modulename: sre_parse, funcname: _parse_sub
sre_parse.py(320):     items = []
sre_parse.py(321):     itemsappend = items.append
sre_parse.py(322):     sourcematch = source.match
sre_parse.py(323):     while 1:
sre_parse.py(324):         itemsappend(_parse(source, state))
 --- modulename: sre_parse, funcname: _parse
sre_parse.py(397):     subpattern = SubPattern(state)
 --- modulename: sre_parse, funcname: __init__
sre_parse.py(93):         self.pattern = pattern
sre_parse.py(94):         if data is None:
sre_parse.py(95):             data = []
sre_parse.py(96):         self.data = data
sre_parse.py(97):         self.width = None
sre_parse.py(400):     subpatternappend = subpattern.append
sre_parse.py(401):     sourceget = source.get
sre_parse.py(402):     sourcematch = source.match
sre_parse.py(403):     _len = len
sre_parse.py(404):     PATTERNENDERS = _PATTERNENDERS
sre_parse.py(405):     ASSERTCHARS = _ASSERTCHARS
sre_parse.py(406):     LOOKBEHINDASSERTCHARS = _LOOKBEHINDASSERTCHARS
sre_parse.py(407):     REPEATCODES = _REPEATCODES
sre_parse.py(409):     while 1:
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(413):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(199):             try:
sre_parse.py(200):                 c = self.string[self.index + 1]
sre_parse.py(203):             char = char + c
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(414):         if this is None:
sre_parse.py(417):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(428):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(431):         elif this == "[":
sre_parse.py(433):             set = []
sre_parse.py(434):             setappend = set.append
sre_parse.py(437):             if sourcematch("^"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(211):         return 0
sre_parse.py(440):             start = set[:]
sre_parse.py(441):             while 1:
sre_parse.py(442):                 this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(443):                 if this == "]" and set != start:
sre_parse.py(445):                 elif this and this[0] == "\\":
sre_parse.py(446):                     code1 = _class_escape(source, this)
 --- modulename: sre_parse, funcname: _class_escape
sre_parse.py(238):     code = ESCAPES.get(escape)
sre_parse.py(239):     if code:
sre_parse.py(241):     code = CATEGORIES.get(escape)
sre_parse.py(242):     if code and code[0] == IN:
sre_parse.py(243):         return code
sre_parse.py(451):                 if sourcematch("-"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(211):         return 0
sre_parse.py(475):                     if code1[0] is IN:
sre_parse.py(476):                         code1 = code1[1][0]
sre_parse.py(477):                     setappend(code1)
sre_parse.py(442):                 this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(443):                 if this == "]" and set != start:
sre_parse.py(445):                 elif this and this[0] == "\\":
sre_parse.py(447):                 elif this:
sre_parse.py(448):                     code1 = LITERAL, ord(this)
sre_parse.py(451):                 if sourcematch("-"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(211):         return 0
sre_parse.py(475):                     if code1[0] is IN:
sre_parse.py(477):                     setappend(code1)
sre_parse.py(442):                 this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(443):                 if this == "]" and set != start:
sre_parse.py(445):                 elif this and this[0] == "\\":
sre_parse.py(447):                 elif this:
sre_parse.py(448):                     code1 = LITERAL, ord(this)
sre_parse.py(451):                 if sourcematch("-"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(211):         return 0
sre_parse.py(475):                     if code1[0] is IN:
sre_parse.py(477):                     setappend(code1)
sre_parse.py(442):                 this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(443):                 if this == "]" and set != start:
sre_parse.py(444):                     break
sre_parse.py(480):             if _len(set)==1 and set[0][0] is LITERAL:
sre_parse.py(482):             elif _len(set)==2 and set[0][0] is NEGATE and set[1][0] is LITERAL:
sre_parse.py(486):                 subpatternappend((IN, set))
 --- modulename: sre_parse, funcname: append
sre_parse.py(150):         self.data.append(code)
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(413):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(414):         if this is None:
sre_parse.py(417):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(428):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(431):         elif this == "[":
sre_parse.py(488):         elif this and this[0] in REPEAT_CHARS:
sre_parse.py(490):             if this == "?":
sre_parse.py(492):             elif this == "*":
sre_parse.py(495):             elif this == "+":
sre_parse.py(496):                 min, max = 1, MAXREPEAT
sre_parse.py(528):             if subpattern:
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(138):         return len(self.data)
sre_parse.py(529):                 item = subpattern[-1:]
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(138):         return len(self.data)
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(143):             return SubPattern(self.pattern, self.data[index])
 --- modulename: sre_parse, funcname: __init__
sre_parse.py(93):         self.pattern = pattern
sre_parse.py(94):         if data is None:
sre_parse.py(96):         self.data = data
sre_parse.py(97):         self.width = None
sre_parse.py(532):             if not item or (_len(item) == 1 and item[0][0] == AT):
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(138):         return len(self.data)
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(138):         return len(self.data)
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_parse.py(534):             if item[0][0] in REPEATCODES:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_parse.py(536):             if sourcematch("?"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(211):         return 0
sre_parse.py(539):                 subpattern[-1] = (MAX_REPEAT, (min, max, item))
 --- modulename: sre_parse, funcname: __setitem__
sre_parse.py(146):         self.data[index] = code
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(412):             break # end of subpattern
sre_parse.py(704):     return subpattern
sre_parse.py(325):         if sourcematch("|"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(211):         return 0
sre_parse.py(327):         if not nested:
sre_parse.py(329):         if not source.next or sourcematch(")", 0):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(208):             if skip:
sre_parse.py(210):             return 1
sre_parse.py(330):             break
sre_parse.py(334):     if len(items) == 1:
sre_parse.py(335):         return items[0]
sre_parse.py(677):                 if not sourcematch(")"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(208):             if skip:
sre_parse.py(209):                 self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(199):             try:
sre_parse.py(200):                 c = self.string[self.index + 1]
sre_parse.py(203):             char = char + c
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(210):             return 1
sre_parse.py(679):                 if group is not None:
sre_parse.py(680):                     state.closegroup(group)
 --- modulename: sre_parse, funcname: closegroup
sre_parse.py(86):         self.open.remove(gid)
sre_parse.py(681):                 subpatternappend((SUBPATTERN, (group, p)))
 --- modulename: sre_parse, funcname: append
sre_parse.py(150):         self.data.append(code)
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(413):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(414):         if this is None:
sre_parse.py(417):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(428):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(431):         elif this == "[":
sre_parse.py(488):         elif this and this[0] in REPEAT_CHARS:
sre_parse.py(541):         elif this == ".":
sre_parse.py(544):         elif this == "(":
sre_parse.py(691):         elif this == "^":
sre_parse.py(694):         elif this == "$":
sre_parse.py(697):         elif this and this[0] == "\\":
sre_parse.py(698):             code = _escape(source, this, state)
 --- modulename: sre_parse, funcname: _escape
sre_parse.py(270):     code = CATEGORIES.get(escape)
sre_parse.py(271):     if code:
sre_parse.py(272):         return code
sre_parse.py(699):             subpatternappend(code)
 --- modulename: sre_parse, funcname: append
sre_parse.py(150):         self.data.append(code)
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(413):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(199):             try:
sre_parse.py(200):                 c = self.string[self.index + 1]
sre_parse.py(203):             char = char + c
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(414):         if this is None:
sre_parse.py(417):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(428):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(431):         elif this == "[":
sre_parse.py(488):         elif this and this[0] in REPEAT_CHARS:
sre_parse.py(490):             if this == "?":
sre_parse.py(492):             elif this == "*":
sre_parse.py(493):                 min, max = 0, MAXREPEAT
sre_parse.py(528):             if subpattern:
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(138):         return len(self.data)
sre_parse.py(529):                 item = subpattern[-1:]
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(138):         return len(self.data)
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(143):             return SubPattern(self.pattern, self.data[index])
 --- modulename: sre_parse, funcname: __init__
sre_parse.py(93):         self.pattern = pattern
sre_parse.py(94):         if data is None:
sre_parse.py(96):         self.data = data
sre_parse.py(97):         self.width = None
sre_parse.py(532):             if not item or (_len(item) == 1 and item[0][0] == AT):
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(138):         return len(self.data)
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(138):         return len(self.data)
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_parse.py(534):             if item[0][0] in REPEATCODES:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_parse.py(536):             if sourcematch("?"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(211):         return 0
sre_parse.py(539):                 subpattern[-1] = (MAX_REPEAT, (min, max, item))
 --- modulename: sre_parse, funcname: __setitem__
sre_parse.py(146):         self.data[index] = code
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(413):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(414):         if this is None:
sre_parse.py(417):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(428):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(431):         elif this == "[":
sre_parse.py(488):         elif this and this[0] in REPEAT_CHARS:
sre_parse.py(541):         elif this == ".":
sre_parse.py(544):         elif this == "(":
sre_parse.py(691):         elif this == "^":
sre_parse.py(694):         elif this == "$":
sre_parse.py(697):         elif this and this[0] == "\\":
sre_parse.py(698):             code = _escape(source, this, state)
 --- modulename: sre_parse, funcname: _escape
sre_parse.py(270):     code = CATEGORIES.get(escape)
sre_parse.py(271):     if code:
sre_parse.py(273):     code = ESCAPES.get(escape)
sre_parse.py(274):     if code:
sre_parse.py(276):     try:
sre_parse.py(277):         c = escape[1:2]
sre_parse.py(278):         if c == "x":
sre_parse.py(285):         elif c == "0":
sre_parse.py(290):         elif c in DIGITS:
sre_parse.py(311):         if len(escape) == 2:
sre_parse.py(312):             return LITERAL, ord(escape[1])
sre_parse.py(699):             subpatternappend(code)
 --- modulename: sre_parse, funcname: append
sre_parse.py(150):         self.data.append(code)
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(413):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(414):         if this is None:
sre_parse.py(417):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(428):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(429):             subpatternappend((LITERAL, ord(this)))
 --- modulename: sre_parse, funcname: append
sre_parse.py(150):         self.data.append(code)
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(413):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(414):         if this is None:
sre_parse.py(417):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(428):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(431):         elif this == "[":
sre_parse.py(488):         elif this and this[0] in REPEAT_CHARS:
sre_parse.py(490):             if this == "?":
sre_parse.py(491):                 min, max = 0, 1
sre_parse.py(528):             if subpattern:
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(138):         return len(self.data)
sre_parse.py(529):                 item = subpattern[-1:]
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(138):         return len(self.data)
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(143):             return SubPattern(self.pattern, self.data[index])
 --- modulename: sre_parse, funcname: __init__
sre_parse.py(93):         self.pattern = pattern
sre_parse.py(94):         if data is None:
sre_parse.py(96):         self.data = data
sre_parse.py(97):         self.width = None
sre_parse.py(532):             if not item or (_len(item) == 1 and item[0][0] == AT):
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(138):         return len(self.data)
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(138):         return len(self.data)
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_parse.py(534):             if item[0][0] in REPEATCODES:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_parse.py(536):             if sourcematch("?"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(211):         return 0
sre_parse.py(539):                 subpattern[-1] = (MAX_REPEAT, (min, max, item))
 --- modulename: sre_parse, funcname: __setitem__
sre_parse.py(146):         self.data[index] = code
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(413):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(414):         if this is None:
sre_parse.py(417):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(428):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(431):         elif this == "[":
sre_parse.py(488):         elif this and this[0] in REPEAT_CHARS:
sre_parse.py(541):         elif this == ".":
sre_parse.py(544):         elif this == "(":
sre_parse.py(545):             group = 1
sre_parse.py(546):             name = None
sre_parse.py(547):             condgroup = None
sre_parse.py(548):             if sourcematch("?"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(211):         return 0
sre_parse.py(666):             if group:
sre_parse.py(668):                 if group == 2:
sre_parse.py(672):                     group = state.opengroup(name)
 --- modulename: sre_parse, funcname: opengroup
sre_parse.py(75):         gid = self.groups
sre_parse.py(76):         self.groups = gid + 1
sre_parse.py(77):         if name is not None:
sre_parse.py(83):         self.open.append(gid)
sre_parse.py(84):         return gid
sre_parse.py(673):                 if condgroup:
sre_parse.py(676):                     p = _parse_sub(source, state)
 --- modulename: sre_parse, funcname: _parse_sub
sre_parse.py(320):     items = []
sre_parse.py(321):     itemsappend = items.append
sre_parse.py(322):     sourcematch = source.match
sre_parse.py(323):     while 1:
sre_parse.py(324):         itemsappend(_parse(source, state))
 --- modulename: sre_parse, funcname: _parse
sre_parse.py(397):     subpattern = SubPattern(state)
 --- modulename: sre_parse, funcname: __init__
sre_parse.py(93):         self.pattern = pattern
sre_parse.py(94):         if data is None:
sre_parse.py(95):             data = []
sre_parse.py(96):         self.data = data
sre_parse.py(97):         self.width = None
sre_parse.py(400):     subpatternappend = subpattern.append
sre_parse.py(401):     sourceget = source.get
sre_parse.py(402):     sourcematch = source.match
sre_parse.py(403):     _len = len
sre_parse.py(404):     PATTERNENDERS = _PATTERNENDERS
sre_parse.py(405):     ASSERTCHARS = _ASSERTCHARS
sre_parse.py(406):     LOOKBEHINDASSERTCHARS = _LOOKBEHINDASSERTCHARS
sre_parse.py(407):     REPEATCODES = _REPEATCODES
sre_parse.py(409):     while 1:
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(413):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(414):         if this is None:
sre_parse.py(417):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(428):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(431):         elif this == "[":
sre_parse.py(433):             set = []
sre_parse.py(434):             setappend = set.append
sre_parse.py(437):             if sourcematch("^"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(208):             if skip:
sre_parse.py(209):                 self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(210):             return 1
sre_parse.py(438):                 setappend((NEGATE, None))
sre_parse.py(440):             start = set[:]
sre_parse.py(441):             while 1:
sre_parse.py(442):                 this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(443):                 if this == "]" and set != start:
sre_parse.py(445):                 elif this and this[0] == "\\":
sre_parse.py(447):                 elif this:
sre_parse.py(448):                     code1 = LITERAL, ord(this)
sre_parse.py(451):                 if sourcematch("-"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(211):         return 0
sre_parse.py(475):                     if code1[0] is IN:
sre_parse.py(477):                     setappend(code1)
sre_parse.py(442):                 this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(443):                 if this == "]" and set != start:
sre_parse.py(444):                     break
sre_parse.py(480):             if _len(set)==1 and set[0][0] is LITERAL:
sre_parse.py(482):             elif _len(set)==2 and set[0][0] is NEGATE and set[1][0] is LITERAL:
sre_parse.py(483):                 subpatternappend((NOT_LITERAL, set[1][1])) # optimization
 --- modulename: sre_parse, funcname: append
sre_parse.py(150):         self.data.append(code)
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(413):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(414):         if this is None:
sre_parse.py(417):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(428):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(431):         elif this == "[":
sre_parse.py(488):         elif this and this[0] in REPEAT_CHARS:
sre_parse.py(490):             if this == "?":
sre_parse.py(492):             elif this == "*":
sre_parse.py(495):             elif this == "+":
sre_parse.py(496):                 min, max = 1, MAXREPEAT
sre_parse.py(528):             if subpattern:
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(138):         return len(self.data)
sre_parse.py(529):                 item = subpattern[-1:]
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(138):         return len(self.data)
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(143):             return SubPattern(self.pattern, self.data[index])
 --- modulename: sre_parse, funcname: __init__
sre_parse.py(93):         self.pattern = pattern
sre_parse.py(94):         if data is None:
sre_parse.py(96):         self.data = data
sre_parse.py(97):         self.width = None
sre_parse.py(532):             if not item or (_len(item) == 1 and item[0][0] == AT):
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(138):         return len(self.data)
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(138):         return len(self.data)
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_parse.py(534):             if item[0][0] in REPEATCODES:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_parse.py(536):             if sourcematch("?"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(211):         return 0
sre_parse.py(539):                 subpattern[-1] = (MAX_REPEAT, (min, max, item))
 --- modulename: sre_parse, funcname: __setitem__
sre_parse.py(146):         self.data[index] = code
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(412):             break # end of subpattern
sre_parse.py(704):     return subpattern
sre_parse.py(325):         if sourcematch("|"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(211):         return 0
sre_parse.py(327):         if not nested:
sre_parse.py(329):         if not source.next or sourcematch(")", 0):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(208):             if skip:
sre_parse.py(210):             return 1
sre_parse.py(330):             break
sre_parse.py(334):     if len(items) == 1:
sre_parse.py(335):         return items[0]
sre_parse.py(677):                 if not sourcematch(")"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(208):             if skip:
sre_parse.py(209):                 self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(210):             return 1
sre_parse.py(679):                 if group is not None:
sre_parse.py(680):                     state.closegroup(group)
 --- modulename: sre_parse, funcname: closegroup
sre_parse.py(86):         self.open.remove(gid)
sre_parse.py(681):                 subpatternappend((SUBPATTERN, (group, p)))
 --- modulename: sre_parse, funcname: append
sre_parse.py(150):         self.data.append(code)
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(413):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(199):             try:
sre_parse.py(200):                 c = self.string[self.index + 1]
sre_parse.py(203):             char = char + c
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(414):         if this is None:
sre_parse.py(417):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(428):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(429):             subpatternappend((LITERAL, ord(this)))
 --- modulename: sre_parse, funcname: append
sre_parse.py(150):         self.data.append(code)
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(413):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(414):         if this is None:
sre_parse.py(417):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(428):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(431):         elif this == "[":
sre_parse.py(488):         elif this and this[0] in REPEAT_CHARS:
sre_parse.py(541):         elif this == ".":
sre_parse.py(544):         elif this == "(":
sre_parse.py(691):         elif this == "^":
sre_parse.py(694):         elif this == "$":
sre_parse.py(697):         elif this and this[0] == "\\":
sre_parse.py(698):             code = _escape(source, this, state)
 --- modulename: sre_parse, funcname: _escape
sre_parse.py(270):     code = CATEGORIES.get(escape)
sre_parse.py(271):     if code:
sre_parse.py(272):         return code
sre_parse.py(699):             subpatternappend(code)
 --- modulename: sre_parse, funcname: append
sre_parse.py(150):         self.data.append(code)
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(413):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(414):         if this is None:
sre_parse.py(417):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(428):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(431):         elif this == "[":
sre_parse.py(488):         elif this and this[0] in REPEAT_CHARS:
sre_parse.py(490):             if this == "?":
sre_parse.py(492):             elif this == "*":
sre_parse.py(493):                 min, max = 0, MAXREPEAT
sre_parse.py(528):             if subpattern:
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(138):         return len(self.data)
sre_parse.py(529):                 item = subpattern[-1:]
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(138):         return len(self.data)
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(143):             return SubPattern(self.pattern, self.data[index])
 --- modulename: sre_parse, funcname: __init__
sre_parse.py(93):         self.pattern = pattern
sre_parse.py(94):         if data is None:
sre_parse.py(96):         self.data = data
sre_parse.py(97):         self.width = None
sre_parse.py(532):             if not item or (_len(item) == 1 and item[0][0] == AT):
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(138):         return len(self.data)
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(138):         return len(self.data)
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_parse.py(534):             if item[0][0] in REPEATCODES:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_parse.py(536):             if sourcematch("?"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(211):         return 0
sre_parse.py(539):                 subpattern[-1] = (MAX_REPEAT, (min, max, item))
 --- modulename: sre_parse, funcname: __setitem__
sre_parse.py(146):         self.data[index] = code
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(413):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(414):         if this is None:
sre_parse.py(417):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(428):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(431):         elif this == "[":
sre_parse.py(488):         elif this and this[0] in REPEAT_CHARS:
sre_parse.py(541):         elif this == ".":
sre_parse.py(544):         elif this == "(":
sre_parse.py(545):             group = 1
sre_parse.py(546):             name = None
sre_parse.py(547):             condgroup = None
sre_parse.py(548):             if sourcematch("?"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(211):         return 0
sre_parse.py(666):             if group:
sre_parse.py(668):                 if group == 2:
sre_parse.py(672):                     group = state.opengroup(name)
 --- modulename: sre_parse, funcname: opengroup
sre_parse.py(75):         gid = self.groups
sre_parse.py(76):         self.groups = gid + 1
sre_parse.py(77):         if name is not None:
sre_parse.py(83):         self.open.append(gid)
sre_parse.py(84):         return gid
sre_parse.py(673):                 if condgroup:
sre_parse.py(676):                     p = _parse_sub(source, state)
 --- modulename: sre_parse, funcname: _parse_sub
sre_parse.py(320):     items = []
sre_parse.py(321):     itemsappend = items.append
sre_parse.py(322):     sourcematch = source.match
sre_parse.py(323):     while 1:
sre_parse.py(324):         itemsappend(_parse(source, state))
 --- modulename: sre_parse, funcname: _parse
sre_parse.py(397):     subpattern = SubPattern(state)
 --- modulename: sre_parse, funcname: __init__
sre_parse.py(93):         self.pattern = pattern
sre_parse.py(94):         if data is None:
sre_parse.py(95):             data = []
sre_parse.py(96):         self.data = data
sre_parse.py(97):         self.width = None
sre_parse.py(400):     subpatternappend = subpattern.append
sre_parse.py(401):     sourceget = source.get
sre_parse.py(402):     sourcematch = source.match
sre_parse.py(403):     _len = len
sre_parse.py(404):     PATTERNENDERS = _PATTERNENDERS
sre_parse.py(405):     ASSERTCHARS = _ASSERTCHARS
sre_parse.py(406):     LOOKBEHINDASSERTCHARS = _LOOKBEHINDASSERTCHARS
sre_parse.py(407):     REPEATCODES = _REPEATCODES
sre_parse.py(409):     while 1:
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(413):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(199):             try:
sre_parse.py(200):                 c = self.string[self.index + 1]
sre_parse.py(203):             char = char + c
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(414):         if this is None:
sre_parse.py(417):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(428):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(431):         elif this == "[":
sre_parse.py(433):             set = []
sre_parse.py(434):             setappend = set.append
sre_parse.py(437):             if sourcematch("^"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(211):         return 0
sre_parse.py(440):             start = set[:]
sre_parse.py(441):             while 1:
sre_parse.py(442):                 this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(443):                 if this == "]" and set != start:
sre_parse.py(445):                 elif this and this[0] == "\\":
sre_parse.py(446):                     code1 = _class_escape(source, this)
 --- modulename: sre_parse, funcname: _class_escape
sre_parse.py(238):     code = ESCAPES.get(escape)
sre_parse.py(239):     if code:
sre_parse.py(241):     code = CATEGORIES.get(escape)
sre_parse.py(242):     if code and code[0] == IN:
sre_parse.py(243):         return code
sre_parse.py(451):                 if sourcematch("-"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(211):         return 0
sre_parse.py(475):                     if code1[0] is IN:
sre_parse.py(476):                         code1 = code1[1][0]
sre_parse.py(477):                     setappend(code1)
sre_parse.py(442):                 this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(443):                 if this == "]" and set != start:
sre_parse.py(445):                 elif this and this[0] == "\\":
sre_parse.py(447):                 elif this:
sre_parse.py(448):                     code1 = LITERAL, ord(this)
sre_parse.py(451):                 if sourcematch("-"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(211):         return 0
sre_parse.py(475):                     if code1[0] is IN:
sre_parse.py(477):                     setappend(code1)
sre_parse.py(442):                 this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(443):                 if this == "]" and set != start:
sre_parse.py(444):                     break
sre_parse.py(480):             if _len(set)==1 and set[0][0] is LITERAL:
sre_parse.py(482):             elif _len(set)==2 and set[0][0] is NEGATE and set[1][0] is LITERAL:
sre_parse.py(486):                 subpatternappend((IN, set))
 --- modulename: sre_parse, funcname: append
sre_parse.py(150):         self.data.append(code)
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(413):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(414):         if this is None:
sre_parse.py(417):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(428):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(431):         elif this == "[":
sre_parse.py(488):         elif this and this[0] in REPEAT_CHARS:
sre_parse.py(490):             if this == "?":
sre_parse.py(492):             elif this == "*":
sre_parse.py(495):             elif this == "+":
sre_parse.py(496):                 min, max = 1, MAXREPEAT
sre_parse.py(528):             if subpattern:
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(138):         return len(self.data)
sre_parse.py(529):                 item = subpattern[-1:]
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(138):         return len(self.data)
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(143):             return SubPattern(self.pattern, self.data[index])
 --- modulename: sre_parse, funcname: __init__
sre_parse.py(93):         self.pattern = pattern
sre_parse.py(94):         if data is None:
sre_parse.py(96):         self.data = data
sre_parse.py(97):         self.width = None
sre_parse.py(532):             if not item or (_len(item) == 1 and item[0][0] == AT):
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(138):         return len(self.data)
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(138):         return len(self.data)
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_parse.py(534):             if item[0][0] in REPEATCODES:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_parse.py(536):             if sourcematch("?"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(211):         return 0
sre_parse.py(539):                 subpattern[-1] = (MAX_REPEAT, (min, max, item))
 --- modulename: sre_parse, funcname: __setitem__
sre_parse.py(146):         self.data[index] = code
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(412):             break # end of subpattern
sre_parse.py(704):     return subpattern
sre_parse.py(325):         if sourcematch("|"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(211):         return 0
sre_parse.py(327):         if not nested:
sre_parse.py(329):         if not source.next or sourcematch(")", 0):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(208):             if skip:
sre_parse.py(210):             return 1
sre_parse.py(330):             break
sre_parse.py(334):     if len(items) == 1:
sre_parse.py(335):         return items[0]
sre_parse.py(677):                 if not sourcematch(")"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(208):             if skip:
sre_parse.py(209):                 self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(210):             return 1
sre_parse.py(679):                 if group is not None:
sre_parse.py(680):                     state.closegroup(group)
 --- modulename: sre_parse, funcname: closegroup
sre_parse.py(86):         self.open.remove(gid)
sre_parse.py(681):                 subpatternappend((SUBPATTERN, (group, p)))
 --- modulename: sre_parse, funcname: append
sre_parse.py(150):         self.data.append(code)
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(413):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(199):             try:
sre_parse.py(200):                 c = self.string[self.index + 1]
sre_parse.py(203):             char = char + c
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(414):         if this is None:
sre_parse.py(417):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(428):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(429):             subpatternappend((LITERAL, ord(this)))
 --- modulename: sre_parse, funcname: append
sre_parse.py(150):         self.data.append(code)
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(413):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(414):         if this is None:
sre_parse.py(417):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(428):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(431):         elif this == "[":
sre_parse.py(488):         elif this and this[0] in REPEAT_CHARS:
sre_parse.py(541):         elif this == ".":
sre_parse.py(544):         elif this == "(":
sre_parse.py(691):         elif this == "^":
sre_parse.py(694):         elif this == "$":
sre_parse.py(697):         elif this and this[0] == "\\":
sre_parse.py(698):             code = _escape(source, this, state)
 --- modulename: sre_parse, funcname: _escape
sre_parse.py(270):     code = CATEGORIES.get(escape)
sre_parse.py(271):     if code:
sre_parse.py(272):         return code
sre_parse.py(699):             subpatternappend(code)
 --- modulename: sre_parse, funcname: append
sre_parse.py(150):         self.data.append(code)
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(413):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(414):         if this is None:
sre_parse.py(417):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(428):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(431):         elif this == "[":
sre_parse.py(488):         elif this and this[0] in REPEAT_CHARS:
sre_parse.py(490):             if this == "?":
sre_parse.py(492):             elif this == "*":
sre_parse.py(493):                 min, max = 0, MAXREPEAT
sre_parse.py(528):             if subpattern:
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(138):         return len(self.data)
sre_parse.py(529):                 item = subpattern[-1:]
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(138):         return len(self.data)
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(143):             return SubPattern(self.pattern, self.data[index])
 --- modulename: sre_parse, funcname: __init__
sre_parse.py(93):         self.pattern = pattern
sre_parse.py(94):         if data is None:
sre_parse.py(96):         self.data = data
sre_parse.py(97):         self.width = None
sre_parse.py(532):             if not item or (_len(item) == 1 and item[0][0] == AT):
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(138):         return len(self.data)
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(138):         return len(self.data)
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_parse.py(534):             if item[0][0] in REPEATCODES:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_parse.py(536):             if sourcematch("?"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(211):         return 0
sre_parse.py(539):                 subpattern[-1] = (MAX_REPEAT, (min, max, item))
 --- modulename: sre_parse, funcname: __setitem__
sre_parse.py(146):         self.data[index] = code
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(413):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(414):         if this is None:
sre_parse.py(417):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(428):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(431):         elif this == "[":
sre_parse.py(488):         elif this and this[0] in REPEAT_CHARS:
sre_parse.py(541):         elif this == ".":
sre_parse.py(544):         elif this == "(":
sre_parse.py(545):             group = 1
sre_parse.py(546):             name = None
sre_parse.py(547):             condgroup = None
sre_parse.py(548):             if sourcematch("?"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(211):         return 0
sre_parse.py(666):             if group:
sre_parse.py(668):                 if group == 2:
sre_parse.py(672):                     group = state.opengroup(name)
 --- modulename: sre_parse, funcname: opengroup
sre_parse.py(75):         gid = self.groups
sre_parse.py(76):         self.groups = gid + 1
sre_parse.py(77):         if name is not None:
sre_parse.py(83):         self.open.append(gid)
sre_parse.py(84):         return gid
sre_parse.py(673):                 if condgroup:
sre_parse.py(676):                     p = _parse_sub(source, state)
 --- modulename: sre_parse, funcname: _parse_sub
sre_parse.py(320):     items = []
sre_parse.py(321):     itemsappend = items.append
sre_parse.py(322):     sourcematch = source.match
sre_parse.py(323):     while 1:
sre_parse.py(324):         itemsappend(_parse(source, state))
 --- modulename: sre_parse, funcname: _parse
sre_parse.py(397):     subpattern = SubPattern(state)
 --- modulename: sre_parse, funcname: __init__
sre_parse.py(93):         self.pattern = pattern
sre_parse.py(94):         if data is None:
sre_parse.py(95):             data = []
sre_parse.py(96):         self.data = data
sre_parse.py(97):         self.width = None
sre_parse.py(400):     subpatternappend = subpattern.append
sre_parse.py(401):     sourceget = source.get
sre_parse.py(402):     sourcematch = source.match
sre_parse.py(403):     _len = len
sre_parse.py(404):     PATTERNENDERS = _PATTERNENDERS
sre_parse.py(405):     ASSERTCHARS = _ASSERTCHARS
sre_parse.py(406):     LOOKBEHINDASSERTCHARS = _LOOKBEHINDASSERTCHARS
sre_parse.py(407):     REPEATCODES = _REPEATCODES
sre_parse.py(409):     while 1:
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(413):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(199):             try:
sre_parse.py(200):                 c = self.string[self.index + 1]
sre_parse.py(203):             char = char + c
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(414):         if this is None:
sre_parse.py(417):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(428):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(431):         elif this == "[":
sre_parse.py(433):             set = []
sre_parse.py(434):             setappend = set.append
sre_parse.py(437):             if sourcematch("^"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(211):         return 0
sre_parse.py(440):             start = set[:]
sre_parse.py(441):             while 1:
sre_parse.py(442):                 this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(443):                 if this == "]" and set != start:
sre_parse.py(445):                 elif this and this[0] == "\\":
sre_parse.py(446):                     code1 = _class_escape(source, this)
 --- modulename: sre_parse, funcname: _class_escape
sre_parse.py(238):     code = ESCAPES.get(escape)
sre_parse.py(239):     if code:
sre_parse.py(241):     code = CATEGORIES.get(escape)
sre_parse.py(242):     if code and code[0] == IN:
sre_parse.py(243):         return code
sre_parse.py(451):                 if sourcematch("-"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(211):         return 0
sre_parse.py(475):                     if code1[0] is IN:
sre_parse.py(476):                         code1 = code1[1][0]
sre_parse.py(477):                     setappend(code1)
sre_parse.py(442):                 this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(443):                 if this == "]" and set != start:
sre_parse.py(445):                 elif this and this[0] == "\\":
sre_parse.py(447):                 elif this:
sre_parse.py(448):                     code1 = LITERAL, ord(this)
sre_parse.py(451):                 if sourcematch("-"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(211):         return 0
sre_parse.py(475):                     if code1[0] is IN:
sre_parse.py(477):                     setappend(code1)
sre_parse.py(442):                 this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(443):                 if this == "]" and set != start:
sre_parse.py(445):                 elif this and this[0] == "\\":
sre_parse.py(447):                 elif this:
sre_parse.py(448):                     code1 = LITERAL, ord(this)
sre_parse.py(451):                 if sourcematch("-"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(211):         return 0
sre_parse.py(475):                     if code1[0] is IN:
sre_parse.py(477):                     setappend(code1)
sre_parse.py(442):                 this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(443):                 if this == "]" and set != start:
sre_parse.py(444):                     break
sre_parse.py(480):             if _len(set)==1 and set[0][0] is LITERAL:
sre_parse.py(482):             elif _len(set)==2 and set[0][0] is NEGATE and set[1][0] is LITERAL:
sre_parse.py(486):                 subpatternappend((IN, set))
 --- modulename: sre_parse, funcname: append
sre_parse.py(150):         self.data.append(code)
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(413):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(414):         if this is None:
sre_parse.py(417):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(428):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(431):         elif this == "[":
sre_parse.py(488):         elif this and this[0] in REPEAT_CHARS:
sre_parse.py(490):             if this == "?":
sre_parse.py(492):             elif this == "*":
sre_parse.py(495):             elif this == "+":
sre_parse.py(496):                 min, max = 1, MAXREPEAT
sre_parse.py(528):             if subpattern:
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(138):         return len(self.data)
sre_parse.py(529):                 item = subpattern[-1:]
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(138):         return len(self.data)
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(143):             return SubPattern(self.pattern, self.data[index])
 --- modulename: sre_parse, funcname: __init__
sre_parse.py(93):         self.pattern = pattern
sre_parse.py(94):         if data is None:
sre_parse.py(96):         self.data = data
sre_parse.py(97):         self.width = None
sre_parse.py(532):             if not item or (_len(item) == 1 and item[0][0] == AT):
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(138):         return len(self.data)
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(138):         return len(self.data)
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_parse.py(534):             if item[0][0] in REPEATCODES:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_parse.py(536):             if sourcematch("?"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(211):         return 0
sre_parse.py(539):                 subpattern[-1] = (MAX_REPEAT, (min, max, item))
 --- modulename: sre_parse, funcname: __setitem__
sre_parse.py(146):         self.data[index] = code
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(412):             break # end of subpattern
sre_parse.py(704):     return subpattern
sre_parse.py(325):         if sourcematch("|"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(211):         return 0
sre_parse.py(327):         if not nested:
sre_parse.py(329):         if not source.next or sourcematch(")", 0):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(208):             if skip:
sre_parse.py(210):             return 1
sre_parse.py(330):             break
sre_parse.py(334):     if len(items) == 1:
sre_parse.py(335):         return items[0]
sre_parse.py(677):                 if not sourcematch(")"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(208):             if skip:
sre_parse.py(209):                 self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(199):             try:
sre_parse.py(200):                 c = self.string[self.index + 1]
sre_parse.py(203):             char = char + c
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(210):             return 1
sre_parse.py(679):                 if group is not None:
sre_parse.py(680):                     state.closegroup(group)
 --- modulename: sre_parse, funcname: closegroup
sre_parse.py(86):         self.open.remove(gid)
sre_parse.py(681):                 subpatternappend((SUBPATTERN, (group, p)))
 --- modulename: sre_parse, funcname: append
sre_parse.py(150):         self.data.append(code)
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(413):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(199):             try:
sre_parse.py(200):                 c = self.string[self.index + 1]
sre_parse.py(203):             char = char + c
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(414):         if this is None:
sre_parse.py(417):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(428):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(431):         elif this == "[":
sre_parse.py(488):         elif this and this[0] in REPEAT_CHARS:
sre_parse.py(541):         elif this == ".":
sre_parse.py(544):         elif this == "(":
sre_parse.py(691):         elif this == "^":
sre_parse.py(694):         elif this == "$":
sre_parse.py(697):         elif this and this[0] == "\\":
sre_parse.py(698):             code = _escape(source, this, state)
 --- modulename: sre_parse, funcname: _escape
sre_parse.py(270):     code = CATEGORIES.get(escape)
sre_parse.py(271):     if code:
sre_parse.py(273):     code = ESCAPES.get(escape)
sre_parse.py(274):     if code:
sre_parse.py(276):     try:
sre_parse.py(277):         c = escape[1:2]
sre_parse.py(278):         if c == "x":
sre_parse.py(285):         elif c == "0":
sre_parse.py(290):         elif c in DIGITS:
sre_parse.py(311):         if len(escape) == 2:
sre_parse.py(312):             return LITERAL, ord(escape[1])
sre_parse.py(699):             subpatternappend(code)
 --- modulename: sre_parse, funcname: append
sre_parse.py(150):         self.data.append(code)
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(413):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(414):         if this is None:
sre_parse.py(417):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(428):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(431):         elif this == "[":
sre_parse.py(488):         elif this and this[0] in REPEAT_CHARS:
sre_parse.py(541):         elif this == ".":
sre_parse.py(544):         elif this == "(":
sre_parse.py(691):         elif this == "^":
sre_parse.py(694):         elif this == "$":
sre_parse.py(697):         elif this and this[0] == "\\":
sre_parse.py(698):             code = _escape(source, this, state)
 --- modulename: sre_parse, funcname: _escape
sre_parse.py(270):     code = CATEGORIES.get(escape)
sre_parse.py(271):     if code:
sre_parse.py(272):         return code
sre_parse.py(699):             subpatternappend(code)
 --- modulename: sre_parse, funcname: append
sre_parse.py(150):         self.data.append(code)
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(413):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(199):             try:
sre_parse.py(200):                 c = self.string[self.index + 1]
sre_parse.py(203):             char = char + c
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(414):         if this is None:
sre_parse.py(417):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(428):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(431):         elif this == "[":
sre_parse.py(488):         elif this and this[0] in REPEAT_CHARS:
sre_parse.py(490):             if this == "?":
sre_parse.py(492):             elif this == "*":
sre_parse.py(493):                 min, max = 0, MAXREPEAT
sre_parse.py(528):             if subpattern:
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(138):         return len(self.data)
sre_parse.py(529):                 item = subpattern[-1:]
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(138):         return len(self.data)
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(143):             return SubPattern(self.pattern, self.data[index])
 --- modulename: sre_parse, funcname: __init__
sre_parse.py(93):         self.pattern = pattern
sre_parse.py(94):         if data is None:
sre_parse.py(96):         self.data = data
sre_parse.py(97):         self.width = None
sre_parse.py(532):             if not item or (_len(item) == 1 and item[0][0] == AT):
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(138):         return len(self.data)
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(138):         return len(self.data)
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_parse.py(534):             if item[0][0] in REPEATCODES:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_parse.py(536):             if sourcematch("?"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(211):         return 0
sre_parse.py(539):                 subpattern[-1] = (MAX_REPEAT, (min, max, item))
 --- modulename: sre_parse, funcname: __setitem__
sre_parse.py(146):         self.data[index] = code
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(413):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(414):         if this is None:
sre_parse.py(417):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(428):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(431):         elif this == "[":
sre_parse.py(488):         elif this and this[0] in REPEAT_CHARS:
sre_parse.py(541):         elif this == ".":
sre_parse.py(544):         elif this == "(":
sre_parse.py(691):         elif this == "^":
sre_parse.py(694):         elif this == "$":
sre_parse.py(697):         elif this and this[0] == "\\":
sre_parse.py(698):             code = _escape(source, this, state)
 --- modulename: sre_parse, funcname: _escape
sre_parse.py(270):     code = CATEGORIES.get(escape)
sre_parse.py(271):     if code:
sre_parse.py(273):     code = ESCAPES.get(escape)
sre_parse.py(274):     if code:
sre_parse.py(276):     try:
sre_parse.py(277):         c = escape[1:2]
sre_parse.py(278):         if c == "x":
sre_parse.py(285):         elif c == "0":
sre_parse.py(290):         elif c in DIGITS:
sre_parse.py(311):         if len(escape) == 2:
sre_parse.py(312):             return LITERAL, ord(escape[1])
sre_parse.py(699):             subpatternappend(code)
 --- modulename: sre_parse, funcname: append
sre_parse.py(150):         self.data.append(code)
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(413):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(414):         if this is None:
sre_parse.py(417):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(428):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(429):             subpatternappend((LITERAL, ord(this)))
 --- modulename: sre_parse, funcname: append
sre_parse.py(150):         self.data.append(code)
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(413):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(414):         if this is None:
sre_parse.py(417):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(428):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(429):             subpatternappend((LITERAL, ord(this)))
 --- modulename: sre_parse, funcname: append
sre_parse.py(150):         self.data.append(code)
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(413):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(414):         if this is None:
sre_parse.py(417):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(428):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(429):             subpatternappend((LITERAL, ord(this)))
 --- modulename: sre_parse, funcname: append
sre_parse.py(150):         self.data.append(code)
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(413):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(414):         if this is None:
sre_parse.py(417):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(428):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(429):             subpatternappend((LITERAL, ord(this)))
 --- modulename: sre_parse, funcname: append
sre_parse.py(150):         self.data.append(code)
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(413):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(414):         if this is None:
sre_parse.py(417):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(428):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(429):             subpatternappend((LITERAL, ord(this)))
 --- modulename: sre_parse, funcname: append
sre_parse.py(150):         self.data.append(code)
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(413):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(414):         if this is None:
sre_parse.py(417):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(428):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(431):         elif this == "[":
sre_parse.py(433):             set = []
sre_parse.py(434):             setappend = set.append
sre_parse.py(437):             if sourcematch("^"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(208):             if skip:
sre_parse.py(209):                 self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(199):             try:
sre_parse.py(200):                 c = self.string[self.index + 1]
sre_parse.py(203):             char = char + c
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(210):             return 1
sre_parse.py(438):                 setappend((NEGATE, None))
sre_parse.py(440):             start = set[:]
sre_parse.py(441):             while 1:
sre_parse.py(442):                 this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(443):                 if this == "]" and set != start:
sre_parse.py(445):                 elif this and this[0] == "\\":
sre_parse.py(446):                     code1 = _class_escape(source, this)
 --- modulename: sre_parse, funcname: _class_escape
sre_parse.py(238):     code = ESCAPES.get(escape)
sre_parse.py(239):     if code:
sre_parse.py(241):     code = CATEGORIES.get(escape)
sre_parse.py(242):     if code and code[0] == IN:
sre_parse.py(244):     try:
sre_parse.py(245):         c = escape[1:2]
sre_parse.py(246):         if c == "x":
sre_parse.py(254):         elif c in OCTDIGITS:
sre_parse.py(260):         elif c in DIGITS:
sre_parse.py(262):         if len(escape) == 2:
sre_parse.py(263):             return LITERAL, ord(escape[1])
sre_parse.py(451):                 if sourcematch("-"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(211):         return 0
sre_parse.py(475):                     if code1[0] is IN:
sre_parse.py(477):                     setappend(code1)
sre_parse.py(442):                 this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(443):                 if this == "]" and set != start:
sre_parse.py(444):                     break
sre_parse.py(480):             if _len(set)==1 and set[0][0] is LITERAL:
sre_parse.py(482):             elif _len(set)==2 and set[0][0] is NEGATE and set[1][0] is LITERAL:
sre_parse.py(483):                 subpatternappend((NOT_LITERAL, set[1][1])) # optimization
 --- modulename: sre_parse, funcname: append
sre_parse.py(150):         self.data.append(code)
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(413):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(199):             try:
sre_parse.py(200):                 c = self.string[self.index + 1]
sre_parse.py(203):             char = char + c
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(414):         if this is None:
sre_parse.py(417):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(428):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(431):         elif this == "[":
sre_parse.py(488):         elif this and this[0] in REPEAT_CHARS:
sre_parse.py(490):             if this == "?":
sre_parse.py(492):             elif this == "*":
sre_parse.py(495):             elif this == "+":
sre_parse.py(496):                 min, max = 1, MAXREPEAT
sre_parse.py(528):             if subpattern:
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(138):         return len(self.data)
sre_parse.py(529):                 item = subpattern[-1:]
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(138):         return len(self.data)
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(143):             return SubPattern(self.pattern, self.data[index])
 --- modulename: sre_parse, funcname: __init__
sre_parse.py(93):         self.pattern = pattern
sre_parse.py(94):         if data is None:
sre_parse.py(96):         self.data = data
sre_parse.py(97):         self.width = None
sre_parse.py(532):             if not item or (_len(item) == 1 and item[0][0] == AT):
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(138):         return len(self.data)
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(138):         return len(self.data)
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_parse.py(534):             if item[0][0] in REPEATCODES:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_parse.py(536):             if sourcematch("?"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(211):         return 0
sre_parse.py(539):                 subpattern[-1] = (MAX_REPEAT, (min, max, item))
 --- modulename: sre_parse, funcname: __setitem__
sre_parse.py(146):         self.data[index] = code
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(413):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(414):         if this is None:
sre_parse.py(417):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(428):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(431):         elif this == "[":
sre_parse.py(488):         elif this and this[0] in REPEAT_CHARS:
sre_parse.py(541):         elif this == ".":
sre_parse.py(544):         elif this == "(":
sre_parse.py(691):         elif this == "^":
sre_parse.py(694):         elif this == "$":
sre_parse.py(697):         elif this and this[0] == "\\":
sre_parse.py(698):             code = _escape(source, this, state)
 --- modulename: sre_parse, funcname: _escape
sre_parse.py(270):     code = CATEGORIES.get(escape)
sre_parse.py(271):     if code:
sre_parse.py(273):     code = ESCAPES.get(escape)
sre_parse.py(274):     if code:
sre_parse.py(276):     try:
sre_parse.py(277):         c = escape[1:2]
sre_parse.py(278):         if c == "x":
sre_parse.py(285):         elif c == "0":
sre_parse.py(290):         elif c in DIGITS:
sre_parse.py(311):         if len(escape) == 2:
sre_parse.py(312):             return LITERAL, ord(escape[1])
sre_parse.py(699):             subpatternappend(code)
 --- modulename: sre_parse, funcname: append
sre_parse.py(150):         self.data.append(code)
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(413):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(195):             self.next = None
sre_parse.py(196):             return
sre_parse.py(215):         return this
sre_parse.py(414):         if this is None:
sre_parse.py(417):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(428):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(431):         elif this == "[":
sre_parse.py(488):         elif this and this[0] in REPEAT_CHARS:
sre_parse.py(490):             if this == "?":
sre_parse.py(491):                 min, max = 0, 1
sre_parse.py(528):             if subpattern:
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(138):         return len(self.data)
sre_parse.py(529):                 item = subpattern[-1:]
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(138):         return len(self.data)
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(143):             return SubPattern(self.pattern, self.data[index])
 --- modulename: sre_parse, funcname: __init__
sre_parse.py(93):         self.pattern = pattern
sre_parse.py(94):         if data is None:
sre_parse.py(96):         self.data = data
sre_parse.py(97):         self.width = None
sre_parse.py(532):             if not item or (_len(item) == 1 and item[0][0] == AT):
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(138):         return len(self.data)
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(138):         return len(self.data)
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_parse.py(534):             if item[0][0] in REPEATCODES:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_parse.py(536):             if sourcematch("?"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(211):         return 0
sre_parse.py(539):                 subpattern[-1] = (MAX_REPEAT, (min, max, item))
 --- modulename: sre_parse, funcname: __setitem__
sre_parse.py(146):         self.data[index] = code
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(413):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(195):             self.next = None
sre_parse.py(196):             return
sre_parse.py(215):         return this
sre_parse.py(414):         if this is None:
sre_parse.py(415):             break # end of pattern
sre_parse.py(704):     return subpattern
sre_parse.py(325):         if sourcematch("|"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(211):         return 0
sre_parse.py(327):         if not nested:
sre_parse.py(328):             break
sre_parse.py(334):     if len(items) == 1:
sre_parse.py(335):         return items[0]
sre_parse.py(718):     tail = source.get()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(195):             self.next = None
sre_parse.py(196):             return
sre_parse.py(215):         return this
sre_parse.py(719):     if tail == ")":
sre_parse.py(721):     elif tail:
sre_parse.py(724):     if not (flags & SRE_FLAG_VERBOSE) and p.pattern.flags & SRE_FLAG_VERBOSE:
sre_parse.py(729):     if flags & SRE_FLAG_DEBUG:
sre_parse.py(732):     return p
sre_compile.py(576):     code = _code(p, flags)
 --- modulename: sre_compile, funcname: _code
sre_compile.py(554):     flags = p.pattern.flags | flags
sre_compile.py(555):     code = []
sre_compile.py(558):     _compile_info(code, p, flags)
 --- modulename: sre_compile, funcname: _compile_info
sre_compile.py(437):     lo, hi = pattern.getwidth()
 --- modulename: sre_parse, funcname: getwidth
sre_parse.py(153):         if self.width:
sre_parse.py(155):         lo = hi = 0
sre_parse.py(156):         UNITCODES = (ANY, RANGE, IN, LITERAL, NOT_LITERAL, CATEGORY)
sre_parse.py(157):         REPEATCODES = (MIN_REPEAT, MAX_REPEAT)
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(159):             if op is BRANCH:
sre_parse.py(168):             elif op is CALL:
sre_parse.py(172):             elif op is SUBPATTERN:
sre_parse.py(173):                 i, j = av[1].getwidth()
 --- modulename: sre_parse, funcname: getwidth
sre_parse.py(153):         if self.width:
sre_parse.py(155):         lo = hi = 0
sre_parse.py(156):         UNITCODES = (ANY, RANGE, IN, LITERAL, NOT_LITERAL, CATEGORY)
sre_parse.py(157):         REPEATCODES = (MIN_REPEAT, MAX_REPEAT)
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(159):             if op is BRANCH:
sre_parse.py(168):             elif op is CALL:
sre_parse.py(172):             elif op is SUBPATTERN:
sre_parse.py(176):             elif op in REPEATCODES:
sre_parse.py(177):                 i, j = av[2].getwidth()
 --- modulename: sre_parse, funcname: getwidth
sre_parse.py(153):         if self.width:
sre_parse.py(155):         lo = hi = 0
sre_parse.py(156):         UNITCODES = (ANY, RANGE, IN, LITERAL, NOT_LITERAL, CATEGORY)
sre_parse.py(157):         REPEATCODES = (MIN_REPEAT, MAX_REPEAT)
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(159):             if op is BRANCH:
sre_parse.py(168):             elif op is CALL:
sre_parse.py(172):             elif op is SUBPATTERN:
sre_parse.py(176):             elif op in REPEATCODES:
sre_parse.py(180):             elif op in UNITCODES:
sre_parse.py(181):                 lo = lo + 1
sre_parse.py(182):                 hi = hi + 1
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(185):         self.width = min(lo, MAXREPEAT - 1), min(hi, MAXREPEAT)
sre_parse.py(186):         return self.width
sre_parse.py(178):                 lo = lo + i * av[0]
sre_parse.py(179):                 hi = hi + j * av[1]
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(185):         self.width = min(lo, MAXREPEAT - 1), min(hi, MAXREPEAT)
sre_parse.py(186):         return self.width
sre_parse.py(174):                 lo = lo + i
sre_parse.py(175):                 hi = hi + j
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(159):             if op is BRANCH:
sre_parse.py(168):             elif op is CALL:
sre_parse.py(172):             elif op is SUBPATTERN:
sre_parse.py(176):             elif op in REPEATCODES:
sre_parse.py(177):                 i, j = av[2].getwidth()
 --- modulename: sre_parse, funcname: getwidth
sre_parse.py(153):         if self.width:
sre_parse.py(155):         lo = hi = 0
sre_parse.py(156):         UNITCODES = (ANY, RANGE, IN, LITERAL, NOT_LITERAL, CATEGORY)
sre_parse.py(157):         REPEATCODES = (MIN_REPEAT, MAX_REPEAT)
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(159):             if op is BRANCH:
sre_parse.py(168):             elif op is CALL:
sre_parse.py(172):             elif op is SUBPATTERN:
sre_parse.py(176):             elif op in REPEATCODES:
sre_parse.py(180):             elif op in UNITCODES:
sre_parse.py(181):                 lo = lo + 1
sre_parse.py(182):                 hi = hi + 1
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(185):         self.width = min(lo, MAXREPEAT - 1), min(hi, MAXREPEAT)
sre_parse.py(186):         return self.width
sre_parse.py(178):                 lo = lo + i * av[0]
sre_parse.py(179):                 hi = hi + j * av[1]
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(159):             if op is BRANCH:
sre_parse.py(168):             elif op is CALL:
sre_parse.py(172):             elif op is SUBPATTERN:
sre_parse.py(176):             elif op in REPEATCODES:
sre_parse.py(180):             elif op in UNITCODES:
sre_parse.py(181):                 lo = lo + 1
sre_parse.py(182):                 hi = hi + 1
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(159):             if op is BRANCH:
sre_parse.py(168):             elif op is CALL:
sre_parse.py(172):             elif op is SUBPATTERN:
sre_parse.py(176):             elif op in REPEATCODES:
sre_parse.py(177):                 i, j = av[2].getwidth()
 --- modulename: sre_parse, funcname: getwidth
sre_parse.py(153):         if self.width:
sre_parse.py(155):         lo = hi = 0
sre_parse.py(156):         UNITCODES = (ANY, RANGE, IN, LITERAL, NOT_LITERAL, CATEGORY)
sre_parse.py(157):         REPEATCODES = (MIN_REPEAT, MAX_REPEAT)
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(159):             if op is BRANCH:
sre_parse.py(168):             elif op is CALL:
sre_parse.py(172):             elif op is SUBPATTERN:
sre_parse.py(176):             elif op in REPEATCODES:
sre_parse.py(180):             elif op in UNITCODES:
sre_parse.py(181):                 lo = lo + 1
sre_parse.py(182):                 hi = hi + 1
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(185):         self.width = min(lo, MAXREPEAT - 1), min(hi, MAXREPEAT)
sre_parse.py(186):         return self.width
sre_parse.py(178):                 lo = lo + i * av[0]
sre_parse.py(179):                 hi = hi + j * av[1]
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(159):             if op is BRANCH:
sre_parse.py(168):             elif op is CALL:
sre_parse.py(172):             elif op is SUBPATTERN:
sre_parse.py(173):                 i, j = av[1].getwidth()
 --- modulename: sre_parse, funcname: getwidth
sre_parse.py(153):         if self.width:
sre_parse.py(155):         lo = hi = 0
sre_parse.py(156):         UNITCODES = (ANY, RANGE, IN, LITERAL, NOT_LITERAL, CATEGORY)
sre_parse.py(157):         REPEATCODES = (MIN_REPEAT, MAX_REPEAT)
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(159):             if op is BRANCH:
sre_parse.py(168):             elif op is CALL:
sre_parse.py(172):             elif op is SUBPATTERN:
sre_parse.py(176):             elif op in REPEATCODES:
sre_parse.py(177):                 i, j = av[2].getwidth()
 --- modulename: sre_parse, funcname: getwidth
sre_parse.py(153):         if self.width:
sre_parse.py(155):         lo = hi = 0
sre_parse.py(156):         UNITCODES = (ANY, RANGE, IN, LITERAL, NOT_LITERAL, CATEGORY)
sre_parse.py(157):         REPEATCODES = (MIN_REPEAT, MAX_REPEAT)
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(159):             if op is BRANCH:
sre_parse.py(168):             elif op is CALL:
sre_parse.py(172):             elif op is SUBPATTERN:
sre_parse.py(176):             elif op in REPEATCODES:
sre_parse.py(180):             elif op in UNITCODES:
sre_parse.py(181):                 lo = lo + 1
sre_parse.py(182):                 hi = hi + 1
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(185):         self.width = min(lo, MAXREPEAT - 1), min(hi, MAXREPEAT)
sre_parse.py(186):         return self.width
sre_parse.py(178):                 lo = lo + i * av[0]
sre_parse.py(179):                 hi = hi + j * av[1]
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(185):         self.width = min(lo, MAXREPEAT - 1), min(hi, MAXREPEAT)
sre_parse.py(186):         return self.width
sre_parse.py(174):                 lo = lo + i
sre_parse.py(175):                 hi = hi + j
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(159):             if op is BRANCH:
sre_parse.py(168):             elif op is CALL:
sre_parse.py(172):             elif op is SUBPATTERN:
sre_parse.py(176):             elif op in REPEATCODES:
sre_parse.py(180):             elif op in UNITCODES:
sre_parse.py(181):                 lo = lo + 1
sre_parse.py(182):                 hi = hi + 1
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(159):             if op is BRANCH:
sre_parse.py(168):             elif op is CALL:
sre_parse.py(172):             elif op is SUBPATTERN:
sre_parse.py(176):             elif op in REPEATCODES:
sre_parse.py(177):                 i, j = av[2].getwidth()
 --- modulename: sre_parse, funcname: getwidth
sre_parse.py(153):         if self.width:
sre_parse.py(155):         lo = hi = 0
sre_parse.py(156):         UNITCODES = (ANY, RANGE, IN, LITERAL, NOT_LITERAL, CATEGORY)
sre_parse.py(157):         REPEATCODES = (MIN_REPEAT, MAX_REPEAT)
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(159):             if op is BRANCH:
sre_parse.py(168):             elif op is CALL:
sre_parse.py(172):             elif op is SUBPATTERN:
sre_parse.py(176):             elif op in REPEATCODES:
sre_parse.py(180):             elif op in UNITCODES:
sre_parse.py(181):                 lo = lo + 1
sre_parse.py(182):                 hi = hi + 1
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(185):         self.width = min(lo, MAXREPEAT - 1), min(hi, MAXREPEAT)
sre_parse.py(186):         return self.width
sre_parse.py(178):                 lo = lo + i * av[0]
sre_parse.py(179):                 hi = hi + j * av[1]
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(159):             if op is BRANCH:
sre_parse.py(168):             elif op is CALL:
sre_parse.py(172):             elif op is SUBPATTERN:
sre_parse.py(173):                 i, j = av[1].getwidth()
 --- modulename: sre_parse, funcname: getwidth
sre_parse.py(153):         if self.width:
sre_parse.py(155):         lo = hi = 0
sre_parse.py(156):         UNITCODES = (ANY, RANGE, IN, LITERAL, NOT_LITERAL, CATEGORY)
sre_parse.py(157):         REPEATCODES = (MIN_REPEAT, MAX_REPEAT)
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(159):             if op is BRANCH:
sre_parse.py(168):             elif op is CALL:
sre_parse.py(172):             elif op is SUBPATTERN:
sre_parse.py(176):             elif op in REPEATCODES:
sre_parse.py(177):                 i, j = av[2].getwidth()
 --- modulename: sre_parse, funcname: getwidth
sre_parse.py(153):         if self.width:
sre_parse.py(155):         lo = hi = 0
sre_parse.py(156):         UNITCODES = (ANY, RANGE, IN, LITERAL, NOT_LITERAL, CATEGORY)
sre_parse.py(157):         REPEATCODES = (MIN_REPEAT, MAX_REPEAT)
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(159):             if op is BRANCH:
sre_parse.py(168):             elif op is CALL:
sre_parse.py(172):             elif op is SUBPATTERN:
sre_parse.py(176):             elif op in REPEATCODES:
sre_parse.py(180):             elif op in UNITCODES:
sre_parse.py(181):                 lo = lo + 1
sre_parse.py(182):                 hi = hi + 1
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(185):         self.width = min(lo, MAXREPEAT - 1), min(hi, MAXREPEAT)
sre_parse.py(186):         return self.width
sre_parse.py(178):                 lo = lo + i * av[0]
sre_parse.py(179):                 hi = hi + j * av[1]
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(185):         self.width = min(lo, MAXREPEAT - 1), min(hi, MAXREPEAT)
sre_parse.py(186):         return self.width
sre_parse.py(174):                 lo = lo + i
sre_parse.py(175):                 hi = hi + j
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(159):             if op is BRANCH:
sre_parse.py(168):             elif op is CALL:
sre_parse.py(172):             elif op is SUBPATTERN:
sre_parse.py(176):             elif op in REPEATCODES:
sre_parse.py(180):             elif op in UNITCODES:
sre_parse.py(181):                 lo = lo + 1
sre_parse.py(182):                 hi = hi + 1
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(159):             if op is BRANCH:
sre_parse.py(168):             elif op is CALL:
sre_parse.py(172):             elif op is SUBPATTERN:
sre_parse.py(176):             elif op in REPEATCODES:
sre_parse.py(177):                 i, j = av[2].getwidth()
 --- modulename: sre_parse, funcname: getwidth
sre_parse.py(153):         if self.width:
sre_parse.py(155):         lo = hi = 0
sre_parse.py(156):         UNITCODES = (ANY, RANGE, IN, LITERAL, NOT_LITERAL, CATEGORY)
sre_parse.py(157):         REPEATCODES = (MIN_REPEAT, MAX_REPEAT)
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(159):             if op is BRANCH:
sre_parse.py(168):             elif op is CALL:
sre_parse.py(172):             elif op is SUBPATTERN:
sre_parse.py(176):             elif op in REPEATCODES:
sre_parse.py(180):             elif op in UNITCODES:
sre_parse.py(181):                 lo = lo + 1
sre_parse.py(182):                 hi = hi + 1
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(185):         self.width = min(lo, MAXREPEAT - 1), min(hi, MAXREPEAT)
sre_parse.py(186):         return self.width
sre_parse.py(178):                 lo = lo + i * av[0]
sre_parse.py(179):                 hi = hi + j * av[1]
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(159):             if op is BRANCH:
sre_parse.py(168):             elif op is CALL:
sre_parse.py(172):             elif op is SUBPATTERN:
sre_parse.py(173):                 i, j = av[1].getwidth()
 --- modulename: sre_parse, funcname: getwidth
sre_parse.py(153):         if self.width:
sre_parse.py(155):         lo = hi = 0
sre_parse.py(156):         UNITCODES = (ANY, RANGE, IN, LITERAL, NOT_LITERAL, CATEGORY)
sre_parse.py(157):         REPEATCODES = (MIN_REPEAT, MAX_REPEAT)
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(159):             if op is BRANCH:
sre_parse.py(168):             elif op is CALL:
sre_parse.py(172):             elif op is SUBPATTERN:
sre_parse.py(176):             elif op in REPEATCODES:
sre_parse.py(177):                 i, j = av[2].getwidth()
 --- modulename: sre_parse, funcname: getwidth
sre_parse.py(153):         if self.width:
sre_parse.py(155):         lo = hi = 0
sre_parse.py(156):         UNITCODES = (ANY, RANGE, IN, LITERAL, NOT_LITERAL, CATEGORY)
sre_parse.py(157):         REPEATCODES = (MIN_REPEAT, MAX_REPEAT)
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(159):             if op is BRANCH:
sre_parse.py(168):             elif op is CALL:
sre_parse.py(172):             elif op is SUBPATTERN:
sre_parse.py(176):             elif op in REPEATCODES:
sre_parse.py(180):             elif op in UNITCODES:
sre_parse.py(181):                 lo = lo + 1
sre_parse.py(182):                 hi = hi + 1
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(185):         self.width = min(lo, MAXREPEAT - 1), min(hi, MAXREPEAT)
sre_parse.py(186):         return self.width
sre_parse.py(178):                 lo = lo + i * av[0]
sre_parse.py(179):                 hi = hi + j * av[1]
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(185):         self.width = min(lo, MAXREPEAT - 1), min(hi, MAXREPEAT)
sre_parse.py(186):         return self.width
sre_parse.py(174):                 lo = lo + i
sre_parse.py(175):                 hi = hi + j
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(159):             if op is BRANCH:
sre_parse.py(168):             elif op is CALL:
sre_parse.py(172):             elif op is SUBPATTERN:
sre_parse.py(176):             elif op in REPEATCODES:
sre_parse.py(180):             elif op in UNITCODES:
sre_parse.py(181):                 lo = lo + 1
sre_parse.py(182):                 hi = hi + 1
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(159):             if op is BRANCH:
sre_parse.py(168):             elif op is CALL:
sre_parse.py(172):             elif op is SUBPATTERN:
sre_parse.py(176):             elif op in REPEATCODES:
sre_parse.py(177):                 i, j = av[2].getwidth()
 --- modulename: sre_parse, funcname: getwidth
sre_parse.py(153):         if self.width:
sre_parse.py(155):         lo = hi = 0
sre_parse.py(156):         UNITCODES = (ANY, RANGE, IN, LITERAL, NOT_LITERAL, CATEGORY)
sre_parse.py(157):         REPEATCODES = (MIN_REPEAT, MAX_REPEAT)
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(159):             if op is BRANCH:
sre_parse.py(168):             elif op is CALL:
sre_parse.py(172):             elif op is SUBPATTERN:
sre_parse.py(176):             elif op in REPEATCODES:
sre_parse.py(180):             elif op in UNITCODES:
sre_parse.py(181):                 lo = lo + 1
sre_parse.py(182):                 hi = hi + 1
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(185):         self.width = min(lo, MAXREPEAT - 1), min(hi, MAXREPEAT)
sre_parse.py(186):         return self.width
sre_parse.py(178):                 lo = lo + i * av[0]
sre_parse.py(179):                 hi = hi + j * av[1]
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(159):             if op is BRANCH:
sre_parse.py(168):             elif op is CALL:
sre_parse.py(172):             elif op is SUBPATTERN:
sre_parse.py(176):             elif op in REPEATCODES:
sre_parse.py(180):             elif op in UNITCODES:
sre_parse.py(181):                 lo = lo + 1
sre_parse.py(182):                 hi = hi + 1
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(159):             if op is BRANCH:
sre_parse.py(168):             elif op is CALL:
sre_parse.py(172):             elif op is SUBPATTERN:
sre_parse.py(176):             elif op in REPEATCODES:
sre_parse.py(180):             elif op in UNITCODES:
sre_parse.py(181):                 lo = lo + 1
sre_parse.py(182):                 hi = hi + 1
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(159):             if op is BRANCH:
sre_parse.py(168):             elif op is CALL:
sre_parse.py(172):             elif op is SUBPATTERN:
sre_parse.py(176):             elif op in REPEATCODES:
sre_parse.py(180):             elif op in UNITCODES:
sre_parse.py(181):                 lo = lo + 1
sre_parse.py(182):                 hi = hi + 1
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(159):             if op is BRANCH:
sre_parse.py(168):             elif op is CALL:
sre_parse.py(172):             elif op is SUBPATTERN:
sre_parse.py(176):             elif op in REPEATCODES:
sre_parse.py(180):             elif op in UNITCODES:
sre_parse.py(181):                 lo = lo + 1
sre_parse.py(182):                 hi = hi + 1
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(159):             if op is BRANCH:
sre_parse.py(168):             elif op is CALL:
sre_parse.py(172):             elif op is SUBPATTERN:
sre_parse.py(176):             elif op in REPEATCODES:
sre_parse.py(180):             elif op in UNITCODES:
sre_parse.py(181):                 lo = lo + 1
sre_parse.py(182):                 hi = hi + 1
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(159):             if op is BRANCH:
sre_parse.py(168):             elif op is CALL:
sre_parse.py(172):             elif op is SUBPATTERN:
sre_parse.py(176):             elif op in REPEATCODES:
sre_parse.py(180):             elif op in UNITCODES:
sre_parse.py(181):                 lo = lo + 1
sre_parse.py(182):                 hi = hi + 1
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(159):             if op is BRANCH:
sre_parse.py(168):             elif op is CALL:
sre_parse.py(172):             elif op is SUBPATTERN:
sre_parse.py(176):             elif op in REPEATCODES:
sre_parse.py(177):                 i, j = av[2].getwidth()
 --- modulename: sre_parse, funcname: getwidth
sre_parse.py(153):         if self.width:
sre_parse.py(155):         lo = hi = 0
sre_parse.py(156):         UNITCODES = (ANY, RANGE, IN, LITERAL, NOT_LITERAL, CATEGORY)
sre_parse.py(157):         REPEATCODES = (MIN_REPEAT, MAX_REPEAT)
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(159):             if op is BRANCH:
sre_parse.py(168):             elif op is CALL:
sre_parse.py(172):             elif op is SUBPATTERN:
sre_parse.py(176):             elif op in REPEATCODES:
sre_parse.py(180):             elif op in UNITCODES:
sre_parse.py(181):                 lo = lo + 1
sre_parse.py(182):                 hi = hi + 1
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(185):         self.width = min(lo, MAXREPEAT - 1), min(hi, MAXREPEAT)
sre_parse.py(186):         return self.width
sre_parse.py(178):                 lo = lo + i * av[0]
sre_parse.py(179):                 hi = hi + j * av[1]
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(159):             if op is BRANCH:
sre_parse.py(168):             elif op is CALL:
sre_parse.py(172):             elif op is SUBPATTERN:
sre_parse.py(176):             elif op in REPEATCODES:
sre_parse.py(177):                 i, j = av[2].getwidth()
 --- modulename: sre_parse, funcname: getwidth
sre_parse.py(153):         if self.width:
sre_parse.py(155):         lo = hi = 0
sre_parse.py(156):         UNITCODES = (ANY, RANGE, IN, LITERAL, NOT_LITERAL, CATEGORY)
sre_parse.py(157):         REPEATCODES = (MIN_REPEAT, MAX_REPEAT)
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(159):             if op is BRANCH:
sre_parse.py(168):             elif op is CALL:
sre_parse.py(172):             elif op is SUBPATTERN:
sre_parse.py(176):             elif op in REPEATCODES:
sre_parse.py(180):             elif op in UNITCODES:
sre_parse.py(181):                 lo = lo + 1
sre_parse.py(182):                 hi = hi + 1
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(185):         self.width = min(lo, MAXREPEAT - 1), min(hi, MAXREPEAT)
sre_parse.py(186):         return self.width
sre_parse.py(178):                 lo = lo + i * av[0]
sre_parse.py(179):                 hi = hi + j * av[1]
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(185):         self.width = min(lo, MAXREPEAT - 1), min(hi, MAXREPEAT)
sre_parse.py(186):         return self.width
sre_compile.py(438):     if lo == 0:
sre_compile.py(441):     prefix = []
sre_compile.py(442):     prefixappend = prefix.append
sre_compile.py(443):     prefix_skip = 0
sre_compile.py(444):     charset = [] # not used
sre_compile.py(445):     charsetappend = charset.append
sre_compile.py(446):     if not (flags & SRE_FLAG_IGNORECASE):
sre_compile.py(448):         for op, av in pattern.data:
sre_compile.py(449):             if op is LITERAL:
sre_compile.py(453):             elif op is SUBPATTERN and len(av[1]) == 1:
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(138):         return len(self.data)
sre_compile.py(454):                 op, av = av[1][0]
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(455):                 if op is LITERAL:
sre_compile.py(458):                     break
sre_compile.py(462):         if not prefix and pattern.data:
sre_compile.py(463):             op, av = pattern.data[0]
sre_compile.py(464):             if op is SUBPATTERN and av[1]:
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(138):         return len(self.data)
sre_compile.py(465):                 op, av = av[1][0]
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(466):                 if op is LITERAL:
sre_compile.py(468):                 elif op is BRANCH:
sre_compile.py(501):     emit = code.append
sre_compile.py(502):     emit(OPCODES[INFO])
sre_compile.py(503):     skip = len(code); emit(0)
sre_compile.py(505):     mask = 0
sre_compile.py(506):     if prefix:
sre_compile.py(510):     elif charset:
sre_compile.py(512):     emit(mask)
sre_compile.py(514):     if lo < MAXCODE:
sre_compile.py(515):         emit(lo)
sre_compile.py(519):     if hi < MAXCODE:
sre_compile.py(520):         emit(hi)
sre_compile.py(524):     if prefix:
sre_compile.py(535):     elif charset:
sre_compile.py(537):     code[skip] = len(code) - skip
sre_compile.py(561):     _compile(code, p.data, flags)
 --- modulename: sre_compile, funcname: _compile
sre_compile.py(66):     emit = code.append
sre_compile.py(67):     _len = len
sre_compile.py(68):     LITERAL_CODES = _LITERAL_CODES
sre_compile.py(69):     REPEATING_CODES = _REPEATING_CODES
sre_compile.py(70):     SUCCESS_CODES = _SUCCESS_CODES
sre_compile.py(71):     ASSERT_CODES = _ASSERT_CODES
sre_compile.py(72):     if (flags & SRE_FLAG_IGNORECASE and
sre_compile.py(77):         fixes = None
sre_compile.py(78):     for op, av in pattern:
sre_compile.py(79):         if op in LITERAL_CODES:
sre_compile.py(98):         elif op is IN:
sre_compile.py(109):         elif op is ANY:
sre_compile.py(114):         elif op in REPEATING_CODES:
sre_compile.py(146):         elif op is SUBPATTERN:
sre_compile.py(147):             if av[0]:
sre_compile.py(148):                 emit(OPCODES[MARK])
sre_compile.py(149):                 emit((av[0]-1)*2)
sre_compile.py(151):             _compile(code, av[1], flags)
 --- modulename: sre_compile, funcname: _compile
sre_compile.py(66):     emit = code.append
sre_compile.py(67):     _len = len
sre_compile.py(68):     LITERAL_CODES = _LITERAL_CODES
sre_compile.py(69):     REPEATING_CODES = _REPEATING_CODES
sre_compile.py(70):     SUCCESS_CODES = _SUCCESS_CODES
sre_compile.py(71):     ASSERT_CODES = _ASSERT_CODES
sre_compile.py(72):     if (flags & SRE_FLAG_IGNORECASE and
sre_compile.py(77):         fixes = None
sre_compile.py(78):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(79):         if op in LITERAL_CODES:
sre_compile.py(98):         elif op is IN:
sre_compile.py(109):         elif op is ANY:
sre_compile.py(114):         elif op in REPEATING_CODES:
sre_compile.py(115):             if flags & SRE_FLAG_TEMPLATE:
sre_compile.py(124):             elif _simple(av) and op is not REPEAT:
 --- modulename: sre_compile, funcname: _simple
sre_compile.py(430):     lo, hi = av[2].getwidth()
 --- modulename: sre_parse, funcname: getwidth
sre_parse.py(153):         if self.width:
sre_parse.py(154):             return self.width
sre_compile.py(431):     return lo == hi == 1 and av[2][0][0] != SUBPATTERN
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(125):                 if op is MAX_REPEAT:
sre_compile.py(126):                     emit(OPCODES[REPEAT_ONE])
sre_compile.py(129):                 skip = _len(code); emit(0)
sre_compile.py(130):                 emit(av[0])
sre_compile.py(131):                 emit(av[1])
sre_compile.py(132):                 _compile(code, av[2], flags)
 --- modulename: sre_compile, funcname: _compile
sre_compile.py(66):     emit = code.append
sre_compile.py(67):     _len = len
sre_compile.py(68):     LITERAL_CODES = _LITERAL_CODES
sre_compile.py(69):     REPEATING_CODES = _REPEATING_CODES
sre_compile.py(70):     SUCCESS_CODES = _SUCCESS_CODES
sre_compile.py(71):     ASSERT_CODES = _ASSERT_CODES
sre_compile.py(72):     if (flags & SRE_FLAG_IGNORECASE and
sre_compile.py(77):         fixes = None
sre_compile.py(78):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(79):         if op in LITERAL_CODES:
sre_compile.py(98):         elif op is IN:
sre_compile.py(99):             if flags & SRE_FLAG_IGNORECASE:
sre_compile.py(104):                 emit(OPCODES[op])
sre_compile.py(105):                 fixup = None
sre_compile.py(106):             skip = _len(code); emit(0)
sre_compile.py(107):             _compile_charset(av, flags, code, fixup, fixes)
 --- modulename: sre_compile, funcname: _compile_charset
sre_compile.py(230):     emit = code.append
sre_compile.py(231):     for op, av in _optimize_charset(charset, fixup, fixes,
sre_compile.py(232):                                     flags & SRE_FLAG_UNICODE):
 --- modulename: sre_compile, funcname: _optimize_charset
sre_compile.py(258):     out = []
sre_compile.py(259):     tail = []
sre_compile.py(260):     charmap = bytearray(256)
sre_compile.py(261):     for op, av in charset:
sre_compile.py(262):         while True:
sre_compile.py(263):             try:
sre_compile.py(264):                 if op is LITERAL:
sre_compile.py(273):                 elif op is RANGE:
sre_compile.py(286):                 elif op is NEGATE:
sre_compile.py(289):                     tail.append((op, av))
sre_compile.py(310):             break
sre_compile.py(261):     for op, av in charset:
sre_compile.py(262):         while True:
sre_compile.py(263):             try:
sre_compile.py(264):                 if op is LITERAL:
sre_compile.py(265):                     if fixup:
sre_compile.py(272):                         charmap[av] = 1
sre_compile.py(310):             break
sre_compile.py(261):     for op, av in charset:
sre_compile.py(262):         while True:
sre_compile.py(263):             try:
sre_compile.py(264):                 if op is LITERAL:
sre_compile.py(265):                     if fixup:
sre_compile.py(272):                         charmap[av] = 1
sre_compile.py(310):             break
sre_compile.py(261):     for op, av in charset:
sre_compile.py(313):     runs = []
sre_compile.py(314):     q = 0
sre_compile.py(315):     while True:
sre_compile.py(316):         p = charmap.find(b'\1', q)
sre_compile.py(317):         if p < 0:
sre_compile.py(319):         if len(runs) >= 2:
sre_compile.py(322):         q = charmap.find(b'\0', p)
sre_compile.py(323):         if q < 0:
sre_compile.py(326):         runs.append((p, q))
sre_compile.py(315):     while True:
sre_compile.py(316):         p = charmap.find(b'\1', q)
sre_compile.py(317):         if p < 0:
sre_compile.py(319):         if len(runs) >= 2:
sre_compile.py(322):         q = charmap.find(b'\0', p)
sre_compile.py(323):         if q < 0:
sre_compile.py(326):         runs.append((p, q))
sre_compile.py(315):     while True:
sre_compile.py(316):         p = charmap.find(b'\1', q)
sre_compile.py(317):         if p < 0:
sre_compile.py(318):             break
sre_compile.py(327):     if runs is not None:
sre_compile.py(329):         for p, q in runs:
sre_compile.py(330):             if q - p == 1:
sre_compile.py(331):                 out.append((LITERAL, p))
sre_compile.py(329):         for p, q in runs:
sre_compile.py(330):             if q - p == 1:
sre_compile.py(331):                 out.append((LITERAL, p))
sre_compile.py(329):         for p, q in runs:
sre_compile.py(334):         out += tail
sre_compile.py(336):         if fixup or len(out) < len(charset):
sre_compile.py(339):         return charset
sre_compile.py(233):         emit(OPCODES[op])
sre_compile.py(234):         if op is NEGATE:
sre_compile.py(236):         elif op is LITERAL:
sre_compile.py(238):         elif op is RANGE:
sre_compile.py(241):         elif op is CHARSET:
sre_compile.py(243):         elif op is BIGCHARSET:
sre_compile.py(245):         elif op is CATEGORY:
sre_compile.py(246):             if flags & SRE_FLAG_LOCALE:
sre_compile.py(248):             elif flags & SRE_FLAG_UNICODE:
sre_compile.py(251):                 emit(CHCODES[av])
sre_compile.py(232):                                     flags & SRE_FLAG_UNICODE):
sre_compile.py(233):         emit(OPCODES[op])
sre_compile.py(234):         if op is NEGATE:
sre_compile.py(236):         elif op is LITERAL:
sre_compile.py(237):             emit(av)
sre_compile.py(232):                                     flags & SRE_FLAG_UNICODE):
sre_compile.py(233):         emit(OPCODES[op])
sre_compile.py(234):         if op is NEGATE:
sre_compile.py(236):         elif op is LITERAL:
sre_compile.py(237):             emit(av)
sre_compile.py(232):                                     flags & SRE_FLAG_UNICODE):
sre_compile.py(254):     emit(OPCODES[FAILURE])
sre_compile.py(108):             code[skip] = _len(code) - skip
sre_compile.py(78):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(133):                 emit(OPCODES[SUCCESS])
sre_compile.py(134):                 code[skip] = _len(code) - skip
sre_compile.py(78):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(152):             if av[0]:
sre_compile.py(153):                 emit(OPCODES[MARK])
sre_compile.py(154):                 emit((av[0]-1)*2+1)
sre_compile.py(78):     for op, av in pattern:
sre_compile.py(79):         if op in LITERAL_CODES:
sre_compile.py(98):         elif op is IN:
sre_compile.py(109):         elif op is ANY:
sre_compile.py(114):         elif op in REPEATING_CODES:
sre_compile.py(115):             if flags & SRE_FLAG_TEMPLATE:
sre_compile.py(124):             elif _simple(av) and op is not REPEAT:
 --- modulename: sre_compile, funcname: _simple
sre_compile.py(430):     lo, hi = av[2].getwidth()
 --- modulename: sre_parse, funcname: getwidth
sre_parse.py(153):         if self.width:
sre_parse.py(154):             return self.width
sre_compile.py(431):     return lo == hi == 1 and av[2][0][0] != SUBPATTERN
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(125):                 if op is MAX_REPEAT:
sre_compile.py(126):                     emit(OPCODES[REPEAT_ONE])
sre_compile.py(129):                 skip = _len(code); emit(0)
sre_compile.py(130):                 emit(av[0])
sre_compile.py(131):                 emit(av[1])
sre_compile.py(132):                 _compile(code, av[2], flags)
 --- modulename: sre_compile, funcname: _compile
sre_compile.py(66):     emit = code.append
sre_compile.py(67):     _len = len
sre_compile.py(68):     LITERAL_CODES = _LITERAL_CODES
sre_compile.py(69):     REPEATING_CODES = _REPEATING_CODES
sre_compile.py(70):     SUCCESS_CODES = _SUCCESS_CODES
sre_compile.py(71):     ASSERT_CODES = _ASSERT_CODES
sre_compile.py(72):     if (flags & SRE_FLAG_IGNORECASE and
sre_compile.py(77):         fixes = None
sre_compile.py(78):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(79):         if op in LITERAL_CODES:
sre_compile.py(98):         elif op is IN:
sre_compile.py(99):             if flags & SRE_FLAG_IGNORECASE:
sre_compile.py(104):                 emit(OPCODES[op])
sre_compile.py(105):                 fixup = None
sre_compile.py(106):             skip = _len(code); emit(0)
sre_compile.py(107):             _compile_charset(av, flags, code, fixup, fixes)
 --- modulename: sre_compile, funcname: _compile_charset
sre_compile.py(230):     emit = code.append
sre_compile.py(231):     for op, av in _optimize_charset(charset, fixup, fixes,
sre_compile.py(232):                                     flags & SRE_FLAG_UNICODE):
 --- modulename: sre_compile, funcname: _optimize_charset
sre_compile.py(258):     out = []
sre_compile.py(259):     tail = []
sre_compile.py(260):     charmap = bytearray(256)
sre_compile.py(261):     for op, av in charset:
sre_compile.py(262):         while True:
sre_compile.py(263):             try:
sre_compile.py(264):                 if op is LITERAL:
sre_compile.py(273):                 elif op is RANGE:
sre_compile.py(286):                 elif op is NEGATE:
sre_compile.py(289):                     tail.append((op, av))
sre_compile.py(310):             break
sre_compile.py(261):     for op, av in charset:
sre_compile.py(313):     runs = []
sre_compile.py(314):     q = 0
sre_compile.py(315):     while True:
sre_compile.py(316):         p = charmap.find(b'\1', q)
sre_compile.py(317):         if p < 0:
sre_compile.py(318):             break
sre_compile.py(327):     if runs is not None:
sre_compile.py(329):         for p, q in runs:
sre_compile.py(334):         out += tail
sre_compile.py(336):         if fixup or len(out) < len(charset):
sre_compile.py(339):         return charset
sre_compile.py(233):         emit(OPCODES[op])
sre_compile.py(234):         if op is NEGATE:
sre_compile.py(236):         elif op is LITERAL:
sre_compile.py(238):         elif op is RANGE:
sre_compile.py(241):         elif op is CHARSET:
sre_compile.py(243):         elif op is BIGCHARSET:
sre_compile.py(245):         elif op is CATEGORY:
sre_compile.py(246):             if flags & SRE_FLAG_LOCALE:
sre_compile.py(248):             elif flags & SRE_FLAG_UNICODE:
sre_compile.py(251):                 emit(CHCODES[av])
sre_compile.py(232):                                     flags & SRE_FLAG_UNICODE):
sre_compile.py(254):     emit(OPCODES[FAILURE])
sre_compile.py(108):             code[skip] = _len(code) - skip
sre_compile.py(78):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(133):                 emit(OPCODES[SUCCESS])
sre_compile.py(134):                 code[skip] = _len(code) - skip
sre_compile.py(78):     for op, av in pattern:
sre_compile.py(79):         if op in LITERAL_CODES:
sre_compile.py(80):             if flags & SRE_FLAG_IGNORECASE:
sre_compile.py(96):                 emit(OPCODES[op])
sre_compile.py(97):                 emit(av)
sre_compile.py(78):     for op, av in pattern:
sre_compile.py(79):         if op in LITERAL_CODES:
sre_compile.py(98):         elif op is IN:
sre_compile.py(109):         elif op is ANY:
sre_compile.py(114):         elif op in REPEATING_CODES:
sre_compile.py(115):             if flags & SRE_FLAG_TEMPLATE:
sre_compile.py(124):             elif _simple(av) and op is not REPEAT:
 --- modulename: sre_compile, funcname: _simple
sre_compile.py(430):     lo, hi = av[2].getwidth()
 --- modulename: sre_parse, funcname: getwidth
sre_parse.py(153):         if self.width:
sre_parse.py(154):             return self.width
sre_compile.py(431):     return lo == hi == 1 and av[2][0][0] != SUBPATTERN
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(125):                 if op is MAX_REPEAT:
sre_compile.py(126):                     emit(OPCODES[REPEAT_ONE])
sre_compile.py(129):                 skip = _len(code); emit(0)
sre_compile.py(130):                 emit(av[0])
sre_compile.py(131):                 emit(av[1])
sre_compile.py(132):                 _compile(code, av[2], flags)
 --- modulename: sre_compile, funcname: _compile
sre_compile.py(66):     emit = code.append
sre_compile.py(67):     _len = len
sre_compile.py(68):     LITERAL_CODES = _LITERAL_CODES
sre_compile.py(69):     REPEATING_CODES = _REPEATING_CODES
sre_compile.py(70):     SUCCESS_CODES = _SUCCESS_CODES
sre_compile.py(71):     ASSERT_CODES = _ASSERT_CODES
sre_compile.py(72):     if (flags & SRE_FLAG_IGNORECASE and
sre_compile.py(77):         fixes = None
sre_compile.py(78):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(79):         if op in LITERAL_CODES:
sre_compile.py(80):             if flags & SRE_FLAG_IGNORECASE:
sre_compile.py(96):                 emit(OPCODES[op])
sre_compile.py(97):                 emit(av)
sre_compile.py(78):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(133):                 emit(OPCODES[SUCCESS])
sre_compile.py(134):                 code[skip] = _len(code) - skip
sre_compile.py(78):     for op, av in pattern:
sre_compile.py(79):         if op in LITERAL_CODES:
sre_compile.py(98):         elif op is IN:
sre_compile.py(109):         elif op is ANY:
sre_compile.py(114):         elif op in REPEATING_CODES:
sre_compile.py(146):         elif op is SUBPATTERN:
sre_compile.py(147):             if av[0]:
sre_compile.py(148):                 emit(OPCODES[MARK])
sre_compile.py(149):                 emit((av[0]-1)*2)
sre_compile.py(151):             _compile(code, av[1], flags)
 --- modulename: sre_compile, funcname: _compile
sre_compile.py(66):     emit = code.append
sre_compile.py(67):     _len = len
sre_compile.py(68):     LITERAL_CODES = _LITERAL_CODES
sre_compile.py(69):     REPEATING_CODES = _REPEATING_CODES
sre_compile.py(70):     SUCCESS_CODES = _SUCCESS_CODES
sre_compile.py(71):     ASSERT_CODES = _ASSERT_CODES
sre_compile.py(72):     if (flags & SRE_FLAG_IGNORECASE and
sre_compile.py(77):         fixes = None
sre_compile.py(78):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(79):         if op in LITERAL_CODES:
sre_compile.py(98):         elif op is IN:
sre_compile.py(109):         elif op is ANY:
sre_compile.py(114):         elif op in REPEATING_CODES:
sre_compile.py(115):             if flags & SRE_FLAG_TEMPLATE:
sre_compile.py(124):             elif _simple(av) and op is not REPEAT:
 --- modulename: sre_compile, funcname: _simple
sre_compile.py(430):     lo, hi = av[2].getwidth()
 --- modulename: sre_parse, funcname: getwidth
sre_parse.py(153):         if self.width:
sre_parse.py(154):             return self.width
sre_compile.py(431):     return lo == hi == 1 and av[2][0][0] != SUBPATTERN
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(125):                 if op is MAX_REPEAT:
sre_compile.py(126):                     emit(OPCODES[REPEAT_ONE])
sre_compile.py(129):                 skip = _len(code); emit(0)
sre_compile.py(130):                 emit(av[0])
sre_compile.py(131):                 emit(av[1])
sre_compile.py(132):                 _compile(code, av[2], flags)
 --- modulename: sre_compile, funcname: _compile
sre_compile.py(66):     emit = code.append
sre_compile.py(67):     _len = len
sre_compile.py(68):     LITERAL_CODES = _LITERAL_CODES
sre_compile.py(69):     REPEATING_CODES = _REPEATING_CODES
sre_compile.py(70):     SUCCESS_CODES = _SUCCESS_CODES
sre_compile.py(71):     ASSERT_CODES = _ASSERT_CODES
sre_compile.py(72):     if (flags & SRE_FLAG_IGNORECASE and
sre_compile.py(77):         fixes = None
sre_compile.py(78):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(79):         if op in LITERAL_CODES:
sre_compile.py(80):             if flags & SRE_FLAG_IGNORECASE:
sre_compile.py(96):                 emit(OPCODES[op])
sre_compile.py(97):                 emit(av)
sre_compile.py(78):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(133):                 emit(OPCODES[SUCCESS])
sre_compile.py(134):                 code[skip] = _len(code) - skip
sre_compile.py(78):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(152):             if av[0]:
sre_compile.py(153):                 emit(OPCODES[MARK])
sre_compile.py(154):                 emit((av[0]-1)*2+1)
sre_compile.py(78):     for op, av in pattern:
sre_compile.py(79):         if op in LITERAL_CODES:
sre_compile.py(80):             if flags & SRE_FLAG_IGNORECASE:
sre_compile.py(96):                 emit(OPCODES[op])
sre_compile.py(97):                 emit(av)
sre_compile.py(78):     for op, av in pattern:
sre_compile.py(79):         if op in LITERAL_CODES:
sre_compile.py(98):         elif op is IN:
sre_compile.py(109):         elif op is ANY:
sre_compile.py(114):         elif op in REPEATING_CODES:
sre_compile.py(115):             if flags & SRE_FLAG_TEMPLATE:
sre_compile.py(124):             elif _simple(av) and op is not REPEAT:
 --- modulename: sre_compile, funcname: _simple
sre_compile.py(430):     lo, hi = av[2].getwidth()
 --- modulename: sre_parse, funcname: getwidth
sre_parse.py(153):         if self.width:
sre_parse.py(154):             return self.width
sre_compile.py(431):     return lo == hi == 1 and av[2][0][0] != SUBPATTERN
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(125):                 if op is MAX_REPEAT:
sre_compile.py(126):                     emit(OPCODES[REPEAT_ONE])
sre_compile.py(129):                 skip = _len(code); emit(0)
sre_compile.py(130):                 emit(av[0])
sre_compile.py(131):                 emit(av[1])
sre_compile.py(132):                 _compile(code, av[2], flags)
 --- modulename: sre_compile, funcname: _compile
sre_compile.py(66):     emit = code.append
sre_compile.py(67):     _len = len
sre_compile.py(68):     LITERAL_CODES = _LITERAL_CODES
sre_compile.py(69):     REPEATING_CODES = _REPEATING_CODES
sre_compile.py(70):     SUCCESS_CODES = _SUCCESS_CODES
sre_compile.py(71):     ASSERT_CODES = _ASSERT_CODES
sre_compile.py(72):     if (flags & SRE_FLAG_IGNORECASE and
sre_compile.py(77):         fixes = None
sre_compile.py(78):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(79):         if op in LITERAL_CODES:
sre_compile.py(98):         elif op is IN:
sre_compile.py(99):             if flags & SRE_FLAG_IGNORECASE:
sre_compile.py(104):                 emit(OPCODES[op])
sre_compile.py(105):                 fixup = None
sre_compile.py(106):             skip = _len(code); emit(0)
sre_compile.py(107):             _compile_charset(av, flags, code, fixup, fixes)
 --- modulename: sre_compile, funcname: _compile_charset
sre_compile.py(230):     emit = code.append
sre_compile.py(231):     for op, av in _optimize_charset(charset, fixup, fixes,
sre_compile.py(232):                                     flags & SRE_FLAG_UNICODE):
 --- modulename: sre_compile, funcname: _optimize_charset
sre_compile.py(258):     out = []
sre_compile.py(259):     tail = []
sre_compile.py(260):     charmap = bytearray(256)
sre_compile.py(261):     for op, av in charset:
sre_compile.py(262):         while True:
sre_compile.py(263):             try:
sre_compile.py(264):                 if op is LITERAL:
sre_compile.py(273):                 elif op is RANGE:
sre_compile.py(286):                 elif op is NEGATE:
sre_compile.py(289):                     tail.append((op, av))
sre_compile.py(310):             break
sre_compile.py(261):     for op, av in charset:
sre_compile.py(313):     runs = []
sre_compile.py(314):     q = 0
sre_compile.py(315):     while True:
sre_compile.py(316):         p = charmap.find(b'\1', q)
sre_compile.py(317):         if p < 0:
sre_compile.py(318):             break
sre_compile.py(327):     if runs is not None:
sre_compile.py(329):         for p, q in runs:
sre_compile.py(334):         out += tail
sre_compile.py(336):         if fixup or len(out) < len(charset):
sre_compile.py(339):         return charset
sre_compile.py(233):         emit(OPCODES[op])
sre_compile.py(234):         if op is NEGATE:
sre_compile.py(236):         elif op is LITERAL:
sre_compile.py(238):         elif op is RANGE:
sre_compile.py(241):         elif op is CHARSET:
sre_compile.py(243):         elif op is BIGCHARSET:
sre_compile.py(245):         elif op is CATEGORY:
sre_compile.py(246):             if flags & SRE_FLAG_LOCALE:
sre_compile.py(248):             elif flags & SRE_FLAG_UNICODE:
sre_compile.py(251):                 emit(CHCODES[av])
sre_compile.py(232):                                     flags & SRE_FLAG_UNICODE):
sre_compile.py(254):     emit(OPCODES[FAILURE])
sre_compile.py(108):             code[skip] = _len(code) - skip
sre_compile.py(78):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(133):                 emit(OPCODES[SUCCESS])
sre_compile.py(134):                 code[skip] = _len(code) - skip
sre_compile.py(78):     for op, av in pattern:
sre_compile.py(79):         if op in LITERAL_CODES:
sre_compile.py(98):         elif op is IN:
sre_compile.py(109):         elif op is ANY:
sre_compile.py(114):         elif op in REPEATING_CODES:
sre_compile.py(146):         elif op is SUBPATTERN:
sre_compile.py(147):             if av[0]:
sre_compile.py(148):                 emit(OPCODES[MARK])
sre_compile.py(149):                 emit((av[0]-1)*2)
sre_compile.py(151):             _compile(code, av[1], flags)
 --- modulename: sre_compile, funcname: _compile
sre_compile.py(66):     emit = code.append
sre_compile.py(67):     _len = len
sre_compile.py(68):     LITERAL_CODES = _LITERAL_CODES
sre_compile.py(69):     REPEATING_CODES = _REPEATING_CODES
sre_compile.py(70):     SUCCESS_CODES = _SUCCESS_CODES
sre_compile.py(71):     ASSERT_CODES = _ASSERT_CODES
sre_compile.py(72):     if (flags & SRE_FLAG_IGNORECASE and
sre_compile.py(77):         fixes = None
sre_compile.py(78):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(79):         if op in LITERAL_CODES:
sre_compile.py(98):         elif op is IN:
sre_compile.py(109):         elif op is ANY:
sre_compile.py(114):         elif op in REPEATING_CODES:
sre_compile.py(115):             if flags & SRE_FLAG_TEMPLATE:
sre_compile.py(124):             elif _simple(av) and op is not REPEAT:
 --- modulename: sre_compile, funcname: _simple
sre_compile.py(430):     lo, hi = av[2].getwidth()
 --- modulename: sre_parse, funcname: getwidth
sre_parse.py(153):         if self.width:
sre_parse.py(154):             return self.width
sre_compile.py(431):     return lo == hi == 1 and av[2][0][0] != SUBPATTERN
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(125):                 if op is MAX_REPEAT:
sre_compile.py(126):                     emit(OPCODES[REPEAT_ONE])
sre_compile.py(129):                 skip = _len(code); emit(0)
sre_compile.py(130):                 emit(av[0])
sre_compile.py(131):                 emit(av[1])
sre_compile.py(132):                 _compile(code, av[2], flags)
 --- modulename: sre_compile, funcname: _compile
sre_compile.py(66):     emit = code.append
sre_compile.py(67):     _len = len
sre_compile.py(68):     LITERAL_CODES = _LITERAL_CODES
sre_compile.py(69):     REPEATING_CODES = _REPEATING_CODES
sre_compile.py(70):     SUCCESS_CODES = _SUCCESS_CODES
sre_compile.py(71):     ASSERT_CODES = _ASSERT_CODES
sre_compile.py(72):     if (flags & SRE_FLAG_IGNORECASE and
sre_compile.py(77):         fixes = None
sre_compile.py(78):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(79):         if op in LITERAL_CODES:
sre_compile.py(98):         elif op is IN:
sre_compile.py(99):             if flags & SRE_FLAG_IGNORECASE:
sre_compile.py(104):                 emit(OPCODES[op])
sre_compile.py(105):                 fixup = None
sre_compile.py(106):             skip = _len(code); emit(0)
sre_compile.py(107):             _compile_charset(av, flags, code, fixup, fixes)
 --- modulename: sre_compile, funcname: _compile_charset
sre_compile.py(230):     emit = code.append
sre_compile.py(231):     for op, av in _optimize_charset(charset, fixup, fixes,
sre_compile.py(232):                                     flags & SRE_FLAG_UNICODE):
 --- modulename: sre_compile, funcname: _optimize_charset
sre_compile.py(258):     out = []
sre_compile.py(259):     tail = []
sre_compile.py(260):     charmap = bytearray(256)
sre_compile.py(261):     for op, av in charset:
sre_compile.py(262):         while True:
sre_compile.py(263):             try:
sre_compile.py(264):                 if op is LITERAL:
sre_compile.py(273):                 elif op is RANGE:
sre_compile.py(286):                 elif op is NEGATE:
sre_compile.py(289):                     tail.append((op, av))
sre_compile.py(310):             break
sre_compile.py(261):     for op, av in charset:
sre_compile.py(262):         while True:
sre_compile.py(263):             try:
sre_compile.py(264):                 if op is LITERAL:
sre_compile.py(265):                     if fixup:
sre_compile.py(272):                         charmap[av] = 1
sre_compile.py(310):             break
sre_compile.py(261):     for op, av in charset:
sre_compile.py(313):     runs = []
sre_compile.py(314):     q = 0
sre_compile.py(315):     while True:
sre_compile.py(316):         p = charmap.find(b'\1', q)
sre_compile.py(317):         if p < 0:
sre_compile.py(319):         if len(runs) >= 2:
sre_compile.py(322):         q = charmap.find(b'\0', p)
sre_compile.py(323):         if q < 0:
sre_compile.py(326):         runs.append((p, q))
sre_compile.py(315):     while True:
sre_compile.py(316):         p = charmap.find(b'\1', q)
sre_compile.py(317):         if p < 0:
sre_compile.py(318):             break
sre_compile.py(327):     if runs is not None:
sre_compile.py(329):         for p, q in runs:
sre_compile.py(330):             if q - p == 1:
sre_compile.py(331):                 out.append((LITERAL, p))
sre_compile.py(329):         for p, q in runs:
sre_compile.py(334):         out += tail
sre_compile.py(336):         if fixup or len(out) < len(charset):
sre_compile.py(339):         return charset
sre_compile.py(233):         emit(OPCODES[op])
sre_compile.py(234):         if op is NEGATE:
sre_compile.py(236):         elif op is LITERAL:
sre_compile.py(238):         elif op is RANGE:
sre_compile.py(241):         elif op is CHARSET:
sre_compile.py(243):         elif op is BIGCHARSET:
sre_compile.py(245):         elif op is CATEGORY:
sre_compile.py(246):             if flags & SRE_FLAG_LOCALE:
sre_compile.py(248):             elif flags & SRE_FLAG_UNICODE:
sre_compile.py(251):                 emit(CHCODES[av])
sre_compile.py(232):                                     flags & SRE_FLAG_UNICODE):
sre_compile.py(233):         emit(OPCODES[op])
sre_compile.py(234):         if op is NEGATE:
sre_compile.py(236):         elif op is LITERAL:
sre_compile.py(237):             emit(av)
sre_compile.py(232):                                     flags & SRE_FLAG_UNICODE):
sre_compile.py(254):     emit(OPCODES[FAILURE])
sre_compile.py(108):             code[skip] = _len(code) - skip
sre_compile.py(78):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(133):                 emit(OPCODES[SUCCESS])
sre_compile.py(134):                 code[skip] = _len(code) - skip
sre_compile.py(78):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(152):             if av[0]:
sre_compile.py(153):                 emit(OPCODES[MARK])
sre_compile.py(154):                 emit((av[0]-1)*2+1)
sre_compile.py(78):     for op, av in pattern:
sre_compile.py(79):         if op in LITERAL_CODES:
sre_compile.py(80):             if flags & SRE_FLAG_IGNORECASE:
sre_compile.py(96):                 emit(OPCODES[op])
sre_compile.py(97):                 emit(av)
sre_compile.py(78):     for op, av in pattern:
sre_compile.py(79):         if op in LITERAL_CODES:
sre_compile.py(98):         elif op is IN:
sre_compile.py(109):         elif op is ANY:
sre_compile.py(114):         elif op in REPEATING_CODES:
sre_compile.py(115):             if flags & SRE_FLAG_TEMPLATE:
sre_compile.py(124):             elif _simple(av) and op is not REPEAT:
 --- modulename: sre_compile, funcname: _simple
sre_compile.py(430):     lo, hi = av[2].getwidth()
 --- modulename: sre_parse, funcname: getwidth
sre_parse.py(153):         if self.width:
sre_parse.py(154):             return self.width
sre_compile.py(431):     return lo == hi == 1 and av[2][0][0] != SUBPATTERN
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(125):                 if op is MAX_REPEAT:
sre_compile.py(126):                     emit(OPCODES[REPEAT_ONE])
sre_compile.py(129):                 skip = _len(code); emit(0)
sre_compile.py(130):                 emit(av[0])
sre_compile.py(131):                 emit(av[1])
sre_compile.py(132):                 _compile(code, av[2], flags)
 --- modulename: sre_compile, funcname: _compile
sre_compile.py(66):     emit = code.append
sre_compile.py(67):     _len = len
sre_compile.py(68):     LITERAL_CODES = _LITERAL_CODES
sre_compile.py(69):     REPEATING_CODES = _REPEATING_CODES
sre_compile.py(70):     SUCCESS_CODES = _SUCCESS_CODES
sre_compile.py(71):     ASSERT_CODES = _ASSERT_CODES
sre_compile.py(72):     if (flags & SRE_FLAG_IGNORECASE and
sre_compile.py(77):         fixes = None
sre_compile.py(78):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(79):         if op in LITERAL_CODES:
sre_compile.py(98):         elif op is IN:
sre_compile.py(99):             if flags & SRE_FLAG_IGNORECASE:
sre_compile.py(104):                 emit(OPCODES[op])
sre_compile.py(105):                 fixup = None
sre_compile.py(106):             skip = _len(code); emit(0)
sre_compile.py(107):             _compile_charset(av, flags, code, fixup, fixes)
 --- modulename: sre_compile, funcname: _compile_charset
sre_compile.py(230):     emit = code.append
sre_compile.py(231):     for op, av in _optimize_charset(charset, fixup, fixes,
sre_compile.py(232):                                     flags & SRE_FLAG_UNICODE):
 --- modulename: sre_compile, funcname: _optimize_charset
sre_compile.py(258):     out = []
sre_compile.py(259):     tail = []
sre_compile.py(260):     charmap = bytearray(256)
sre_compile.py(261):     for op, av in charset:
sre_compile.py(262):         while True:
sre_compile.py(263):             try:
sre_compile.py(264):                 if op is LITERAL:
sre_compile.py(273):                 elif op is RANGE:
sre_compile.py(286):                 elif op is NEGATE:
sre_compile.py(289):                     tail.append((op, av))
sre_compile.py(310):             break
sre_compile.py(261):     for op, av in charset:
sre_compile.py(313):     runs = []
sre_compile.py(314):     q = 0
sre_compile.py(315):     while True:
sre_compile.py(316):         p = charmap.find(b'\1', q)
sre_compile.py(317):         if p < 0:
sre_compile.py(318):             break
sre_compile.py(327):     if runs is not None:
sre_compile.py(329):         for p, q in runs:
sre_compile.py(334):         out += tail
sre_compile.py(336):         if fixup or len(out) < len(charset):
sre_compile.py(339):         return charset
sre_compile.py(233):         emit(OPCODES[op])
sre_compile.py(234):         if op is NEGATE:
sre_compile.py(236):         elif op is LITERAL:
sre_compile.py(238):         elif op is RANGE:
sre_compile.py(241):         elif op is CHARSET:
sre_compile.py(243):         elif op is BIGCHARSET:
sre_compile.py(245):         elif op is CATEGORY:
sre_compile.py(246):             if flags & SRE_FLAG_LOCALE:
sre_compile.py(248):             elif flags & SRE_FLAG_UNICODE:
sre_compile.py(251):                 emit(CHCODES[av])
sre_compile.py(232):                                     flags & SRE_FLAG_UNICODE):
sre_compile.py(254):     emit(OPCODES[FAILURE])
sre_compile.py(108):             code[skip] = _len(code) - skip
sre_compile.py(78):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(133):                 emit(OPCODES[SUCCESS])
sre_compile.py(134):                 code[skip] = _len(code) - skip
sre_compile.py(78):     for op, av in pattern:
sre_compile.py(79):         if op in LITERAL_CODES:
sre_compile.py(98):         elif op is IN:
sre_compile.py(109):         elif op is ANY:
sre_compile.py(114):         elif op in REPEATING_CODES:
sre_compile.py(146):         elif op is SUBPATTERN:
sre_compile.py(147):             if av[0]:
sre_compile.py(148):                 emit(OPCODES[MARK])
sre_compile.py(149):                 emit((av[0]-1)*2)
sre_compile.py(151):             _compile(code, av[1], flags)
 --- modulename: sre_compile, funcname: _compile
sre_compile.py(66):     emit = code.append
sre_compile.py(67):     _len = len
sre_compile.py(68):     LITERAL_CODES = _LITERAL_CODES
sre_compile.py(69):     REPEATING_CODES = _REPEATING_CODES
sre_compile.py(70):     SUCCESS_CODES = _SUCCESS_CODES
sre_compile.py(71):     ASSERT_CODES = _ASSERT_CODES
sre_compile.py(72):     if (flags & SRE_FLAG_IGNORECASE and
sre_compile.py(77):         fixes = None
sre_compile.py(78):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(79):         if op in LITERAL_CODES:
sre_compile.py(98):         elif op is IN:
sre_compile.py(109):         elif op is ANY:
sre_compile.py(114):         elif op in REPEATING_CODES:
sre_compile.py(115):             if flags & SRE_FLAG_TEMPLATE:
sre_compile.py(124):             elif _simple(av) and op is not REPEAT:
 --- modulename: sre_compile, funcname: _simple
sre_compile.py(430):     lo, hi = av[2].getwidth()
 --- modulename: sre_parse, funcname: getwidth
sre_parse.py(153):         if self.width:
sre_parse.py(154):             return self.width
sre_compile.py(431):     return lo == hi == 1 and av[2][0][0] != SUBPATTERN
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(125):                 if op is MAX_REPEAT:
sre_compile.py(126):                     emit(OPCODES[REPEAT_ONE])
sre_compile.py(129):                 skip = _len(code); emit(0)
sre_compile.py(130):                 emit(av[0])
sre_compile.py(131):                 emit(av[1])
sre_compile.py(132):                 _compile(code, av[2], flags)
 --- modulename: sre_compile, funcname: _compile
sre_compile.py(66):     emit = code.append
sre_compile.py(67):     _len = len
sre_compile.py(68):     LITERAL_CODES = _LITERAL_CODES
sre_compile.py(69):     REPEATING_CODES = _REPEATING_CODES
sre_compile.py(70):     SUCCESS_CODES = _SUCCESS_CODES
sre_compile.py(71):     ASSERT_CODES = _ASSERT_CODES
sre_compile.py(72):     if (flags & SRE_FLAG_IGNORECASE and
sre_compile.py(77):         fixes = None
sre_compile.py(78):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(79):         if op in LITERAL_CODES:
sre_compile.py(98):         elif op is IN:
sre_compile.py(99):             if flags & SRE_FLAG_IGNORECASE:
sre_compile.py(104):                 emit(OPCODES[op])
sre_compile.py(105):                 fixup = None
sre_compile.py(106):             skip = _len(code); emit(0)
sre_compile.py(107):             _compile_charset(av, flags, code, fixup, fixes)
 --- modulename: sre_compile, funcname: _compile_charset
sre_compile.py(230):     emit = code.append
sre_compile.py(231):     for op, av in _optimize_charset(charset, fixup, fixes,
sre_compile.py(232):                                     flags & SRE_FLAG_UNICODE):
 --- modulename: sre_compile, funcname: _optimize_charset
sre_compile.py(258):     out = []
sre_compile.py(259):     tail = []
sre_compile.py(260):     charmap = bytearray(256)
sre_compile.py(261):     for op, av in charset:
sre_compile.py(262):         while True:
sre_compile.py(263):             try:
sre_compile.py(264):                 if op is LITERAL:
sre_compile.py(273):                 elif op is RANGE:
sre_compile.py(286):                 elif op is NEGATE:
sre_compile.py(289):                     tail.append((op, av))
sre_compile.py(310):             break
sre_compile.py(261):     for op, av in charset:
sre_compile.py(262):         while True:
sre_compile.py(263):             try:
sre_compile.py(264):                 if op is LITERAL:
sre_compile.py(265):                     if fixup:
sre_compile.py(272):                         charmap[av] = 1
sre_compile.py(310):             break
sre_compile.py(261):     for op, av in charset:
sre_compile.py(262):         while True:
sre_compile.py(263):             try:
sre_compile.py(264):                 if op is LITERAL:
sre_compile.py(265):                     if fixup:
sre_compile.py(272):                         charmap[av] = 1
sre_compile.py(310):             break
sre_compile.py(261):     for op, av in charset:
sre_compile.py(313):     runs = []
sre_compile.py(314):     q = 0
sre_compile.py(315):     while True:
sre_compile.py(316):         p = charmap.find(b'\1', q)
sre_compile.py(317):         if p < 0:
sre_compile.py(319):         if len(runs) >= 2:
sre_compile.py(322):         q = charmap.find(b'\0', p)
sre_compile.py(323):         if q < 0:
sre_compile.py(326):         runs.append((p, q))
sre_compile.py(315):     while True:
sre_compile.py(316):         p = charmap.find(b'\1', q)
sre_compile.py(317):         if p < 0:
sre_compile.py(319):         if len(runs) >= 2:
sre_compile.py(322):         q = charmap.find(b'\0', p)
sre_compile.py(323):         if q < 0:
sre_compile.py(326):         runs.append((p, q))
sre_compile.py(315):     while True:
sre_compile.py(316):         p = charmap.find(b'\1', q)
sre_compile.py(317):         if p < 0:
sre_compile.py(318):             break
sre_compile.py(327):     if runs is not None:
sre_compile.py(329):         for p, q in runs:
sre_compile.py(330):             if q - p == 1:
sre_compile.py(331):                 out.append((LITERAL, p))
sre_compile.py(329):         for p, q in runs:
sre_compile.py(330):             if q - p == 1:
sre_compile.py(331):                 out.append((LITERAL, p))
sre_compile.py(329):         for p, q in runs:
sre_compile.py(334):         out += tail
sre_compile.py(336):         if fixup or len(out) < len(charset):
sre_compile.py(339):         return charset
sre_compile.py(233):         emit(OPCODES[op])
sre_compile.py(234):         if op is NEGATE:
sre_compile.py(236):         elif op is LITERAL:
sre_compile.py(238):         elif op is RANGE:
sre_compile.py(241):         elif op is CHARSET:
sre_compile.py(243):         elif op is BIGCHARSET:
sre_compile.py(245):         elif op is CATEGORY:
sre_compile.py(246):             if flags & SRE_FLAG_LOCALE:
sre_compile.py(248):             elif flags & SRE_FLAG_UNICODE:
sre_compile.py(251):                 emit(CHCODES[av])
sre_compile.py(232):                                     flags & SRE_FLAG_UNICODE):
sre_compile.py(233):         emit(OPCODES[op])
sre_compile.py(234):         if op is NEGATE:
sre_compile.py(236):         elif op is LITERAL:
sre_compile.py(237):             emit(av)
sre_compile.py(232):                                     flags & SRE_FLAG_UNICODE):
sre_compile.py(233):         emit(OPCODES[op])
sre_compile.py(234):         if op is NEGATE:
sre_compile.py(236):         elif op is LITERAL:
sre_compile.py(237):             emit(av)
sre_compile.py(232):                                     flags & SRE_FLAG_UNICODE):
sre_compile.py(254):     emit(OPCODES[FAILURE])
sre_compile.py(108):             code[skip] = _len(code) - skip
sre_compile.py(78):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(133):                 emit(OPCODES[SUCCESS])
sre_compile.py(134):                 code[skip] = _len(code) - skip
sre_compile.py(78):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(152):             if av[0]:
sre_compile.py(153):                 emit(OPCODES[MARK])
sre_compile.py(154):                 emit((av[0]-1)*2+1)
sre_compile.py(78):     for op, av in pattern:
sre_compile.py(79):         if op in LITERAL_CODES:
sre_compile.py(80):             if flags & SRE_FLAG_IGNORECASE:
sre_compile.py(96):                 emit(OPCODES[op])
sre_compile.py(97):                 emit(av)
sre_compile.py(78):     for op, av in pattern:
sre_compile.py(79):         if op in LITERAL_CODES:
sre_compile.py(98):         elif op is IN:
sre_compile.py(109):         elif op is ANY:
sre_compile.py(114):         elif op in REPEATING_CODES:
sre_compile.py(115):             if flags & SRE_FLAG_TEMPLATE:
sre_compile.py(124):             elif _simple(av) and op is not REPEAT:
 --- modulename: sre_compile, funcname: _simple
sre_compile.py(430):     lo, hi = av[2].getwidth()
 --- modulename: sre_parse, funcname: getwidth
sre_parse.py(153):         if self.width:
sre_parse.py(154):             return self.width
sre_compile.py(431):     return lo == hi == 1 and av[2][0][0] != SUBPATTERN
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(125):                 if op is MAX_REPEAT:
sre_compile.py(126):                     emit(OPCODES[REPEAT_ONE])
sre_compile.py(129):                 skip = _len(code); emit(0)
sre_compile.py(130):                 emit(av[0])
sre_compile.py(131):                 emit(av[1])
sre_compile.py(132):                 _compile(code, av[2], flags)
 --- modulename: sre_compile, funcname: _compile
sre_compile.py(66):     emit = code.append
sre_compile.py(67):     _len = len
sre_compile.py(68):     LITERAL_CODES = _LITERAL_CODES
sre_compile.py(69):     REPEATING_CODES = _REPEATING_CODES
sre_compile.py(70):     SUCCESS_CODES = _SUCCESS_CODES
sre_compile.py(71):     ASSERT_CODES = _ASSERT_CODES
sre_compile.py(72):     if (flags & SRE_FLAG_IGNORECASE and
sre_compile.py(77):         fixes = None
sre_compile.py(78):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(79):         if op in LITERAL_CODES:
sre_compile.py(98):         elif op is IN:
sre_compile.py(99):             if flags & SRE_FLAG_IGNORECASE:
sre_compile.py(104):                 emit(OPCODES[op])
sre_compile.py(105):                 fixup = None
sre_compile.py(106):             skip = _len(code); emit(0)
sre_compile.py(107):             _compile_charset(av, flags, code, fixup, fixes)
 --- modulename: sre_compile, funcname: _compile_charset
sre_compile.py(230):     emit = code.append
sre_compile.py(231):     for op, av in _optimize_charset(charset, fixup, fixes,
sre_compile.py(232):                                     flags & SRE_FLAG_UNICODE):
 --- modulename: sre_compile, funcname: _optimize_charset
sre_compile.py(258):     out = []
sre_compile.py(259):     tail = []
sre_compile.py(260):     charmap = bytearray(256)
sre_compile.py(261):     for op, av in charset:
sre_compile.py(262):         while True:
sre_compile.py(263):             try:
sre_compile.py(264):                 if op is LITERAL:
sre_compile.py(273):                 elif op is RANGE:
sre_compile.py(286):                 elif op is NEGATE:
sre_compile.py(289):                     tail.append((op, av))
sre_compile.py(310):             break
sre_compile.py(261):     for op, av in charset:
sre_compile.py(313):     runs = []
sre_compile.py(314):     q = 0
sre_compile.py(315):     while True:
sre_compile.py(316):         p = charmap.find(b'\1', q)
sre_compile.py(317):         if p < 0:
sre_compile.py(318):             break
sre_compile.py(327):     if runs is not None:
sre_compile.py(329):         for p, q in runs:
sre_compile.py(334):         out += tail
sre_compile.py(336):         if fixup or len(out) < len(charset):
sre_compile.py(339):         return charset
sre_compile.py(233):         emit(OPCODES[op])
sre_compile.py(234):         if op is NEGATE:
sre_compile.py(236):         elif op is LITERAL:
sre_compile.py(238):         elif op is RANGE:
sre_compile.py(241):         elif op is CHARSET:
sre_compile.py(243):         elif op is BIGCHARSET:
sre_compile.py(245):         elif op is CATEGORY:
sre_compile.py(246):             if flags & SRE_FLAG_LOCALE:
sre_compile.py(248):             elif flags & SRE_FLAG_UNICODE:
sre_compile.py(251):                 emit(CHCODES[av])
sre_compile.py(232):                                     flags & SRE_FLAG_UNICODE):
sre_compile.py(254):     emit(OPCODES[FAILURE])
sre_compile.py(108):             code[skip] = _len(code) - skip
sre_compile.py(78):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(133):                 emit(OPCODES[SUCCESS])
sre_compile.py(134):                 code[skip] = _len(code) - skip
sre_compile.py(78):     for op, av in pattern:
sre_compile.py(79):         if op in LITERAL_CODES:
sre_compile.py(80):             if flags & SRE_FLAG_IGNORECASE:
sre_compile.py(96):                 emit(OPCODES[op])
sre_compile.py(97):                 emit(av)
sre_compile.py(78):     for op, av in pattern:
sre_compile.py(79):         if op in LITERAL_CODES:
sre_compile.py(80):             if flags & SRE_FLAG_IGNORECASE:
sre_compile.py(96):                 emit(OPCODES[op])
sre_compile.py(97):                 emit(av)
sre_compile.py(78):     for op, av in pattern:
sre_compile.py(79):         if op in LITERAL_CODES:
sre_compile.py(80):             if flags & SRE_FLAG_IGNORECASE:
sre_compile.py(96):                 emit(OPCODES[op])
sre_compile.py(97):                 emit(av)
sre_compile.py(78):     for op, av in pattern:
sre_compile.py(79):         if op in LITERAL_CODES:
sre_compile.py(80):             if flags & SRE_FLAG_IGNORECASE:
sre_compile.py(96):                 emit(OPCODES[op])
sre_compile.py(97):                 emit(av)
sre_compile.py(78):     for op, av in pattern:
sre_compile.py(79):         if op in LITERAL_CODES:
sre_compile.py(80):             if flags & SRE_FLAG_IGNORECASE:
sre_compile.py(96):                 emit(OPCODES[op])
sre_compile.py(97):                 emit(av)
sre_compile.py(78):     for op, av in pattern:
sre_compile.py(79):         if op in LITERAL_CODES:
sre_compile.py(80):             if flags & SRE_FLAG_IGNORECASE:
sre_compile.py(96):                 emit(OPCODES[op])
sre_compile.py(97):                 emit(av)
sre_compile.py(78):     for op, av in pattern:
sre_compile.py(79):         if op in LITERAL_CODES:
sre_compile.py(98):         elif op is IN:
sre_compile.py(109):         elif op is ANY:
sre_compile.py(114):         elif op in REPEATING_CODES:
sre_compile.py(115):             if flags & SRE_FLAG_TEMPLATE:
sre_compile.py(124):             elif _simple(av) and op is not REPEAT:
 --- modulename: sre_compile, funcname: _simple
sre_compile.py(430):     lo, hi = av[2].getwidth()
 --- modulename: sre_parse, funcname: getwidth
sre_parse.py(153):         if self.width:
sre_parse.py(154):             return self.width
sre_compile.py(431):     return lo == hi == 1 and av[2][0][0] != SUBPATTERN
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(125):                 if op is MAX_REPEAT:
sre_compile.py(126):                     emit(OPCODES[REPEAT_ONE])
sre_compile.py(129):                 skip = _len(code); emit(0)
sre_compile.py(130):                 emit(av[0])
sre_compile.py(131):                 emit(av[1])
sre_compile.py(132):                 _compile(code, av[2], flags)
 --- modulename: sre_compile, funcname: _compile
sre_compile.py(66):     emit = code.append
sre_compile.py(67):     _len = len
sre_compile.py(68):     LITERAL_CODES = _LITERAL_CODES
sre_compile.py(69):     REPEATING_CODES = _REPEATING_CODES
sre_compile.py(70):     SUCCESS_CODES = _SUCCESS_CODES
sre_compile.py(71):     ASSERT_CODES = _ASSERT_CODES
sre_compile.py(72):     if (flags & SRE_FLAG_IGNORECASE and
sre_compile.py(77):         fixes = None
sre_compile.py(78):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(79):         if op in LITERAL_CODES:
sre_compile.py(80):             if flags & SRE_FLAG_IGNORECASE:
sre_compile.py(96):                 emit(OPCODES[op])
sre_compile.py(97):                 emit(av)
sre_compile.py(78):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(133):                 emit(OPCODES[SUCCESS])
sre_compile.py(134):                 code[skip] = _len(code) - skip
sre_compile.py(78):     for op, av in pattern:
sre_compile.py(79):         if op in LITERAL_CODES:
sre_compile.py(98):         elif op is IN:
sre_compile.py(109):         elif op is ANY:
sre_compile.py(114):         elif op in REPEATING_CODES:
sre_compile.py(115):             if flags & SRE_FLAG_TEMPLATE:
sre_compile.py(124):             elif _simple(av) and op is not REPEAT:
 --- modulename: sre_compile, funcname: _simple
sre_compile.py(430):     lo, hi = av[2].getwidth()
 --- modulename: sre_parse, funcname: getwidth
sre_parse.py(153):         if self.width:
sre_parse.py(154):             return self.width
sre_compile.py(431):     return lo == hi == 1 and av[2][0][0] != SUBPATTERN
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(125):                 if op is MAX_REPEAT:
sre_compile.py(126):                     emit(OPCODES[REPEAT_ONE])
sre_compile.py(129):                 skip = _len(code); emit(0)
sre_compile.py(130):                 emit(av[0])
sre_compile.py(131):                 emit(av[1])
sre_compile.py(132):                 _compile(code, av[2], flags)
 --- modulename: sre_compile, funcname: _compile
sre_compile.py(66):     emit = code.append
sre_compile.py(67):     _len = len
sre_compile.py(68):     LITERAL_CODES = _LITERAL_CODES
sre_compile.py(69):     REPEATING_CODES = _REPEATING_CODES
sre_compile.py(70):     SUCCESS_CODES = _SUCCESS_CODES
sre_compile.py(71):     ASSERT_CODES = _ASSERT_CODES
sre_compile.py(72):     if (flags & SRE_FLAG_IGNORECASE and
sre_compile.py(77):         fixes = None
sre_compile.py(78):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(79):         if op in LITERAL_CODES:
sre_compile.py(80):             if flags & SRE_FLAG_IGNORECASE:
sre_compile.py(96):                 emit(OPCODES[op])
sre_compile.py(97):                 emit(av)
sre_compile.py(78):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(133):                 emit(OPCODES[SUCCESS])
sre_compile.py(134):                 code[skip] = _len(code) - skip
sre_compile.py(78):     for op, av in pattern:
sre_compile.py(563):     code.append(OPCODES[SUCCESS])
sre_compile.py(565):     return code
sre_compile.py(581):     if p.pattern.groups > 100:
sre_compile.py(587):     groupindex = p.pattern.groupdict
sre_compile.py(588):     indexgroup = [None] * p.pattern.groups
sre_compile.py(589):     for k, i in groupindex.items():
sre_compile.py(592):     return _sre.compile(
sre_compile.py(593):         pattern, flags | p.pattern.flags, code,
sre_compile.py(594):         p.pattern.groups-1,
sre_compile.py(595):         groupindex, indexgroup
re.py(252):     if not bypass_cache:
re.py(253):         if len(_cache) >= _MAXCACHE:
re.py(255):         if p.flags & LOCALE:
re.py(260):             loc = None
re.py(261):         _cache[cachekey] = p, loc
re.py(262):     return p
platform.py(1342): _sys_version_cache = {}
platform.py(1344): def _sys_version(sys_version=None):
platform.py(1447): def python_implementation():
platform.py(1460): def python_version():
platform.py(1470): def python_version_tuple():
platform.py(1481): def python_branch():
platform.py(1495): def python_revision():
platform.py(1508): def python_build():
platform.py(1516): def python_compiler():
platform.py(1526): _platform_cache = {}
platform.py(1528): def platform(aliased=0, terse=0):
platform.py(1610): if __name__ == '__main__':
Widget.py(5): import random
Widget.py(6): from Settings import Colors
Widget.py(7): from Settings import LineTypes
Widget.py(8): from Settings import get_line_type
Widget.py(9): from AbstractGraph import *
Widget.py(10): from Edge import Edge, RealTimeLine
Widget.py(11): from os import listdir, path, startfile
Widget.py(12): import sys
Widget.py(13): _file_folder = path.dirname(__file__)
 --- modulename: ntpath, funcname: dirname
ntpath.py(215):     return split(p)[0]
 --- modulename: ntpath, funcname: split
ntpath.py(180):     d, p = splitdrive(p)
 --- modulename: ntpath, funcname: splitdrive
ntpath.py(115):     if len(p) > 1:
ntpath.py(116):         normp = p.replace(altsep, sep)
ntpath.py(117):         if (normp[0:2] == sep*2) and (normp[2:3] != sep):
ntpath.py(133):         if normp[1] == ':':
ntpath.py(134):             return p[:2], p[2:]
ntpath.py(182):     i = len(p)
ntpath.py(183):     while i and p[i-1] not in '/\\':
ntpath.py(184):         i = i - 1
ntpath.py(183):     while i and p[i-1] not in '/\\':
ntpath.py(184):         i = i - 1
ntpath.py(183):     while i and p[i-1] not in '/\\':
ntpath.py(184):         i = i - 1
ntpath.py(183):     while i and p[i-1] not in '/\\':
ntpath.py(184):         i = i - 1
ntpath.py(183):     while i and p[i-1] not in '/\\':
ntpath.py(184):         i = i - 1
ntpath.py(183):     while i and p[i-1] not in '/\\':
ntpath.py(184):         i = i - 1
ntpath.py(183):     while i and p[i-1] not in '/\\':
ntpath.py(184):         i = i - 1
ntpath.py(183):     while i and p[i-1] not in '/\\':
ntpath.py(184):         i = i - 1
ntpath.py(183):     while i and p[i-1] not in '/\\':
ntpath.py(184):         i = i - 1
ntpath.py(183):     while i and p[i-1] not in '/\\':
ntpath.py(184):         i = i - 1
ntpath.py(183):     while i and p[i-1] not in '/\\':
ntpath.py(185):     head, tail = p[:i], p[i:]  # now tail has no slashes
ntpath.py(187):     head2 = head
ntpath.py(188):     while head2 and head2[-1] in '/\\':
ntpath.py(189):         head2 = head2[:-1]
ntpath.py(188):     while head2 and head2[-1] in '/\\':
ntpath.py(190):     head = head2 or head
ntpath.py(191):     return d + head, tail
Widget.py(14): _mod_folder = _file_folder.replace(_file_folder.rsplit('\\')[-1], '')
Widget.py(15): nodes_path = _mod_folder + '\\Nodes'
Widget.py(16): if nodes_path not in sys.path:
Widget.py(17):     sys.path.append(nodes_path)
Widget.py(18): import Nodes
Widget.py(19): import Commands
Widget.py(20): from time import ctime
Widget.py(21): import OptionsWindow_ui
 --- modulename: OptionsWindow_ui, funcname: <module>
OptionsWindow_ui.py(1): from PySide import QtCore, QtGui
OptionsWindow_ui.py(3): class Ui_OptionsUI(object):
 --- modulename: OptionsWindow_ui, funcname: Ui_OptionsUI
OptionsWindow_ui.py(3): class Ui_OptionsUI(object):
OptionsWindow_ui.py(4):     def setupUi(self, OptionsUI):
OptionsWindow_ui.py(276):     def retranslateUi(self, OptionsUI):
Widget.py(22): import rgba_color_picker_ui
 --- modulename: rgba_color_picker_ui, funcname: <module>
rgba_color_picker_ui.py(10): from PySide import QtCore, QtGui
rgba_color_picker_ui.py(12): class Ui_rgba_color_picker_ui(object):
 --- modulename: rgba_color_picker_ui, funcname: Ui_rgba_color_picker_ui
rgba_color_picker_ui.py(12): class Ui_rgba_color_picker_ui(object):
rgba_color_picker_ui.py(13):     def setupUi(self, rgba_color_picker_ui):
rgba_color_picker_ui.py(49):     def retranslateUi(self, rgba_color_picker_ui):
Widget.py(23): import json
 --- modulename: __init__, funcname: <module>
__init__.py(99): """
__init__.py(100): __version__ = '2.0.9'
__init__.py(102):     'dump', 'dumps', 'load', 'loads',
__init__.py(103):     'JSONDecoder', 'JSONEncoder',
__init__.py(106): __author__ = 'Bob Ippolito <bob@redivi.com>'
__init__.py(108): from .decoder import JSONDecoder
 --- modulename: decoder, funcname: <module>
decoder.py(2): """
decoder.py(3): import re
decoder.py(4): import sys
decoder.py(5): import struct
decoder.py(7): from json import scanner
 --- modulename: scanner, funcname: <module>
scanner.py(2): """
scanner.py(3): import re
scanner.py(4): try:
scanner.py(5):     from _json import make_scanner as c_make_scanner
scanner.py(9): __all__ = ['make_scanner']
scanner.py(11): NUMBER_RE = re.compile(
scanner.py(12):     r'(-?(?:0|[1-9]\d*))(\.\d+)?([eE][-+]?\d+)?',
scanner.py(13):     (re.VERBOSE | re.MULTILINE | re.DOTALL))
 --- modulename: re, funcname: compile
re.py(194):     return _compile(pattern, flags)
 --- modulename: re, funcname: _compile
re.py(232):     pattern, flags = key
re.py(233):     bypass_cache = flags & DEBUG
re.py(234):     if not bypass_cache:
re.py(235):         cachekey = (type(key[0]),) + key
re.py(236):         try:
re.py(237):             p, loc = _cache[cachekey]
re.py(240):         except KeyError:
re.py(241):             pass
re.py(242):     if isinstance(pattern, _pattern_type):
re.py(246):     if not sre_compile.isstring(pattern):
 --- modulename: sre_compile, funcname: isstring
sre_compile.py(547):     for tp in STRING_TYPES:
sre_compile.py(548):         if isinstance(obj, tp):
sre_compile.py(549):             return 1
re.py(248):     try:
re.py(249):         p = sre_compile.compile(pattern, flags)
 --- modulename: sre_compile, funcname: compile
sre_compile.py(570):     if isstring(p):
 --- modulename: sre_compile, funcname: isstring
sre_compile.py(547):     for tp in STRING_TYPES:
sre_compile.py(548):         if isinstance(obj, tp):
sre_compile.py(549):             return 1
sre_compile.py(571):         pattern = p
sre_compile.py(572):         p = sre_parse.parse(p, flags)
 --- modulename: sre_parse, funcname: parse
sre_parse.py(709):     source = Tokenizer(str)
 --- modulename: sre_parse, funcname: __init__
sre_parse.py(190):         self.string = string
sre_parse.py(191):         self.index = 0
sre_parse.py(192):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(711):     if pattern is None:
sre_parse.py(712):         pattern = Pattern()
 --- modulename: sre_parse, funcname: __init__
sre_parse.py(68):         self.flags = 0
sre_parse.py(69):         self.open = []
sre_parse.py(70):         self.groups = 1
sre_parse.py(71):         self.groupdict = {}
sre_parse.py(72):         self.lookbehind = 0
sre_parse.py(713):     pattern.flags = flags
sre_parse.py(714):     pattern.str = str
sre_parse.py(716):     p = _parse_sub(source, pattern, 0)
 --- modulename: sre_parse, funcname: _parse_sub
sre_parse.py(320):     items = []
sre_parse.py(321):     itemsappend = items.append
sre_parse.py(322):     sourcematch = source.match
sre_parse.py(323):     while 1:
sre_parse.py(324):         itemsappend(_parse(source, state))
 --- modulename: sre_parse, funcname: _parse
sre_parse.py(397):     subpattern = SubPattern(state)
 --- modulename: sre_parse, funcname: __init__
sre_parse.py(93):         self.pattern = pattern
sre_parse.py(94):         if data is None:
sre_parse.py(95):             data = []
sre_parse.py(96):         self.data = data
sre_parse.py(97):         self.width = None
sre_parse.py(400):     subpatternappend = subpattern.append
sre_parse.py(401):     sourceget = source.get
sre_parse.py(402):     sourcematch = source.match
sre_parse.py(403):     _len = len
sre_parse.py(404):     PATTERNENDERS = _PATTERNENDERS
sre_parse.py(405):     ASSERTCHARS = _ASSERTCHARS
sre_parse.py(406):     LOOKBEHINDASSERTCHARS = _LOOKBEHINDASSERTCHARS
sre_parse.py(407):     REPEATCODES = _REPEATCODES
sre_parse.py(409):     while 1:
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(413):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(414):         if this is None:
sre_parse.py(417):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(419):             if this in WHITESPACE:
sre_parse.py(421):             if this == "#":
sre_parse.py(428):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(431):         elif this == "[":
sre_parse.py(488):         elif this and this[0] in REPEAT_CHARS:
sre_parse.py(541):         elif this == ".":
sre_parse.py(544):         elif this == "(":
sre_parse.py(545):             group = 1
sre_parse.py(546):             name = None
sre_parse.py(547):             condgroup = None
sre_parse.py(548):             if sourcematch("?"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(211):         return 0
sre_parse.py(666):             if group:
sre_parse.py(668):                 if group == 2:
sre_parse.py(672):                     group = state.opengroup(name)
 --- modulename: sre_parse, funcname: opengroup
sre_parse.py(75):         gid = self.groups
sre_parse.py(76):         self.groups = gid + 1
sre_parse.py(77):         if name is not None:
sre_parse.py(83):         self.open.append(gid)
sre_parse.py(84):         return gid
sre_parse.py(673):                 if condgroup:
sre_parse.py(676):                     p = _parse_sub(source, state)
 --- modulename: sre_parse, funcname: _parse_sub
sre_parse.py(320):     items = []
sre_parse.py(321):     itemsappend = items.append
sre_parse.py(322):     sourcematch = source.match
sre_parse.py(323):     while 1:
sre_parse.py(324):         itemsappend(_parse(source, state))
 --- modulename: sre_parse, funcname: _parse
sre_parse.py(397):     subpattern = SubPattern(state)
 --- modulename: sre_parse, funcname: __init__
sre_parse.py(93):         self.pattern = pattern
sre_parse.py(94):         if data is None:
sre_parse.py(95):             data = []
sre_parse.py(96):         self.data = data
sre_parse.py(97):         self.width = None
sre_parse.py(400):     subpatternappend = subpattern.append
sre_parse.py(401):     sourceget = source.get
sre_parse.py(402):     sourcematch = source.match
sre_parse.py(403):     _len = len
sre_parse.py(404):     PATTERNENDERS = _PATTERNENDERS
sre_parse.py(405):     ASSERTCHARS = _ASSERTCHARS
sre_parse.py(406):     LOOKBEHINDASSERTCHARS = _LOOKBEHINDASSERTCHARS
sre_parse.py(407):     REPEATCODES = _REPEATCODES
sre_parse.py(409):     while 1:
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(413):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(414):         if this is None:
sre_parse.py(417):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(419):             if this in WHITESPACE:
sre_parse.py(421):             if this == "#":
sre_parse.py(428):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(429):             subpatternappend((LITERAL, ord(this)))
 --- modulename: sre_parse, funcname: append
sre_parse.py(150):         self.data.append(code)
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(413):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(414):         if this is None:
sre_parse.py(417):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(419):             if this in WHITESPACE:
sre_parse.py(421):             if this == "#":
sre_parse.py(428):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(431):         elif this == "[":
sre_parse.py(488):         elif this and this[0] in REPEAT_CHARS:
sre_parse.py(490):             if this == "?":
sre_parse.py(491):                 min, max = 0, 1
sre_parse.py(528):             if subpattern:
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(138):         return len(self.data)
sre_parse.py(529):                 item = subpattern[-1:]
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(138):         return len(self.data)
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(143):             return SubPattern(self.pattern, self.data[index])
 --- modulename: sre_parse, funcname: __init__
sre_parse.py(93):         self.pattern = pattern
sre_parse.py(94):         if data is None:
sre_parse.py(96):         self.data = data
sre_parse.py(97):         self.width = None
sre_parse.py(532):             if not item or (_len(item) == 1 and item[0][0] == AT):
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(138):         return len(self.data)
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(138):         return len(self.data)
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_parse.py(534):             if item[0][0] in REPEATCODES:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_parse.py(536):             if sourcematch("?"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(211):         return 0
sre_parse.py(539):                 subpattern[-1] = (MAX_REPEAT, (min, max, item))
 --- modulename: sre_parse, funcname: __setitem__
sre_parse.py(146):         self.data[index] = code
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(413):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(414):         if this is None:
sre_parse.py(417):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(419):             if this in WHITESPACE:
sre_parse.py(421):             if this == "#":
sre_parse.py(428):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(431):         elif this == "[":
sre_parse.py(488):         elif this and this[0] in REPEAT_CHARS:
sre_parse.py(541):         elif this == ".":
sre_parse.py(544):         elif this == "(":
sre_parse.py(545):             group = 1
sre_parse.py(546):             name = None
sre_parse.py(547):             condgroup = None
sre_parse.py(548):             if sourcematch("?"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(208):             if skip:
sre_parse.py(209):                 self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(210):             return 1
sre_parse.py(549):                 group = 0
sre_parse.py(551):                 if sourcematch("P"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(211):         return 0
sre_parse.py(600):                 elif sourcematch(":"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(208):             if skip:
sre_parse.py(209):                 self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(210):             return 1
sre_parse.py(602):                     group = 2
sre_parse.py(666):             if group:
sre_parse.py(668):                 if group == 2:
sre_parse.py(670):                     group = None
sre_parse.py(673):                 if condgroup:
sre_parse.py(676):                     p = _parse_sub(source, state)
 --- modulename: sre_parse, funcname: _parse_sub
sre_parse.py(320):     items = []
sre_parse.py(321):     itemsappend = items.append
sre_parse.py(322):     sourcematch = source.match
sre_parse.py(323):     while 1:
sre_parse.py(324):         itemsappend(_parse(source, state))
 --- modulename: sre_parse, funcname: _parse
sre_parse.py(397):     subpattern = SubPattern(state)
 --- modulename: sre_parse, funcname: __init__
sre_parse.py(93):         self.pattern = pattern
sre_parse.py(94):         if data is None:
sre_parse.py(95):             data = []
sre_parse.py(96):         self.data = data
sre_parse.py(97):         self.width = None
sre_parse.py(400):     subpatternappend = subpattern.append
sre_parse.py(401):     sourceget = source.get
sre_parse.py(402):     sourcematch = source.match
sre_parse.py(403):     _len = len
sre_parse.py(404):     PATTERNENDERS = _PATTERNENDERS
sre_parse.py(405):     ASSERTCHARS = _ASSERTCHARS
sre_parse.py(406):     LOOKBEHINDASSERTCHARS = _LOOKBEHINDASSERTCHARS
sre_parse.py(407):     REPEATCODES = _REPEATCODES
sre_parse.py(409):     while 1:
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(413):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(414):         if this is None:
sre_parse.py(417):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(419):             if this in WHITESPACE:
sre_parse.py(421):             if this == "#":
sre_parse.py(428):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(429):             subpatternappend((LITERAL, ord(this)))
 --- modulename: sre_parse, funcname: append
sre_parse.py(150):         self.data.append(code)
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(412):             break # end of subpattern
sre_parse.py(704):     return subpattern
sre_parse.py(325):         if sourcematch("|"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(208):             if skip:
sre_parse.py(209):                 self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(210):             return 1
sre_parse.py(326):             continue
sre_parse.py(324):         itemsappend(_parse(source, state))
 --- modulename: sre_parse, funcname: _parse
sre_parse.py(397):     subpattern = SubPattern(state)
 --- modulename: sre_parse, funcname: __init__
sre_parse.py(93):         self.pattern = pattern
sre_parse.py(94):         if data is None:
sre_parse.py(95):             data = []
sre_parse.py(96):         self.data = data
sre_parse.py(97):         self.width = None
sre_parse.py(400):     subpatternappend = subpattern.append
sre_parse.py(401):     sourceget = source.get
sre_parse.py(402):     sourcematch = source.match
sre_parse.py(403):     _len = len
sre_parse.py(404):     PATTERNENDERS = _PATTERNENDERS
sre_parse.py(405):     ASSERTCHARS = _ASSERTCHARS
sre_parse.py(406):     LOOKBEHINDASSERTCHARS = _LOOKBEHINDASSERTCHARS
sre_parse.py(407):     REPEATCODES = _REPEATCODES
sre_parse.py(409):     while 1:
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(413):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(414):         if this is None:
sre_parse.py(417):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(419):             if this in WHITESPACE:
sre_parse.py(421):             if this == "#":
sre_parse.py(428):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(431):         elif this == "[":
sre_parse.py(433):             set = []
sre_parse.py(434):             setappend = set.append
sre_parse.py(437):             if sourcematch("^"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(211):         return 0
sre_parse.py(440):             start = set[:]
sre_parse.py(441):             while 1:
sre_parse.py(442):                 this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(443):                 if this == "]" and set != start:
sre_parse.py(445):                 elif this and this[0] == "\\":
sre_parse.py(447):                 elif this:
sre_parse.py(448):                     code1 = LITERAL, ord(this)
sre_parse.py(451):                 if sourcematch("-"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(208):             if skip:
sre_parse.py(209):                 self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(210):             return 1
sre_parse.py(453):                     this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(454):                     if this == "]":
sre_parse.py(460):                     elif this:
sre_parse.py(461):                         if this[0] == "\\":
sre_parse.py(464):                             code2 = LITERAL, ord(this)
sre_parse.py(465):                         if code1[0] != LITERAL or code2[0] != LITERAL:
sre_parse.py(467):                         lo = code1[1]
sre_parse.py(468):                         hi = code2[1]
sre_parse.py(469):                         if hi < lo:
sre_parse.py(471):                         setappend((RANGE, (lo, hi)))
sre_parse.py(442):                 this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(199):             try:
sre_parse.py(200):                 c = self.string[self.index + 1]
sre_parse.py(203):             char = char + c
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(443):                 if this == "]" and set != start:
sre_parse.py(444):                     break
sre_parse.py(480):             if _len(set)==1 and set[0][0] is LITERAL:
sre_parse.py(482):             elif _len(set)==2 and set[0][0] is NEGATE and set[1][0] is LITERAL:
sre_parse.py(486):                 subpatternappend((IN, set))
 --- modulename: sre_parse, funcname: append
sre_parse.py(150):         self.data.append(code)
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(413):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(414):         if this is None:
sre_parse.py(417):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(419):             if this in WHITESPACE:
sre_parse.py(421):             if this == "#":
sre_parse.py(428):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(431):         elif this == "[":
sre_parse.py(488):         elif this and this[0] in REPEAT_CHARS:
sre_parse.py(541):         elif this == ".":
sre_parse.py(544):         elif this == "(":
sre_parse.py(691):         elif this == "^":
sre_parse.py(694):         elif this == "$":
sre_parse.py(697):         elif this and this[0] == "\\":
sre_parse.py(698):             code = _escape(source, this, state)
 --- modulename: sre_parse, funcname: _escape
sre_parse.py(270):     code = CATEGORIES.get(escape)
sre_parse.py(271):     if code:
sre_parse.py(272):         return code
sre_parse.py(699):             subpatternappend(code)
 --- modulename: sre_parse, funcname: append
sre_parse.py(150):         self.data.append(code)
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(413):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(414):         if this is None:
sre_parse.py(417):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(419):             if this in WHITESPACE:
sre_parse.py(421):             if this == "#":
sre_parse.py(428):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(431):         elif this == "[":
sre_parse.py(488):         elif this and this[0] in REPEAT_CHARS:
sre_parse.py(490):             if this == "?":
sre_parse.py(492):             elif this == "*":
sre_parse.py(493):                 min, max = 0, MAXREPEAT
sre_parse.py(528):             if subpattern:
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(138):         return len(self.data)
sre_parse.py(529):                 item = subpattern[-1:]
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(138):         return len(self.data)
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(143):             return SubPattern(self.pattern, self.data[index])
 --- modulename: sre_parse, funcname: __init__
sre_parse.py(93):         self.pattern = pattern
sre_parse.py(94):         if data is None:
sre_parse.py(96):         self.data = data
sre_parse.py(97):         self.width = None
sre_parse.py(532):             if not item or (_len(item) == 1 and item[0][0] == AT):
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(138):         return len(self.data)
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(138):         return len(self.data)
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_parse.py(534):             if item[0][0] in REPEATCODES:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_parse.py(536):             if sourcematch("?"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(211):         return 0
sre_parse.py(539):                 subpattern[-1] = (MAX_REPEAT, (min, max, item))
 --- modulename: sre_parse, funcname: __setitem__
sre_parse.py(146):         self.data[index] = code
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(412):             break # end of subpattern
sre_parse.py(704):     return subpattern
sre_parse.py(325):         if sourcematch("|"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(211):         return 0
sre_parse.py(327):         if not nested:
sre_parse.py(329):         if not source.next or sourcematch(")", 0):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(208):             if skip:
sre_parse.py(210):             return 1
sre_parse.py(330):             break
sre_parse.py(334):     if len(items) == 1:
sre_parse.py(337):     subpattern = SubPattern(state)
 --- modulename: sre_parse, funcname: __init__
sre_parse.py(93):         self.pattern = pattern
sre_parse.py(94):         if data is None:
sre_parse.py(95):             data = []
sre_parse.py(96):         self.data = data
sre_parse.py(97):         self.width = None
sre_parse.py(338):     subpatternappend = subpattern.append
sre_parse.py(341):     while 1:
sre_parse.py(342):         prefix = None
sre_parse.py(343):         for item in items:
sre_parse.py(344):             if not item:
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(138):         return len(self.data)
sre_parse.py(346):             if prefix is None:
sre_parse.py(347):                 prefix = item[0]
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_parse.py(343):         for item in items:
sre_parse.py(344):             if not item:
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(138):         return len(self.data)
sre_parse.py(346):             if prefix is None:
sre_parse.py(348):             elif item[0] != prefix:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_parse.py(349):                 break
sre_parse.py(357):         break
sre_parse.py(360):     for item in items:
sre_parse.py(361):         if len(item) != 1 or item[0][0] != LITERAL:
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(138):         return len(self.data)
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_parse.py(360):     for item in items:
sre_parse.py(361):         if len(item) != 1 or item[0][0] != LITERAL:
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(138):         return len(self.data)
sre_parse.py(362):             break
sre_parse.py(373):     subpattern.append((BRANCH, (None, items)))
 --- modulename: sre_parse, funcname: append
sre_parse.py(150):         self.data.append(code)
sre_parse.py(374):     return subpattern
sre_parse.py(677):                 if not sourcematch(")"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(208):             if skip:
sre_parse.py(209):                 self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(210):             return 1
sre_parse.py(679):                 if group is not None:
sre_parse.py(681):                 subpatternappend((SUBPATTERN, (group, p)))
 --- modulename: sre_parse, funcname: append
sre_parse.py(150):         self.data.append(code)
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(412):             break # end of subpattern
sre_parse.py(704):     return subpattern
sre_parse.py(325):         if sourcematch("|"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(211):         return 0
sre_parse.py(327):         if not nested:
sre_parse.py(329):         if not source.next or sourcematch(")", 0):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(208):             if skip:
sre_parse.py(210):             return 1
sre_parse.py(330):             break
sre_parse.py(334):     if len(items) == 1:
sre_parse.py(335):         return items[0]
sre_parse.py(677):                 if not sourcematch(")"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(208):             if skip:
sre_parse.py(209):                 self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(210):             return 1
sre_parse.py(679):                 if group is not None:
sre_parse.py(680):                     state.closegroup(group)
 --- modulename: sre_parse, funcname: closegroup
sre_parse.py(86):         self.open.remove(gid)
sre_parse.py(681):                 subpatternappend((SUBPATTERN, (group, p)))
 --- modulename: sre_parse, funcname: append
sre_parse.py(150):         self.data.append(code)
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(413):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(199):             try:
sre_parse.py(200):                 c = self.string[self.index + 1]
sre_parse.py(203):             char = char + c
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(414):         if this is None:
sre_parse.py(417):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(419):             if this in WHITESPACE:
sre_parse.py(421):             if this == "#":
sre_parse.py(428):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(431):         elif this == "[":
sre_parse.py(488):         elif this and this[0] in REPEAT_CHARS:
sre_parse.py(541):         elif this == ".":
sre_parse.py(544):         elif this == "(":
sre_parse.py(545):             group = 1
sre_parse.py(546):             name = None
sre_parse.py(547):             condgroup = None
sre_parse.py(548):             if sourcematch("?"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(211):         return 0
sre_parse.py(666):             if group:
sre_parse.py(668):                 if group == 2:
sre_parse.py(672):                     group = state.opengroup(name)
 --- modulename: sre_parse, funcname: opengroup
sre_parse.py(75):         gid = self.groups
sre_parse.py(76):         self.groups = gid + 1
sre_parse.py(77):         if name is not None:
sre_parse.py(83):         self.open.append(gid)
sre_parse.py(84):         return gid
sre_parse.py(673):                 if condgroup:
sre_parse.py(676):                     p = _parse_sub(source, state)
 --- modulename: sre_parse, funcname: _parse_sub
sre_parse.py(320):     items = []
sre_parse.py(321):     itemsappend = items.append
sre_parse.py(322):     sourcematch = source.match
sre_parse.py(323):     while 1:
sre_parse.py(324):         itemsappend(_parse(source, state))
 --- modulename: sre_parse, funcname: _parse
sre_parse.py(397):     subpattern = SubPattern(state)
 --- modulename: sre_parse, funcname: __init__
sre_parse.py(93):         self.pattern = pattern
sre_parse.py(94):         if data is None:
sre_parse.py(95):             data = []
sre_parse.py(96):         self.data = data
sre_parse.py(97):         self.width = None
sre_parse.py(400):     subpatternappend = subpattern.append
sre_parse.py(401):     sourceget = source.get
sre_parse.py(402):     sourcematch = source.match
sre_parse.py(403):     _len = len
sre_parse.py(404):     PATTERNENDERS = _PATTERNENDERS
sre_parse.py(405):     ASSERTCHARS = _ASSERTCHARS
sre_parse.py(406):     LOOKBEHINDASSERTCHARS = _LOOKBEHINDASSERTCHARS
sre_parse.py(407):     REPEATCODES = _REPEATCODES
sre_parse.py(409):     while 1:
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(413):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(199):             try:
sre_parse.py(200):                 c = self.string[self.index + 1]
sre_parse.py(203):             char = char + c
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(414):         if this is None:
sre_parse.py(417):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(419):             if this in WHITESPACE:
sre_parse.py(421):             if this == "#":
sre_parse.py(428):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(431):         elif this == "[":
sre_parse.py(488):         elif this and this[0] in REPEAT_CHARS:
sre_parse.py(541):         elif this == ".":
sre_parse.py(544):         elif this == "(":
sre_parse.py(691):         elif this == "^":
sre_parse.py(694):         elif this == "$":
sre_parse.py(697):         elif this and this[0] == "\\":
sre_parse.py(698):             code = _escape(source, this, state)
 --- modulename: sre_parse, funcname: _escape
sre_parse.py(270):     code = CATEGORIES.get(escape)
sre_parse.py(271):     if code:
sre_parse.py(273):     code = ESCAPES.get(escape)
sre_parse.py(274):     if code:
sre_parse.py(276):     try:
sre_parse.py(277):         c = escape[1:2]
sre_parse.py(278):         if c == "x":
sre_parse.py(285):         elif c == "0":
sre_parse.py(290):         elif c in DIGITS:
sre_parse.py(311):         if len(escape) == 2:
sre_parse.py(312):             return LITERAL, ord(escape[1])
sre_parse.py(699):             subpatternappend(code)
 --- modulename: sre_parse, funcname: append
sre_parse.py(150):         self.data.append(code)
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(413):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(414):         if this is None:
sre_parse.py(417):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(419):             if this in WHITESPACE:
sre_parse.py(421):             if this == "#":
sre_parse.py(428):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(431):         elif this == "[":
sre_parse.py(488):         elif this and this[0] in REPEAT_CHARS:
sre_parse.py(541):         elif this == ".":
sre_parse.py(544):         elif this == "(":
sre_parse.py(691):         elif this == "^":
sre_parse.py(694):         elif this == "$":
sre_parse.py(697):         elif this and this[0] == "\\":
sre_parse.py(698):             code = _escape(source, this, state)
 --- modulename: sre_parse, funcname: _escape
sre_parse.py(270):     code = CATEGORIES.get(escape)
sre_parse.py(271):     if code:
sre_parse.py(272):         return code
sre_parse.py(699):             subpatternappend(code)
 --- modulename: sre_parse, funcname: append
sre_parse.py(150):         self.data.append(code)
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(413):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(414):         if this is None:
sre_parse.py(417):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(419):             if this in WHITESPACE:
sre_parse.py(421):             if this == "#":
sre_parse.py(428):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(431):         elif this == "[":
sre_parse.py(488):         elif this and this[0] in REPEAT_CHARS:
sre_parse.py(490):             if this == "?":
sre_parse.py(492):             elif this == "*":
sre_parse.py(495):             elif this == "+":
sre_parse.py(496):                 min, max = 1, MAXREPEAT
sre_parse.py(528):             if subpattern:
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(138):         return len(self.data)
sre_parse.py(529):                 item = subpattern[-1:]
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(138):         return len(self.data)
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(143):             return SubPattern(self.pattern, self.data[index])
 --- modulename: sre_parse, funcname: __init__
sre_parse.py(93):         self.pattern = pattern
sre_parse.py(94):         if data is None:
sre_parse.py(96):         self.data = data
sre_parse.py(97):         self.width = None
sre_parse.py(532):             if not item or (_len(item) == 1 and item[0][0] == AT):
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(138):         return len(self.data)
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(138):         return len(self.data)
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_parse.py(534):             if item[0][0] in REPEATCODES:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_parse.py(536):             if sourcematch("?"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(211):         return 0
sre_parse.py(539):                 subpattern[-1] = (MAX_REPEAT, (min, max, item))
 --- modulename: sre_parse, funcname: __setitem__
sre_parse.py(146):         self.data[index] = code
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(412):             break # end of subpattern
sre_parse.py(704):     return subpattern
sre_parse.py(325):         if sourcematch("|"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(211):         return 0
sre_parse.py(327):         if not nested:
sre_parse.py(329):         if not source.next or sourcematch(")", 0):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(208):             if skip:
sre_parse.py(210):             return 1
sre_parse.py(330):             break
sre_parse.py(334):     if len(items) == 1:
sre_parse.py(335):         return items[0]
sre_parse.py(677):                 if not sourcematch(")"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(208):             if skip:
sre_parse.py(209):                 self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(210):             return 1
sre_parse.py(679):                 if group is not None:
sre_parse.py(680):                     state.closegroup(group)
 --- modulename: sre_parse, funcname: closegroup
sre_parse.py(86):         self.open.remove(gid)
sre_parse.py(681):                 subpatternappend((SUBPATTERN, (group, p)))
 --- modulename: sre_parse, funcname: append
sre_parse.py(150):         self.data.append(code)
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(413):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(414):         if this is None:
sre_parse.py(417):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(419):             if this in WHITESPACE:
sre_parse.py(421):             if this == "#":
sre_parse.py(428):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(431):         elif this == "[":
sre_parse.py(488):         elif this and this[0] in REPEAT_CHARS:
sre_parse.py(490):             if this == "?":
sre_parse.py(491):                 min, max = 0, 1
sre_parse.py(528):             if subpattern:
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(138):         return len(self.data)
sre_parse.py(529):                 item = subpattern[-1:]
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(138):         return len(self.data)
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(143):             return SubPattern(self.pattern, self.data[index])
 --- modulename: sre_parse, funcname: __init__
sre_parse.py(93):         self.pattern = pattern
sre_parse.py(94):         if data is None:
sre_parse.py(96):         self.data = data
sre_parse.py(97):         self.width = None
sre_parse.py(532):             if not item or (_len(item) == 1 and item[0][0] == AT):
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(138):         return len(self.data)
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(138):         return len(self.data)
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_parse.py(534):             if item[0][0] in REPEATCODES:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_parse.py(536):             if sourcematch("?"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(211):         return 0
sre_parse.py(539):                 subpattern[-1] = (MAX_REPEAT, (min, max, item))
 --- modulename: sre_parse, funcname: __setitem__
sre_parse.py(146):         self.data[index] = code
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(413):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(414):         if this is None:
sre_parse.py(417):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(419):             if this in WHITESPACE:
sre_parse.py(421):             if this == "#":
sre_parse.py(428):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(431):         elif this == "[":
sre_parse.py(488):         elif this and this[0] in REPEAT_CHARS:
sre_parse.py(541):         elif this == ".":
sre_parse.py(544):         elif this == "(":
sre_parse.py(545):             group = 1
sre_parse.py(546):             name = None
sre_parse.py(547):             condgroup = None
sre_parse.py(548):             if sourcematch("?"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(211):         return 0
sre_parse.py(666):             if group:
sre_parse.py(668):                 if group == 2:
sre_parse.py(672):                     group = state.opengroup(name)
 --- modulename: sre_parse, funcname: opengroup
sre_parse.py(75):         gid = self.groups
sre_parse.py(76):         self.groups = gid + 1
sre_parse.py(77):         if name is not None:
sre_parse.py(83):         self.open.append(gid)
sre_parse.py(84):         return gid
sre_parse.py(673):                 if condgroup:
sre_parse.py(676):                     p = _parse_sub(source, state)
 --- modulename: sre_parse, funcname: _parse_sub
sre_parse.py(320):     items = []
sre_parse.py(321):     itemsappend = items.append
sre_parse.py(322):     sourcematch = source.match
sre_parse.py(323):     while 1:
sre_parse.py(324):         itemsappend(_parse(source, state))
 --- modulename: sre_parse, funcname: _parse
sre_parse.py(397):     subpattern = SubPattern(state)
 --- modulename: sre_parse, funcname: __init__
sre_parse.py(93):         self.pattern = pattern
sre_parse.py(94):         if data is None:
sre_parse.py(95):             data = []
sre_parse.py(96):         self.data = data
sre_parse.py(97):         self.width = None
sre_parse.py(400):     subpatternappend = subpattern.append
sre_parse.py(401):     sourceget = source.get
sre_parse.py(402):     sourcematch = source.match
sre_parse.py(403):     _len = len
sre_parse.py(404):     PATTERNENDERS = _PATTERNENDERS
sre_parse.py(405):     ASSERTCHARS = _ASSERTCHARS
sre_parse.py(406):     LOOKBEHINDASSERTCHARS = _LOOKBEHINDASSERTCHARS
sre_parse.py(407):     REPEATCODES = _REPEATCODES
sre_parse.py(409):     while 1:
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(413):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(414):         if this is None:
sre_parse.py(417):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(419):             if this in WHITESPACE:
sre_parse.py(421):             if this == "#":
sre_parse.py(428):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(431):         elif this == "[":
sre_parse.py(433):             set = []
sre_parse.py(434):             setappend = set.append
sre_parse.py(437):             if sourcematch("^"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(211):         return 0
sre_parse.py(440):             start = set[:]
sre_parse.py(441):             while 1:
sre_parse.py(442):                 this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(443):                 if this == "]" and set != start:
sre_parse.py(445):                 elif this and this[0] == "\\":
sre_parse.py(447):                 elif this:
sre_parse.py(448):                     code1 = LITERAL, ord(this)
sre_parse.py(451):                 if sourcematch("-"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(211):         return 0
sre_parse.py(475):                     if code1[0] is IN:
sre_parse.py(477):                     setappend(code1)
sre_parse.py(442):                 this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(443):                 if this == "]" and set != start:
sre_parse.py(445):                 elif this and this[0] == "\\":
sre_parse.py(447):                 elif this:
sre_parse.py(448):                     code1 = LITERAL, ord(this)
sre_parse.py(451):                 if sourcematch("-"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(211):         return 0
sre_parse.py(475):                     if code1[0] is IN:
sre_parse.py(477):                     setappend(code1)
sre_parse.py(442):                 this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(443):                 if this == "]" and set != start:
sre_parse.py(444):                     break
sre_parse.py(480):             if _len(set)==1 and set[0][0] is LITERAL:
sre_parse.py(482):             elif _len(set)==2 and set[0][0] is NEGATE and set[1][0] is LITERAL:
sre_parse.py(486):                 subpatternappend((IN, set))
 --- modulename: sre_parse, funcname: append
sre_parse.py(150):         self.data.append(code)
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(413):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(414):         if this is None:
sre_parse.py(417):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(419):             if this in WHITESPACE:
sre_parse.py(421):             if this == "#":
sre_parse.py(428):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(431):         elif this == "[":
sre_parse.py(433):             set = []
sre_parse.py(434):             setappend = set.append
sre_parse.py(437):             if sourcematch("^"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(211):         return 0
sre_parse.py(440):             start = set[:]
sre_parse.py(441):             while 1:
sre_parse.py(442):                 this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(443):                 if this == "]" and set != start:
sre_parse.py(445):                 elif this and this[0] == "\\":
sre_parse.py(447):                 elif this:
sre_parse.py(448):                     code1 = LITERAL, ord(this)
sre_parse.py(451):                 if sourcematch("-"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(211):         return 0
sre_parse.py(475):                     if code1[0] is IN:
sre_parse.py(477):                     setappend(code1)
sre_parse.py(442):                 this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(443):                 if this == "]" and set != start:
sre_parse.py(445):                 elif this and this[0] == "\\":
sre_parse.py(447):                 elif this:
sre_parse.py(448):                     code1 = LITERAL, ord(this)
sre_parse.py(451):                 if sourcematch("-"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(211):         return 0
sre_parse.py(475):                     if code1[0] is IN:
sre_parse.py(477):                     setappend(code1)
sre_parse.py(442):                 this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(443):                 if this == "]" and set != start:
sre_parse.py(444):                     break
sre_parse.py(480):             if _len(set)==1 and set[0][0] is LITERAL:
sre_parse.py(482):             elif _len(set)==2 and set[0][0] is NEGATE and set[1][0] is LITERAL:
sre_parse.py(486):                 subpatternappend((IN, set))
 --- modulename: sre_parse, funcname: append
sre_parse.py(150):         self.data.append(code)
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(413):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(199):             try:
sre_parse.py(200):                 c = self.string[self.index + 1]
sre_parse.py(203):             char = char + c
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(414):         if this is None:
sre_parse.py(417):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(419):             if this in WHITESPACE:
sre_parse.py(421):             if this == "#":
sre_parse.py(428):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(431):         elif this == "[":
sre_parse.py(488):         elif this and this[0] in REPEAT_CHARS:
sre_parse.py(490):             if this == "?":
sre_parse.py(491):                 min, max = 0, 1
sre_parse.py(528):             if subpattern:
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(138):         return len(self.data)
sre_parse.py(529):                 item = subpattern[-1:]
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(138):         return len(self.data)
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(143):             return SubPattern(self.pattern, self.data[index])
 --- modulename: sre_parse, funcname: __init__
sre_parse.py(93):         self.pattern = pattern
sre_parse.py(94):         if data is None:
sre_parse.py(96):         self.data = data
sre_parse.py(97):         self.width = None
sre_parse.py(532):             if not item or (_len(item) == 1 and item[0][0] == AT):
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(138):         return len(self.data)
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(138):         return len(self.data)
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_parse.py(534):             if item[0][0] in REPEATCODES:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_parse.py(536):             if sourcematch("?"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(211):         return 0
sre_parse.py(539):                 subpattern[-1] = (MAX_REPEAT, (min, max, item))
 --- modulename: sre_parse, funcname: __setitem__
sre_parse.py(146):         self.data[index] = code
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(413):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(414):         if this is None:
sre_parse.py(417):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(419):             if this in WHITESPACE:
sre_parse.py(421):             if this == "#":
sre_parse.py(428):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(431):         elif this == "[":
sre_parse.py(488):         elif this and this[0] in REPEAT_CHARS:
sre_parse.py(541):         elif this == ".":
sre_parse.py(544):         elif this == "(":
sre_parse.py(691):         elif this == "^":
sre_parse.py(694):         elif this == "$":
sre_parse.py(697):         elif this and this[0] == "\\":
sre_parse.py(698):             code = _escape(source, this, state)
 --- modulename: sre_parse, funcname: _escape
sre_parse.py(270):     code = CATEGORIES.get(escape)
sre_parse.py(271):     if code:
sre_parse.py(272):         return code
sre_parse.py(699):             subpatternappend(code)
 --- modulename: sre_parse, funcname: append
sre_parse.py(150):         self.data.append(code)
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(413):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(414):         if this is None:
sre_parse.py(417):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(419):             if this in WHITESPACE:
sre_parse.py(421):             if this == "#":
sre_parse.py(428):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(431):         elif this == "[":
sre_parse.py(488):         elif this and this[0] in REPEAT_CHARS:
sre_parse.py(490):             if this == "?":
sre_parse.py(492):             elif this == "*":
sre_parse.py(495):             elif this == "+":
sre_parse.py(496):                 min, max = 1, MAXREPEAT
sre_parse.py(528):             if subpattern:
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(138):         return len(self.data)
sre_parse.py(529):                 item = subpattern[-1:]
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(138):         return len(self.data)
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(143):             return SubPattern(self.pattern, self.data[index])
 --- modulename: sre_parse, funcname: __init__
sre_parse.py(93):         self.pattern = pattern
sre_parse.py(94):         if data is None:
sre_parse.py(96):         self.data = data
sre_parse.py(97):         self.width = None
sre_parse.py(532):             if not item or (_len(item) == 1 and item[0][0] == AT):
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(138):         return len(self.data)
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(138):         return len(self.data)
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_parse.py(534):             if item[0][0] in REPEATCODES:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_parse.py(536):             if sourcematch("?"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(211):         return 0
sre_parse.py(539):                 subpattern[-1] = (MAX_REPEAT, (min, max, item))
 --- modulename: sre_parse, funcname: __setitem__
sre_parse.py(146):         self.data[index] = code
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(412):             break # end of subpattern
sre_parse.py(704):     return subpattern
sre_parse.py(325):         if sourcematch("|"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(211):         return 0
sre_parse.py(327):         if not nested:
sre_parse.py(329):         if not source.next or sourcematch(")", 0):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(208):             if skip:
sre_parse.py(210):             return 1
sre_parse.py(330):             break
sre_parse.py(334):     if len(items) == 1:
sre_parse.py(335):         return items[0]
sre_parse.py(677):                 if not sourcematch(")"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(208):             if skip:
sre_parse.py(209):                 self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(210):             return 1
sre_parse.py(679):                 if group is not None:
sre_parse.py(680):                     state.closegroup(group)
 --- modulename: sre_parse, funcname: closegroup
sre_parse.py(86):         self.open.remove(gid)
sre_parse.py(681):                 subpatternappend((SUBPATTERN, (group, p)))
 --- modulename: sre_parse, funcname: append
sre_parse.py(150):         self.data.append(code)
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(413):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(195):             self.next = None
sre_parse.py(196):             return
sre_parse.py(215):         return this
sre_parse.py(414):         if this is None:
sre_parse.py(417):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(419):             if this in WHITESPACE:
sre_parse.py(421):             if this == "#":
sre_parse.py(428):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(431):         elif this == "[":
sre_parse.py(488):         elif this and this[0] in REPEAT_CHARS:
sre_parse.py(490):             if this == "?":
sre_parse.py(491):                 min, max = 0, 1
sre_parse.py(528):             if subpattern:
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(138):         return len(self.data)
sre_parse.py(529):                 item = subpattern[-1:]
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(138):         return len(self.data)
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(143):             return SubPattern(self.pattern, self.data[index])
 --- modulename: sre_parse, funcname: __init__
sre_parse.py(93):         self.pattern = pattern
sre_parse.py(94):         if data is None:
sre_parse.py(96):         self.data = data
sre_parse.py(97):         self.width = None
sre_parse.py(532):             if not item or (_len(item) == 1 and item[0][0] == AT):
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(138):         return len(self.data)
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(138):         return len(self.data)
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_parse.py(534):             if item[0][0] in REPEATCODES:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_parse.py(536):             if sourcematch("?"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(211):         return 0
sre_parse.py(539):                 subpattern[-1] = (MAX_REPEAT, (min, max, item))
 --- modulename: sre_parse, funcname: __setitem__
sre_parse.py(146):         self.data[index] = code
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(413):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(195):             self.next = None
sre_parse.py(196):             return
sre_parse.py(215):         return this
sre_parse.py(414):         if this is None:
sre_parse.py(415):             break # end of pattern
sre_parse.py(704):     return subpattern
sre_parse.py(325):         if sourcematch("|"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(211):         return 0
sre_parse.py(327):         if not nested:
sre_parse.py(328):             break
sre_parse.py(334):     if len(items) == 1:
sre_parse.py(335):         return items[0]
sre_parse.py(718):     tail = source.get()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(195):             self.next = None
sre_parse.py(196):             return
sre_parse.py(215):         return this
sre_parse.py(719):     if tail == ")":
sre_parse.py(721):     elif tail:
sre_parse.py(724):     if not (flags & SRE_FLAG_VERBOSE) and p.pattern.flags & SRE_FLAG_VERBOSE:
sre_parse.py(729):     if flags & SRE_FLAG_DEBUG:
sre_parse.py(732):     return p
sre_compile.py(576):     code = _code(p, flags)
 --- modulename: sre_compile, funcname: _code
sre_compile.py(554):     flags = p.pattern.flags | flags
sre_compile.py(555):     code = []
sre_compile.py(558):     _compile_info(code, p, flags)
 --- modulename: sre_compile, funcname: _compile_info
sre_compile.py(437):     lo, hi = pattern.getwidth()
 --- modulename: sre_parse, funcname: getwidth
sre_parse.py(153):         if self.width:
sre_parse.py(155):         lo = hi = 0
sre_parse.py(156):         UNITCODES = (ANY, RANGE, IN, LITERAL, NOT_LITERAL, CATEGORY)
sre_parse.py(157):         REPEATCODES = (MIN_REPEAT, MAX_REPEAT)
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(159):             if op is BRANCH:
sre_parse.py(168):             elif op is CALL:
sre_parse.py(172):             elif op is SUBPATTERN:
sre_parse.py(173):                 i, j = av[1].getwidth()
 --- modulename: sre_parse, funcname: getwidth
sre_parse.py(153):         if self.width:
sre_parse.py(155):         lo = hi = 0
sre_parse.py(156):         UNITCODES = (ANY, RANGE, IN, LITERAL, NOT_LITERAL, CATEGORY)
sre_parse.py(157):         REPEATCODES = (MIN_REPEAT, MAX_REPEAT)
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(159):             if op is BRANCH:
sre_parse.py(168):             elif op is CALL:
sre_parse.py(172):             elif op is SUBPATTERN:
sre_parse.py(176):             elif op in REPEATCODES:
sre_parse.py(177):                 i, j = av[2].getwidth()
 --- modulename: sre_parse, funcname: getwidth
sre_parse.py(153):         if self.width:
sre_parse.py(155):         lo = hi = 0
sre_parse.py(156):         UNITCODES = (ANY, RANGE, IN, LITERAL, NOT_LITERAL, CATEGORY)
sre_parse.py(157):         REPEATCODES = (MIN_REPEAT, MAX_REPEAT)
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(159):             if op is BRANCH:
sre_parse.py(168):             elif op is CALL:
sre_parse.py(172):             elif op is SUBPATTERN:
sre_parse.py(176):             elif op in REPEATCODES:
sre_parse.py(180):             elif op in UNITCODES:
sre_parse.py(181):                 lo = lo + 1
sre_parse.py(182):                 hi = hi + 1
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(185):         self.width = min(lo, MAXREPEAT - 1), min(hi, MAXREPEAT)
sre_parse.py(186):         return self.width
sre_parse.py(178):                 lo = lo + i * av[0]
sre_parse.py(179):                 hi = hi + j * av[1]
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(159):             if op is BRANCH:
sre_parse.py(168):             elif op is CALL:
sre_parse.py(172):             elif op is SUBPATTERN:
sre_parse.py(173):                 i, j = av[1].getwidth()
 --- modulename: sre_parse, funcname: getwidth
sre_parse.py(153):         if self.width:
sre_parse.py(155):         lo = hi = 0
sre_parse.py(156):         UNITCODES = (ANY, RANGE, IN, LITERAL, NOT_LITERAL, CATEGORY)
sre_parse.py(157):         REPEATCODES = (MIN_REPEAT, MAX_REPEAT)
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(159):             if op is BRANCH:
sre_parse.py(160):                 i = MAXREPEAT - 1
sre_parse.py(161):                 j = 0
sre_parse.py(162):                 for av in av[1]:
sre_parse.py(163):                     l, h = av.getwidth()
 --- modulename: sre_parse, funcname: getwidth
sre_parse.py(153):         if self.width:
sre_parse.py(155):         lo = hi = 0
sre_parse.py(156):         UNITCODES = (ANY, RANGE, IN, LITERAL, NOT_LITERAL, CATEGORY)
sre_parse.py(157):         REPEATCODES = (MIN_REPEAT, MAX_REPEAT)
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(159):             if op is BRANCH:
sre_parse.py(168):             elif op is CALL:
sre_parse.py(172):             elif op is SUBPATTERN:
sre_parse.py(176):             elif op in REPEATCODES:
sre_parse.py(180):             elif op in UNITCODES:
sre_parse.py(181):                 lo = lo + 1
sre_parse.py(182):                 hi = hi + 1
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(185):         self.width = min(lo, MAXREPEAT - 1), min(hi, MAXREPEAT)
sre_parse.py(186):         return self.width
sre_parse.py(164):                     i = min(i, l)
sre_parse.py(165):                     j = max(j, h)
sre_parse.py(162):                 for av in av[1]:
sre_parse.py(163):                     l, h = av.getwidth()
 --- modulename: sre_parse, funcname: getwidth
sre_parse.py(153):         if self.width:
sre_parse.py(155):         lo = hi = 0
sre_parse.py(156):         UNITCODES = (ANY, RANGE, IN, LITERAL, NOT_LITERAL, CATEGORY)
sre_parse.py(157):         REPEATCODES = (MIN_REPEAT, MAX_REPEAT)
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(159):             if op is BRANCH:
sre_parse.py(168):             elif op is CALL:
sre_parse.py(172):             elif op is SUBPATTERN:
sre_parse.py(176):             elif op in REPEATCODES:
sre_parse.py(180):             elif op in UNITCODES:
sre_parse.py(181):                 lo = lo + 1
sre_parse.py(182):                 hi = hi + 1
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(159):             if op is BRANCH:
sre_parse.py(168):             elif op is CALL:
sre_parse.py(172):             elif op is SUBPATTERN:
sre_parse.py(176):             elif op in REPEATCODES:
sre_parse.py(177):                 i, j = av[2].getwidth()
 --- modulename: sre_parse, funcname: getwidth
sre_parse.py(153):         if self.width:
sre_parse.py(155):         lo = hi = 0
sre_parse.py(156):         UNITCODES = (ANY, RANGE, IN, LITERAL, NOT_LITERAL, CATEGORY)
sre_parse.py(157):         REPEATCODES = (MIN_REPEAT, MAX_REPEAT)
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(159):             if op is BRANCH:
sre_parse.py(168):             elif op is CALL:
sre_parse.py(172):             elif op is SUBPATTERN:
sre_parse.py(176):             elif op in REPEATCODES:
sre_parse.py(180):             elif op in UNITCODES:
sre_parse.py(181):                 lo = lo + 1
sre_parse.py(182):                 hi = hi + 1
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(185):         self.width = min(lo, MAXREPEAT - 1), min(hi, MAXREPEAT)
sre_parse.py(186):         return self.width
sre_parse.py(178):                 lo = lo + i * av[0]
sre_parse.py(179):                 hi = hi + j * av[1]
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(185):         self.width = min(lo, MAXREPEAT - 1), min(hi, MAXREPEAT)
sre_parse.py(186):         return self.width
sre_parse.py(164):                     i = min(i, l)
sre_parse.py(165):                     j = max(j, h)
sre_parse.py(162):                 for av in av[1]:
sre_parse.py(166):                 lo = lo + i
sre_parse.py(167):                 hi = hi + j
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(185):         self.width = min(lo, MAXREPEAT - 1), min(hi, MAXREPEAT)
sre_parse.py(186):         return self.width
sre_parse.py(174):                 lo = lo + i
sre_parse.py(175):                 hi = hi + j
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(185):         self.width = min(lo, MAXREPEAT - 1), min(hi, MAXREPEAT)
sre_parse.py(186):         return self.width
sre_parse.py(174):                 lo = lo + i
sre_parse.py(175):                 hi = hi + j
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(159):             if op is BRANCH:
sre_parse.py(168):             elif op is CALL:
sre_parse.py(172):             elif op is SUBPATTERN:
sre_parse.py(176):             elif op in REPEATCODES:
sre_parse.py(177):                 i, j = av[2].getwidth()
 --- modulename: sre_parse, funcname: getwidth
sre_parse.py(153):         if self.width:
sre_parse.py(155):         lo = hi = 0
sre_parse.py(156):         UNITCODES = (ANY, RANGE, IN, LITERAL, NOT_LITERAL, CATEGORY)
sre_parse.py(157):         REPEATCODES = (MIN_REPEAT, MAX_REPEAT)
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(159):             if op is BRANCH:
sre_parse.py(168):             elif op is CALL:
sre_parse.py(172):             elif op is SUBPATTERN:
sre_parse.py(173):                 i, j = av[1].getwidth()
 --- modulename: sre_parse, funcname: getwidth
sre_parse.py(153):         if self.width:
sre_parse.py(155):         lo = hi = 0
sre_parse.py(156):         UNITCODES = (ANY, RANGE, IN, LITERAL, NOT_LITERAL, CATEGORY)
sre_parse.py(157):         REPEATCODES = (MIN_REPEAT, MAX_REPEAT)
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(159):             if op is BRANCH:
sre_parse.py(168):             elif op is CALL:
sre_parse.py(172):             elif op is SUBPATTERN:
sre_parse.py(176):             elif op in REPEATCODES:
sre_parse.py(180):             elif op in UNITCODES:
sre_parse.py(181):                 lo = lo + 1
sre_parse.py(182):                 hi = hi + 1
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(159):             if op is BRANCH:
sre_parse.py(168):             elif op is CALL:
sre_parse.py(172):             elif op is SUBPATTERN:
sre_parse.py(176):             elif op in REPEATCODES:
sre_parse.py(177):                 i, j = av[2].getwidth()
 --- modulename: sre_parse, funcname: getwidth
sre_parse.py(153):         if self.width:
sre_parse.py(155):         lo = hi = 0
sre_parse.py(156):         UNITCODES = (ANY, RANGE, IN, LITERAL, NOT_LITERAL, CATEGORY)
sre_parse.py(157):         REPEATCODES = (MIN_REPEAT, MAX_REPEAT)
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(159):             if op is BRANCH:
sre_parse.py(168):             elif op is CALL:
sre_parse.py(172):             elif op is SUBPATTERN:
sre_parse.py(176):             elif op in REPEATCODES:
sre_parse.py(180):             elif op in UNITCODES:
sre_parse.py(181):                 lo = lo + 1
sre_parse.py(182):                 hi = hi + 1
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(185):         self.width = min(lo, MAXREPEAT - 1), min(hi, MAXREPEAT)
sre_parse.py(186):         return self.width
sre_parse.py(178):                 lo = lo + i * av[0]
sre_parse.py(179):                 hi = hi + j * av[1]
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(185):         self.width = min(lo, MAXREPEAT - 1), min(hi, MAXREPEAT)
sre_parse.py(186):         return self.width
sre_parse.py(174):                 lo = lo + i
sre_parse.py(175):                 hi = hi + j
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(185):         self.width = min(lo, MAXREPEAT - 1), min(hi, MAXREPEAT)
sre_parse.py(186):         return self.width
sre_parse.py(178):                 lo = lo + i * av[0]
sre_parse.py(179):                 hi = hi + j * av[1]
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(159):             if op is BRANCH:
sre_parse.py(168):             elif op is CALL:
sre_parse.py(172):             elif op is SUBPATTERN:
sre_parse.py(176):             elif op in REPEATCODES:
sre_parse.py(177):                 i, j = av[2].getwidth()
 --- modulename: sre_parse, funcname: getwidth
sre_parse.py(153):         if self.width:
sre_parse.py(155):         lo = hi = 0
sre_parse.py(156):         UNITCODES = (ANY, RANGE, IN, LITERAL, NOT_LITERAL, CATEGORY)
sre_parse.py(157):         REPEATCODES = (MIN_REPEAT, MAX_REPEAT)
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(159):             if op is BRANCH:
sre_parse.py(168):             elif op is CALL:
sre_parse.py(172):             elif op is SUBPATTERN:
sre_parse.py(173):                 i, j = av[1].getwidth()
 --- modulename: sre_parse, funcname: getwidth
sre_parse.py(153):         if self.width:
sre_parse.py(155):         lo = hi = 0
sre_parse.py(156):         UNITCODES = (ANY, RANGE, IN, LITERAL, NOT_LITERAL, CATEGORY)
sre_parse.py(157):         REPEATCODES = (MIN_REPEAT, MAX_REPEAT)
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(159):             if op is BRANCH:
sre_parse.py(168):             elif op is CALL:
sre_parse.py(172):             elif op is SUBPATTERN:
sre_parse.py(176):             elif op in REPEATCODES:
sre_parse.py(180):             elif op in UNITCODES:
sre_parse.py(181):                 lo = lo + 1
sre_parse.py(182):                 hi = hi + 1
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(159):             if op is BRANCH:
sre_parse.py(168):             elif op is CALL:
sre_parse.py(172):             elif op is SUBPATTERN:
sre_parse.py(176):             elif op in REPEATCODES:
sre_parse.py(177):                 i, j = av[2].getwidth()
 --- modulename: sre_parse, funcname: getwidth
sre_parse.py(153):         if self.width:
sre_parse.py(155):         lo = hi = 0
sre_parse.py(156):         UNITCODES = (ANY, RANGE, IN, LITERAL, NOT_LITERAL, CATEGORY)
sre_parse.py(157):         REPEATCODES = (MIN_REPEAT, MAX_REPEAT)
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(159):             if op is BRANCH:
sre_parse.py(168):             elif op is CALL:
sre_parse.py(172):             elif op is SUBPATTERN:
sre_parse.py(176):             elif op in REPEATCODES:
sre_parse.py(180):             elif op in UNITCODES:
sre_parse.py(181):                 lo = lo + 1
sre_parse.py(182):                 hi = hi + 1
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(185):         self.width = min(lo, MAXREPEAT - 1), min(hi, MAXREPEAT)
sre_parse.py(186):         return self.width
sre_parse.py(178):                 lo = lo + i * av[0]
sre_parse.py(179):                 hi = hi + j * av[1]
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(159):             if op is BRANCH:
sre_parse.py(168):             elif op is CALL:
sre_parse.py(172):             elif op is SUBPATTERN:
sre_parse.py(176):             elif op in REPEATCODES:
sre_parse.py(177):                 i, j = av[2].getwidth()
 --- modulename: sre_parse, funcname: getwidth
sre_parse.py(153):         if self.width:
sre_parse.py(155):         lo = hi = 0
sre_parse.py(156):         UNITCODES = (ANY, RANGE, IN, LITERAL, NOT_LITERAL, CATEGORY)
sre_parse.py(157):         REPEATCODES = (MIN_REPEAT, MAX_REPEAT)
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(159):             if op is BRANCH:
sre_parse.py(168):             elif op is CALL:
sre_parse.py(172):             elif op is SUBPATTERN:
sre_parse.py(176):             elif op in REPEATCODES:
sre_parse.py(180):             elif op in UNITCODES:
sre_parse.py(181):                 lo = lo + 1
sre_parse.py(182):                 hi = hi + 1
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(185):         self.width = min(lo, MAXREPEAT - 1), min(hi, MAXREPEAT)
sre_parse.py(186):         return self.width
sre_parse.py(178):                 lo = lo + i * av[0]
sre_parse.py(179):                 hi = hi + j * av[1]
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(185):         self.width = min(lo, MAXREPEAT - 1), min(hi, MAXREPEAT)
sre_parse.py(186):         return self.width
sre_parse.py(174):                 lo = lo + i
sre_parse.py(175):                 hi = hi + j
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(185):         self.width = min(lo, MAXREPEAT - 1), min(hi, MAXREPEAT)
sre_parse.py(186):         return self.width
sre_parse.py(178):                 lo = lo + i * av[0]
sre_parse.py(179):                 hi = hi + j * av[1]
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(185):         self.width = min(lo, MAXREPEAT - 1), min(hi, MAXREPEAT)
sre_parse.py(186):         return self.width
sre_compile.py(438):     if lo == 0:
sre_compile.py(441):     prefix = []
sre_compile.py(442):     prefixappend = prefix.append
sre_compile.py(443):     prefix_skip = 0
sre_compile.py(444):     charset = [] # not used
sre_compile.py(445):     charsetappend = charset.append
sre_compile.py(446):     if not (flags & SRE_FLAG_IGNORECASE):
sre_compile.py(448):         for op, av in pattern.data:
sre_compile.py(449):             if op is LITERAL:
sre_compile.py(453):             elif op is SUBPATTERN and len(av[1]) == 1:
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(138):         return len(self.data)
sre_compile.py(460):                 break
sre_compile.py(462):         if not prefix and pattern.data:
sre_compile.py(463):             op, av = pattern.data[0]
sre_compile.py(464):             if op is SUBPATTERN and av[1]:
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(138):         return len(self.data)
sre_compile.py(465):                 op, av = av[1][0]
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(466):                 if op is LITERAL:
sre_compile.py(468):                 elif op is BRANCH:
sre_compile.py(501):     emit = code.append
sre_compile.py(502):     emit(OPCODES[INFO])
sre_compile.py(503):     skip = len(code); emit(0)
sre_compile.py(505):     mask = 0
sre_compile.py(506):     if prefix:
sre_compile.py(510):     elif charset:
sre_compile.py(512):     emit(mask)
sre_compile.py(514):     if lo < MAXCODE:
sre_compile.py(515):         emit(lo)
sre_compile.py(519):     if hi < MAXCODE:
sre_compile.py(520):         emit(hi)
sre_compile.py(524):     if prefix:
sre_compile.py(535):     elif charset:
sre_compile.py(537):     code[skip] = len(code) - skip
sre_compile.py(561):     _compile(code, p.data, flags)
 --- modulename: sre_compile, funcname: _compile
sre_compile.py(66):     emit = code.append
sre_compile.py(67):     _len = len
sre_compile.py(68):     LITERAL_CODES = _LITERAL_CODES
sre_compile.py(69):     REPEATING_CODES = _REPEATING_CODES
sre_compile.py(70):     SUCCESS_CODES = _SUCCESS_CODES
sre_compile.py(71):     ASSERT_CODES = _ASSERT_CODES
sre_compile.py(72):     if (flags & SRE_FLAG_IGNORECASE and
sre_compile.py(77):         fixes = None
sre_compile.py(78):     for op, av in pattern:
sre_compile.py(79):         if op in LITERAL_CODES:
sre_compile.py(98):         elif op is IN:
sre_compile.py(109):         elif op is ANY:
sre_compile.py(114):         elif op in REPEATING_CODES:
sre_compile.py(146):         elif op is SUBPATTERN:
sre_compile.py(147):             if av[0]:
sre_compile.py(148):                 emit(OPCODES[MARK])
sre_compile.py(149):                 emit((av[0]-1)*2)
sre_compile.py(151):             _compile(code, av[1], flags)
 --- modulename: sre_compile, funcname: _compile
sre_compile.py(66):     emit = code.append
sre_compile.py(67):     _len = len
sre_compile.py(68):     LITERAL_CODES = _LITERAL_CODES
sre_compile.py(69):     REPEATING_CODES = _REPEATING_CODES
sre_compile.py(70):     SUCCESS_CODES = _SUCCESS_CODES
sre_compile.py(71):     ASSERT_CODES = _ASSERT_CODES
sre_compile.py(72):     if (flags & SRE_FLAG_IGNORECASE and
sre_compile.py(77):         fixes = None
sre_compile.py(78):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(79):         if op in LITERAL_CODES:
sre_compile.py(98):         elif op is IN:
sre_compile.py(109):         elif op is ANY:
sre_compile.py(114):         elif op in REPEATING_CODES:
sre_compile.py(115):             if flags & SRE_FLAG_TEMPLATE:
sre_compile.py(124):             elif _simple(av) and op is not REPEAT:
 --- modulename: sre_compile, funcname: _simple
sre_compile.py(430):     lo, hi = av[2].getwidth()
 --- modulename: sre_parse, funcname: getwidth
sre_parse.py(153):         if self.width:
sre_parse.py(154):             return self.width
sre_compile.py(431):     return lo == hi == 1 and av[2][0][0] != SUBPATTERN
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(125):                 if op is MAX_REPEAT:
sre_compile.py(126):                     emit(OPCODES[REPEAT_ONE])
sre_compile.py(129):                 skip = _len(code); emit(0)
sre_compile.py(130):                 emit(av[0])
sre_compile.py(131):                 emit(av[1])
sre_compile.py(132):                 _compile(code, av[2], flags)
 --- modulename: sre_compile, funcname: _compile
sre_compile.py(66):     emit = code.append
sre_compile.py(67):     _len = len
sre_compile.py(68):     LITERAL_CODES = _LITERAL_CODES
sre_compile.py(69):     REPEATING_CODES = _REPEATING_CODES
sre_compile.py(70):     SUCCESS_CODES = _SUCCESS_CODES
sre_compile.py(71):     ASSERT_CODES = _ASSERT_CODES
sre_compile.py(72):     if (flags & SRE_FLAG_IGNORECASE and
sre_compile.py(77):         fixes = None
sre_compile.py(78):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(79):         if op in LITERAL_CODES:
sre_compile.py(80):             if flags & SRE_FLAG_IGNORECASE:
sre_compile.py(96):                 emit(OPCODES[op])
sre_compile.py(97):                 emit(av)
sre_compile.py(78):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(133):                 emit(OPCODES[SUCCESS])
sre_compile.py(134):                 code[skip] = _len(code) - skip
sre_compile.py(78):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(79):         if op in LITERAL_CODES:
sre_compile.py(98):         elif op is IN:
sre_compile.py(109):         elif op is ANY:
sre_compile.py(114):         elif op in REPEATING_CODES:
sre_compile.py(146):         elif op is SUBPATTERN:
sre_compile.py(147):             if av[0]:
sre_compile.py(151):             _compile(code, av[1], flags)
 --- modulename: sre_compile, funcname: _compile
sre_compile.py(66):     emit = code.append
sre_compile.py(67):     _len = len
sre_compile.py(68):     LITERAL_CODES = _LITERAL_CODES
sre_compile.py(69):     REPEATING_CODES = _REPEATING_CODES
sre_compile.py(70):     SUCCESS_CODES = _SUCCESS_CODES
sre_compile.py(71):     ASSERT_CODES = _ASSERT_CODES
sre_compile.py(72):     if (flags & SRE_FLAG_IGNORECASE and
sre_compile.py(77):         fixes = None
sre_compile.py(78):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(79):         if op in LITERAL_CODES:
sre_compile.py(98):         elif op is IN:
sre_compile.py(109):         elif op is ANY:
sre_compile.py(114):         elif op in REPEATING_CODES:
sre_compile.py(146):         elif op is SUBPATTERN:
sre_compile.py(155):         elif op in SUCCESS_CODES:
sre_compile.py(157):         elif op in ASSERT_CODES:
sre_compile.py(170):         elif op is CALL:
sre_compile.py(176):         elif op is AT:
sre_compile.py(185):         elif op is BRANCH:
sre_compile.py(186):             emit(OPCODES[op])
sre_compile.py(187):             tail = []
sre_compile.py(188):             tailappend = tail.append
sre_compile.py(189):             for av in av[1]:
sre_compile.py(190):                 skip = _len(code); emit(0)
sre_compile.py(192):                 _compile(code, av, flags)
 --- modulename: sre_compile, funcname: _compile
sre_compile.py(66):     emit = code.append
sre_compile.py(67):     _len = len
sre_compile.py(68):     LITERAL_CODES = _LITERAL_CODES
sre_compile.py(69):     REPEATING_CODES = _REPEATING_CODES
sre_compile.py(70):     SUCCESS_CODES = _SUCCESS_CODES
sre_compile.py(71):     ASSERT_CODES = _ASSERT_CODES
sre_compile.py(72):     if (flags & SRE_FLAG_IGNORECASE and
sre_compile.py(77):         fixes = None
sre_compile.py(78):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(79):         if op in LITERAL_CODES:
sre_compile.py(80):             if flags & SRE_FLAG_IGNORECASE:
sre_compile.py(96):                 emit(OPCODES[op])
sre_compile.py(97):                 emit(av)
sre_compile.py(78):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(193):                 emit(OPCODES[JUMP])
sre_compile.py(194):                 tailappend(_len(code)); emit(0)
sre_compile.py(195):                 code[skip] = _len(code) - skip
sre_compile.py(189):             for av in av[1]:
sre_compile.py(190):                 skip = _len(code); emit(0)
sre_compile.py(192):                 _compile(code, av, flags)
 --- modulename: sre_compile, funcname: _compile
sre_compile.py(66):     emit = code.append
sre_compile.py(67):     _len = len
sre_compile.py(68):     LITERAL_CODES = _LITERAL_CODES
sre_compile.py(69):     REPEATING_CODES = _REPEATING_CODES
sre_compile.py(70):     SUCCESS_CODES = _SUCCESS_CODES
sre_compile.py(71):     ASSERT_CODES = _ASSERT_CODES
sre_compile.py(72):     if (flags & SRE_FLAG_IGNORECASE and
sre_compile.py(77):         fixes = None
sre_compile.py(78):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(79):         if op in LITERAL_CODES:
sre_compile.py(98):         elif op is IN:
sre_compile.py(99):             if flags & SRE_FLAG_IGNORECASE:
sre_compile.py(104):                 emit(OPCODES[op])
sre_compile.py(105):                 fixup = None
sre_compile.py(106):             skip = _len(code); emit(0)
sre_compile.py(107):             _compile_charset(av, flags, code, fixup, fixes)
 --- modulename: sre_compile, funcname: _compile_charset
sre_compile.py(230):     emit = code.append
sre_compile.py(231):     for op, av in _optimize_charset(charset, fixup, fixes,
sre_compile.py(232):                                     flags & SRE_FLAG_UNICODE):
 --- modulename: sre_compile, funcname: _optimize_charset
sre_compile.py(258):     out = []
sre_compile.py(259):     tail = []
sre_compile.py(260):     charmap = bytearray(256)
sre_compile.py(261):     for op, av in charset:
sre_compile.py(262):         while True:
sre_compile.py(263):             try:
sre_compile.py(264):                 if op is LITERAL:
sre_compile.py(273):                 elif op is RANGE:
sre_compile.py(274):                     r = range(av[0], av[1]+1)
sre_compile.py(275):                     if fixup:
sre_compile.py(277):                     if fixup and fixes:
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(310):             break
sre_compile.py(261):     for op, av in charset:
sre_compile.py(313):     runs = []
sre_compile.py(314):     q = 0
sre_compile.py(315):     while True:
sre_compile.py(316):         p = charmap.find(b'\1', q)
sre_compile.py(317):         if p < 0:
sre_compile.py(319):         if len(runs) >= 2:
sre_compile.py(322):         q = charmap.find(b'\0', p)
sre_compile.py(323):         if q < 0:
sre_compile.py(326):         runs.append((p, q))
sre_compile.py(315):     while True:
sre_compile.py(316):         p = charmap.find(b'\1', q)
sre_compile.py(317):         if p < 0:
sre_compile.py(318):             break
sre_compile.py(327):     if runs is not None:
sre_compile.py(329):         for p, q in runs:
sre_compile.py(330):             if q - p == 1:
sre_compile.py(333):                 out.append((RANGE, (p, q - 1)))
sre_compile.py(329):         for p, q in runs:
sre_compile.py(334):         out += tail
sre_compile.py(336):         if fixup or len(out) < len(charset):
sre_compile.py(339):         return charset
sre_compile.py(233):         emit(OPCODES[op])
sre_compile.py(234):         if op is NEGATE:
sre_compile.py(236):         elif op is LITERAL:
sre_compile.py(238):         elif op is RANGE:
sre_compile.py(239):             emit(av[0])
sre_compile.py(240):             emit(av[1])
sre_compile.py(232):                                     flags & SRE_FLAG_UNICODE):
sre_compile.py(254):     emit(OPCODES[FAILURE])
sre_compile.py(108):             code[skip] = _len(code) - skip
sre_compile.py(78):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(79):         if op in LITERAL_CODES:
sre_compile.py(98):         elif op is IN:
sre_compile.py(109):         elif op is ANY:
sre_compile.py(114):         elif op in REPEATING_CODES:
sre_compile.py(115):             if flags & SRE_FLAG_TEMPLATE:
sre_compile.py(124):             elif _simple(av) and op is not REPEAT:
 --- modulename: sre_compile, funcname: _simple
sre_compile.py(430):     lo, hi = av[2].getwidth()
 --- modulename: sre_parse, funcname: getwidth
sre_parse.py(153):         if self.width:
sre_parse.py(154):             return self.width
sre_compile.py(431):     return lo == hi == 1 and av[2][0][0] != SUBPATTERN
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(125):                 if op is MAX_REPEAT:
sre_compile.py(126):                     emit(OPCODES[REPEAT_ONE])
sre_compile.py(129):                 skip = _len(code); emit(0)
sre_compile.py(130):                 emit(av[0])
sre_compile.py(131):                 emit(av[1])
sre_compile.py(132):                 _compile(code, av[2], flags)
 --- modulename: sre_compile, funcname: _compile
sre_compile.py(66):     emit = code.append
sre_compile.py(67):     _len = len
sre_compile.py(68):     LITERAL_CODES = _LITERAL_CODES
sre_compile.py(69):     REPEATING_CODES = _REPEATING_CODES
sre_compile.py(70):     SUCCESS_CODES = _SUCCESS_CODES
sre_compile.py(71):     ASSERT_CODES = _ASSERT_CODES
sre_compile.py(72):     if (flags & SRE_FLAG_IGNORECASE and
sre_compile.py(77):         fixes = None
sre_compile.py(78):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(79):         if op in LITERAL_CODES:
sre_compile.py(98):         elif op is IN:
sre_compile.py(99):             if flags & SRE_FLAG_IGNORECASE:
sre_compile.py(104):                 emit(OPCODES[op])
sre_compile.py(105):                 fixup = None
sre_compile.py(106):             skip = _len(code); emit(0)
sre_compile.py(107):             _compile_charset(av, flags, code, fixup, fixes)
 --- modulename: sre_compile, funcname: _compile_charset
sre_compile.py(230):     emit = code.append
sre_compile.py(231):     for op, av in _optimize_charset(charset, fixup, fixes,
sre_compile.py(232):                                     flags & SRE_FLAG_UNICODE):
 --- modulename: sre_compile, funcname: _optimize_charset
sre_compile.py(258):     out = []
sre_compile.py(259):     tail = []
sre_compile.py(260):     charmap = bytearray(256)
sre_compile.py(261):     for op, av in charset:
sre_compile.py(262):         while True:
sre_compile.py(263):             try:
sre_compile.py(264):                 if op is LITERAL:
sre_compile.py(273):                 elif op is RANGE:
sre_compile.py(286):                 elif op is NEGATE:
sre_compile.py(289):                     tail.append((op, av))
sre_compile.py(310):             break
sre_compile.py(261):     for op, av in charset:
sre_compile.py(313):     runs = []
sre_compile.py(314):     q = 0
sre_compile.py(315):     while True:
sre_compile.py(316):         p = charmap.find(b'\1', q)
sre_compile.py(317):         if p < 0:
sre_compile.py(318):             break
sre_compile.py(327):     if runs is not None:
sre_compile.py(329):         for p, q in runs:
sre_compile.py(334):         out += tail
sre_compile.py(336):         if fixup or len(out) < len(charset):
sre_compile.py(339):         return charset
sre_compile.py(233):         emit(OPCODES[op])
sre_compile.py(234):         if op is NEGATE:
sre_compile.py(236):         elif op is LITERAL:
sre_compile.py(238):         elif op is RANGE:
sre_compile.py(241):         elif op is CHARSET:
sre_compile.py(243):         elif op is BIGCHARSET:
sre_compile.py(245):         elif op is CATEGORY:
sre_compile.py(246):             if flags & SRE_FLAG_LOCALE:
sre_compile.py(248):             elif flags & SRE_FLAG_UNICODE:
sre_compile.py(251):                 emit(CHCODES[av])
sre_compile.py(232):                                     flags & SRE_FLAG_UNICODE):
sre_compile.py(254):     emit(OPCODES[FAILURE])
sre_compile.py(108):             code[skip] = _len(code) - skip
sre_compile.py(78):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(133):                 emit(OPCODES[SUCCESS])
sre_compile.py(134):                 code[skip] = _len(code) - skip
sre_compile.py(78):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(193):                 emit(OPCODES[JUMP])
sre_compile.py(194):                 tailappend(_len(code)); emit(0)
sre_compile.py(195):                 code[skip] = _len(code) - skip
sre_compile.py(189):             for av in av[1]:
sre_compile.py(196):             emit(0) # end of branch
sre_compile.py(197):             for tail in tail:
sre_compile.py(198):                 code[tail] = _len(code) - tail
sre_compile.py(197):             for tail in tail:
sre_compile.py(198):                 code[tail] = _len(code) - tail
sre_compile.py(197):             for tail in tail:
sre_compile.py(78):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(152):             if av[0]:
sre_compile.py(78):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(152):             if av[0]:
sre_compile.py(153):                 emit(OPCODES[MARK])
sre_compile.py(154):                 emit((av[0]-1)*2+1)
sre_compile.py(78):     for op, av in pattern:
sre_compile.py(79):         if op in LITERAL_CODES:
sre_compile.py(98):         elif op is IN:
sre_compile.py(109):         elif op is ANY:
sre_compile.py(114):         elif op in REPEATING_CODES:
sre_compile.py(115):             if flags & SRE_FLAG_TEMPLATE:
sre_compile.py(124):             elif _simple(av) and op is not REPEAT:
 --- modulename: sre_compile, funcname: _simple
sre_compile.py(430):     lo, hi = av[2].getwidth()
 --- modulename: sre_parse, funcname: getwidth
sre_parse.py(153):         if self.width:
sre_parse.py(154):             return self.width
sre_compile.py(431):     return lo == hi == 1 and av[2][0][0] != SUBPATTERN
sre_compile.py(136):                 emit(OPCODES[REPEAT])
sre_compile.py(137):                 skip = _len(code); emit(0)
sre_compile.py(138):                 emit(av[0])
sre_compile.py(139):                 emit(av[1])
sre_compile.py(140):                 _compile(code, av[2], flags)
 --- modulename: sre_compile, funcname: _compile
sre_compile.py(66):     emit = code.append
sre_compile.py(67):     _len = len
sre_compile.py(68):     LITERAL_CODES = _LITERAL_CODES
sre_compile.py(69):     REPEATING_CODES = _REPEATING_CODES
sre_compile.py(70):     SUCCESS_CODES = _SUCCESS_CODES
sre_compile.py(71):     ASSERT_CODES = _ASSERT_CODES
sre_compile.py(72):     if (flags & SRE_FLAG_IGNORECASE and
sre_compile.py(77):         fixes = None
sre_compile.py(78):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(79):         if op in LITERAL_CODES:
sre_compile.py(98):         elif op is IN:
sre_compile.py(109):         elif op is ANY:
sre_compile.py(114):         elif op in REPEATING_CODES:
sre_compile.py(146):         elif op is SUBPATTERN:
sre_compile.py(147):             if av[0]:
sre_compile.py(148):                 emit(OPCODES[MARK])
sre_compile.py(149):                 emit((av[0]-1)*2)
sre_compile.py(151):             _compile(code, av[1], flags)
 --- modulename: sre_compile, funcname: _compile
sre_compile.py(66):     emit = code.append
sre_compile.py(67):     _len = len
sre_compile.py(68):     LITERAL_CODES = _LITERAL_CODES
sre_compile.py(69):     REPEATING_CODES = _REPEATING_CODES
sre_compile.py(70):     SUCCESS_CODES = _SUCCESS_CODES
sre_compile.py(71):     ASSERT_CODES = _ASSERT_CODES
sre_compile.py(72):     if (flags & SRE_FLAG_IGNORECASE and
sre_compile.py(77):         fixes = None
sre_compile.py(78):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(79):         if op in LITERAL_CODES:
sre_compile.py(80):             if flags & SRE_FLAG_IGNORECASE:
sre_compile.py(96):                 emit(OPCODES[op])
sre_compile.py(97):                 emit(av)
sre_compile.py(78):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(79):         if op in LITERAL_CODES:
sre_compile.py(98):         elif op is IN:
sre_compile.py(109):         elif op is ANY:
sre_compile.py(114):         elif op in REPEATING_CODES:
sre_compile.py(115):             if flags & SRE_FLAG_TEMPLATE:
sre_compile.py(124):             elif _simple(av) and op is not REPEAT:
 --- modulename: sre_compile, funcname: _simple
sre_compile.py(430):     lo, hi = av[2].getwidth()
 --- modulename: sre_parse, funcname: getwidth
sre_parse.py(153):         if self.width:
sre_parse.py(154):             return self.width
sre_compile.py(431):     return lo == hi == 1 and av[2][0][0] != SUBPATTERN
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(125):                 if op is MAX_REPEAT:
sre_compile.py(126):                     emit(OPCODES[REPEAT_ONE])
sre_compile.py(129):                 skip = _len(code); emit(0)
sre_compile.py(130):                 emit(av[0])
sre_compile.py(131):                 emit(av[1])
sre_compile.py(132):                 _compile(code, av[2], flags)
 --- modulename: sre_compile, funcname: _compile
sre_compile.py(66):     emit = code.append
sre_compile.py(67):     _len = len
sre_compile.py(68):     LITERAL_CODES = _LITERAL_CODES
sre_compile.py(69):     REPEATING_CODES = _REPEATING_CODES
sre_compile.py(70):     SUCCESS_CODES = _SUCCESS_CODES
sre_compile.py(71):     ASSERT_CODES = _ASSERT_CODES
sre_compile.py(72):     if (flags & SRE_FLAG_IGNORECASE and
sre_compile.py(77):         fixes = None
sre_compile.py(78):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(79):         if op in LITERAL_CODES:
sre_compile.py(98):         elif op is IN:
sre_compile.py(99):             if flags & SRE_FLAG_IGNORECASE:
sre_compile.py(104):                 emit(OPCODES[op])
sre_compile.py(105):                 fixup = None
sre_compile.py(106):             skip = _len(code); emit(0)
sre_compile.py(107):             _compile_charset(av, flags, code, fixup, fixes)
 --- modulename: sre_compile, funcname: _compile_charset
sre_compile.py(230):     emit = code.append
sre_compile.py(231):     for op, av in _optimize_charset(charset, fixup, fixes,
sre_compile.py(232):                                     flags & SRE_FLAG_UNICODE):
 --- modulename: sre_compile, funcname: _optimize_charset
sre_compile.py(258):     out = []
sre_compile.py(259):     tail = []
sre_compile.py(260):     charmap = bytearray(256)
sre_compile.py(261):     for op, av in charset:
sre_compile.py(262):         while True:
sre_compile.py(263):             try:
sre_compile.py(264):                 if op is LITERAL:
sre_compile.py(273):                 elif op is RANGE:
sre_compile.py(286):                 elif op is NEGATE:
sre_compile.py(289):                     tail.append((op, av))
sre_compile.py(310):             break
sre_compile.py(261):     for op, av in charset:
sre_compile.py(313):     runs = []
sre_compile.py(314):     q = 0
sre_compile.py(315):     while True:
sre_compile.py(316):         p = charmap.find(b'\1', q)
sre_compile.py(317):         if p < 0:
sre_compile.py(318):             break
sre_compile.py(327):     if runs is not None:
sre_compile.py(329):         for p, q in runs:
sre_compile.py(334):         out += tail
sre_compile.py(336):         if fixup or len(out) < len(charset):
sre_compile.py(339):         return charset
sre_compile.py(233):         emit(OPCODES[op])
sre_compile.py(234):         if op is NEGATE:
sre_compile.py(236):         elif op is LITERAL:
sre_compile.py(238):         elif op is RANGE:
sre_compile.py(241):         elif op is CHARSET:
sre_compile.py(243):         elif op is BIGCHARSET:
sre_compile.py(245):         elif op is CATEGORY:
sre_compile.py(246):             if flags & SRE_FLAG_LOCALE:
sre_compile.py(248):             elif flags & SRE_FLAG_UNICODE:
sre_compile.py(251):                 emit(CHCODES[av])
sre_compile.py(232):                                     flags & SRE_FLAG_UNICODE):
sre_compile.py(254):     emit(OPCODES[FAILURE])
sre_compile.py(108):             code[skip] = _len(code) - skip
sre_compile.py(78):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(133):                 emit(OPCODES[SUCCESS])
sre_compile.py(134):                 code[skip] = _len(code) - skip
sre_compile.py(78):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(152):             if av[0]:
sre_compile.py(153):                 emit(OPCODES[MARK])
sre_compile.py(154):                 emit((av[0]-1)*2+1)
sre_compile.py(78):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(141):                 code[skip] = _len(code) - skip
sre_compile.py(142):                 if op is MAX_REPEAT:
sre_compile.py(143):                     emit(OPCODES[MAX_UNTIL])
sre_compile.py(78):     for op, av in pattern:
sre_compile.py(79):         if op in LITERAL_CODES:
sre_compile.py(98):         elif op is IN:
sre_compile.py(109):         elif op is ANY:
sre_compile.py(114):         elif op in REPEATING_CODES:
sre_compile.py(115):             if flags & SRE_FLAG_TEMPLATE:
sre_compile.py(124):             elif _simple(av) and op is not REPEAT:
 --- modulename: sre_compile, funcname: _simple
sre_compile.py(430):     lo, hi = av[2].getwidth()
 --- modulename: sre_parse, funcname: getwidth
sre_parse.py(153):         if self.width:
sre_parse.py(154):             return self.width
sre_compile.py(431):     return lo == hi == 1 and av[2][0][0] != SUBPATTERN
sre_compile.py(136):                 emit(OPCODES[REPEAT])
sre_compile.py(137):                 skip = _len(code); emit(0)
sre_compile.py(138):                 emit(av[0])
sre_compile.py(139):                 emit(av[1])
sre_compile.py(140):                 _compile(code, av[2], flags)
 --- modulename: sre_compile, funcname: _compile
sre_compile.py(66):     emit = code.append
sre_compile.py(67):     _len = len
sre_compile.py(68):     LITERAL_CODES = _LITERAL_CODES
sre_compile.py(69):     REPEATING_CODES = _REPEATING_CODES
sre_compile.py(70):     SUCCESS_CODES = _SUCCESS_CODES
sre_compile.py(71):     ASSERT_CODES = _ASSERT_CODES
sre_compile.py(72):     if (flags & SRE_FLAG_IGNORECASE and
sre_compile.py(77):         fixes = None
sre_compile.py(78):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(79):         if op in LITERAL_CODES:
sre_compile.py(98):         elif op is IN:
sre_compile.py(109):         elif op is ANY:
sre_compile.py(114):         elif op in REPEATING_CODES:
sre_compile.py(146):         elif op is SUBPATTERN:
sre_compile.py(147):             if av[0]:
sre_compile.py(148):                 emit(OPCODES[MARK])
sre_compile.py(149):                 emit((av[0]-1)*2)
sre_compile.py(151):             _compile(code, av[1], flags)
 --- modulename: sre_compile, funcname: _compile
sre_compile.py(66):     emit = code.append
sre_compile.py(67):     _len = len
sre_compile.py(68):     LITERAL_CODES = _LITERAL_CODES
sre_compile.py(69):     REPEATING_CODES = _REPEATING_CODES
sre_compile.py(70):     SUCCESS_CODES = _SUCCESS_CODES
sre_compile.py(71):     ASSERT_CODES = _ASSERT_CODES
sre_compile.py(72):     if (flags & SRE_FLAG_IGNORECASE and
sre_compile.py(77):         fixes = None
sre_compile.py(78):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(79):         if op in LITERAL_CODES:
sre_compile.py(98):         elif op is IN:
sre_compile.py(99):             if flags & SRE_FLAG_IGNORECASE:
sre_compile.py(104):                 emit(OPCODES[op])
sre_compile.py(105):                 fixup = None
sre_compile.py(106):             skip = _len(code); emit(0)
sre_compile.py(107):             _compile_charset(av, flags, code, fixup, fixes)
 --- modulename: sre_compile, funcname: _compile_charset
sre_compile.py(230):     emit = code.append
sre_compile.py(231):     for op, av in _optimize_charset(charset, fixup, fixes,
sre_compile.py(232):                                     flags & SRE_FLAG_UNICODE):
 --- modulename: sre_compile, funcname: _optimize_charset
sre_compile.py(258):     out = []
sre_compile.py(259):     tail = []
sre_compile.py(260):     charmap = bytearray(256)
sre_compile.py(261):     for op, av in charset:
sre_compile.py(262):         while True:
sre_compile.py(263):             try:
sre_compile.py(264):                 if op is LITERAL:
sre_compile.py(265):                     if fixup:
sre_compile.py(272):                         charmap[av] = 1
sre_compile.py(310):             break
sre_compile.py(261):     for op, av in charset:
sre_compile.py(262):         while True:
sre_compile.py(263):             try:
sre_compile.py(264):                 if op is LITERAL:
sre_compile.py(265):                     if fixup:
sre_compile.py(272):                         charmap[av] = 1
sre_compile.py(310):             break
sre_compile.py(261):     for op, av in charset:
sre_compile.py(313):     runs = []
sre_compile.py(314):     q = 0
sre_compile.py(315):     while True:
sre_compile.py(316):         p = charmap.find(b'\1', q)
sre_compile.py(317):         if p < 0:
sre_compile.py(319):         if len(runs) >= 2:
sre_compile.py(322):         q = charmap.find(b'\0', p)
sre_compile.py(323):         if q < 0:
sre_compile.py(326):         runs.append((p, q))
sre_compile.py(315):     while True:
sre_compile.py(316):         p = charmap.find(b'\1', q)
sre_compile.py(317):         if p < 0:
sre_compile.py(319):         if len(runs) >= 2:
sre_compile.py(322):         q = charmap.find(b'\0', p)
sre_compile.py(323):         if q < 0:
sre_compile.py(326):         runs.append((p, q))
sre_compile.py(315):     while True:
sre_compile.py(316):         p = charmap.find(b'\1', q)
sre_compile.py(317):         if p < 0:
sre_compile.py(318):             break
sre_compile.py(327):     if runs is not None:
sre_compile.py(329):         for p, q in runs:
sre_compile.py(330):             if q - p == 1:
sre_compile.py(331):                 out.append((LITERAL, p))
sre_compile.py(329):         for p, q in runs:
sre_compile.py(330):             if q - p == 1:
sre_compile.py(331):                 out.append((LITERAL, p))
sre_compile.py(329):         for p, q in runs:
sre_compile.py(334):         out += tail
sre_compile.py(336):         if fixup or len(out) < len(charset):
sre_compile.py(339):         return charset
sre_compile.py(233):         emit(OPCODES[op])
sre_compile.py(234):         if op is NEGATE:
sre_compile.py(236):         elif op is LITERAL:
sre_compile.py(237):             emit(av)
sre_compile.py(232):                                     flags & SRE_FLAG_UNICODE):
sre_compile.py(233):         emit(OPCODES[op])
sre_compile.py(234):         if op is NEGATE:
sre_compile.py(236):         elif op is LITERAL:
sre_compile.py(237):             emit(av)
sre_compile.py(232):                                     flags & SRE_FLAG_UNICODE):
sre_compile.py(254):     emit(OPCODES[FAILURE])
sre_compile.py(108):             code[skip] = _len(code) - skip
sre_compile.py(78):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(79):         if op in LITERAL_CODES:
sre_compile.py(98):         elif op is IN:
sre_compile.py(109):         elif op is ANY:
sre_compile.py(114):         elif op in REPEATING_CODES:
sre_compile.py(115):             if flags & SRE_FLAG_TEMPLATE:
sre_compile.py(124):             elif _simple(av) and op is not REPEAT:
 --- modulename: sre_compile, funcname: _simple
sre_compile.py(430):     lo, hi = av[2].getwidth()
 --- modulename: sre_parse, funcname: getwidth
sre_parse.py(153):         if self.width:
sre_parse.py(154):             return self.width
sre_compile.py(431):     return lo == hi == 1 and av[2][0][0] != SUBPATTERN
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(125):                 if op is MAX_REPEAT:
sre_compile.py(126):                     emit(OPCODES[REPEAT_ONE])
sre_compile.py(129):                 skip = _len(code); emit(0)
sre_compile.py(130):                 emit(av[0])
sre_compile.py(131):                 emit(av[1])
sre_compile.py(132):                 _compile(code, av[2], flags)
 --- modulename: sre_compile, funcname: _compile
sre_compile.py(66):     emit = code.append
sre_compile.py(67):     _len = len
sre_compile.py(68):     LITERAL_CODES = _LITERAL_CODES
sre_compile.py(69):     REPEATING_CODES = _REPEATING_CODES
sre_compile.py(70):     SUCCESS_CODES = _SUCCESS_CODES
sre_compile.py(71):     ASSERT_CODES = _ASSERT_CODES
sre_compile.py(72):     if (flags & SRE_FLAG_IGNORECASE and
sre_compile.py(77):         fixes = None
sre_compile.py(78):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(79):         if op in LITERAL_CODES:
sre_compile.py(98):         elif op is IN:
sre_compile.py(99):             if flags & SRE_FLAG_IGNORECASE:
sre_compile.py(104):                 emit(OPCODES[op])
sre_compile.py(105):                 fixup = None
sre_compile.py(106):             skip = _len(code); emit(0)
sre_compile.py(107):             _compile_charset(av, flags, code, fixup, fixes)
 --- modulename: sre_compile, funcname: _compile_charset
sre_compile.py(230):     emit = code.append
sre_compile.py(231):     for op, av in _optimize_charset(charset, fixup, fixes,
sre_compile.py(232):                                     flags & SRE_FLAG_UNICODE):
 --- modulename: sre_compile, funcname: _optimize_charset
sre_compile.py(258):     out = []
sre_compile.py(259):     tail = []
sre_compile.py(260):     charmap = bytearray(256)
sre_compile.py(261):     for op, av in charset:
sre_compile.py(262):         while True:
sre_compile.py(263):             try:
sre_compile.py(264):                 if op is LITERAL:
sre_compile.py(265):                     if fixup:
sre_compile.py(272):                         charmap[av] = 1
sre_compile.py(310):             break
sre_compile.py(261):     for op, av in charset:
sre_compile.py(262):         while True:
sre_compile.py(263):             try:
sre_compile.py(264):                 if op is LITERAL:
sre_compile.py(265):                     if fixup:
sre_compile.py(272):                         charmap[av] = 1
sre_compile.py(310):             break
sre_compile.py(261):     for op, av in charset:
sre_compile.py(313):     runs = []
sre_compile.py(314):     q = 0
sre_compile.py(315):     while True:
sre_compile.py(316):         p = charmap.find(b'\1', q)
sre_compile.py(317):         if p < 0:
sre_compile.py(319):         if len(runs) >= 2:
sre_compile.py(322):         q = charmap.find(b'\0', p)
sre_compile.py(323):         if q < 0:
sre_compile.py(326):         runs.append((p, q))
sre_compile.py(315):     while True:
sre_compile.py(316):         p = charmap.find(b'\1', q)
sre_compile.py(317):         if p < 0:
sre_compile.py(319):         if len(runs) >= 2:
sre_compile.py(322):         q = charmap.find(b'\0', p)
sre_compile.py(323):         if q < 0:
sre_compile.py(326):         runs.append((p, q))
sre_compile.py(315):     while True:
sre_compile.py(316):         p = charmap.find(b'\1', q)
sre_compile.py(317):         if p < 0:
sre_compile.py(318):             break
sre_compile.py(327):     if runs is not None:
sre_compile.py(329):         for p, q in runs:
sre_compile.py(330):             if q - p == 1:
sre_compile.py(331):                 out.append((LITERAL, p))
sre_compile.py(329):         for p, q in runs:
sre_compile.py(330):             if q - p == 1:
sre_compile.py(331):                 out.append((LITERAL, p))
sre_compile.py(329):         for p, q in runs:
sre_compile.py(334):         out += tail
sre_compile.py(336):         if fixup or len(out) < len(charset):
sre_compile.py(339):         return charset
sre_compile.py(233):         emit(OPCODES[op])
sre_compile.py(234):         if op is NEGATE:
sre_compile.py(236):         elif op is LITERAL:
sre_compile.py(237):             emit(av)
sre_compile.py(232):                                     flags & SRE_FLAG_UNICODE):
sre_compile.py(233):         emit(OPCODES[op])
sre_compile.py(234):         if op is NEGATE:
sre_compile.py(236):         elif op is LITERAL:
sre_compile.py(237):             emit(av)
sre_compile.py(232):                                     flags & SRE_FLAG_UNICODE):
sre_compile.py(254):     emit(OPCODES[FAILURE])
sre_compile.py(108):             code[skip] = _len(code) - skip
sre_compile.py(78):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(133):                 emit(OPCODES[SUCCESS])
sre_compile.py(134):                 code[skip] = _len(code) - skip
sre_compile.py(78):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(79):         if op in LITERAL_CODES:
sre_compile.py(98):         elif op is IN:
sre_compile.py(109):         elif op is ANY:
sre_compile.py(114):         elif op in REPEATING_CODES:
sre_compile.py(115):             if flags & SRE_FLAG_TEMPLATE:
sre_compile.py(124):             elif _simple(av) and op is not REPEAT:
 --- modulename: sre_compile, funcname: _simple
sre_compile.py(430):     lo, hi = av[2].getwidth()
 --- modulename: sre_parse, funcname: getwidth
sre_parse.py(153):         if self.width:
sre_parse.py(154):             return self.width
sre_compile.py(431):     return lo == hi == 1 and av[2][0][0] != SUBPATTERN
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(125):                 if op is MAX_REPEAT:
sre_compile.py(126):                     emit(OPCODES[REPEAT_ONE])
sre_compile.py(129):                 skip = _len(code); emit(0)
sre_compile.py(130):                 emit(av[0])
sre_compile.py(131):                 emit(av[1])
sre_compile.py(132):                 _compile(code, av[2], flags)
 --- modulename: sre_compile, funcname: _compile
sre_compile.py(66):     emit = code.append
sre_compile.py(67):     _len = len
sre_compile.py(68):     LITERAL_CODES = _LITERAL_CODES
sre_compile.py(69):     REPEATING_CODES = _REPEATING_CODES
sre_compile.py(70):     SUCCESS_CODES = _SUCCESS_CODES
sre_compile.py(71):     ASSERT_CODES = _ASSERT_CODES
sre_compile.py(72):     if (flags & SRE_FLAG_IGNORECASE and
sre_compile.py(77):         fixes = None
sre_compile.py(78):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(79):         if op in LITERAL_CODES:
sre_compile.py(98):         elif op is IN:
sre_compile.py(99):             if flags & SRE_FLAG_IGNORECASE:
sre_compile.py(104):                 emit(OPCODES[op])
sre_compile.py(105):                 fixup = None
sre_compile.py(106):             skip = _len(code); emit(0)
sre_compile.py(107):             _compile_charset(av, flags, code, fixup, fixes)
 --- modulename: sre_compile, funcname: _compile_charset
sre_compile.py(230):     emit = code.append
sre_compile.py(231):     for op, av in _optimize_charset(charset, fixup, fixes,
sre_compile.py(232):                                     flags & SRE_FLAG_UNICODE):
 --- modulename: sre_compile, funcname: _optimize_charset
sre_compile.py(258):     out = []
sre_compile.py(259):     tail = []
sre_compile.py(260):     charmap = bytearray(256)
sre_compile.py(261):     for op, av in charset:
sre_compile.py(262):         while True:
sre_compile.py(263):             try:
sre_compile.py(264):                 if op is LITERAL:
sre_compile.py(273):                 elif op is RANGE:
sre_compile.py(286):                 elif op is NEGATE:
sre_compile.py(289):                     tail.append((op, av))
sre_compile.py(310):             break
sre_compile.py(261):     for op, av in charset:
sre_compile.py(313):     runs = []
sre_compile.py(314):     q = 0
sre_compile.py(315):     while True:
sre_compile.py(316):         p = charmap.find(b'\1', q)
sre_compile.py(317):         if p < 0:
sre_compile.py(318):             break
sre_compile.py(327):     if runs is not None:
sre_compile.py(329):         for p, q in runs:
sre_compile.py(334):         out += tail
sre_compile.py(336):         if fixup or len(out) < len(charset):
sre_compile.py(339):         return charset
sre_compile.py(233):         emit(OPCODES[op])
sre_compile.py(234):         if op is NEGATE:
sre_compile.py(236):         elif op is LITERAL:
sre_compile.py(238):         elif op is RANGE:
sre_compile.py(241):         elif op is CHARSET:
sre_compile.py(243):         elif op is BIGCHARSET:
sre_compile.py(245):         elif op is CATEGORY:
sre_compile.py(246):             if flags & SRE_FLAG_LOCALE:
sre_compile.py(248):             elif flags & SRE_FLAG_UNICODE:
sre_compile.py(251):                 emit(CHCODES[av])
sre_compile.py(232):                                     flags & SRE_FLAG_UNICODE):
sre_compile.py(254):     emit(OPCODES[FAILURE])
sre_compile.py(108):             code[skip] = _len(code) - skip
sre_compile.py(78):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(133):                 emit(OPCODES[SUCCESS])
sre_compile.py(134):                 code[skip] = _len(code) - skip
sre_compile.py(78):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(152):             if av[0]:
sre_compile.py(153):                 emit(OPCODES[MARK])
sre_compile.py(154):                 emit((av[0]-1)*2+1)
sre_compile.py(78):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(141):                 code[skip] = _len(code) - skip
sre_compile.py(142):                 if op is MAX_REPEAT:
sre_compile.py(143):                     emit(OPCODES[MAX_UNTIL])
sre_compile.py(78):     for op, av in pattern:
sre_compile.py(563):     code.append(OPCODES[SUCCESS])
sre_compile.py(565):     return code
sre_compile.py(581):     if p.pattern.groups > 100:
sre_compile.py(587):     groupindex = p.pattern.groupdict
sre_compile.py(588):     indexgroup = [None] * p.pattern.groups
sre_compile.py(589):     for k, i in groupindex.items():
sre_compile.py(592):     return _sre.compile(
sre_compile.py(593):         pattern, flags | p.pattern.flags, code,
sre_compile.py(594):         p.pattern.groups-1,
sre_compile.py(595):         groupindex, indexgroup
re.py(252):     if not bypass_cache:
re.py(253):         if len(_cache) >= _MAXCACHE:
re.py(255):         if p.flags & LOCALE:
re.py(260):             loc = None
re.py(261):         _cache[cachekey] = p, loc
re.py(262):     return p
scanner.py(15): def py_make_scanner(context):
scanner.py(67): make_scanner = c_make_scanner or py_make_scanner
decoder.py(8): try:
decoder.py(9):     from _json import scanstring as c_scanstring
decoder.py(13): __all__ = ['JSONDecoder']
decoder.py(15): FLAGS = re.VERBOSE | re.MULTILINE | re.DOTALL
decoder.py(17): def _floatconstants():
decoder.py(22): NaN, PosInf, NegInf = _floatconstants()
 --- modulename: decoder, funcname: _floatconstants
decoder.py(18):     nan, = struct.unpack('>d', b'\x7f\xf8\x00\x00\x00\x00\x00\x00')
decoder.py(19):     inf, = struct.unpack('>d', b'\x7f\xf0\x00\x00\x00\x00\x00\x00')
decoder.py(20):     return nan, inf, -inf
decoder.py(25): def linecol(doc, pos):
decoder.py(34): def errmsg(msg, doc, pos, end=None):
decoder.py(49): _CONSTANTS = {
decoder.py(50):     '-Infinity': NegInf,
decoder.py(51):     'Infinity': PosInf,
decoder.py(52):     'NaN': NaN,
decoder.py(55): STRINGCHUNK = re.compile(r'(.*?)(["\\\x00-\x1f])', FLAGS)
 --- modulename: re, funcname: compile
re.py(194):     return _compile(pattern, flags)
 --- modulename: re, funcname: _compile
re.py(232):     pattern, flags = key
re.py(233):     bypass_cache = flags & DEBUG
re.py(234):     if not bypass_cache:
re.py(235):         cachekey = (type(key[0]),) + key
re.py(236):         try:
re.py(237):             p, loc = _cache[cachekey]
re.py(240):         except KeyError:
re.py(241):             pass
re.py(242):     if isinstance(pattern, _pattern_type):
re.py(246):     if not sre_compile.isstring(pattern):
 --- modulename: sre_compile, funcname: isstring
sre_compile.py(547):     for tp in STRING_TYPES:
sre_compile.py(548):         if isinstance(obj, tp):
sre_compile.py(549):             return 1
re.py(248):     try:
re.py(249):         p = sre_compile.compile(pattern, flags)
 --- modulename: sre_compile, funcname: compile
sre_compile.py(570):     if isstring(p):
 --- modulename: sre_compile, funcname: isstring
sre_compile.py(547):     for tp in STRING_TYPES:
sre_compile.py(548):         if isinstance(obj, tp):
sre_compile.py(549):             return 1
sre_compile.py(571):         pattern = p
sre_compile.py(572):         p = sre_parse.parse(p, flags)
 --- modulename: sre_parse, funcname: parse
sre_parse.py(709):     source = Tokenizer(str)
 --- modulename: sre_parse, funcname: __init__
sre_parse.py(190):         self.string = string
sre_parse.py(191):         self.index = 0
sre_parse.py(192):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(711):     if pattern is None:
sre_parse.py(712):         pattern = Pattern()
 --- modulename: sre_parse, funcname: __init__
sre_parse.py(68):         self.flags = 0
sre_parse.py(69):         self.open = []
sre_parse.py(70):         self.groups = 1
sre_parse.py(71):         self.groupdict = {}
sre_parse.py(72):         self.lookbehind = 0
sre_parse.py(713):     pattern.flags = flags
sre_parse.py(714):     pattern.str = str
sre_parse.py(716):     p = _parse_sub(source, pattern, 0)
 --- modulename: sre_parse, funcname: _parse_sub
sre_parse.py(320):     items = []
sre_parse.py(321):     itemsappend = items.append
sre_parse.py(322):     sourcematch = source.match
sre_parse.py(323):     while 1:
sre_parse.py(324):         itemsappend(_parse(source, state))
 --- modulename: sre_parse, funcname: _parse
sre_parse.py(397):     subpattern = SubPattern(state)
 --- modulename: sre_parse, funcname: __init__
sre_parse.py(93):         self.pattern = pattern
sre_parse.py(94):         if data is None:
sre_parse.py(95):             data = []
sre_parse.py(96):         self.data = data
sre_parse.py(97):         self.width = None
sre_parse.py(400):     subpatternappend = subpattern.append
sre_parse.py(401):     sourceget = source.get
sre_parse.py(402):     sourcematch = source.match
sre_parse.py(403):     _len = len
sre_parse.py(404):     PATTERNENDERS = _PATTERNENDERS
sre_parse.py(405):     ASSERTCHARS = _ASSERTCHARS
sre_parse.py(406):     LOOKBEHINDASSERTCHARS = _LOOKBEHINDASSERTCHARS
sre_parse.py(407):     REPEATCODES = _REPEATCODES
sre_parse.py(409):     while 1:
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(413):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(414):         if this is None:
sre_parse.py(417):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(419):             if this in WHITESPACE:
sre_parse.py(421):             if this == "#":
sre_parse.py(428):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(431):         elif this == "[":
sre_parse.py(488):         elif this and this[0] in REPEAT_CHARS:
sre_parse.py(541):         elif this == ".":
sre_parse.py(544):         elif this == "(":
sre_parse.py(545):             group = 1
sre_parse.py(546):             name = None
sre_parse.py(547):             condgroup = None
sre_parse.py(548):             if sourcematch("?"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(211):         return 0
sre_parse.py(666):             if group:
sre_parse.py(668):                 if group == 2:
sre_parse.py(672):                     group = state.opengroup(name)
 --- modulename: sre_parse, funcname: opengroup
sre_parse.py(75):         gid = self.groups
sre_parse.py(76):         self.groups = gid + 1
sre_parse.py(77):         if name is not None:
sre_parse.py(83):         self.open.append(gid)
sre_parse.py(84):         return gid
sre_parse.py(673):                 if condgroup:
sre_parse.py(676):                     p = _parse_sub(source, state)
 --- modulename: sre_parse, funcname: _parse_sub
sre_parse.py(320):     items = []
sre_parse.py(321):     itemsappend = items.append
sre_parse.py(322):     sourcematch = source.match
sre_parse.py(323):     while 1:
sre_parse.py(324):         itemsappend(_parse(source, state))
 --- modulename: sre_parse, funcname: _parse
sre_parse.py(397):     subpattern = SubPattern(state)
 --- modulename: sre_parse, funcname: __init__
sre_parse.py(93):         self.pattern = pattern
sre_parse.py(94):         if data is None:
sre_parse.py(95):             data = []
sre_parse.py(96):         self.data = data
sre_parse.py(97):         self.width = None
sre_parse.py(400):     subpatternappend = subpattern.append
sre_parse.py(401):     sourceget = source.get
sre_parse.py(402):     sourcematch = source.match
sre_parse.py(403):     _len = len
sre_parse.py(404):     PATTERNENDERS = _PATTERNENDERS
sre_parse.py(405):     ASSERTCHARS = _ASSERTCHARS
sre_parse.py(406):     LOOKBEHINDASSERTCHARS = _LOOKBEHINDASSERTCHARS
sre_parse.py(407):     REPEATCODES = _REPEATCODES
sre_parse.py(409):     while 1:
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(413):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(414):         if this is None:
sre_parse.py(417):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(419):             if this in WHITESPACE:
sre_parse.py(421):             if this == "#":
sre_parse.py(428):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(431):         elif this == "[":
sre_parse.py(488):         elif this and this[0] in REPEAT_CHARS:
sre_parse.py(541):         elif this == ".":
sre_parse.py(542):             subpatternappend((ANY, None))
 --- modulename: sre_parse, funcname: append
sre_parse.py(150):         self.data.append(code)
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(413):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(414):         if this is None:
sre_parse.py(417):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(419):             if this in WHITESPACE:
sre_parse.py(421):             if this == "#":
sre_parse.py(428):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(431):         elif this == "[":
sre_parse.py(488):         elif this and this[0] in REPEAT_CHARS:
sre_parse.py(490):             if this == "?":
sre_parse.py(492):             elif this == "*":
sre_parse.py(493):                 min, max = 0, MAXREPEAT
sre_parse.py(528):             if subpattern:
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(138):         return len(self.data)
sre_parse.py(529):                 item = subpattern[-1:]
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(138):         return len(self.data)
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(143):             return SubPattern(self.pattern, self.data[index])
 --- modulename: sre_parse, funcname: __init__
sre_parse.py(93):         self.pattern = pattern
sre_parse.py(94):         if data is None:
sre_parse.py(96):         self.data = data
sre_parse.py(97):         self.width = None
sre_parse.py(532):             if not item or (_len(item) == 1 and item[0][0] == AT):
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(138):         return len(self.data)
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(138):         return len(self.data)
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_parse.py(534):             if item[0][0] in REPEATCODES:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_parse.py(536):             if sourcematch("?"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(208):             if skip:
sre_parse.py(209):                 self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(210):             return 1
sre_parse.py(537):                 subpattern[-1] = (MIN_REPEAT, (min, max, item))
 --- modulename: sre_parse, funcname: __setitem__
sre_parse.py(146):         self.data[index] = code
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(412):             break # end of subpattern
sre_parse.py(704):     return subpattern
sre_parse.py(325):         if sourcematch("|"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(211):         return 0
sre_parse.py(327):         if not nested:
sre_parse.py(329):         if not source.next or sourcematch(")", 0):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(208):             if skip:
sre_parse.py(210):             return 1
sre_parse.py(330):             break
sre_parse.py(334):     if len(items) == 1:
sre_parse.py(335):         return items[0]
sre_parse.py(677):                 if not sourcematch(")"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(208):             if skip:
sre_parse.py(209):                 self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(210):             return 1
sre_parse.py(679):                 if group is not None:
sre_parse.py(680):                     state.closegroup(group)
 --- modulename: sre_parse, funcname: closegroup
sre_parse.py(86):         self.open.remove(gid)
sre_parse.py(681):                 subpatternappend((SUBPATTERN, (group, p)))
 --- modulename: sre_parse, funcname: append
sre_parse.py(150):         self.data.append(code)
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(413):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(414):         if this is None:
sre_parse.py(417):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(419):             if this in WHITESPACE:
sre_parse.py(421):             if this == "#":
sre_parse.py(428):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(431):         elif this == "[":
sre_parse.py(488):         elif this and this[0] in REPEAT_CHARS:
sre_parse.py(541):         elif this == ".":
sre_parse.py(544):         elif this == "(":
sre_parse.py(545):             group = 1
sre_parse.py(546):             name = None
sre_parse.py(547):             condgroup = None
sre_parse.py(548):             if sourcematch("?"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(211):         return 0
sre_parse.py(666):             if group:
sre_parse.py(668):                 if group == 2:
sre_parse.py(672):                     group = state.opengroup(name)
 --- modulename: sre_parse, funcname: opengroup
sre_parse.py(75):         gid = self.groups
sre_parse.py(76):         self.groups = gid + 1
sre_parse.py(77):         if name is not None:
sre_parse.py(83):         self.open.append(gid)
sre_parse.py(84):         return gid
sre_parse.py(673):                 if condgroup:
sre_parse.py(676):                     p = _parse_sub(source, state)
 --- modulename: sre_parse, funcname: _parse_sub
sre_parse.py(320):     items = []
sre_parse.py(321):     itemsappend = items.append
sre_parse.py(322):     sourcematch = source.match
sre_parse.py(323):     while 1:
sre_parse.py(324):         itemsappend(_parse(source, state))
 --- modulename: sre_parse, funcname: _parse
sre_parse.py(397):     subpattern = SubPattern(state)
 --- modulename: sre_parse, funcname: __init__
sre_parse.py(93):         self.pattern = pattern
sre_parse.py(94):         if data is None:
sre_parse.py(95):             data = []
sre_parse.py(96):         self.data = data
sre_parse.py(97):         self.width = None
sre_parse.py(400):     subpatternappend = subpattern.append
sre_parse.py(401):     sourceget = source.get
sre_parse.py(402):     sourcematch = source.match
sre_parse.py(403):     _len = len
sre_parse.py(404):     PATTERNENDERS = _PATTERNENDERS
sre_parse.py(405):     ASSERTCHARS = _ASSERTCHARS
sre_parse.py(406):     LOOKBEHINDASSERTCHARS = _LOOKBEHINDASSERTCHARS
sre_parse.py(407):     REPEATCODES = _REPEATCODES
sre_parse.py(409):     while 1:
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(413):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(414):         if this is None:
sre_parse.py(417):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(419):             if this in WHITESPACE:
sre_parse.py(421):             if this == "#":
sre_parse.py(428):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(431):         elif this == "[":
sre_parse.py(433):             set = []
sre_parse.py(434):             setappend = set.append
sre_parse.py(437):             if sourcematch("^"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(211):         return 0
sre_parse.py(440):             start = set[:]
sre_parse.py(441):             while 1:
sre_parse.py(442):                 this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(199):             try:
sre_parse.py(200):                 c = self.string[self.index + 1]
sre_parse.py(203):             char = char + c
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(443):                 if this == "]" and set != start:
sre_parse.py(445):                 elif this and this[0] == "\\":
sre_parse.py(447):                 elif this:
sre_parse.py(448):                     code1 = LITERAL, ord(this)
sre_parse.py(451):                 if sourcematch("-"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(211):         return 0
sre_parse.py(475):                     if code1[0] is IN:
sre_parse.py(477):                     setappend(code1)
sre_parse.py(442):                 this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(199):             try:
sre_parse.py(200):                 c = self.string[self.index + 1]
sre_parse.py(203):             char = char + c
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(443):                 if this == "]" and set != start:
sre_parse.py(445):                 elif this and this[0] == "\\":
sre_parse.py(446):                     code1 = _class_escape(source, this)
 --- modulename: sre_parse, funcname: _class_escape
sre_parse.py(238):     code = ESCAPES.get(escape)
sre_parse.py(239):     if code:
sre_parse.py(240):         return code
sre_parse.py(451):                 if sourcematch("-"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(211):         return 0
sre_parse.py(475):                     if code1[0] is IN:
sre_parse.py(477):                     setappend(code1)
sre_parse.py(442):                 this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(443):                 if this == "]" and set != start:
sre_parse.py(445):                 elif this and this[0] == "\\":
sre_parse.py(446):                     code1 = _class_escape(source, this)
 --- modulename: sre_parse, funcname: _class_escape
sre_parse.py(238):     code = ESCAPES.get(escape)
sre_parse.py(239):     if code:
sre_parse.py(241):     code = CATEGORIES.get(escape)
sre_parse.py(242):     if code and code[0] == IN:
sre_parse.py(244):     try:
sre_parse.py(245):         c = escape[1:2]
sre_parse.py(246):         if c == "x":
sre_parse.py(248):             while source.next in HEXDIGITS and len(escape) < 4:
sre_parse.py(249):                 escape = escape + source.get()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(248):             while source.next in HEXDIGITS and len(escape) < 4:
sre_parse.py(249):                 escape = escape + source.get()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(248):             while source.next in HEXDIGITS and len(escape) < 4:
sre_parse.py(250):             escape = escape[2:]
sre_parse.py(251):             if len(escape) != 2:
sre_parse.py(253):             return LITERAL, int(escape, 16) & 0xff
sre_parse.py(451):                 if sourcematch("-"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(208):             if skip:
sre_parse.py(209):                 self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(199):             try:
sre_parse.py(200):                 c = self.string[self.index + 1]
sre_parse.py(203):             char = char + c
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(210):             return 1
sre_parse.py(453):                     this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(454):                     if this == "]":
sre_parse.py(460):                     elif this:
sre_parse.py(461):                         if this[0] == "\\":
sre_parse.py(462):                             code2 = _class_escape(source, this)
 --- modulename: sre_parse, funcname: _class_escape
sre_parse.py(238):     code = ESCAPES.get(escape)
sre_parse.py(239):     if code:
sre_parse.py(241):     code = CATEGORIES.get(escape)
sre_parse.py(242):     if code and code[0] == IN:
sre_parse.py(244):     try:
sre_parse.py(245):         c = escape[1:2]
sre_parse.py(246):         if c == "x":
sre_parse.py(248):             while source.next in HEXDIGITS and len(escape) < 4:
sre_parse.py(249):                 escape = escape + source.get()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(248):             while source.next in HEXDIGITS and len(escape) < 4:
sre_parse.py(249):                 escape = escape + source.get()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(248):             while source.next in HEXDIGITS and len(escape) < 4:
sre_parse.py(250):             escape = escape[2:]
sre_parse.py(251):             if len(escape) != 2:
sre_parse.py(253):             return LITERAL, int(escape, 16) & 0xff
sre_parse.py(465):                         if code1[0] != LITERAL or code2[0] != LITERAL:
sre_parse.py(467):                         lo = code1[1]
sre_parse.py(468):                         hi = code2[1]
sre_parse.py(469):                         if hi < lo:
sre_parse.py(471):                         setappend((RANGE, (lo, hi)))
sre_parse.py(442):                 this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(443):                 if this == "]" and set != start:
sre_parse.py(444):                     break
sre_parse.py(480):             if _len(set)==1 and set[0][0] is LITERAL:
sre_parse.py(482):             elif _len(set)==2 and set[0][0] is NEGATE and set[1][0] is LITERAL:
sre_parse.py(486):                 subpatternappend((IN, set))
 --- modulename: sre_parse, funcname: append
sre_parse.py(150):         self.data.append(code)
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(412):             break # end of subpattern
sre_parse.py(704):     return subpattern
sre_parse.py(325):         if sourcematch("|"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(211):         return 0
sre_parse.py(327):         if not nested:
sre_parse.py(329):         if not source.next or sourcematch(")", 0):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(208):             if skip:
sre_parse.py(210):             return 1
sre_parse.py(330):             break
sre_parse.py(334):     if len(items) == 1:
sre_parse.py(335):         return items[0]
sre_parse.py(677):                 if not sourcematch(")"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(208):             if skip:
sre_parse.py(209):                 self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(195):             self.next = None
sre_parse.py(196):             return
sre_parse.py(210):             return 1
sre_parse.py(679):                 if group is not None:
sre_parse.py(680):                     state.closegroup(group)
 --- modulename: sre_parse, funcname: closegroup
sre_parse.py(86):         self.open.remove(gid)
sre_parse.py(681):                 subpatternappend((SUBPATTERN, (group, p)))
 --- modulename: sre_parse, funcname: append
sre_parse.py(150):         self.data.append(code)
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(413):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(195):             self.next = None
sre_parse.py(196):             return
sre_parse.py(215):         return this
sre_parse.py(414):         if this is None:
sre_parse.py(415):             break # end of pattern
sre_parse.py(704):     return subpattern
sre_parse.py(325):         if sourcematch("|"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(211):         return 0
sre_parse.py(327):         if not nested:
sre_parse.py(328):             break
sre_parse.py(334):     if len(items) == 1:
sre_parse.py(335):         return items[0]
sre_parse.py(718):     tail = source.get()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(195):             self.next = None
sre_parse.py(196):             return
sre_parse.py(215):         return this
sre_parse.py(719):     if tail == ")":
sre_parse.py(721):     elif tail:
sre_parse.py(724):     if not (flags & SRE_FLAG_VERBOSE) and p.pattern.flags & SRE_FLAG_VERBOSE:
sre_parse.py(729):     if flags & SRE_FLAG_DEBUG:
sre_parse.py(732):     return p
sre_compile.py(576):     code = _code(p, flags)
 --- modulename: sre_compile, funcname: _code
sre_compile.py(554):     flags = p.pattern.flags | flags
sre_compile.py(555):     code = []
sre_compile.py(558):     _compile_info(code, p, flags)
 --- modulename: sre_compile, funcname: _compile_info
sre_compile.py(437):     lo, hi = pattern.getwidth()
 --- modulename: sre_parse, funcname: getwidth
sre_parse.py(153):         if self.width:
sre_parse.py(155):         lo = hi = 0
sre_parse.py(156):         UNITCODES = (ANY, RANGE, IN, LITERAL, NOT_LITERAL, CATEGORY)
sre_parse.py(157):         REPEATCODES = (MIN_REPEAT, MAX_REPEAT)
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(159):             if op is BRANCH:
sre_parse.py(168):             elif op is CALL:
sre_parse.py(172):             elif op is SUBPATTERN:
sre_parse.py(173):                 i, j = av[1].getwidth()
 --- modulename: sre_parse, funcname: getwidth
sre_parse.py(153):         if self.width:
sre_parse.py(155):         lo = hi = 0
sre_parse.py(156):         UNITCODES = (ANY, RANGE, IN, LITERAL, NOT_LITERAL, CATEGORY)
sre_parse.py(157):         REPEATCODES = (MIN_REPEAT, MAX_REPEAT)
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(159):             if op is BRANCH:
sre_parse.py(168):             elif op is CALL:
sre_parse.py(172):             elif op is SUBPATTERN:
sre_parse.py(176):             elif op in REPEATCODES:
sre_parse.py(177):                 i, j = av[2].getwidth()
 --- modulename: sre_parse, funcname: getwidth
sre_parse.py(153):         if self.width:
sre_parse.py(155):         lo = hi = 0
sre_parse.py(156):         UNITCODES = (ANY, RANGE, IN, LITERAL, NOT_LITERAL, CATEGORY)
sre_parse.py(157):         REPEATCODES = (MIN_REPEAT, MAX_REPEAT)
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(159):             if op is BRANCH:
sre_parse.py(168):             elif op is CALL:
sre_parse.py(172):             elif op is SUBPATTERN:
sre_parse.py(176):             elif op in REPEATCODES:
sre_parse.py(180):             elif op in UNITCODES:
sre_parse.py(181):                 lo = lo + 1
sre_parse.py(182):                 hi = hi + 1
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(185):         self.width = min(lo, MAXREPEAT - 1), min(hi, MAXREPEAT)
sre_parse.py(186):         return self.width
sre_parse.py(178):                 lo = lo + i * av[0]
sre_parse.py(179):                 hi = hi + j * av[1]
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(185):         self.width = min(lo, MAXREPEAT - 1), min(hi, MAXREPEAT)
sre_parse.py(186):         return self.width
sre_parse.py(174):                 lo = lo + i
sre_parse.py(175):                 hi = hi + j
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(159):             if op is BRANCH:
sre_parse.py(168):             elif op is CALL:
sre_parse.py(172):             elif op is SUBPATTERN:
sre_parse.py(173):                 i, j = av[1].getwidth()
 --- modulename: sre_parse, funcname: getwidth
sre_parse.py(153):         if self.width:
sre_parse.py(155):         lo = hi = 0
sre_parse.py(156):         UNITCODES = (ANY, RANGE, IN, LITERAL, NOT_LITERAL, CATEGORY)
sre_parse.py(157):         REPEATCODES = (MIN_REPEAT, MAX_REPEAT)
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(159):             if op is BRANCH:
sre_parse.py(168):             elif op is CALL:
sre_parse.py(172):             elif op is SUBPATTERN:
sre_parse.py(176):             elif op in REPEATCODES:
sre_parse.py(180):             elif op in UNITCODES:
sre_parse.py(181):                 lo = lo + 1
sre_parse.py(182):                 hi = hi + 1
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(185):         self.width = min(lo, MAXREPEAT - 1), min(hi, MAXREPEAT)
sre_parse.py(186):         return self.width
sre_parse.py(174):                 lo = lo + i
sre_parse.py(175):                 hi = hi + j
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(185):         self.width = min(lo, MAXREPEAT - 1), min(hi, MAXREPEAT)
sre_parse.py(186):         return self.width
sre_compile.py(438):     if lo == 0:
sre_compile.py(441):     prefix = []
sre_compile.py(442):     prefixappend = prefix.append
sre_compile.py(443):     prefix_skip = 0
sre_compile.py(444):     charset = [] # not used
sre_compile.py(445):     charsetappend = charset.append
sre_compile.py(446):     if not (flags & SRE_FLAG_IGNORECASE):
sre_compile.py(448):         for op, av in pattern.data:
sre_compile.py(449):             if op is LITERAL:
sre_compile.py(453):             elif op is SUBPATTERN and len(av[1]) == 1:
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(138):         return len(self.data)
sre_compile.py(454):                 op, av = av[1][0]
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(455):                 if op is LITERAL:
sre_compile.py(458):                     break
sre_compile.py(462):         if not prefix and pattern.data:
sre_compile.py(463):             op, av = pattern.data[0]
sre_compile.py(464):             if op is SUBPATTERN and av[1]:
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(138):         return len(self.data)
sre_compile.py(465):                 op, av = av[1][0]
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(466):                 if op is LITERAL:
sre_compile.py(468):                 elif op is BRANCH:
sre_compile.py(501):     emit = code.append
sre_compile.py(502):     emit(OPCODES[INFO])
sre_compile.py(503):     skip = len(code); emit(0)
sre_compile.py(505):     mask = 0
sre_compile.py(506):     if prefix:
sre_compile.py(510):     elif charset:
sre_compile.py(512):     emit(mask)
sre_compile.py(514):     if lo < MAXCODE:
sre_compile.py(515):         emit(lo)
sre_compile.py(519):     if hi < MAXCODE:
sre_compile.py(520):         emit(hi)
sre_compile.py(524):     if prefix:
sre_compile.py(535):     elif charset:
sre_compile.py(537):     code[skip] = len(code) - skip
sre_compile.py(561):     _compile(code, p.data, flags)
 --- modulename: sre_compile, funcname: _compile
sre_compile.py(66):     emit = code.append
sre_compile.py(67):     _len = len
sre_compile.py(68):     LITERAL_CODES = _LITERAL_CODES
sre_compile.py(69):     REPEATING_CODES = _REPEATING_CODES
sre_compile.py(70):     SUCCESS_CODES = _SUCCESS_CODES
sre_compile.py(71):     ASSERT_CODES = _ASSERT_CODES
sre_compile.py(72):     if (flags & SRE_FLAG_IGNORECASE and
sre_compile.py(77):         fixes = None
sre_compile.py(78):     for op, av in pattern:
sre_compile.py(79):         if op in LITERAL_CODES:
sre_compile.py(98):         elif op is IN:
sre_compile.py(109):         elif op is ANY:
sre_compile.py(114):         elif op in REPEATING_CODES:
sre_compile.py(146):         elif op is SUBPATTERN:
sre_compile.py(147):             if av[0]:
sre_compile.py(148):                 emit(OPCODES[MARK])
sre_compile.py(149):                 emit((av[0]-1)*2)
sre_compile.py(151):             _compile(code, av[1], flags)
 --- modulename: sre_compile, funcname: _compile
sre_compile.py(66):     emit = code.append
sre_compile.py(67):     _len = len
sre_compile.py(68):     LITERAL_CODES = _LITERAL_CODES
sre_compile.py(69):     REPEATING_CODES = _REPEATING_CODES
sre_compile.py(70):     SUCCESS_CODES = _SUCCESS_CODES
sre_compile.py(71):     ASSERT_CODES = _ASSERT_CODES
sre_compile.py(72):     if (flags & SRE_FLAG_IGNORECASE and
sre_compile.py(77):         fixes = None
sre_compile.py(78):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(79):         if op in LITERAL_CODES:
sre_compile.py(98):         elif op is IN:
sre_compile.py(109):         elif op is ANY:
sre_compile.py(114):         elif op in REPEATING_CODES:
sre_compile.py(115):             if flags & SRE_FLAG_TEMPLATE:
sre_compile.py(124):             elif _simple(av) and op is not REPEAT:
 --- modulename: sre_compile, funcname: _simple
sre_compile.py(430):     lo, hi = av[2].getwidth()
 --- modulename: sre_parse, funcname: getwidth
sre_parse.py(153):         if self.width:
sre_parse.py(154):             return self.width
sre_compile.py(431):     return lo == hi == 1 and av[2][0][0] != SUBPATTERN
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(125):                 if op is MAX_REPEAT:
sre_compile.py(128):                     emit(OPCODES[MIN_REPEAT_ONE])
sre_compile.py(129):                 skip = _len(code); emit(0)
sre_compile.py(130):                 emit(av[0])
sre_compile.py(131):                 emit(av[1])
sre_compile.py(132):                 _compile(code, av[2], flags)
 --- modulename: sre_compile, funcname: _compile
sre_compile.py(66):     emit = code.append
sre_compile.py(67):     _len = len
sre_compile.py(68):     LITERAL_CODES = _LITERAL_CODES
sre_compile.py(69):     REPEATING_CODES = _REPEATING_CODES
sre_compile.py(70):     SUCCESS_CODES = _SUCCESS_CODES
sre_compile.py(71):     ASSERT_CODES = _ASSERT_CODES
sre_compile.py(72):     if (flags & SRE_FLAG_IGNORECASE and
sre_compile.py(77):         fixes = None
sre_compile.py(78):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(79):         if op in LITERAL_CODES:
sre_compile.py(98):         elif op is IN:
sre_compile.py(109):         elif op is ANY:
sre_compile.py(110):             if flags & SRE_FLAG_DOTALL:
sre_compile.py(111):                 emit(OPCODES[ANY_ALL])
sre_compile.py(78):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(133):                 emit(OPCODES[SUCCESS])
sre_compile.py(134):                 code[skip] = _len(code) - skip
sre_compile.py(78):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(152):             if av[0]:
sre_compile.py(153):                 emit(OPCODES[MARK])
sre_compile.py(154):                 emit((av[0]-1)*2+1)
sre_compile.py(78):     for op, av in pattern:
sre_compile.py(79):         if op in LITERAL_CODES:
sre_compile.py(98):         elif op is IN:
sre_compile.py(109):         elif op is ANY:
sre_compile.py(114):         elif op in REPEATING_CODES:
sre_compile.py(146):         elif op is SUBPATTERN:
sre_compile.py(147):             if av[0]:
sre_compile.py(148):                 emit(OPCODES[MARK])
sre_compile.py(149):                 emit((av[0]-1)*2)
sre_compile.py(151):             _compile(code, av[1], flags)
 --- modulename: sre_compile, funcname: _compile
sre_compile.py(66):     emit = code.append
sre_compile.py(67):     _len = len
sre_compile.py(68):     LITERAL_CODES = _LITERAL_CODES
sre_compile.py(69):     REPEATING_CODES = _REPEATING_CODES
sre_compile.py(70):     SUCCESS_CODES = _SUCCESS_CODES
sre_compile.py(71):     ASSERT_CODES = _ASSERT_CODES
sre_compile.py(72):     if (flags & SRE_FLAG_IGNORECASE and
sre_compile.py(77):         fixes = None
sre_compile.py(78):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(79):         if op in LITERAL_CODES:
sre_compile.py(98):         elif op is IN:
sre_compile.py(99):             if flags & SRE_FLAG_IGNORECASE:
sre_compile.py(104):                 emit(OPCODES[op])
sre_compile.py(105):                 fixup = None
sre_compile.py(106):             skip = _len(code); emit(0)
sre_compile.py(107):             _compile_charset(av, flags, code, fixup, fixes)
 --- modulename: sre_compile, funcname: _compile_charset
sre_compile.py(230):     emit = code.append
sre_compile.py(231):     for op, av in _optimize_charset(charset, fixup, fixes,
sre_compile.py(232):                                     flags & SRE_FLAG_UNICODE):
 --- modulename: sre_compile, funcname: _optimize_charset
sre_compile.py(258):     out = []
sre_compile.py(259):     tail = []
sre_compile.py(260):     charmap = bytearray(256)
sre_compile.py(261):     for op, av in charset:
sre_compile.py(262):         while True:
sre_compile.py(263):             try:
sre_compile.py(264):                 if op is LITERAL:
sre_compile.py(265):                     if fixup:
sre_compile.py(272):                         charmap[av] = 1
sre_compile.py(310):             break
sre_compile.py(261):     for op, av in charset:
sre_compile.py(262):         while True:
sre_compile.py(263):             try:
sre_compile.py(264):                 if op is LITERAL:
sre_compile.py(265):                     if fixup:
sre_compile.py(272):                         charmap[av] = 1
sre_compile.py(310):             break
sre_compile.py(261):     for op, av in charset:
sre_compile.py(262):         while True:
sre_compile.py(263):             try:
sre_compile.py(264):                 if op is LITERAL:
sre_compile.py(273):                 elif op is RANGE:
sre_compile.py(274):                     r = range(av[0], av[1]+1)
sre_compile.py(275):                     if fixup:
sre_compile.py(277):                     if fixup and fixes:
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(310):             break
sre_compile.py(261):     for op, av in charset:
sre_compile.py(313):     runs = []
sre_compile.py(314):     q = 0
sre_compile.py(315):     while True:
sre_compile.py(316):         p = charmap.find(b'\1', q)
sre_compile.py(317):         if p < 0:
sre_compile.py(319):         if len(runs) >= 2:
sre_compile.py(322):         q = charmap.find(b'\0', p)
sre_compile.py(323):         if q < 0:
sre_compile.py(326):         runs.append((p, q))
sre_compile.py(315):     while True:
sre_compile.py(316):         p = charmap.find(b'\1', q)
sre_compile.py(317):         if p < 0:
sre_compile.py(319):         if len(runs) >= 2:
sre_compile.py(322):         q = charmap.find(b'\0', p)
sre_compile.py(323):         if q < 0:
sre_compile.py(326):         runs.append((p, q))
sre_compile.py(315):     while True:
sre_compile.py(316):         p = charmap.find(b'\1', q)
sre_compile.py(317):         if p < 0:
sre_compile.py(319):         if len(runs) >= 2:
sre_compile.py(320):             runs = None
sre_compile.py(321):             break
sre_compile.py(327):     if runs is not None:
sre_compile.py(342):     if len(charmap) == 256:
sre_compile.py(343):         data = _mk_bitmap(charmap)
 --- modulename: sre_compile, funcname: _mk_bitmap
sre_compile.py(412):     s = bytes(bits).translate(_BITS_TRANS)[::-1]
sre_compile.py(413):     return [_int(s[i - _CODEBITS: i], 2)
sre_compile.py(414):             for i in range(len(s), 0, -_CODEBITS)]
sre_compile.py(414):             for i in range(len(s), 0, -_CODEBITS)]
sre_compile.py(414):             for i in range(len(s), 0, -_CODEBITS)]
sre_compile.py(414):             for i in range(len(s), 0, -_CODEBITS)]
sre_compile.py(414):             for i in range(len(s), 0, -_CODEBITS)]
sre_compile.py(414):             for i in range(len(s), 0, -_CODEBITS)]
sre_compile.py(414):             for i in range(len(s), 0, -_CODEBITS)]
sre_compile.py(414):             for i in range(len(s), 0, -_CODEBITS)]
sre_compile.py(414):             for i in range(len(s), 0, -_CODEBITS)]
sre_compile.py(344):         out.append((CHARSET, data))
sre_compile.py(345):         out += tail
sre_compile.py(346):         return out
sre_compile.py(233):         emit(OPCODES[op])
sre_compile.py(234):         if op is NEGATE:
sre_compile.py(236):         elif op is LITERAL:
sre_compile.py(238):         elif op is RANGE:
sre_compile.py(241):         elif op is CHARSET:
sre_compile.py(242):             code.extend(av)
sre_compile.py(232):                                     flags & SRE_FLAG_UNICODE):
sre_compile.py(254):     emit(OPCODES[FAILURE])
sre_compile.py(108):             code[skip] = _len(code) - skip
sre_compile.py(78):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(152):             if av[0]:
sre_compile.py(153):                 emit(OPCODES[MARK])
sre_compile.py(154):                 emit((av[0]-1)*2+1)
sre_compile.py(78):     for op, av in pattern:
sre_compile.py(563):     code.append(OPCODES[SUCCESS])
sre_compile.py(565):     return code
sre_compile.py(581):     if p.pattern.groups > 100:
sre_compile.py(587):     groupindex = p.pattern.groupdict
sre_compile.py(588):     indexgroup = [None] * p.pattern.groups
sre_compile.py(589):     for k, i in groupindex.items():
sre_compile.py(592):     return _sre.compile(
sre_compile.py(593):         pattern, flags | p.pattern.flags, code,
sre_compile.py(594):         p.pattern.groups-1,
sre_compile.py(595):         groupindex, indexgroup
re.py(252):     if not bypass_cache:
re.py(253):         if len(_cache) >= _MAXCACHE:
re.py(255):         if p.flags & LOCALE:
re.py(260):             loc = None
re.py(261):         _cache[cachekey] = p, loc
re.py(262):     return p
decoder.py(56): BACKSLASH = {
decoder.py(57):     '"': u'"', '\\': u'\\', '/': u'/',
decoder.py(58):     'b': u'\b', 'f': u'\f', 'n': u'\n', 'r': u'\r', 't': u'\t',
decoder.py(61): DEFAULT_ENCODING = "utf-8"
decoder.py(63): def _decode_uXXXX(s, pos):
decoder.py(73): def py_scanstring(s, end, encoding=None, strict=True,
decoder.py(74):         _b=BACKSLASH, _m=STRINGCHUNK.match):
decoder.py(143): scanstring = c_scanstring or py_scanstring
decoder.py(145): WHITESPACE = re.compile(r'[ \t\n\r]*', FLAGS)
 --- modulename: re, funcname: compile
re.py(194):     return _compile(pattern, flags)
 --- modulename: re, funcname: _compile
re.py(232):     pattern, flags = key
re.py(233):     bypass_cache = flags & DEBUG
re.py(234):     if not bypass_cache:
re.py(235):         cachekey = (type(key[0]),) + key
re.py(236):         try:
re.py(237):             p, loc = _cache[cachekey]
re.py(240):         except KeyError:
re.py(241):             pass
re.py(242):     if isinstance(pattern, _pattern_type):
re.py(246):     if not sre_compile.isstring(pattern):
 --- modulename: sre_compile, funcname: isstring
sre_compile.py(547):     for tp in STRING_TYPES:
sre_compile.py(548):         if isinstance(obj, tp):
sre_compile.py(549):             return 1
re.py(248):     try:
re.py(249):         p = sre_compile.compile(pattern, flags)
 --- modulename: sre_compile, funcname: compile
sre_compile.py(570):     if isstring(p):
 --- modulename: sre_compile, funcname: isstring
sre_compile.py(547):     for tp in STRING_TYPES:
sre_compile.py(548):         if isinstance(obj, tp):
sre_compile.py(549):             return 1
sre_compile.py(571):         pattern = p
sre_compile.py(572):         p = sre_parse.parse(p, flags)
 --- modulename: sre_parse, funcname: parse
sre_parse.py(709):     source = Tokenizer(str)
 --- modulename: sre_parse, funcname: __init__
sre_parse.py(190):         self.string = string
sre_parse.py(191):         self.index = 0
sre_parse.py(192):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(711):     if pattern is None:
sre_parse.py(712):         pattern = Pattern()
 --- modulename: sre_parse, funcname: __init__
sre_parse.py(68):         self.flags = 0
sre_parse.py(69):         self.open = []
sre_parse.py(70):         self.groups = 1
sre_parse.py(71):         self.groupdict = {}
sre_parse.py(72):         self.lookbehind = 0
sre_parse.py(713):     pattern.flags = flags
sre_parse.py(714):     pattern.str = str
sre_parse.py(716):     p = _parse_sub(source, pattern, 0)
 --- modulename: sre_parse, funcname: _parse_sub
sre_parse.py(320):     items = []
sre_parse.py(321):     itemsappend = items.append
sre_parse.py(322):     sourcematch = source.match
sre_parse.py(323):     while 1:
sre_parse.py(324):         itemsappend(_parse(source, state))
 --- modulename: sre_parse, funcname: _parse
sre_parse.py(397):     subpattern = SubPattern(state)
 --- modulename: sre_parse, funcname: __init__
sre_parse.py(93):         self.pattern = pattern
sre_parse.py(94):         if data is None:
sre_parse.py(95):             data = []
sre_parse.py(96):         self.data = data
sre_parse.py(97):         self.width = None
sre_parse.py(400):     subpatternappend = subpattern.append
sre_parse.py(401):     sourceget = source.get
sre_parse.py(402):     sourcematch = source.match
sre_parse.py(403):     _len = len
sre_parse.py(404):     PATTERNENDERS = _PATTERNENDERS
sre_parse.py(405):     ASSERTCHARS = _ASSERTCHARS
sre_parse.py(406):     LOOKBEHINDASSERTCHARS = _LOOKBEHINDASSERTCHARS
sre_parse.py(407):     REPEATCODES = _REPEATCODES
sre_parse.py(409):     while 1:
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(413):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(414):         if this is None:
sre_parse.py(417):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(419):             if this in WHITESPACE:
sre_parse.py(421):             if this == "#":
sre_parse.py(428):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(431):         elif this == "[":
sre_parse.py(433):             set = []
sre_parse.py(434):             setappend = set.append
sre_parse.py(437):             if sourcematch("^"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(211):         return 0
sre_parse.py(440):             start = set[:]
sre_parse.py(441):             while 1:
sre_parse.py(442):                 this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(199):             try:
sre_parse.py(200):                 c = self.string[self.index + 1]
sre_parse.py(203):             char = char + c
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(443):                 if this == "]" and set != start:
sre_parse.py(445):                 elif this and this[0] == "\\":
sre_parse.py(447):                 elif this:
sre_parse.py(448):                     code1 = LITERAL, ord(this)
sre_parse.py(451):                 if sourcematch("-"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(211):         return 0
sre_parse.py(475):                     if code1[0] is IN:
sre_parse.py(477):                     setappend(code1)
sre_parse.py(442):                 this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(199):             try:
sre_parse.py(200):                 c = self.string[self.index + 1]
sre_parse.py(203):             char = char + c
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(443):                 if this == "]" and set != start:
sre_parse.py(445):                 elif this and this[0] == "\\":
sre_parse.py(446):                     code1 = _class_escape(source, this)
 --- modulename: sre_parse, funcname: _class_escape
sre_parse.py(238):     code = ESCAPES.get(escape)
sre_parse.py(239):     if code:
sre_parse.py(240):         return code
sre_parse.py(451):                 if sourcematch("-"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(211):         return 0
sre_parse.py(475):                     if code1[0] is IN:
sre_parse.py(477):                     setappend(code1)
sre_parse.py(442):                 this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(199):             try:
sre_parse.py(200):                 c = self.string[self.index + 1]
sre_parse.py(203):             char = char + c
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(443):                 if this == "]" and set != start:
sre_parse.py(445):                 elif this and this[0] == "\\":
sre_parse.py(446):                     code1 = _class_escape(source, this)
 --- modulename: sre_parse, funcname: _class_escape
sre_parse.py(238):     code = ESCAPES.get(escape)
sre_parse.py(239):     if code:
sre_parse.py(240):         return code
sre_parse.py(451):                 if sourcematch("-"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(211):         return 0
sre_parse.py(475):                     if code1[0] is IN:
sre_parse.py(477):                     setappend(code1)
sre_parse.py(442):                 this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(443):                 if this == "]" and set != start:
sre_parse.py(445):                 elif this and this[0] == "\\":
sre_parse.py(446):                     code1 = _class_escape(source, this)
 --- modulename: sre_parse, funcname: _class_escape
sre_parse.py(238):     code = ESCAPES.get(escape)
sre_parse.py(239):     if code:
sre_parse.py(240):         return code
sre_parse.py(451):                 if sourcematch("-"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(211):         return 0
sre_parse.py(475):                     if code1[0] is IN:
sre_parse.py(477):                     setappend(code1)
sre_parse.py(442):                 this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(443):                 if this == "]" and set != start:
sre_parse.py(444):                     break
sre_parse.py(480):             if _len(set)==1 and set[0][0] is LITERAL:
sre_parse.py(482):             elif _len(set)==2 and set[0][0] is NEGATE and set[1][0] is LITERAL:
sre_parse.py(486):                 subpatternappend((IN, set))
 --- modulename: sre_parse, funcname: append
sre_parse.py(150):         self.data.append(code)
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(413):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(195):             self.next = None
sre_parse.py(196):             return
sre_parse.py(215):         return this
sre_parse.py(414):         if this is None:
sre_parse.py(417):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(419):             if this in WHITESPACE:
sre_parse.py(421):             if this == "#":
sre_parse.py(428):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(431):         elif this == "[":
sre_parse.py(488):         elif this and this[0] in REPEAT_CHARS:
sre_parse.py(490):             if this == "?":
sre_parse.py(492):             elif this == "*":
sre_parse.py(493):                 min, max = 0, MAXREPEAT
sre_parse.py(528):             if subpattern:
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(138):         return len(self.data)
sre_parse.py(529):                 item = subpattern[-1:]
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(138):         return len(self.data)
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(143):             return SubPattern(self.pattern, self.data[index])
 --- modulename: sre_parse, funcname: __init__
sre_parse.py(93):         self.pattern = pattern
sre_parse.py(94):         if data is None:
sre_parse.py(96):         self.data = data
sre_parse.py(97):         self.width = None
sre_parse.py(532):             if not item or (_len(item) == 1 and item[0][0] == AT):
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(138):         return len(self.data)
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(138):         return len(self.data)
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_parse.py(534):             if item[0][0] in REPEATCODES:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_parse.py(536):             if sourcematch("?"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(211):         return 0
sre_parse.py(539):                 subpattern[-1] = (MAX_REPEAT, (min, max, item))
 --- modulename: sre_parse, funcname: __setitem__
sre_parse.py(146):         self.data[index] = code
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(413):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(195):             self.next = None
sre_parse.py(196):             return
sre_parse.py(215):         return this
sre_parse.py(414):         if this is None:
sre_parse.py(415):             break # end of pattern
sre_parse.py(704):     return subpattern
sre_parse.py(325):         if sourcematch("|"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(211):         return 0
sre_parse.py(327):         if not nested:
sre_parse.py(328):             break
sre_parse.py(334):     if len(items) == 1:
sre_parse.py(335):         return items[0]
sre_parse.py(718):     tail = source.get()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(195):             self.next = None
sre_parse.py(196):             return
sre_parse.py(215):         return this
sre_parse.py(719):     if tail == ")":
sre_parse.py(721):     elif tail:
sre_parse.py(724):     if not (flags & SRE_FLAG_VERBOSE) and p.pattern.flags & SRE_FLAG_VERBOSE:
sre_parse.py(729):     if flags & SRE_FLAG_DEBUG:
sre_parse.py(732):     return p
sre_compile.py(576):     code = _code(p, flags)
 --- modulename: sre_compile, funcname: _code
sre_compile.py(554):     flags = p.pattern.flags | flags
sre_compile.py(555):     code = []
sre_compile.py(558):     _compile_info(code, p, flags)
 --- modulename: sre_compile, funcname: _compile_info
sre_compile.py(437):     lo, hi = pattern.getwidth()
 --- modulename: sre_parse, funcname: getwidth
sre_parse.py(153):         if self.width:
sre_parse.py(155):         lo = hi = 0
sre_parse.py(156):         UNITCODES = (ANY, RANGE, IN, LITERAL, NOT_LITERAL, CATEGORY)
sre_parse.py(157):         REPEATCODES = (MIN_REPEAT, MAX_REPEAT)
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(159):             if op is BRANCH:
sre_parse.py(168):             elif op is CALL:
sre_parse.py(172):             elif op is SUBPATTERN:
sre_parse.py(176):             elif op in REPEATCODES:
sre_parse.py(177):                 i, j = av[2].getwidth()
 --- modulename: sre_parse, funcname: getwidth
sre_parse.py(153):         if self.width:
sre_parse.py(155):         lo = hi = 0
sre_parse.py(156):         UNITCODES = (ANY, RANGE, IN, LITERAL, NOT_LITERAL, CATEGORY)
sre_parse.py(157):         REPEATCODES = (MIN_REPEAT, MAX_REPEAT)
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(159):             if op is BRANCH:
sre_parse.py(168):             elif op is CALL:
sre_parse.py(172):             elif op is SUBPATTERN:
sre_parse.py(176):             elif op in REPEATCODES:
sre_parse.py(180):             elif op in UNITCODES:
sre_parse.py(181):                 lo = lo + 1
sre_parse.py(182):                 hi = hi + 1
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(185):         self.width = min(lo, MAXREPEAT - 1), min(hi, MAXREPEAT)
sre_parse.py(186):         return self.width
sre_parse.py(178):                 lo = lo + i * av[0]
sre_parse.py(179):                 hi = hi + j * av[1]
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(185):         self.width = min(lo, MAXREPEAT - 1), min(hi, MAXREPEAT)
sre_parse.py(186):         return self.width
sre_compile.py(438):     if lo == 0:
sre_compile.py(439):         return # not worth it
sre_compile.py(561):     _compile(code, p.data, flags)
 --- modulename: sre_compile, funcname: _compile
sre_compile.py(66):     emit = code.append
sre_compile.py(67):     _len = len
sre_compile.py(68):     LITERAL_CODES = _LITERAL_CODES
sre_compile.py(69):     REPEATING_CODES = _REPEATING_CODES
sre_compile.py(70):     SUCCESS_CODES = _SUCCESS_CODES
sre_compile.py(71):     ASSERT_CODES = _ASSERT_CODES
sre_compile.py(72):     if (flags & SRE_FLAG_IGNORECASE and
sre_compile.py(77):         fixes = None
sre_compile.py(78):     for op, av in pattern:
sre_compile.py(79):         if op in LITERAL_CODES:
sre_compile.py(98):         elif op is IN:
sre_compile.py(109):         elif op is ANY:
sre_compile.py(114):         elif op in REPEATING_CODES:
sre_compile.py(115):             if flags & SRE_FLAG_TEMPLATE:
sre_compile.py(124):             elif _simple(av) and op is not REPEAT:
 --- modulename: sre_compile, funcname: _simple
sre_compile.py(430):     lo, hi = av[2].getwidth()
 --- modulename: sre_parse, funcname: getwidth
sre_parse.py(153):         if self.width:
sre_parse.py(154):             return self.width
sre_compile.py(431):     return lo == hi == 1 and av[2][0][0] != SUBPATTERN
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(125):                 if op is MAX_REPEAT:
sre_compile.py(126):                     emit(OPCODES[REPEAT_ONE])
sre_compile.py(129):                 skip = _len(code); emit(0)
sre_compile.py(130):                 emit(av[0])
sre_compile.py(131):                 emit(av[1])
sre_compile.py(132):                 _compile(code, av[2], flags)
 --- modulename: sre_compile, funcname: _compile
sre_compile.py(66):     emit = code.append
sre_compile.py(67):     _len = len
sre_compile.py(68):     LITERAL_CODES = _LITERAL_CODES
sre_compile.py(69):     REPEATING_CODES = _REPEATING_CODES
sre_compile.py(70):     SUCCESS_CODES = _SUCCESS_CODES
sre_compile.py(71):     ASSERT_CODES = _ASSERT_CODES
sre_compile.py(72):     if (flags & SRE_FLAG_IGNORECASE and
sre_compile.py(77):         fixes = None
sre_compile.py(78):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(79):         if op in LITERAL_CODES:
sre_compile.py(98):         elif op is IN:
sre_compile.py(99):             if flags & SRE_FLAG_IGNORECASE:
sre_compile.py(104):                 emit(OPCODES[op])
sre_compile.py(105):                 fixup = None
sre_compile.py(106):             skip = _len(code); emit(0)
sre_compile.py(107):             _compile_charset(av, flags, code, fixup, fixes)
 --- modulename: sre_compile, funcname: _compile_charset
sre_compile.py(230):     emit = code.append
sre_compile.py(231):     for op, av in _optimize_charset(charset, fixup, fixes,
sre_compile.py(232):                                     flags & SRE_FLAG_UNICODE):
 --- modulename: sre_compile, funcname: _optimize_charset
sre_compile.py(258):     out = []
sre_compile.py(259):     tail = []
sre_compile.py(260):     charmap = bytearray(256)
sre_compile.py(261):     for op, av in charset:
sre_compile.py(262):         while True:
sre_compile.py(263):             try:
sre_compile.py(264):                 if op is LITERAL:
sre_compile.py(265):                     if fixup:
sre_compile.py(272):                         charmap[av] = 1
sre_compile.py(310):             break
sre_compile.py(261):     for op, av in charset:
sre_compile.py(262):         while True:
sre_compile.py(263):             try:
sre_compile.py(264):                 if op is LITERAL:
sre_compile.py(265):                     if fixup:
sre_compile.py(272):                         charmap[av] = 1
sre_compile.py(310):             break
sre_compile.py(261):     for op, av in charset:
sre_compile.py(262):         while True:
sre_compile.py(263):             try:
sre_compile.py(264):                 if op is LITERAL:
sre_compile.py(265):                     if fixup:
sre_compile.py(272):                         charmap[av] = 1
sre_compile.py(310):             break
sre_compile.py(261):     for op, av in charset:
sre_compile.py(262):         while True:
sre_compile.py(263):             try:
sre_compile.py(264):                 if op is LITERAL:
sre_compile.py(265):                     if fixup:
sre_compile.py(272):                         charmap[av] = 1
sre_compile.py(310):             break
sre_compile.py(261):     for op, av in charset:
sre_compile.py(313):     runs = []
sre_compile.py(314):     q = 0
sre_compile.py(315):     while True:
sre_compile.py(316):         p = charmap.find(b'\1', q)
sre_compile.py(317):         if p < 0:
sre_compile.py(319):         if len(runs) >= 2:
sre_compile.py(322):         q = charmap.find(b'\0', p)
sre_compile.py(323):         if q < 0:
sre_compile.py(326):         runs.append((p, q))
sre_compile.py(315):     while True:
sre_compile.py(316):         p = charmap.find(b'\1', q)
sre_compile.py(317):         if p < 0:
sre_compile.py(319):         if len(runs) >= 2:
sre_compile.py(322):         q = charmap.find(b'\0', p)
sre_compile.py(323):         if q < 0:
sre_compile.py(326):         runs.append((p, q))
sre_compile.py(315):     while True:
sre_compile.py(316):         p = charmap.find(b'\1', q)
sre_compile.py(317):         if p < 0:
sre_compile.py(319):         if len(runs) >= 2:
sre_compile.py(320):             runs = None
sre_compile.py(321):             break
sre_compile.py(327):     if runs is not None:
sre_compile.py(342):     if len(charmap) == 256:
sre_compile.py(343):         data = _mk_bitmap(charmap)
 --- modulename: sre_compile, funcname: _mk_bitmap
sre_compile.py(412):     s = bytes(bits).translate(_BITS_TRANS)[::-1]
sre_compile.py(413):     return [_int(s[i - _CODEBITS: i], 2)
sre_compile.py(414):             for i in range(len(s), 0, -_CODEBITS)]
sre_compile.py(414):             for i in range(len(s), 0, -_CODEBITS)]
sre_compile.py(414):             for i in range(len(s), 0, -_CODEBITS)]
sre_compile.py(414):             for i in range(len(s), 0, -_CODEBITS)]
sre_compile.py(414):             for i in range(len(s), 0, -_CODEBITS)]
sre_compile.py(414):             for i in range(len(s), 0, -_CODEBITS)]
sre_compile.py(414):             for i in range(len(s), 0, -_CODEBITS)]
sre_compile.py(414):             for i in range(len(s), 0, -_CODEBITS)]
sre_compile.py(414):             for i in range(len(s), 0, -_CODEBITS)]
sre_compile.py(344):         out.append((CHARSET, data))
sre_compile.py(345):         out += tail
sre_compile.py(346):         return out
sre_compile.py(233):         emit(OPCODES[op])
sre_compile.py(234):         if op is NEGATE:
sre_compile.py(236):         elif op is LITERAL:
sre_compile.py(238):         elif op is RANGE:
sre_compile.py(241):         elif op is CHARSET:
sre_compile.py(242):             code.extend(av)
sre_compile.py(232):                                     flags & SRE_FLAG_UNICODE):
sre_compile.py(254):     emit(OPCODES[FAILURE])
sre_compile.py(108):             code[skip] = _len(code) - skip
sre_compile.py(78):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(133):                 emit(OPCODES[SUCCESS])
sre_compile.py(134):                 code[skip] = _len(code) - skip
sre_compile.py(78):     for op, av in pattern:
sre_compile.py(563):     code.append(OPCODES[SUCCESS])
sre_compile.py(565):     return code
sre_compile.py(581):     if p.pattern.groups > 100:
sre_compile.py(587):     groupindex = p.pattern.groupdict
sre_compile.py(588):     indexgroup = [None] * p.pattern.groups
sre_compile.py(589):     for k, i in groupindex.items():
sre_compile.py(592):     return _sre.compile(
sre_compile.py(593):         pattern, flags | p.pattern.flags, code,
sre_compile.py(594):         p.pattern.groups-1,
sre_compile.py(595):         groupindex, indexgroup
re.py(252):     if not bypass_cache:
re.py(253):         if len(_cache) >= _MAXCACHE:
re.py(255):         if p.flags & LOCALE:
re.py(260):             loc = None
re.py(261):         _cache[cachekey] = p, loc
re.py(262):     return p
decoder.py(146): WHITESPACE_STR = ' \t\n\r'
decoder.py(149):                object_pairs_hook, _w=WHITESPACE.match, _ws=WHITESPACE_STR):
decoder.py(236): def JSONArray(s_and_end, scan_once, _w=WHITESPACE.match, _ws=WHITESPACE_STR):
decoder.py(272): class JSONDecoder(object):
 --- modulename: decoder, funcname: JSONDecoder
decoder.py(272): class JSONDecoder(object):
decoder.py(300):     """
decoder.py(302):     def __init__(self, encoding=None, object_hook=None, parse_float=None,
decoder.py(303):             parse_int=None, parse_constant=None, strict=True,
decoder.py(304):             object_pairs_hook=None):
decoder.py(359):     def decode(self, s, _w=WHITESPACE.match):
decoder.py(370):     def raw_decode(self, s, idx=0):
__init__.py(109): from .encoder import JSONEncoder
 --- modulename: encoder, funcname: <module>
encoder.py(2): """
encoder.py(3): import re
encoder.py(5): try:
encoder.py(6):     from _json import encode_basestring_ascii as c_encode_basestring_ascii
encoder.py(9): try:
encoder.py(10):     from _json import make_encoder as c_make_encoder
encoder.py(14): ESCAPE = re.compile(r'[\x00-\x1f\\"\b\f\n\r\t]')
 --- modulename: re, funcname: compile
re.py(194):     return _compile(pattern, flags)
 --- modulename: re, funcname: _compile
re.py(232):     pattern, flags = key
re.py(233):     bypass_cache = flags & DEBUG
re.py(234):     if not bypass_cache:
re.py(235):         cachekey = (type(key[0]),) + key
re.py(236):         try:
re.py(237):             p, loc = _cache[cachekey]
re.py(240):         except KeyError:
re.py(241):             pass
re.py(242):     if isinstance(pattern, _pattern_type):
re.py(246):     if not sre_compile.isstring(pattern):
 --- modulename: sre_compile, funcname: isstring
sre_compile.py(547):     for tp in STRING_TYPES:
sre_compile.py(548):         if isinstance(obj, tp):
sre_compile.py(549):             return 1
re.py(248):     try:
re.py(249):         p = sre_compile.compile(pattern, flags)
 --- modulename: sre_compile, funcname: compile
sre_compile.py(570):     if isstring(p):
 --- modulename: sre_compile, funcname: isstring
sre_compile.py(547):     for tp in STRING_TYPES:
sre_compile.py(548):         if isinstance(obj, tp):
sre_compile.py(549):             return 1
sre_compile.py(571):         pattern = p
sre_compile.py(572):         p = sre_parse.parse(p, flags)
 --- modulename: sre_parse, funcname: parse
sre_parse.py(709):     source = Tokenizer(str)
 --- modulename: sre_parse, funcname: __init__
sre_parse.py(190):         self.string = string
sre_parse.py(191):         self.index = 0
sre_parse.py(192):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(711):     if pattern is None:
sre_parse.py(712):         pattern = Pattern()
 --- modulename: sre_parse, funcname: __init__
sre_parse.py(68):         self.flags = 0
sre_parse.py(69):         self.open = []
sre_parse.py(70):         self.groups = 1
sre_parse.py(71):         self.groupdict = {}
sre_parse.py(72):         self.lookbehind = 0
sre_parse.py(713):     pattern.flags = flags
sre_parse.py(714):     pattern.str = str
sre_parse.py(716):     p = _parse_sub(source, pattern, 0)
 --- modulename: sre_parse, funcname: _parse_sub
sre_parse.py(320):     items = []
sre_parse.py(321):     itemsappend = items.append
sre_parse.py(322):     sourcematch = source.match
sre_parse.py(323):     while 1:
sre_parse.py(324):         itemsappend(_parse(source, state))
 --- modulename: sre_parse, funcname: _parse
sre_parse.py(397):     subpattern = SubPattern(state)
 --- modulename: sre_parse, funcname: __init__
sre_parse.py(93):         self.pattern = pattern
sre_parse.py(94):         if data is None:
sre_parse.py(95):             data = []
sre_parse.py(96):         self.data = data
sre_parse.py(97):         self.width = None
sre_parse.py(400):     subpatternappend = subpattern.append
sre_parse.py(401):     sourceget = source.get
sre_parse.py(402):     sourcematch = source.match
sre_parse.py(403):     _len = len
sre_parse.py(404):     PATTERNENDERS = _PATTERNENDERS
sre_parse.py(405):     ASSERTCHARS = _ASSERTCHARS
sre_parse.py(406):     LOOKBEHINDASSERTCHARS = _LOOKBEHINDASSERTCHARS
sre_parse.py(407):     REPEATCODES = _REPEATCODES
sre_parse.py(409):     while 1:
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(413):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(199):             try:
sre_parse.py(200):                 c = self.string[self.index + 1]
sre_parse.py(203):             char = char + c
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(414):         if this is None:
sre_parse.py(417):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(428):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(431):         elif this == "[":
sre_parse.py(433):             set = []
sre_parse.py(434):             setappend = set.append
sre_parse.py(437):             if sourcematch("^"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(211):         return 0
sre_parse.py(440):             start = set[:]
sre_parse.py(441):             while 1:
sre_parse.py(442):                 this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(443):                 if this == "]" and set != start:
sre_parse.py(445):                 elif this and this[0] == "\\":
sre_parse.py(446):                     code1 = _class_escape(source, this)
 --- modulename: sre_parse, funcname: _class_escape
sre_parse.py(238):     code = ESCAPES.get(escape)
sre_parse.py(239):     if code:
sre_parse.py(241):     code = CATEGORIES.get(escape)
sre_parse.py(242):     if code and code[0] == IN:
sre_parse.py(244):     try:
sre_parse.py(245):         c = escape[1:2]
sre_parse.py(246):         if c == "x":
sre_parse.py(248):             while source.next in HEXDIGITS and len(escape) < 4:
sre_parse.py(249):                 escape = escape + source.get()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(248):             while source.next in HEXDIGITS and len(escape) < 4:
sre_parse.py(249):                 escape = escape + source.get()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(248):             while source.next in HEXDIGITS and len(escape) < 4:
sre_parse.py(250):             escape = escape[2:]
sre_parse.py(251):             if len(escape) != 2:
sre_parse.py(253):             return LITERAL, int(escape, 16) & 0xff
sre_parse.py(451):                 if sourcematch("-"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(208):             if skip:
sre_parse.py(209):                 self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(199):             try:
sre_parse.py(200):                 c = self.string[self.index + 1]
sre_parse.py(203):             char = char + c
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(210):             return 1
sre_parse.py(453):                     this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(454):                     if this == "]":
sre_parse.py(460):                     elif this:
sre_parse.py(461):                         if this[0] == "\\":
sre_parse.py(462):                             code2 = _class_escape(source, this)
 --- modulename: sre_parse, funcname: _class_escape
sre_parse.py(238):     code = ESCAPES.get(escape)
sre_parse.py(239):     if code:
sre_parse.py(241):     code = CATEGORIES.get(escape)
sre_parse.py(242):     if code and code[0] == IN:
sre_parse.py(244):     try:
sre_parse.py(245):         c = escape[1:2]
sre_parse.py(246):         if c == "x":
sre_parse.py(248):             while source.next in HEXDIGITS and len(escape) < 4:
sre_parse.py(249):                 escape = escape + source.get()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(248):             while source.next in HEXDIGITS and len(escape) < 4:
sre_parse.py(249):                 escape = escape + source.get()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(199):             try:
sre_parse.py(200):                 c = self.string[self.index + 1]
sre_parse.py(203):             char = char + c
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(248):             while source.next in HEXDIGITS and len(escape) < 4:
sre_parse.py(250):             escape = escape[2:]
sre_parse.py(251):             if len(escape) != 2:
sre_parse.py(253):             return LITERAL, int(escape, 16) & 0xff
sre_parse.py(465):                         if code1[0] != LITERAL or code2[0] != LITERAL:
sre_parse.py(467):                         lo = code1[1]
sre_parse.py(468):                         hi = code2[1]
sre_parse.py(469):                         if hi < lo:
sre_parse.py(471):                         setappend((RANGE, (lo, hi)))
sre_parse.py(442):                 this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(443):                 if this == "]" and set != start:
sre_parse.py(445):                 elif this and this[0] == "\\":
sre_parse.py(446):                     code1 = _class_escape(source, this)
 --- modulename: sre_parse, funcname: _class_escape
sre_parse.py(238):     code = ESCAPES.get(escape)
sre_parse.py(239):     if code:
sre_parse.py(240):         return code
sre_parse.py(451):                 if sourcematch("-"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(211):         return 0
sre_parse.py(475):                     if code1[0] is IN:
sre_parse.py(477):                     setappend(code1)
sre_parse.py(442):                 this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(199):             try:
sre_parse.py(200):                 c = self.string[self.index + 1]
sre_parse.py(203):             char = char + c
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(443):                 if this == "]" and set != start:
sre_parse.py(445):                 elif this and this[0] == "\\":
sre_parse.py(447):                 elif this:
sre_parse.py(448):                     code1 = LITERAL, ord(this)
sre_parse.py(451):                 if sourcematch("-"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(211):         return 0
sre_parse.py(475):                     if code1[0] is IN:
sre_parse.py(477):                     setappend(code1)
sre_parse.py(442):                 this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(199):             try:
sre_parse.py(200):                 c = self.string[self.index + 1]
sre_parse.py(203):             char = char + c
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(443):                 if this == "]" and set != start:
sre_parse.py(445):                 elif this and this[0] == "\\":
sre_parse.py(446):                     code1 = _class_escape(source, this)
 --- modulename: sre_parse, funcname: _class_escape
sre_parse.py(238):     code = ESCAPES.get(escape)
sre_parse.py(239):     if code:
sre_parse.py(240):         return code
sre_parse.py(451):                 if sourcematch("-"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(211):         return 0
sre_parse.py(475):                     if code1[0] is IN:
sre_parse.py(477):                     setappend(code1)
sre_parse.py(442):                 this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(199):             try:
sre_parse.py(200):                 c = self.string[self.index + 1]
sre_parse.py(203):             char = char + c
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(443):                 if this == "]" and set != start:
sre_parse.py(445):                 elif this and this[0] == "\\":
sre_parse.py(446):                     code1 = _class_escape(source, this)
 --- modulename: sre_parse, funcname: _class_escape
sre_parse.py(238):     code = ESCAPES.get(escape)
sre_parse.py(239):     if code:
sre_parse.py(240):         return code
sre_parse.py(451):                 if sourcematch("-"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(211):         return 0
sre_parse.py(475):                     if code1[0] is IN:
sre_parse.py(477):                     setappend(code1)
sre_parse.py(442):                 this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(199):             try:
sre_parse.py(200):                 c = self.string[self.index + 1]
sre_parse.py(203):             char = char + c
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(443):                 if this == "]" and set != start:
sre_parse.py(445):                 elif this and this[0] == "\\":
sre_parse.py(446):                     code1 = _class_escape(source, this)
 --- modulename: sre_parse, funcname: _class_escape
sre_parse.py(238):     code = ESCAPES.get(escape)
sre_parse.py(239):     if code:
sre_parse.py(240):         return code
sre_parse.py(451):                 if sourcematch("-"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(211):         return 0
sre_parse.py(475):                     if code1[0] is IN:
sre_parse.py(477):                     setappend(code1)
sre_parse.py(442):                 this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(199):             try:
sre_parse.py(200):                 c = self.string[self.index + 1]
sre_parse.py(203):             char = char + c
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(443):                 if this == "]" and set != start:
sre_parse.py(445):                 elif this and this[0] == "\\":
sre_parse.py(446):                     code1 = _class_escape(source, this)
 --- modulename: sre_parse, funcname: _class_escape
sre_parse.py(238):     code = ESCAPES.get(escape)
sre_parse.py(239):     if code:
sre_parse.py(240):         return code
sre_parse.py(451):                 if sourcematch("-"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(211):         return 0
sre_parse.py(475):                     if code1[0] is IN:
sre_parse.py(477):                     setappend(code1)
sre_parse.py(442):                 this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(443):                 if this == "]" and set != start:
sre_parse.py(445):                 elif this and this[0] == "\\":
sre_parse.py(446):                     code1 = _class_escape(source, this)
 --- modulename: sre_parse, funcname: _class_escape
sre_parse.py(238):     code = ESCAPES.get(escape)
sre_parse.py(239):     if code:
sre_parse.py(240):         return code
sre_parse.py(451):                 if sourcematch("-"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(211):         return 0
sre_parse.py(475):                     if code1[0] is IN:
sre_parse.py(477):                     setappend(code1)
sre_parse.py(442):                 this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(195):             self.next = None
sre_parse.py(196):             return
sre_parse.py(215):         return this
sre_parse.py(443):                 if this == "]" and set != start:
sre_parse.py(444):                     break
sre_parse.py(480):             if _len(set)==1 and set[0][0] is LITERAL:
sre_parse.py(482):             elif _len(set)==2 and set[0][0] is NEGATE and set[1][0] is LITERAL:
sre_parse.py(486):                 subpatternappend((IN, set))
 --- modulename: sre_parse, funcname: append
sre_parse.py(150):         self.data.append(code)
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(413):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(195):             self.next = None
sre_parse.py(196):             return
sre_parse.py(215):         return this
sre_parse.py(414):         if this is None:
sre_parse.py(415):             break # end of pattern
sre_parse.py(704):     return subpattern
sre_parse.py(325):         if sourcematch("|"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(211):         return 0
sre_parse.py(327):         if not nested:
sre_parse.py(328):             break
sre_parse.py(334):     if len(items) == 1:
sre_parse.py(335):         return items[0]
sre_parse.py(718):     tail = source.get()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(195):             self.next = None
sre_parse.py(196):             return
sre_parse.py(215):         return this
sre_parse.py(719):     if tail == ")":
sre_parse.py(721):     elif tail:
sre_parse.py(724):     if not (flags & SRE_FLAG_VERBOSE) and p.pattern.flags & SRE_FLAG_VERBOSE:
sre_parse.py(729):     if flags & SRE_FLAG_DEBUG:
sre_parse.py(732):     return p
sre_compile.py(576):     code = _code(p, flags)
 --- modulename: sre_compile, funcname: _code
sre_compile.py(554):     flags = p.pattern.flags | flags
sre_compile.py(555):     code = []
sre_compile.py(558):     _compile_info(code, p, flags)
 --- modulename: sre_compile, funcname: _compile_info
sre_compile.py(437):     lo, hi = pattern.getwidth()
 --- modulename: sre_parse, funcname: getwidth
sre_parse.py(153):         if self.width:
sre_parse.py(155):         lo = hi = 0
sre_parse.py(156):         UNITCODES = (ANY, RANGE, IN, LITERAL, NOT_LITERAL, CATEGORY)
sre_parse.py(157):         REPEATCODES = (MIN_REPEAT, MAX_REPEAT)
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(159):             if op is BRANCH:
sre_parse.py(168):             elif op is CALL:
sre_parse.py(172):             elif op is SUBPATTERN:
sre_parse.py(176):             elif op in REPEATCODES:
sre_parse.py(180):             elif op in UNITCODES:
sre_parse.py(181):                 lo = lo + 1
sre_parse.py(182):                 hi = hi + 1
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(185):         self.width = min(lo, MAXREPEAT - 1), min(hi, MAXREPEAT)
sre_parse.py(186):         return self.width
sre_compile.py(438):     if lo == 0:
sre_compile.py(441):     prefix = []
sre_compile.py(442):     prefixappend = prefix.append
sre_compile.py(443):     prefix_skip = 0
sre_compile.py(444):     charset = [] # not used
sre_compile.py(445):     charsetappend = charset.append
sre_compile.py(446):     if not (flags & SRE_FLAG_IGNORECASE):
sre_compile.py(448):         for op, av in pattern.data:
sre_compile.py(449):             if op is LITERAL:
sre_compile.py(453):             elif op is SUBPATTERN and len(av[1]) == 1:
sre_compile.py(460):                 break
sre_compile.py(462):         if not prefix and pattern.data:
sre_compile.py(463):             op, av = pattern.data[0]
sre_compile.py(464):             if op is SUBPATTERN and av[1]:
sre_compile.py(481):             elif op is BRANCH:
sre_compile.py(494):             elif op is IN:
sre_compile.py(495):                 charset = av
sre_compile.py(501):     emit = code.append
sre_compile.py(502):     emit(OPCODES[INFO])
sre_compile.py(503):     skip = len(code); emit(0)
sre_compile.py(505):     mask = 0
sre_compile.py(506):     if prefix:
sre_compile.py(510):     elif charset:
sre_compile.py(511):         mask = mask + SRE_INFO_CHARSET
sre_compile.py(512):     emit(mask)
sre_compile.py(514):     if lo < MAXCODE:
sre_compile.py(515):         emit(lo)
sre_compile.py(519):     if hi < MAXCODE:
sre_compile.py(520):         emit(hi)
sre_compile.py(524):     if prefix:
sre_compile.py(535):     elif charset:
sre_compile.py(536):         _compile_charset(charset, flags, code)
 --- modulename: sre_compile, funcname: _compile_charset
sre_compile.py(230):     emit = code.append
sre_compile.py(231):     for op, av in _optimize_charset(charset, fixup, fixes,
sre_compile.py(232):                                     flags & SRE_FLAG_UNICODE):
 --- modulename: sre_compile, funcname: _optimize_charset
sre_compile.py(258):     out = []
sre_compile.py(259):     tail = []
sre_compile.py(260):     charmap = bytearray(256)
sre_compile.py(261):     for op, av in charset:
sre_compile.py(262):         while True:
sre_compile.py(263):             try:
sre_compile.py(264):                 if op is LITERAL:
sre_compile.py(273):                 elif op is RANGE:
sre_compile.py(274):                     r = range(av[0], av[1]+1)
sre_compile.py(275):                     if fixup:
sre_compile.py(277):                     if fixup and fixes:
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(310):             break
sre_compile.py(261):     for op, av in charset:
sre_compile.py(262):         while True:
sre_compile.py(263):             try:
sre_compile.py(264):                 if op is LITERAL:
sre_compile.py(265):                     if fixup:
sre_compile.py(272):                         charmap[av] = 1
sre_compile.py(310):             break
sre_compile.py(261):     for op, av in charset:
sre_compile.py(262):         while True:
sre_compile.py(263):             try:
sre_compile.py(264):                 if op is LITERAL:
sre_compile.py(265):                     if fixup:
sre_compile.py(272):                         charmap[av] = 1
sre_compile.py(310):             break
sre_compile.py(261):     for op, av in charset:
sre_compile.py(262):         while True:
sre_compile.py(263):             try:
sre_compile.py(264):                 if op is LITERAL:
sre_compile.py(265):                     if fixup:
sre_compile.py(272):                         charmap[av] = 1
sre_compile.py(310):             break
sre_compile.py(261):     for op, av in charset:
sre_compile.py(262):         while True:
sre_compile.py(263):             try:
sre_compile.py(264):                 if op is LITERAL:
sre_compile.py(265):                     if fixup:
sre_compile.py(272):                         charmap[av] = 1
sre_compile.py(310):             break
sre_compile.py(261):     for op, av in charset:
sre_compile.py(262):         while True:
sre_compile.py(263):             try:
sre_compile.py(264):                 if op is LITERAL:
sre_compile.py(265):                     if fixup:
sre_compile.py(272):                         charmap[av] = 1
sre_compile.py(310):             break
sre_compile.py(261):     for op, av in charset:
sre_compile.py(262):         while True:
sre_compile.py(263):             try:
sre_compile.py(264):                 if op is LITERAL:
sre_compile.py(265):                     if fixup:
sre_compile.py(272):                         charmap[av] = 1
sre_compile.py(310):             break
sre_compile.py(261):     for op, av in charset:
sre_compile.py(262):         while True:
sre_compile.py(263):             try:
sre_compile.py(264):                 if op is LITERAL:
sre_compile.py(265):                     if fixup:
sre_compile.py(272):                         charmap[av] = 1
sre_compile.py(310):             break
sre_compile.py(261):     for op, av in charset:
sre_compile.py(313):     runs = []
sre_compile.py(314):     q = 0
sre_compile.py(315):     while True:
sre_compile.py(316):         p = charmap.find(b'\1', q)
sre_compile.py(317):         if p < 0:
sre_compile.py(319):         if len(runs) >= 2:
sre_compile.py(322):         q = charmap.find(b'\0', p)
sre_compile.py(323):         if q < 0:
sre_compile.py(326):         runs.append((p, q))
sre_compile.py(315):     while True:
sre_compile.py(316):         p = charmap.find(b'\1', q)
sre_compile.py(317):         if p < 0:
sre_compile.py(319):         if len(runs) >= 2:
sre_compile.py(322):         q = charmap.find(b'\0', p)
sre_compile.py(323):         if q < 0:
sre_compile.py(326):         runs.append((p, q))
sre_compile.py(315):     while True:
sre_compile.py(316):         p = charmap.find(b'\1', q)
sre_compile.py(317):         if p < 0:
sre_compile.py(319):         if len(runs) >= 2:
sre_compile.py(320):             runs = None
sre_compile.py(321):             break
sre_compile.py(327):     if runs is not None:
sre_compile.py(342):     if len(charmap) == 256:
sre_compile.py(343):         data = _mk_bitmap(charmap)
 --- modulename: sre_compile, funcname: _mk_bitmap
sre_compile.py(412):     s = bytes(bits).translate(_BITS_TRANS)[::-1]
sre_compile.py(413):     return [_int(s[i - _CODEBITS: i], 2)
sre_compile.py(414):             for i in range(len(s), 0, -_CODEBITS)]
sre_compile.py(414):             for i in range(len(s), 0, -_CODEBITS)]
sre_compile.py(414):             for i in range(len(s), 0, -_CODEBITS)]
sre_compile.py(414):             for i in range(len(s), 0, -_CODEBITS)]
sre_compile.py(414):             for i in range(len(s), 0, -_CODEBITS)]
sre_compile.py(414):             for i in range(len(s), 0, -_CODEBITS)]
sre_compile.py(414):             for i in range(len(s), 0, -_CODEBITS)]
sre_compile.py(414):             for i in range(len(s), 0, -_CODEBITS)]
sre_compile.py(414):             for i in range(len(s), 0, -_CODEBITS)]
sre_compile.py(344):         out.append((CHARSET, data))
sre_compile.py(345):         out += tail
sre_compile.py(346):         return out
sre_compile.py(233):         emit(OPCODES[op])
sre_compile.py(234):         if op is NEGATE:
sre_compile.py(236):         elif op is LITERAL:
sre_compile.py(238):         elif op is RANGE:
sre_compile.py(241):         elif op is CHARSET:
sre_compile.py(242):             code.extend(av)
sre_compile.py(232):                                     flags & SRE_FLAG_UNICODE):
sre_compile.py(254):     emit(OPCODES[FAILURE])
sre_compile.py(537):     code[skip] = len(code) - skip
sre_compile.py(561):     _compile(code, p.data, flags)
 --- modulename: sre_compile, funcname: _compile
sre_compile.py(66):     emit = code.append
sre_compile.py(67):     _len = len
sre_compile.py(68):     LITERAL_CODES = _LITERAL_CODES
sre_compile.py(69):     REPEATING_CODES = _REPEATING_CODES
sre_compile.py(70):     SUCCESS_CODES = _SUCCESS_CODES
sre_compile.py(71):     ASSERT_CODES = _ASSERT_CODES
sre_compile.py(72):     if (flags & SRE_FLAG_IGNORECASE and
sre_compile.py(77):         fixes = None
sre_compile.py(78):     for op, av in pattern:
sre_compile.py(79):         if op in LITERAL_CODES:
sre_compile.py(98):         elif op is IN:
sre_compile.py(99):             if flags & SRE_FLAG_IGNORECASE:
sre_compile.py(104):                 emit(OPCODES[op])
sre_compile.py(105):                 fixup = None
sre_compile.py(106):             skip = _len(code); emit(0)
sre_compile.py(107):             _compile_charset(av, flags, code, fixup, fixes)
 --- modulename: sre_compile, funcname: _compile_charset
sre_compile.py(230):     emit = code.append
sre_compile.py(231):     for op, av in _optimize_charset(charset, fixup, fixes,
sre_compile.py(232):                                     flags & SRE_FLAG_UNICODE):
 --- modulename: sre_compile, funcname: _optimize_charset
sre_compile.py(258):     out = []
sre_compile.py(259):     tail = []
sre_compile.py(260):     charmap = bytearray(256)
sre_compile.py(261):     for op, av in charset:
sre_compile.py(262):         while True:
sre_compile.py(263):             try:
sre_compile.py(264):                 if op is LITERAL:
sre_compile.py(273):                 elif op is RANGE:
sre_compile.py(274):                     r = range(av[0], av[1]+1)
sre_compile.py(275):                     if fixup:
sre_compile.py(277):                     if fixup and fixes:
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(310):             break
sre_compile.py(261):     for op, av in charset:
sre_compile.py(262):         while True:
sre_compile.py(263):             try:
sre_compile.py(264):                 if op is LITERAL:
sre_compile.py(265):                     if fixup:
sre_compile.py(272):                         charmap[av] = 1
sre_compile.py(310):             break
sre_compile.py(261):     for op, av in charset:
sre_compile.py(262):         while True:
sre_compile.py(263):             try:
sre_compile.py(264):                 if op is LITERAL:
sre_compile.py(265):                     if fixup:
sre_compile.py(272):                         charmap[av] = 1
sre_compile.py(310):             break
sre_compile.py(261):     for op, av in charset:
sre_compile.py(262):         while True:
sre_compile.py(263):             try:
sre_compile.py(264):                 if op is LITERAL:
sre_compile.py(265):                     if fixup:
sre_compile.py(272):                         charmap[av] = 1
sre_compile.py(310):             break
sre_compile.py(261):     for op, av in charset:
sre_compile.py(262):         while True:
sre_compile.py(263):             try:
sre_compile.py(264):                 if op is LITERAL:
sre_compile.py(265):                     if fixup:
sre_compile.py(272):                         charmap[av] = 1
sre_compile.py(310):             break
sre_compile.py(261):     for op, av in charset:
sre_compile.py(262):         while True:
sre_compile.py(263):             try:
sre_compile.py(264):                 if op is LITERAL:
sre_compile.py(265):                     if fixup:
sre_compile.py(272):                         charmap[av] = 1
sre_compile.py(310):             break
sre_compile.py(261):     for op, av in charset:
sre_compile.py(262):         while True:
sre_compile.py(263):             try:
sre_compile.py(264):                 if op is LITERAL:
sre_compile.py(265):                     if fixup:
sre_compile.py(272):                         charmap[av] = 1
sre_compile.py(310):             break
sre_compile.py(261):     for op, av in charset:
sre_compile.py(262):         while True:
sre_compile.py(263):             try:
sre_compile.py(264):                 if op is LITERAL:
sre_compile.py(265):                     if fixup:
sre_compile.py(272):                         charmap[av] = 1
sre_compile.py(310):             break
sre_compile.py(261):     for op, av in charset:
sre_compile.py(313):     runs = []
sre_compile.py(314):     q = 0
sre_compile.py(315):     while True:
sre_compile.py(316):         p = charmap.find(b'\1', q)
sre_compile.py(317):         if p < 0:
sre_compile.py(319):         if len(runs) >= 2:
sre_compile.py(322):         q = charmap.find(b'\0', p)
sre_compile.py(323):         if q < 0:
sre_compile.py(326):         runs.append((p, q))
sre_compile.py(315):     while True:
sre_compile.py(316):         p = charmap.find(b'\1', q)
sre_compile.py(317):         if p < 0:
sre_compile.py(319):         if len(runs) >= 2:
sre_compile.py(322):         q = charmap.find(b'\0', p)
sre_compile.py(323):         if q < 0:
sre_compile.py(326):         runs.append((p, q))
sre_compile.py(315):     while True:
sre_compile.py(316):         p = charmap.find(b'\1', q)
sre_compile.py(317):         if p < 0:
sre_compile.py(319):         if len(runs) >= 2:
sre_compile.py(320):             runs = None
sre_compile.py(321):             break
sre_compile.py(327):     if runs is not None:
sre_compile.py(342):     if len(charmap) == 256:
sre_compile.py(343):         data = _mk_bitmap(charmap)
 --- modulename: sre_compile, funcname: _mk_bitmap
sre_compile.py(412):     s = bytes(bits).translate(_BITS_TRANS)[::-1]
sre_compile.py(413):     return [_int(s[i - _CODEBITS: i], 2)
sre_compile.py(414):             for i in range(len(s), 0, -_CODEBITS)]
sre_compile.py(414):             for i in range(len(s), 0, -_CODEBITS)]
sre_compile.py(414):             for i in range(len(s), 0, -_CODEBITS)]
sre_compile.py(414):             for i in range(len(s), 0, -_CODEBITS)]
sre_compile.py(414):             for i in range(len(s), 0, -_CODEBITS)]
sre_compile.py(414):             for i in range(len(s), 0, -_CODEBITS)]
sre_compile.py(414):             for i in range(len(s), 0, -_CODEBITS)]
sre_compile.py(414):             for i in range(len(s), 0, -_CODEBITS)]
sre_compile.py(414):             for i in range(len(s), 0, -_CODEBITS)]
sre_compile.py(344):         out.append((CHARSET, data))
sre_compile.py(345):         out += tail
sre_compile.py(346):         return out
sre_compile.py(233):         emit(OPCODES[op])
sre_compile.py(234):         if op is NEGATE:
sre_compile.py(236):         elif op is LITERAL:
sre_compile.py(238):         elif op is RANGE:
sre_compile.py(241):         elif op is CHARSET:
sre_compile.py(242):             code.extend(av)
sre_compile.py(232):                                     flags & SRE_FLAG_UNICODE):
sre_compile.py(254):     emit(OPCODES[FAILURE])
sre_compile.py(108):             code[skip] = _len(code) - skip
sre_compile.py(78):     for op, av in pattern:
sre_compile.py(563):     code.append(OPCODES[SUCCESS])
sre_compile.py(565):     return code
sre_compile.py(581):     if p.pattern.groups > 100:
sre_compile.py(587):     groupindex = p.pattern.groupdict
sre_compile.py(588):     indexgroup = [None] * p.pattern.groups
sre_compile.py(589):     for k, i in groupindex.items():
sre_compile.py(592):     return _sre.compile(
sre_compile.py(593):         pattern, flags | p.pattern.flags, code,
sre_compile.py(594):         p.pattern.groups-1,
sre_compile.py(595):         groupindex, indexgroup
re.py(252):     if not bypass_cache:
re.py(253):         if len(_cache) >= _MAXCACHE:
re.py(255):         if p.flags & LOCALE:
re.py(260):             loc = None
re.py(261):         _cache[cachekey] = p, loc
re.py(262):     return p
encoder.py(15): ESCAPE_ASCII = re.compile(r'([\\"]|[^\ -~])')
 --- modulename: re, funcname: compile
re.py(194):     return _compile(pattern, flags)
 --- modulename: re, funcname: _compile
re.py(232):     pattern, flags = key
re.py(233):     bypass_cache = flags & DEBUG
re.py(234):     if not bypass_cache:
re.py(235):         cachekey = (type(key[0]),) + key
re.py(236):         try:
re.py(237):             p, loc = _cache[cachekey]
re.py(240):         except KeyError:
re.py(241):             pass
re.py(242):     if isinstance(pattern, _pattern_type):
re.py(246):     if not sre_compile.isstring(pattern):
 --- modulename: sre_compile, funcname: isstring
sre_compile.py(547):     for tp in STRING_TYPES:
sre_compile.py(548):         if isinstance(obj, tp):
sre_compile.py(549):             return 1
re.py(248):     try:
re.py(249):         p = sre_compile.compile(pattern, flags)
 --- modulename: sre_compile, funcname: compile
sre_compile.py(570):     if isstring(p):
 --- modulename: sre_compile, funcname: isstring
sre_compile.py(547):     for tp in STRING_TYPES:
sre_compile.py(548):         if isinstance(obj, tp):
sre_compile.py(549):             return 1
sre_compile.py(571):         pattern = p
sre_compile.py(572):         p = sre_parse.parse(p, flags)
 --- modulename: sre_parse, funcname: parse
sre_parse.py(709):     source = Tokenizer(str)
 --- modulename: sre_parse, funcname: __init__
sre_parse.py(190):         self.string = string
sre_parse.py(191):         self.index = 0
sre_parse.py(192):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(711):     if pattern is None:
sre_parse.py(712):         pattern = Pattern()
 --- modulename: sre_parse, funcname: __init__
sre_parse.py(68):         self.flags = 0
sre_parse.py(69):         self.open = []
sre_parse.py(70):         self.groups = 1
sre_parse.py(71):         self.groupdict = {}
sre_parse.py(72):         self.lookbehind = 0
sre_parse.py(713):     pattern.flags = flags
sre_parse.py(714):     pattern.str = str
sre_parse.py(716):     p = _parse_sub(source, pattern, 0)
 --- modulename: sre_parse, funcname: _parse_sub
sre_parse.py(320):     items = []
sre_parse.py(321):     itemsappend = items.append
sre_parse.py(322):     sourcematch = source.match
sre_parse.py(323):     while 1:
sre_parse.py(324):         itemsappend(_parse(source, state))
 --- modulename: sre_parse, funcname: _parse
sre_parse.py(397):     subpattern = SubPattern(state)
 --- modulename: sre_parse, funcname: __init__
sre_parse.py(93):         self.pattern = pattern
sre_parse.py(94):         if data is None:
sre_parse.py(95):             data = []
sre_parse.py(96):         self.data = data
sre_parse.py(97):         self.width = None
sre_parse.py(400):     subpatternappend = subpattern.append
sre_parse.py(401):     sourceget = source.get
sre_parse.py(402):     sourcematch = source.match
sre_parse.py(403):     _len = len
sre_parse.py(404):     PATTERNENDERS = _PATTERNENDERS
sre_parse.py(405):     ASSERTCHARS = _ASSERTCHARS
sre_parse.py(406):     LOOKBEHINDASSERTCHARS = _LOOKBEHINDASSERTCHARS
sre_parse.py(407):     REPEATCODES = _REPEATCODES
sre_parse.py(409):     while 1:
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(413):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(414):         if this is None:
sre_parse.py(417):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(428):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(431):         elif this == "[":
sre_parse.py(488):         elif this and this[0] in REPEAT_CHARS:
sre_parse.py(541):         elif this == ".":
sre_parse.py(544):         elif this == "(":
sre_parse.py(545):             group = 1
sre_parse.py(546):             name = None
sre_parse.py(547):             condgroup = None
sre_parse.py(548):             if sourcematch("?"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(211):         return 0
sre_parse.py(666):             if group:
sre_parse.py(668):                 if group == 2:
sre_parse.py(672):                     group = state.opengroup(name)
 --- modulename: sre_parse, funcname: opengroup
sre_parse.py(75):         gid = self.groups
sre_parse.py(76):         self.groups = gid + 1
sre_parse.py(77):         if name is not None:
sre_parse.py(83):         self.open.append(gid)
sre_parse.py(84):         return gid
sre_parse.py(673):                 if condgroup:
sre_parse.py(676):                     p = _parse_sub(source, state)
 --- modulename: sre_parse, funcname: _parse_sub
sre_parse.py(320):     items = []
sre_parse.py(321):     itemsappend = items.append
sre_parse.py(322):     sourcematch = source.match
sre_parse.py(323):     while 1:
sre_parse.py(324):         itemsappend(_parse(source, state))
 --- modulename: sre_parse, funcname: _parse
sre_parse.py(397):     subpattern = SubPattern(state)
 --- modulename: sre_parse, funcname: __init__
sre_parse.py(93):         self.pattern = pattern
sre_parse.py(94):         if data is None:
sre_parse.py(95):             data = []
sre_parse.py(96):         self.data = data
sre_parse.py(97):         self.width = None
sre_parse.py(400):     subpatternappend = subpattern.append
sre_parse.py(401):     sourceget = source.get
sre_parse.py(402):     sourcematch = source.match
sre_parse.py(403):     _len = len
sre_parse.py(404):     PATTERNENDERS = _PATTERNENDERS
sre_parse.py(405):     ASSERTCHARS = _ASSERTCHARS
sre_parse.py(406):     LOOKBEHINDASSERTCHARS = _LOOKBEHINDASSERTCHARS
sre_parse.py(407):     REPEATCODES = _REPEATCODES
sre_parse.py(409):     while 1:
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(413):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(199):             try:
sre_parse.py(200):                 c = self.string[self.index + 1]
sre_parse.py(203):             char = char + c
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(414):         if this is None:
sre_parse.py(417):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(428):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(431):         elif this == "[":
sre_parse.py(433):             set = []
sre_parse.py(434):             setappend = set.append
sre_parse.py(437):             if sourcematch("^"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(211):         return 0
sre_parse.py(440):             start = set[:]
sre_parse.py(441):             while 1:
sre_parse.py(442):                 this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(443):                 if this == "]" and set != start:
sre_parse.py(445):                 elif this and this[0] == "\\":
sre_parse.py(446):                     code1 = _class_escape(source, this)
 --- modulename: sre_parse, funcname: _class_escape
sre_parse.py(238):     code = ESCAPES.get(escape)
sre_parse.py(239):     if code:
sre_parse.py(240):         return code
sre_parse.py(451):                 if sourcematch("-"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(211):         return 0
sre_parse.py(475):                     if code1[0] is IN:
sre_parse.py(477):                     setappend(code1)
sre_parse.py(442):                 this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(443):                 if this == "]" and set != start:
sre_parse.py(445):                 elif this and this[0] == "\\":
sre_parse.py(447):                 elif this:
sre_parse.py(448):                     code1 = LITERAL, ord(this)
sre_parse.py(451):                 if sourcematch("-"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(211):         return 0
sre_parse.py(475):                     if code1[0] is IN:
sre_parse.py(477):                     setappend(code1)
sre_parse.py(442):                 this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(443):                 if this == "]" and set != start:
sre_parse.py(444):                     break
sre_parse.py(480):             if _len(set)==1 and set[0][0] is LITERAL:
sre_parse.py(482):             elif _len(set)==2 and set[0][0] is NEGATE and set[1][0] is LITERAL:
sre_parse.py(486):                 subpatternappend((IN, set))
 --- modulename: sre_parse, funcname: append
sre_parse.py(150):         self.data.append(code)
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(412):             break # end of subpattern
sre_parse.py(704):     return subpattern
sre_parse.py(325):         if sourcematch("|"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(208):             if skip:
sre_parse.py(209):                 self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(210):             return 1
sre_parse.py(326):             continue
sre_parse.py(324):         itemsappend(_parse(source, state))
 --- modulename: sre_parse, funcname: _parse
sre_parse.py(397):     subpattern = SubPattern(state)
 --- modulename: sre_parse, funcname: __init__
sre_parse.py(93):         self.pattern = pattern
sre_parse.py(94):         if data is None:
sre_parse.py(95):             data = []
sre_parse.py(96):         self.data = data
sre_parse.py(97):         self.width = None
sre_parse.py(400):     subpatternappend = subpattern.append
sre_parse.py(401):     sourceget = source.get
sre_parse.py(402):     sourcematch = source.match
sre_parse.py(403):     _len = len
sre_parse.py(404):     PATTERNENDERS = _PATTERNENDERS
sre_parse.py(405):     ASSERTCHARS = _ASSERTCHARS
sre_parse.py(406):     LOOKBEHINDASSERTCHARS = _LOOKBEHINDASSERTCHARS
sre_parse.py(407):     REPEATCODES = _REPEATCODES
sre_parse.py(409):     while 1:
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(413):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(414):         if this is None:
sre_parse.py(417):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(428):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(431):         elif this == "[":
sre_parse.py(433):             set = []
sre_parse.py(434):             setappend = set.append
sre_parse.py(437):             if sourcematch("^"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(208):             if skip:
sre_parse.py(209):                 self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(199):             try:
sre_parse.py(200):                 c = self.string[self.index + 1]
sre_parse.py(203):             char = char + c
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(210):             return 1
sre_parse.py(438):                 setappend((NEGATE, None))
sre_parse.py(440):             start = set[:]
sre_parse.py(441):             while 1:
sre_parse.py(442):                 this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(443):                 if this == "]" and set != start:
sre_parse.py(445):                 elif this and this[0] == "\\":
sre_parse.py(446):                     code1 = _class_escape(source, this)
 --- modulename: sre_parse, funcname: _class_escape
sre_parse.py(238):     code = ESCAPES.get(escape)
sre_parse.py(239):     if code:
sre_parse.py(241):     code = CATEGORIES.get(escape)
sre_parse.py(242):     if code and code[0] == IN:
sre_parse.py(244):     try:
sre_parse.py(245):         c = escape[1:2]
sre_parse.py(246):         if c == "x":
sre_parse.py(254):         elif c in OCTDIGITS:
sre_parse.py(260):         elif c in DIGITS:
sre_parse.py(262):         if len(escape) == 2:
sre_parse.py(263):             return LITERAL, ord(escape[1])
sre_parse.py(451):                 if sourcematch("-"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(208):             if skip:
sre_parse.py(209):                 self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(210):             return 1
sre_parse.py(453):                     this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(454):                     if this == "]":
sre_parse.py(460):                     elif this:
sre_parse.py(461):                         if this[0] == "\\":
sre_parse.py(464):                             code2 = LITERAL, ord(this)
sre_parse.py(465):                         if code1[0] != LITERAL or code2[0] != LITERAL:
sre_parse.py(467):                         lo = code1[1]
sre_parse.py(468):                         hi = code2[1]
sre_parse.py(469):                         if hi < lo:
sre_parse.py(471):                         setappend((RANGE, (lo, hi)))
sre_parse.py(442):                 this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(443):                 if this == "]" and set != start:
sre_parse.py(444):                     break
sre_parse.py(480):             if _len(set)==1 and set[0][0] is LITERAL:
sre_parse.py(482):             elif _len(set)==2 and set[0][0] is NEGATE and set[1][0] is LITERAL:
sre_parse.py(486):                 subpatternappend((IN, set))
 --- modulename: sre_parse, funcname: append
sre_parse.py(150):         self.data.append(code)
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(412):             break # end of subpattern
sre_parse.py(704):     return subpattern
sre_parse.py(325):         if sourcematch("|"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(211):         return 0
sre_parse.py(327):         if not nested:
sre_parse.py(329):         if not source.next or sourcematch(")", 0):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(208):             if skip:
sre_parse.py(210):             return 1
sre_parse.py(330):             break
sre_parse.py(334):     if len(items) == 1:
sre_parse.py(337):     subpattern = SubPattern(state)
 --- modulename: sre_parse, funcname: __init__
sre_parse.py(93):         self.pattern = pattern
sre_parse.py(94):         if data is None:
sre_parse.py(95):             data = []
sre_parse.py(96):         self.data = data
sre_parse.py(97):         self.width = None
sre_parse.py(338):     subpatternappend = subpattern.append
sre_parse.py(341):     while 1:
sre_parse.py(342):         prefix = None
sre_parse.py(343):         for item in items:
sre_parse.py(344):             if not item:
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(138):         return len(self.data)
sre_parse.py(346):             if prefix is None:
sre_parse.py(347):                 prefix = item[0]
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_parse.py(343):         for item in items:
sre_parse.py(344):             if not item:
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(138):         return len(self.data)
sre_parse.py(346):             if prefix is None:
sre_parse.py(348):             elif item[0] != prefix:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_parse.py(349):                 break
sre_parse.py(357):         break
sre_parse.py(360):     for item in items:
sre_parse.py(361):         if len(item) != 1 or item[0][0] != LITERAL:
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(138):         return len(self.data)
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_parse.py(362):             break
sre_parse.py(373):     subpattern.append((BRANCH, (None, items)))
 --- modulename: sre_parse, funcname: append
sre_parse.py(150):         self.data.append(code)
sre_parse.py(374):     return subpattern
sre_parse.py(677):                 if not sourcematch(")"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(208):             if skip:
sre_parse.py(209):                 self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(195):             self.next = None
sre_parse.py(196):             return
sre_parse.py(210):             return 1
sre_parse.py(679):                 if group is not None:
sre_parse.py(680):                     state.closegroup(group)
 --- modulename: sre_parse, funcname: closegroup
sre_parse.py(86):         self.open.remove(gid)
sre_parse.py(681):                 subpatternappend((SUBPATTERN, (group, p)))
 --- modulename: sre_parse, funcname: append
sre_parse.py(150):         self.data.append(code)
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(413):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(195):             self.next = None
sre_parse.py(196):             return
sre_parse.py(215):         return this
sre_parse.py(414):         if this is None:
sre_parse.py(415):             break # end of pattern
sre_parse.py(704):     return subpattern
sre_parse.py(325):         if sourcematch("|"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(211):         return 0
sre_parse.py(327):         if not nested:
sre_parse.py(328):             break
sre_parse.py(334):     if len(items) == 1:
sre_parse.py(335):         return items[0]
sre_parse.py(718):     tail = source.get()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(195):             self.next = None
sre_parse.py(196):             return
sre_parse.py(215):         return this
sre_parse.py(719):     if tail == ")":
sre_parse.py(721):     elif tail:
sre_parse.py(724):     if not (flags & SRE_FLAG_VERBOSE) and p.pattern.flags & SRE_FLAG_VERBOSE:
sre_parse.py(729):     if flags & SRE_FLAG_DEBUG:
sre_parse.py(732):     return p
sre_compile.py(576):     code = _code(p, flags)
 --- modulename: sre_compile, funcname: _code
sre_compile.py(554):     flags = p.pattern.flags | flags
sre_compile.py(555):     code = []
sre_compile.py(558):     _compile_info(code, p, flags)
 --- modulename: sre_compile, funcname: _compile_info
sre_compile.py(437):     lo, hi = pattern.getwidth()
 --- modulename: sre_parse, funcname: getwidth
sre_parse.py(153):         if self.width:
sre_parse.py(155):         lo = hi = 0
sre_parse.py(156):         UNITCODES = (ANY, RANGE, IN, LITERAL, NOT_LITERAL, CATEGORY)
sre_parse.py(157):         REPEATCODES = (MIN_REPEAT, MAX_REPEAT)
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(159):             if op is BRANCH:
sre_parse.py(168):             elif op is CALL:
sre_parse.py(172):             elif op is SUBPATTERN:
sre_parse.py(173):                 i, j = av[1].getwidth()
 --- modulename: sre_parse, funcname: getwidth
sre_parse.py(153):         if self.width:
sre_parse.py(155):         lo = hi = 0
sre_parse.py(156):         UNITCODES = (ANY, RANGE, IN, LITERAL, NOT_LITERAL, CATEGORY)
sre_parse.py(157):         REPEATCODES = (MIN_REPEAT, MAX_REPEAT)
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(159):             if op is BRANCH:
sre_parse.py(160):                 i = MAXREPEAT - 1
sre_parse.py(161):                 j = 0
sre_parse.py(162):                 for av in av[1]:
sre_parse.py(163):                     l, h = av.getwidth()
 --- modulename: sre_parse, funcname: getwidth
sre_parse.py(153):         if self.width:
sre_parse.py(155):         lo = hi = 0
sre_parse.py(156):         UNITCODES = (ANY, RANGE, IN, LITERAL, NOT_LITERAL, CATEGORY)
sre_parse.py(157):         REPEATCODES = (MIN_REPEAT, MAX_REPEAT)
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(159):             if op is BRANCH:
sre_parse.py(168):             elif op is CALL:
sre_parse.py(172):             elif op is SUBPATTERN:
sre_parse.py(176):             elif op in REPEATCODES:
sre_parse.py(180):             elif op in UNITCODES:
sre_parse.py(181):                 lo = lo + 1
sre_parse.py(182):                 hi = hi + 1
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(185):         self.width = min(lo, MAXREPEAT - 1), min(hi, MAXREPEAT)
sre_parse.py(186):         return self.width
sre_parse.py(164):                     i = min(i, l)
sre_parse.py(165):                     j = max(j, h)
sre_parse.py(162):                 for av in av[1]:
sre_parse.py(163):                     l, h = av.getwidth()
 --- modulename: sre_parse, funcname: getwidth
sre_parse.py(153):         if self.width:
sre_parse.py(155):         lo = hi = 0
sre_parse.py(156):         UNITCODES = (ANY, RANGE, IN, LITERAL, NOT_LITERAL, CATEGORY)
sre_parse.py(157):         REPEATCODES = (MIN_REPEAT, MAX_REPEAT)
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(159):             if op is BRANCH:
sre_parse.py(168):             elif op is CALL:
sre_parse.py(172):             elif op is SUBPATTERN:
sre_parse.py(176):             elif op in REPEATCODES:
sre_parse.py(180):             elif op in UNITCODES:
sre_parse.py(181):                 lo = lo + 1
sre_parse.py(182):                 hi = hi + 1
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(185):         self.width = min(lo, MAXREPEAT - 1), min(hi, MAXREPEAT)
sre_parse.py(186):         return self.width
sre_parse.py(164):                     i = min(i, l)
sre_parse.py(165):                     j = max(j, h)
sre_parse.py(162):                 for av in av[1]:
sre_parse.py(166):                 lo = lo + i
sre_parse.py(167):                 hi = hi + j
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(185):         self.width = min(lo, MAXREPEAT - 1), min(hi, MAXREPEAT)
sre_parse.py(186):         return self.width
sre_parse.py(174):                 lo = lo + i
sre_parse.py(175):                 hi = hi + j
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(185):         self.width = min(lo, MAXREPEAT - 1), min(hi, MAXREPEAT)
sre_parse.py(186):         return self.width
sre_compile.py(438):     if lo == 0:
sre_compile.py(441):     prefix = []
sre_compile.py(442):     prefixappend = prefix.append
sre_compile.py(443):     prefix_skip = 0
sre_compile.py(444):     charset = [] # not used
sre_compile.py(445):     charsetappend = charset.append
sre_compile.py(446):     if not (flags & SRE_FLAG_IGNORECASE):
sre_compile.py(448):         for op, av in pattern.data:
sre_compile.py(449):             if op is LITERAL:
sre_compile.py(453):             elif op is SUBPATTERN and len(av[1]) == 1:
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(138):         return len(self.data)
sre_compile.py(454):                 op, av = av[1][0]
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(455):                 if op is LITERAL:
sre_compile.py(458):                     break
sre_compile.py(462):         if not prefix and pattern.data:
sre_compile.py(463):             op, av = pattern.data[0]
sre_compile.py(464):             if op is SUBPATTERN and av[1]:
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(138):         return len(self.data)
sre_compile.py(465):                 op, av = av[1][0]
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(466):                 if op is LITERAL:
sre_compile.py(468):                 elif op is BRANCH:
sre_compile.py(469):                     c = []
sre_compile.py(470):                     cappend = c.append
sre_compile.py(471):                     for p in av[1]:
sre_compile.py(472):                         if not p:
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(138):         return len(self.data)
sre_compile.py(474):                         op, av = p[0]
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(475):                         if op is LITERAL:
sre_compile.py(478):                             break
sre_compile.py(501):     emit = code.append
sre_compile.py(502):     emit(OPCODES[INFO])
sre_compile.py(503):     skip = len(code); emit(0)
sre_compile.py(505):     mask = 0
sre_compile.py(506):     if prefix:
sre_compile.py(510):     elif charset:
sre_compile.py(512):     emit(mask)
sre_compile.py(514):     if lo < MAXCODE:
sre_compile.py(515):         emit(lo)
sre_compile.py(519):     if hi < MAXCODE:
sre_compile.py(520):         emit(hi)
sre_compile.py(524):     if prefix:
sre_compile.py(535):     elif charset:
sre_compile.py(537):     code[skip] = len(code) - skip
sre_compile.py(561):     _compile(code, p.data, flags)
 --- modulename: sre_compile, funcname: _compile
sre_compile.py(66):     emit = code.append
sre_compile.py(67):     _len = len
sre_compile.py(68):     LITERAL_CODES = _LITERAL_CODES
sre_compile.py(69):     REPEATING_CODES = _REPEATING_CODES
sre_compile.py(70):     SUCCESS_CODES = _SUCCESS_CODES
sre_compile.py(71):     ASSERT_CODES = _ASSERT_CODES
sre_compile.py(72):     if (flags & SRE_FLAG_IGNORECASE and
sre_compile.py(77):         fixes = None
sre_compile.py(78):     for op, av in pattern:
sre_compile.py(79):         if op in LITERAL_CODES:
sre_compile.py(98):         elif op is IN:
sre_compile.py(109):         elif op is ANY:
sre_compile.py(114):         elif op in REPEATING_CODES:
sre_compile.py(146):         elif op is SUBPATTERN:
sre_compile.py(147):             if av[0]:
sre_compile.py(148):                 emit(OPCODES[MARK])
sre_compile.py(149):                 emit((av[0]-1)*2)
sre_compile.py(151):             _compile(code, av[1], flags)
 --- modulename: sre_compile, funcname: _compile
sre_compile.py(66):     emit = code.append
sre_compile.py(67):     _len = len
sre_compile.py(68):     LITERAL_CODES = _LITERAL_CODES
sre_compile.py(69):     REPEATING_CODES = _REPEATING_CODES
sre_compile.py(70):     SUCCESS_CODES = _SUCCESS_CODES
sre_compile.py(71):     ASSERT_CODES = _ASSERT_CODES
sre_compile.py(72):     if (flags & SRE_FLAG_IGNORECASE and
sre_compile.py(77):         fixes = None
sre_compile.py(78):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(79):         if op in LITERAL_CODES:
sre_compile.py(98):         elif op is IN:
sre_compile.py(109):         elif op is ANY:
sre_compile.py(114):         elif op in REPEATING_CODES:
sre_compile.py(146):         elif op is SUBPATTERN:
sre_compile.py(155):         elif op in SUCCESS_CODES:
sre_compile.py(157):         elif op in ASSERT_CODES:
sre_compile.py(170):         elif op is CALL:
sre_compile.py(176):         elif op is AT:
sre_compile.py(185):         elif op is BRANCH:
sre_compile.py(186):             emit(OPCODES[op])
sre_compile.py(187):             tail = []
sre_compile.py(188):             tailappend = tail.append
sre_compile.py(189):             for av in av[1]:
sre_compile.py(190):                 skip = _len(code); emit(0)
sre_compile.py(192):                 _compile(code, av, flags)
 --- modulename: sre_compile, funcname: _compile
sre_compile.py(66):     emit = code.append
sre_compile.py(67):     _len = len
sre_compile.py(68):     LITERAL_CODES = _LITERAL_CODES
sre_compile.py(69):     REPEATING_CODES = _REPEATING_CODES
sre_compile.py(70):     SUCCESS_CODES = _SUCCESS_CODES
sre_compile.py(71):     ASSERT_CODES = _ASSERT_CODES
sre_compile.py(72):     if (flags & SRE_FLAG_IGNORECASE and
sre_compile.py(77):         fixes = None
sre_compile.py(78):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(79):         if op in LITERAL_CODES:
sre_compile.py(98):         elif op is IN:
sre_compile.py(99):             if flags & SRE_FLAG_IGNORECASE:
sre_compile.py(104):                 emit(OPCODES[op])
sre_compile.py(105):                 fixup = None
sre_compile.py(106):             skip = _len(code); emit(0)
sre_compile.py(107):             _compile_charset(av, flags, code, fixup, fixes)
 --- modulename: sre_compile, funcname: _compile_charset
sre_compile.py(230):     emit = code.append
sre_compile.py(231):     for op, av in _optimize_charset(charset, fixup, fixes,
sre_compile.py(232):                                     flags & SRE_FLAG_UNICODE):
 --- modulename: sre_compile, funcname: _optimize_charset
sre_compile.py(258):     out = []
sre_compile.py(259):     tail = []
sre_compile.py(260):     charmap = bytearray(256)
sre_compile.py(261):     for op, av in charset:
sre_compile.py(262):         while True:
sre_compile.py(263):             try:
sre_compile.py(264):                 if op is LITERAL:
sre_compile.py(265):                     if fixup:
sre_compile.py(272):                         charmap[av] = 1
sre_compile.py(310):             break
sre_compile.py(261):     for op, av in charset:
sre_compile.py(262):         while True:
sre_compile.py(263):             try:
sre_compile.py(264):                 if op is LITERAL:
sre_compile.py(265):                     if fixup:
sre_compile.py(272):                         charmap[av] = 1
sre_compile.py(310):             break
sre_compile.py(261):     for op, av in charset:
sre_compile.py(313):     runs = []
sre_compile.py(314):     q = 0
sre_compile.py(315):     while True:
sre_compile.py(316):         p = charmap.find(b'\1', q)
sre_compile.py(317):         if p < 0:
sre_compile.py(319):         if len(runs) >= 2:
sre_compile.py(322):         q = charmap.find(b'\0', p)
sre_compile.py(323):         if q < 0:
sre_compile.py(326):         runs.append((p, q))
sre_compile.py(315):     while True:
sre_compile.py(316):         p = charmap.find(b'\1', q)
sre_compile.py(317):         if p < 0:
sre_compile.py(319):         if len(runs) >= 2:
sre_compile.py(322):         q = charmap.find(b'\0', p)
sre_compile.py(323):         if q < 0:
sre_compile.py(326):         runs.append((p, q))
sre_compile.py(315):     while True:
sre_compile.py(316):         p = charmap.find(b'\1', q)
sre_compile.py(317):         if p < 0:
sre_compile.py(318):             break
sre_compile.py(327):     if runs is not None:
sre_compile.py(329):         for p, q in runs:
sre_compile.py(330):             if q - p == 1:
sre_compile.py(331):                 out.append((LITERAL, p))
sre_compile.py(329):         for p, q in runs:
sre_compile.py(330):             if q - p == 1:
sre_compile.py(331):                 out.append((LITERAL, p))
sre_compile.py(329):         for p, q in runs:
sre_compile.py(334):         out += tail
sre_compile.py(336):         if fixup or len(out) < len(charset):
sre_compile.py(339):         return charset
sre_compile.py(233):         emit(OPCODES[op])
sre_compile.py(234):         if op is NEGATE:
sre_compile.py(236):         elif op is LITERAL:
sre_compile.py(237):             emit(av)
sre_compile.py(232):                                     flags & SRE_FLAG_UNICODE):
sre_compile.py(233):         emit(OPCODES[op])
sre_compile.py(234):         if op is NEGATE:
sre_compile.py(236):         elif op is LITERAL:
sre_compile.py(237):             emit(av)
sre_compile.py(232):                                     flags & SRE_FLAG_UNICODE):
sre_compile.py(254):     emit(OPCODES[FAILURE])
sre_compile.py(108):             code[skip] = _len(code) - skip
sre_compile.py(78):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(193):                 emit(OPCODES[JUMP])
sre_compile.py(194):                 tailappend(_len(code)); emit(0)
sre_compile.py(195):                 code[skip] = _len(code) - skip
sre_compile.py(189):             for av in av[1]:
sre_compile.py(190):                 skip = _len(code); emit(0)
sre_compile.py(192):                 _compile(code, av, flags)
 --- modulename: sre_compile, funcname: _compile
sre_compile.py(66):     emit = code.append
sre_compile.py(67):     _len = len
sre_compile.py(68):     LITERAL_CODES = _LITERAL_CODES
sre_compile.py(69):     REPEATING_CODES = _REPEATING_CODES
sre_compile.py(70):     SUCCESS_CODES = _SUCCESS_CODES
sre_compile.py(71):     ASSERT_CODES = _ASSERT_CODES
sre_compile.py(72):     if (flags & SRE_FLAG_IGNORECASE and
sre_compile.py(77):         fixes = None
sre_compile.py(78):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(79):         if op in LITERAL_CODES:
sre_compile.py(98):         elif op is IN:
sre_compile.py(99):             if flags & SRE_FLAG_IGNORECASE:
sre_compile.py(104):                 emit(OPCODES[op])
sre_compile.py(105):                 fixup = None
sre_compile.py(106):             skip = _len(code); emit(0)
sre_compile.py(107):             _compile_charset(av, flags, code, fixup, fixes)
 --- modulename: sre_compile, funcname: _compile_charset
sre_compile.py(230):     emit = code.append
sre_compile.py(231):     for op, av in _optimize_charset(charset, fixup, fixes,
sre_compile.py(232):                                     flags & SRE_FLAG_UNICODE):
 --- modulename: sre_compile, funcname: _optimize_charset
sre_compile.py(258):     out = []
sre_compile.py(259):     tail = []
sre_compile.py(260):     charmap = bytearray(256)
sre_compile.py(261):     for op, av in charset:
sre_compile.py(262):         while True:
sre_compile.py(263):             try:
sre_compile.py(264):                 if op is LITERAL:
sre_compile.py(273):                 elif op is RANGE:
sre_compile.py(286):                 elif op is NEGATE:
sre_compile.py(287):                     out.append((op, av))
sre_compile.py(310):             break
sre_compile.py(261):     for op, av in charset:
sre_compile.py(262):         while True:
sre_compile.py(263):             try:
sre_compile.py(264):                 if op is LITERAL:
sre_compile.py(273):                 elif op is RANGE:
sre_compile.py(274):                     r = range(av[0], av[1]+1)
sre_compile.py(275):                     if fixup:
sre_compile.py(277):                     if fixup and fixes:
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(310):             break
sre_compile.py(261):     for op, av in charset:
sre_compile.py(313):     runs = []
sre_compile.py(314):     q = 0
sre_compile.py(315):     while True:
sre_compile.py(316):         p = charmap.find(b'\1', q)
sre_compile.py(317):         if p < 0:
sre_compile.py(319):         if len(runs) >= 2:
sre_compile.py(322):         q = charmap.find(b'\0', p)
sre_compile.py(323):         if q < 0:
sre_compile.py(326):         runs.append((p, q))
sre_compile.py(315):     while True:
sre_compile.py(316):         p = charmap.find(b'\1', q)
sre_compile.py(317):         if p < 0:
sre_compile.py(318):             break
sre_compile.py(327):     if runs is not None:
sre_compile.py(329):         for p, q in runs:
sre_compile.py(330):             if q - p == 1:
sre_compile.py(333):                 out.append((RANGE, (p, q - 1)))
sre_compile.py(329):         for p, q in runs:
sre_compile.py(334):         out += tail
sre_compile.py(336):         if fixup or len(out) < len(charset):
sre_compile.py(339):         return charset
sre_compile.py(233):         emit(OPCODES[op])
sre_compile.py(234):         if op is NEGATE:
sre_compile.py(235):             pass
sre_compile.py(232):                                     flags & SRE_FLAG_UNICODE):
sre_compile.py(233):         emit(OPCODES[op])
sre_compile.py(234):         if op is NEGATE:
sre_compile.py(236):         elif op is LITERAL:
sre_compile.py(238):         elif op is RANGE:
sre_compile.py(239):             emit(av[0])
sre_compile.py(240):             emit(av[1])
sre_compile.py(232):                                     flags & SRE_FLAG_UNICODE):
sre_compile.py(254):     emit(OPCODES[FAILURE])
sre_compile.py(108):             code[skip] = _len(code) - skip
sre_compile.py(78):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(193):                 emit(OPCODES[JUMP])
sre_compile.py(194):                 tailappend(_len(code)); emit(0)
sre_compile.py(195):                 code[skip] = _len(code) - skip
sre_compile.py(189):             for av in av[1]:
sre_compile.py(196):             emit(0) # end of branch
sre_compile.py(197):             for tail in tail:
sre_compile.py(198):                 code[tail] = _len(code) - tail
sre_compile.py(197):             for tail in tail:
sre_compile.py(198):                 code[tail] = _len(code) - tail
sre_compile.py(197):             for tail in tail:
sre_compile.py(78):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(152):             if av[0]:
sre_compile.py(153):                 emit(OPCODES[MARK])
sre_compile.py(154):                 emit((av[0]-1)*2+1)
sre_compile.py(78):     for op, av in pattern:
sre_compile.py(563):     code.append(OPCODES[SUCCESS])
sre_compile.py(565):     return code
sre_compile.py(581):     if p.pattern.groups > 100:
sre_compile.py(587):     groupindex = p.pattern.groupdict
sre_compile.py(588):     indexgroup = [None] * p.pattern.groups
sre_compile.py(589):     for k, i in groupindex.items():
sre_compile.py(592):     return _sre.compile(
sre_compile.py(593):         pattern, flags | p.pattern.flags, code,
sre_compile.py(594):         p.pattern.groups-1,
sre_compile.py(595):         groupindex, indexgroup
re.py(252):     if not bypass_cache:
re.py(253):         if len(_cache) >= _MAXCACHE:
re.py(255):         if p.flags & LOCALE:
re.py(260):             loc = None
re.py(261):         _cache[cachekey] = p, loc
re.py(262):     return p
encoder.py(16): HAS_UTF8 = re.compile(r'[\x80-\xff]')
 --- modulename: re, funcname: compile
re.py(194):     return _compile(pattern, flags)
 --- modulename: re, funcname: _compile
re.py(232):     pattern, flags = key
re.py(233):     bypass_cache = flags & DEBUG
re.py(234):     if not bypass_cache:
re.py(235):         cachekey = (type(key[0]),) + key
re.py(236):         try:
re.py(237):             p, loc = _cache[cachekey]
re.py(240):         except KeyError:
re.py(241):             pass
re.py(242):     if isinstance(pattern, _pattern_type):
re.py(246):     if not sre_compile.isstring(pattern):
 --- modulename: sre_compile, funcname: isstring
sre_compile.py(547):     for tp in STRING_TYPES:
sre_compile.py(548):         if isinstance(obj, tp):
sre_compile.py(549):             return 1
re.py(248):     try:
re.py(249):         p = sre_compile.compile(pattern, flags)
 --- modulename: sre_compile, funcname: compile
sre_compile.py(570):     if isstring(p):
 --- modulename: sre_compile, funcname: isstring
sre_compile.py(547):     for tp in STRING_TYPES:
sre_compile.py(548):         if isinstance(obj, tp):
sre_compile.py(549):             return 1
sre_compile.py(571):         pattern = p
sre_compile.py(572):         p = sre_parse.parse(p, flags)
 --- modulename: sre_parse, funcname: parse
sre_parse.py(709):     source = Tokenizer(str)
 --- modulename: sre_parse, funcname: __init__
sre_parse.py(190):         self.string = string
sre_parse.py(191):         self.index = 0
sre_parse.py(192):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(711):     if pattern is None:
sre_parse.py(712):         pattern = Pattern()
 --- modulename: sre_parse, funcname: __init__
sre_parse.py(68):         self.flags = 0
sre_parse.py(69):         self.open = []
sre_parse.py(70):         self.groups = 1
sre_parse.py(71):         self.groupdict = {}
sre_parse.py(72):         self.lookbehind = 0
sre_parse.py(713):     pattern.flags = flags
sre_parse.py(714):     pattern.str = str
sre_parse.py(716):     p = _parse_sub(source, pattern, 0)
 --- modulename: sre_parse, funcname: _parse_sub
sre_parse.py(320):     items = []
sre_parse.py(321):     itemsappend = items.append
sre_parse.py(322):     sourcematch = source.match
sre_parse.py(323):     while 1:
sre_parse.py(324):         itemsappend(_parse(source, state))
 --- modulename: sre_parse, funcname: _parse
sre_parse.py(397):     subpattern = SubPattern(state)
 --- modulename: sre_parse, funcname: __init__
sre_parse.py(93):         self.pattern = pattern
sre_parse.py(94):         if data is None:
sre_parse.py(95):             data = []
sre_parse.py(96):         self.data = data
sre_parse.py(97):         self.width = None
sre_parse.py(400):     subpatternappend = subpattern.append
sre_parse.py(401):     sourceget = source.get
sre_parse.py(402):     sourcematch = source.match
sre_parse.py(403):     _len = len
sre_parse.py(404):     PATTERNENDERS = _PATTERNENDERS
sre_parse.py(405):     ASSERTCHARS = _ASSERTCHARS
sre_parse.py(406):     LOOKBEHINDASSERTCHARS = _LOOKBEHINDASSERTCHARS
sre_parse.py(407):     REPEATCODES = _REPEATCODES
sre_parse.py(409):     while 1:
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(413):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(199):             try:
sre_parse.py(200):                 c = self.string[self.index + 1]
sre_parse.py(203):             char = char + c
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(414):         if this is None:
sre_parse.py(417):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(428):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(431):         elif this == "[":
sre_parse.py(433):             set = []
sre_parse.py(434):             setappend = set.append
sre_parse.py(437):             if sourcematch("^"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(211):         return 0
sre_parse.py(440):             start = set[:]
sre_parse.py(441):             while 1:
sre_parse.py(442):                 this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(443):                 if this == "]" and set != start:
sre_parse.py(445):                 elif this and this[0] == "\\":
sre_parse.py(446):                     code1 = _class_escape(source, this)
 --- modulename: sre_parse, funcname: _class_escape
sre_parse.py(238):     code = ESCAPES.get(escape)
sre_parse.py(239):     if code:
sre_parse.py(241):     code = CATEGORIES.get(escape)
sre_parse.py(242):     if code and code[0] == IN:
sre_parse.py(244):     try:
sre_parse.py(245):         c = escape[1:2]
sre_parse.py(246):         if c == "x":
sre_parse.py(248):             while source.next in HEXDIGITS and len(escape) < 4:
sre_parse.py(249):                 escape = escape + source.get()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(248):             while source.next in HEXDIGITS and len(escape) < 4:
sre_parse.py(249):                 escape = escape + source.get()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(248):             while source.next in HEXDIGITS and len(escape) < 4:
sre_parse.py(250):             escape = escape[2:]
sre_parse.py(251):             if len(escape) != 2:
sre_parse.py(253):             return LITERAL, int(escape, 16) & 0xff
sre_parse.py(451):                 if sourcematch("-"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(208):             if skip:
sre_parse.py(209):                 self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(199):             try:
sre_parse.py(200):                 c = self.string[self.index + 1]
sre_parse.py(203):             char = char + c
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(210):             return 1
sre_parse.py(453):                     this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(454):                     if this == "]":
sre_parse.py(460):                     elif this:
sre_parse.py(461):                         if this[0] == "\\":
sre_parse.py(462):                             code2 = _class_escape(source, this)
 --- modulename: sre_parse, funcname: _class_escape
sre_parse.py(238):     code = ESCAPES.get(escape)
sre_parse.py(239):     if code:
sre_parse.py(241):     code = CATEGORIES.get(escape)
sre_parse.py(242):     if code and code[0] == IN:
sre_parse.py(244):     try:
sre_parse.py(245):         c = escape[1:2]
sre_parse.py(246):         if c == "x":
sre_parse.py(248):             while source.next in HEXDIGITS and len(escape) < 4:
sre_parse.py(249):                 escape = escape + source.get()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(248):             while source.next in HEXDIGITS and len(escape) < 4:
sre_parse.py(249):                 escape = escape + source.get()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(248):             while source.next in HEXDIGITS and len(escape) < 4:
sre_parse.py(250):             escape = escape[2:]
sre_parse.py(251):             if len(escape) != 2:
sre_parse.py(253):             return LITERAL, int(escape, 16) & 0xff
sre_parse.py(465):                         if code1[0] != LITERAL or code2[0] != LITERAL:
sre_parse.py(467):                         lo = code1[1]
sre_parse.py(468):                         hi = code2[1]
sre_parse.py(469):                         if hi < lo:
sre_parse.py(471):                         setappend((RANGE, (lo, hi)))
sre_parse.py(442):                 this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(195):             self.next = None
sre_parse.py(196):             return
sre_parse.py(215):         return this
sre_parse.py(443):                 if this == "]" and set != start:
sre_parse.py(444):                     break
sre_parse.py(480):             if _len(set)==1 and set[0][0] is LITERAL:
sre_parse.py(482):             elif _len(set)==2 and set[0][0] is NEGATE and set[1][0] is LITERAL:
sre_parse.py(486):                 subpatternappend((IN, set))
 --- modulename: sre_parse, funcname: append
sre_parse.py(150):         self.data.append(code)
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(413):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(195):             self.next = None
sre_parse.py(196):             return
sre_parse.py(215):         return this
sre_parse.py(414):         if this is None:
sre_parse.py(415):             break # end of pattern
sre_parse.py(704):     return subpattern
sre_parse.py(325):         if sourcematch("|"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(211):         return 0
sre_parse.py(327):         if not nested:
sre_parse.py(328):             break
sre_parse.py(334):     if len(items) == 1:
sre_parse.py(335):         return items[0]
sre_parse.py(718):     tail = source.get()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(195):             self.next = None
sre_parse.py(196):             return
sre_parse.py(215):         return this
sre_parse.py(719):     if tail == ")":
sre_parse.py(721):     elif tail:
sre_parse.py(724):     if not (flags & SRE_FLAG_VERBOSE) and p.pattern.flags & SRE_FLAG_VERBOSE:
sre_parse.py(729):     if flags & SRE_FLAG_DEBUG:
sre_parse.py(732):     return p
sre_compile.py(576):     code = _code(p, flags)
 --- modulename: sre_compile, funcname: _code
sre_compile.py(554):     flags = p.pattern.flags | flags
sre_compile.py(555):     code = []
sre_compile.py(558):     _compile_info(code, p, flags)
 --- modulename: sre_compile, funcname: _compile_info
sre_compile.py(437):     lo, hi = pattern.getwidth()
 --- modulename: sre_parse, funcname: getwidth
sre_parse.py(153):         if self.width:
sre_parse.py(155):         lo = hi = 0
sre_parse.py(156):         UNITCODES = (ANY, RANGE, IN, LITERAL, NOT_LITERAL, CATEGORY)
sre_parse.py(157):         REPEATCODES = (MIN_REPEAT, MAX_REPEAT)
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(159):             if op is BRANCH:
sre_parse.py(168):             elif op is CALL:
sre_parse.py(172):             elif op is SUBPATTERN:
sre_parse.py(176):             elif op in REPEATCODES:
sre_parse.py(180):             elif op in UNITCODES:
sre_parse.py(181):                 lo = lo + 1
sre_parse.py(182):                 hi = hi + 1
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(185):         self.width = min(lo, MAXREPEAT - 1), min(hi, MAXREPEAT)
sre_parse.py(186):         return self.width
sre_compile.py(438):     if lo == 0:
sre_compile.py(441):     prefix = []
sre_compile.py(442):     prefixappend = prefix.append
sre_compile.py(443):     prefix_skip = 0
sre_compile.py(444):     charset = [] # not used
sre_compile.py(445):     charsetappend = charset.append
sre_compile.py(446):     if not (flags & SRE_FLAG_IGNORECASE):
sre_compile.py(448):         for op, av in pattern.data:
sre_compile.py(449):             if op is LITERAL:
sre_compile.py(453):             elif op is SUBPATTERN and len(av[1]) == 1:
sre_compile.py(460):                 break
sre_compile.py(462):         if not prefix and pattern.data:
sre_compile.py(463):             op, av = pattern.data[0]
sre_compile.py(464):             if op is SUBPATTERN and av[1]:
sre_compile.py(481):             elif op is BRANCH:
sre_compile.py(494):             elif op is IN:
sre_compile.py(495):                 charset = av
sre_compile.py(501):     emit = code.append
sre_compile.py(502):     emit(OPCODES[INFO])
sre_compile.py(503):     skip = len(code); emit(0)
sre_compile.py(505):     mask = 0
sre_compile.py(506):     if prefix:
sre_compile.py(510):     elif charset:
sre_compile.py(511):         mask = mask + SRE_INFO_CHARSET
sre_compile.py(512):     emit(mask)
sre_compile.py(514):     if lo < MAXCODE:
sre_compile.py(515):         emit(lo)
sre_compile.py(519):     if hi < MAXCODE:
sre_compile.py(520):         emit(hi)
sre_compile.py(524):     if prefix:
sre_compile.py(535):     elif charset:
sre_compile.py(536):         _compile_charset(charset, flags, code)
 --- modulename: sre_compile, funcname: _compile_charset
sre_compile.py(230):     emit = code.append
sre_compile.py(231):     for op, av in _optimize_charset(charset, fixup, fixes,
sre_compile.py(232):                                     flags & SRE_FLAG_UNICODE):
 --- modulename: sre_compile, funcname: _optimize_charset
sre_compile.py(258):     out = []
sre_compile.py(259):     tail = []
sre_compile.py(260):     charmap = bytearray(256)
sre_compile.py(261):     for op, av in charset:
sre_compile.py(262):         while True:
sre_compile.py(263):             try:
sre_compile.py(264):                 if op is LITERAL:
sre_compile.py(273):                 elif op is RANGE:
sre_compile.py(274):                     r = range(av[0], av[1]+1)
sre_compile.py(275):                     if fixup:
sre_compile.py(277):                     if fixup and fixes:
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(310):             break
sre_compile.py(261):     for op, av in charset:
sre_compile.py(313):     runs = []
sre_compile.py(314):     q = 0
sre_compile.py(315):     while True:
sre_compile.py(316):         p = charmap.find(b'\1', q)
sre_compile.py(317):         if p < 0:
sre_compile.py(319):         if len(runs) >= 2:
sre_compile.py(322):         q = charmap.find(b'\0', p)
sre_compile.py(323):         if q < 0:
sre_compile.py(324):             runs.append((p, len(charmap)))
sre_compile.py(325):             break
sre_compile.py(327):     if runs is not None:
sre_compile.py(329):         for p, q in runs:
sre_compile.py(330):             if q - p == 1:
sre_compile.py(333):                 out.append((RANGE, (p, q - 1)))
sre_compile.py(329):         for p, q in runs:
sre_compile.py(334):         out += tail
sre_compile.py(336):         if fixup or len(out) < len(charset):
sre_compile.py(339):         return charset
sre_compile.py(233):         emit(OPCODES[op])
sre_compile.py(234):         if op is NEGATE:
sre_compile.py(236):         elif op is LITERAL:
sre_compile.py(238):         elif op is RANGE:
sre_compile.py(239):             emit(av[0])
sre_compile.py(240):             emit(av[1])
sre_compile.py(232):                                     flags & SRE_FLAG_UNICODE):
sre_compile.py(254):     emit(OPCODES[FAILURE])
sre_compile.py(537):     code[skip] = len(code) - skip
sre_compile.py(561):     _compile(code, p.data, flags)
 --- modulename: sre_compile, funcname: _compile
sre_compile.py(66):     emit = code.append
sre_compile.py(67):     _len = len
sre_compile.py(68):     LITERAL_CODES = _LITERAL_CODES
sre_compile.py(69):     REPEATING_CODES = _REPEATING_CODES
sre_compile.py(70):     SUCCESS_CODES = _SUCCESS_CODES
sre_compile.py(71):     ASSERT_CODES = _ASSERT_CODES
sre_compile.py(72):     if (flags & SRE_FLAG_IGNORECASE and
sre_compile.py(77):         fixes = None
sre_compile.py(78):     for op, av in pattern:
sre_compile.py(79):         if op in LITERAL_CODES:
sre_compile.py(98):         elif op is IN:
sre_compile.py(99):             if flags & SRE_FLAG_IGNORECASE:
sre_compile.py(104):                 emit(OPCODES[op])
sre_compile.py(105):                 fixup = None
sre_compile.py(106):             skip = _len(code); emit(0)
sre_compile.py(107):             _compile_charset(av, flags, code, fixup, fixes)
 --- modulename: sre_compile, funcname: _compile_charset
sre_compile.py(230):     emit = code.append
sre_compile.py(231):     for op, av in _optimize_charset(charset, fixup, fixes,
sre_compile.py(232):                                     flags & SRE_FLAG_UNICODE):
 --- modulename: sre_compile, funcname: _optimize_charset
sre_compile.py(258):     out = []
sre_compile.py(259):     tail = []
sre_compile.py(260):     charmap = bytearray(256)
sre_compile.py(261):     for op, av in charset:
sre_compile.py(262):         while True:
sre_compile.py(263):             try:
sre_compile.py(264):                 if op is LITERAL:
sre_compile.py(273):                 elif op is RANGE:
sre_compile.py(274):                     r = range(av[0], av[1]+1)
sre_compile.py(275):                     if fixup:
sre_compile.py(277):                     if fixup and fixes:
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(310):             break
sre_compile.py(261):     for op, av in charset:
sre_compile.py(313):     runs = []
sre_compile.py(314):     q = 0
sre_compile.py(315):     while True:
sre_compile.py(316):         p = charmap.find(b'\1', q)
sre_compile.py(317):         if p < 0:
sre_compile.py(319):         if len(runs) >= 2:
sre_compile.py(322):         q = charmap.find(b'\0', p)
sre_compile.py(323):         if q < 0:
sre_compile.py(324):             runs.append((p, len(charmap)))
sre_compile.py(325):             break
sre_compile.py(327):     if runs is not None:
sre_compile.py(329):         for p, q in runs:
sre_compile.py(330):             if q - p == 1:
sre_compile.py(333):                 out.append((RANGE, (p, q - 1)))
sre_compile.py(329):         for p, q in runs:
sre_compile.py(334):         out += tail
sre_compile.py(336):         if fixup or len(out) < len(charset):
sre_compile.py(339):         return charset
sre_compile.py(233):         emit(OPCODES[op])
sre_compile.py(234):         if op is NEGATE:
sre_compile.py(236):         elif op is LITERAL:
sre_compile.py(238):         elif op is RANGE:
sre_compile.py(239):             emit(av[0])
sre_compile.py(240):             emit(av[1])
sre_compile.py(232):                                     flags & SRE_FLAG_UNICODE):
sre_compile.py(254):     emit(OPCODES[FAILURE])
sre_compile.py(108):             code[skip] = _len(code) - skip
sre_compile.py(78):     for op, av in pattern:
sre_compile.py(563):     code.append(OPCODES[SUCCESS])
sre_compile.py(565):     return code
sre_compile.py(581):     if p.pattern.groups > 100:
sre_compile.py(587):     groupindex = p.pattern.groupdict
sre_compile.py(588):     indexgroup = [None] * p.pattern.groups
sre_compile.py(589):     for k, i in groupindex.items():
sre_compile.py(592):     return _sre.compile(
sre_compile.py(593):         pattern, flags | p.pattern.flags, code,
sre_compile.py(594):         p.pattern.groups-1,
sre_compile.py(595):         groupindex, indexgroup
re.py(252):     if not bypass_cache:
re.py(253):         if len(_cache) >= _MAXCACHE:
re.py(255):         if p.flags & LOCALE:
re.py(260):             loc = None
re.py(261):         _cache[cachekey] = p, loc
re.py(262):     return p
encoder.py(17): ESCAPE_DCT = {
encoder.py(18):     '\\': '\\\\',
encoder.py(19):     '"': '\\"',
encoder.py(20):     '\b': '\\b',
encoder.py(21):     '\f': '\\f',
encoder.py(22):     '\n': '\\n',
encoder.py(23):     '\r': '\\r',
encoder.py(24):     '\t': '\\t',
encoder.py(26): for i in range(0x20):
encoder.py(27):     ESCAPE_DCT.setdefault(chr(i), '\\u{0:04x}'.format(i))
encoder.py(26): for i in range(0x20):
encoder.py(27):     ESCAPE_DCT.setdefault(chr(i), '\\u{0:04x}'.format(i))
encoder.py(26): for i in range(0x20):
encoder.py(27):     ESCAPE_DCT.setdefault(chr(i), '\\u{0:04x}'.format(i))
encoder.py(26): for i in range(0x20):
encoder.py(27):     ESCAPE_DCT.setdefault(chr(i), '\\u{0:04x}'.format(i))
encoder.py(26): for i in range(0x20):
encoder.py(27):     ESCAPE_DCT.setdefault(chr(i), '\\u{0:04x}'.format(i))
encoder.py(26): for i in range(0x20):
encoder.py(27):     ESCAPE_DCT.setdefault(chr(i), '\\u{0:04x}'.format(i))
encoder.py(26): for i in range(0x20):
encoder.py(27):     ESCAPE_DCT.setdefault(chr(i), '\\u{0:04x}'.format(i))
encoder.py(26): for i in range(0x20):
encoder.py(27):     ESCAPE_DCT.setdefault(chr(i), '\\u{0:04x}'.format(i))
encoder.py(26): for i in range(0x20):
encoder.py(27):     ESCAPE_DCT.setdefault(chr(i), '\\u{0:04x}'.format(i))
encoder.py(26): for i in range(0x20):
encoder.py(27):     ESCAPE_DCT.setdefault(chr(i), '\\u{0:04x}'.format(i))
encoder.py(26): for i in range(0x20):
encoder.py(27):     ESCAPE_DCT.setdefault(chr(i), '\\u{0:04x}'.format(i))
encoder.py(26): for i in range(0x20):
encoder.py(27):     ESCAPE_DCT.setdefault(chr(i), '\\u{0:04x}'.format(i))
encoder.py(26): for i in range(0x20):
encoder.py(27):     ESCAPE_DCT.setdefault(chr(i), '\\u{0:04x}'.format(i))
encoder.py(26): for i in range(0x20):
encoder.py(27):     ESCAPE_DCT.setdefault(chr(i), '\\u{0:04x}'.format(i))
encoder.py(26): for i in range(0x20):
encoder.py(27):     ESCAPE_DCT.setdefault(chr(i), '\\u{0:04x}'.format(i))
encoder.py(26): for i in range(0x20):
encoder.py(27):     ESCAPE_DCT.setdefault(chr(i), '\\u{0:04x}'.format(i))
encoder.py(26): for i in range(0x20):
encoder.py(27):     ESCAPE_DCT.setdefault(chr(i), '\\u{0:04x}'.format(i))
encoder.py(26): for i in range(0x20):
encoder.py(27):     ESCAPE_DCT.setdefault(chr(i), '\\u{0:04x}'.format(i))
encoder.py(26): for i in range(0x20):
encoder.py(27):     ESCAPE_DCT.setdefault(chr(i), '\\u{0:04x}'.format(i))
encoder.py(26): for i in range(0x20):
encoder.py(27):     ESCAPE_DCT.setdefault(chr(i), '\\u{0:04x}'.format(i))
encoder.py(26): for i in range(0x20):
encoder.py(27):     ESCAPE_DCT.setdefault(chr(i), '\\u{0:04x}'.format(i))
encoder.py(26): for i in range(0x20):
encoder.py(27):     ESCAPE_DCT.setdefault(chr(i), '\\u{0:04x}'.format(i))
encoder.py(26): for i in range(0x20):
encoder.py(27):     ESCAPE_DCT.setdefault(chr(i), '\\u{0:04x}'.format(i))
encoder.py(26): for i in range(0x20):
encoder.py(27):     ESCAPE_DCT.setdefault(chr(i), '\\u{0:04x}'.format(i))
encoder.py(26): for i in range(0x20):
encoder.py(27):     ESCAPE_DCT.setdefault(chr(i), '\\u{0:04x}'.format(i))
encoder.py(26): for i in range(0x20):
encoder.py(27):     ESCAPE_DCT.setdefault(chr(i), '\\u{0:04x}'.format(i))
encoder.py(26): for i in range(0x20):
encoder.py(27):     ESCAPE_DCT.setdefault(chr(i), '\\u{0:04x}'.format(i))
encoder.py(26): for i in range(0x20):
encoder.py(27):     ESCAPE_DCT.setdefault(chr(i), '\\u{0:04x}'.format(i))
encoder.py(26): for i in range(0x20):
encoder.py(27):     ESCAPE_DCT.setdefault(chr(i), '\\u{0:04x}'.format(i))
encoder.py(26): for i in range(0x20):
encoder.py(27):     ESCAPE_DCT.setdefault(chr(i), '\\u{0:04x}'.format(i))
encoder.py(26): for i in range(0x20):
encoder.py(27):     ESCAPE_DCT.setdefault(chr(i), '\\u{0:04x}'.format(i))
encoder.py(26): for i in range(0x20):
encoder.py(27):     ESCAPE_DCT.setdefault(chr(i), '\\u{0:04x}'.format(i))
encoder.py(26): for i in range(0x20):
encoder.py(30): INFINITY = float('inf')
encoder.py(31): FLOAT_REPR = repr
encoder.py(33): def encode_basestring(s):
encoder.py(42): def py_encode_basestring_ascii(s):
encoder.py(68):     c_encode_basestring_ascii or py_encode_basestring_ascii)
encoder.py(70): class JSONEncoder(object):
 --- modulename: encoder, funcname: JSONEncoder
encoder.py(70): class JSONEncoder(object):
encoder.py(98):     """
encoder.py(99):     item_separator = ', '
encoder.py(100):     key_separator = ': '
encoder.py(101):     def __init__(self, skipkeys=False, ensure_ascii=True,
encoder.py(102):             check_circular=True, allow_nan=True, sort_keys=False,
encoder.py(103):             indent=None, separators=None, encoding='utf-8', default=None):
encoder.py(165):     def default(self, o):
encoder.py(186):     def encode(self, o):
encoder.py(212):     def iterencode(self, o, _one_shot=False):
encoder.py(275):         ValueError=ValueError,
encoder.py(276):         basestring=basestring,
encoder.py(277):         dict=dict,
encoder.py(278):         float=float,
encoder.py(279):         id=id,
encoder.py(280):         int=int,
encoder.py(281):         isinstance=isinstance,
encoder.py(282):         list=list,
encoder.py(283):         long=long,
encoder.py(284):         str=str,
encoder.py(285):         tuple=tuple,
__init__.py(111): _default_encoder = JSONEncoder(
__init__.py(112):     skipkeys=False,
__init__.py(113):     ensure_ascii=True,
__init__.py(114):     check_circular=True,
__init__.py(115):     allow_nan=True,
__init__.py(116):     indent=None,
__init__.py(117):     separators=None,
__init__.py(118):     encoding='utf-8',
__init__.py(119):     default=None,
 --- modulename: encoder, funcname: __init__
encoder.py(153):         self.skipkeys = skipkeys
encoder.py(154):         self.ensure_ascii = ensure_ascii
encoder.py(155):         self.check_circular = check_circular
encoder.py(156):         self.allow_nan = allow_nan
encoder.py(157):         self.sort_keys = sort_keys
encoder.py(158):         self.indent = indent
encoder.py(159):         if separators is not None:
encoder.py(161):         if default is not None:
encoder.py(163):         self.encoding = encoding
__init__.py(122): def dump(obj, fp, skipkeys=False, ensure_ascii=True, check_circular=True,
__init__.py(123):         allow_nan=True, cls=None, indent=None, separators=None,
__init__.py(124):         encoding='utf-8', default=None, sort_keys=False, **kw):
__init__.py(193): def dumps(obj, skipkeys=False, ensure_ascii=True, check_circular=True,
__init__.py(194):         allow_nan=True, cls=None, indent=None, separators=None,
__init__.py(195):         encoding='utf-8', default=None, sort_keys=False, **kw):
__init__.py(254): _default_decoder = JSONDecoder(encoding=None, object_hook=None,
__init__.py(255):                                object_pairs_hook=None)
 --- modulename: decoder, funcname: __init__
decoder.py(347):         self.encoding = encoding
decoder.py(348):         self.object_hook = object_hook
decoder.py(349):         self.object_pairs_hook = object_pairs_hook
decoder.py(350):         self.parse_float = parse_float or float
decoder.py(351):         self.parse_int = parse_int or int
decoder.py(352):         self.parse_constant = parse_constant or _CONSTANTS.__getitem__
decoder.py(353):         self.strict = strict
decoder.py(354):         self.parse_object = JSONObject
decoder.py(355):         self.parse_array = JSONArray
decoder.py(356):         self.parse_string = scanstring
decoder.py(357):         self.scan_once = scanner.make_scanner(self)
__init__.py(258): def load(fp, encoding=None, cls=None, object_hook=None, parse_float=None,
__init__.py(259):         parse_int=None, parse_constant=None, object_pairs_hook=None, **kw):
__init__.py(294): def loads(s, encoding=None, cls=None, object_hook=None, parse_float=None,
__init__.py(295):         parse_int=None, parse_constant=None, object_pairs_hook=None, **kw):
Widget.py(24): import re
Widget.py(25): import winsound
Widget.py(28): def get_mid_point(args):
Widget.py(33): def get_nodes_file_names():
Widget.py(38): def clearLayout(layout):
Widget.py(47): def get_node(module, name, graph):
Widget.py(59): class PluginType:
 --- modulename: Widget, funcname: PluginType
Widget.py(59): class PluginType:
Widget.py(60):     pNode = 0
Widget.py(61):     pCommand = 1
Widget.py(64): def _implementPlugin(name, console_out_foo, pluginType, graph):
Widget.py(149): def import_by_name(module, name):
Widget.py(162): def parse(line):
Widget.py(184): class SceneClass(QtGui.QGraphicsScene):
 --- modulename: Widget, funcname: SceneClass
Widget.py(184): class SceneClass(QtGui.QGraphicsScene):
Widget.py(185):     def __init__(self, parent):
Widget.py(192):     def mouseDoubleClickEvent(self, event):
Widget.py(196):     def dragEnterEvent(self, event):
Widget.py(202):     def dragMoveEvent(self, event):
Widget.py(209):     def OnSelectionChanged(self):
Widget.py(223):     def dropEvent(self, event):
Widget.py(235): class NodesBoxListWidget(QtGui.QListWidget):
 --- modulename: Widget, funcname: NodesBoxListWidget
Widget.py(235): class NodesBoxListWidget(QtGui.QListWidget):
Widget.py(236):     def __init__(self, parent, events=True):
Widget.py(256):     def mousePressEvent(self, event):
Widget.py(265):     def keyPressEvent(self, event):
Widget.py(277): class NodeBoxLineEdit(QtGui.QLineEdit):
 --- modulename: Widget, funcname: NodeBoxLineEdit
Widget.py(277): class NodeBoxLineEdit(QtGui.QLineEdit):
Widget.py(278):     def __init__(self, parent, events=True):
Widget.py(294):     def keyPressEvent(self, event):
Widget.py(302): class NodeBoxTreeWidget(QtGui.QTreeWidget):
 --- modulename: Widget, funcname: NodeBoxTreeWidget
Widget.py(302): class NodeBoxTreeWidget(QtGui.QTreeWidget):
Widget.py(303):     def __init__(self, parent):
Widget.py(325):     def refresh(self):
Widget.py(337):     def keyPressEvent(self, event):
Widget.py(344):     def mousePressEvent(self, event):
Widget.py(362): class NodesBox(QtGui.QWidget):
 --- modulename: Widget, funcname: NodesBox
Widget.py(362): class NodesBox(QtGui.QWidget):
Widget.py(363):     def __init__(self, graph):
Widget.py(396):     def keyPressEvent(self, event):
Widget.py(402):     def swap_appearance(self):
Widget.py(411):     def refresh_list(self, pattern):
Widget.py(420):     def get_nodes_file_names(self):
Widget.py(423):     def set_visible(self):
Widget.py(432):     def create_node(self):
Widget.py(444):     def le_text_changed(self):
Widget.py(452): class RubberRect(QtGui.QGraphicsRectItem, Colors):
 --- modulename: Widget, funcname: RubberRect
Widget.py(452): class RubberRect(QtGui.QGraphicsRectItem, Colors):
Widget.py(453):     def __init__(self, name):
Widget.py(461): class CommentNodeName(QtGui.QGraphicsTextItem, Colors):
 --- modulename: Widget, funcname: CommentNodeName
Widget.py(461): class CommentNodeName(QtGui.QGraphicsTextItem, Colors):
Widget.py(462):     def __init__(self, parent):
Widget.py(471):     def update_pos(self):
Widget.py(476):     def focusInEvent(self, event):
Widget.py(480):     def focusOutEvent(self, event):
Widget.py(485):     def paint(self, painter, option, widget):
Widget.py(491): class CommentNode(QtGui.QGraphicsRectItem, Colors):
 --- modulename: Widget, funcname: CommentNode
Widget.py(491): class CommentNode(QtGui.QGraphicsRectItem, Colors):
Widget.py(492):     def __init__(self, graph):
Widget.py(528):     @property
Widget.py(532):     @minimum_height.getter
Widget.py(536):     @minimum_height.setter
Widget.py(540):     @property
Widget.py(544):     @minimum_width.getter
Widget.py(548):     @minimum_width.setter
Widget.py(552):     def get_nodes_rect(self):
Widget.py(569):     def set_bottom_right(self, point):
Widget.py(579):     def hoverEnterEvent(self, event):
Widget.py(583):     def hoverLeaveEvent(self, event):
Widget.py(587):     def update_count_label(self):
Widget.py(591):     def update(self):
Widget.py(598):     def has_nodes(self):
Widget.py(602):     def fit_content(self):
Widget.py(610):     def mousePressEvent(self, event):
Widget.py(616):     def unpack(self):
Widget.py(625):     def delete(self, call_connection_functions=False):
Widget.py(636):     def contextMenuEvent(self, event):
Widget.py(640):     def add_from_iterable(self, iterable):
Widget.py(644):     def remove_from_iterable(self, iterable):
Widget.py(648):     def set_label_from_html(self, html):
Widget.py(651):     def add_node(self, node):
Widget.py(660):     def remove_node(self, node):
Widget.py(668): class RGBAColorPicker(QtGui.QWidget, rgba_color_picker_ui.Ui_rgba_color_picker_ui):
 --- modulename: Widget, funcname: RGBAColorPicker
Widget.py(668): class RGBAColorPicker(QtGui.QWidget, rgba_color_picker_ui.Ui_rgba_color_picker_ui):
Widget.py(669):     def __init__(self, button):
Widget.py(679):     def set_button_background(self, color):
Widget.py(687):     def showEvent(self, event):
Widget.py(692):     def get_rgb(self):
Widget.py(699):     def tweak_alpha(self):
Widget.py(703):     def apply(self):
Widget.py(714): class OptionsClass(QtGui.QMainWindow, OptionsWindow_ui.Ui_OptionsUI):
 --- modulename: Widget, funcname: OptionsClass
Widget.py(714): class OptionsClass(QtGui.QMainWindow, OptionsWindow_ui.Ui_OptionsUI):
Widget.py(715):     def __init__(self):
Widget.py(762):     @staticmethod
Widget.py(771):     def set_color(self, button):
Widget.py(776):     def populate_ui(self):
Widget.py(782):     def connect_ui(self):
Widget.py(800):     def save_options(self):
Widget.py(810):     def write_config(self):
Widget.py(836):     def write_default_config(self):
Widget.py(876): class GraphWidget(QtGui.QGraphicsView, Colors, AGraph):
 --- modulename: Widget, funcname: GraphWidget
Widget.py(876): class GraphWidget(QtGui.QGraphicsView, Colors, AGraph):
Widget.py(878):     def __init__(self, name, parent=None):
Widget.py(950):     def shoutDown(self):
Widget.py(953):     def set_scrollbars_positions(self, horizontal, vertical):
Widget.py(961):     def OnDoubleClick(self, pos):
Widget.py(975):     def redraw_nodes(self):
Widget.py(979):     def __del__(self):
Widget.py(982):     @staticmethod
Widget.py(987):     def _tick_executor(self):
Widget.py(991):     def notify(self, message, duration):
Widget.py(995):     def registerCommands(self):
Widget.py(1006):     def screen_shot(self):
Widget.py(1015):     def is_sortcuts_enabled(self):
Widget.py(1018):     def disable_sortcuts(self):
Widget.py(1021):     def enable_sortcuts(self):
Widget.py(1024):     def get_nodes(self):
Widget.py(1034):     def findPort(self, port_name):
Widget.py(1041):     def get_settings(self):
Widget.py(1046):     def add_actions(self):
Widget.py(1106):     def save(self, save_as=False):
Widget.py(1169):     def save_as(self):
Widget.py(1173):     def new_file(self):
Widget.py(1184):     def load(self):
Widget.py(1198):     def get_port_by_full_name(self, full_name):
Widget.py(1208):     def options(self):
Widget.py(1213):     def contextMenuEvent(self, event):
Widget.py(1219):     def set_shadows_enabled(self, state):
Widget.py(1225):     def frame(self):
Widget.py(1245):     def get_nodes_rect(self, selected=False):
Widget.py(1267):     def selected_nodes(self):
Widget.py(1270):     def kill_selected_nodes(self, call_connection_functions=False):
Widget.py(1282):     def keyPressEvent(self, event):
Widget.py(1333):     def duplicate_node(self):
Widget.py(1341):     def align_selected_nodes(self, direction):
Widget.py(1356):     def findGoodPlaceForNewNode(self):
Widget.py(1365):     def keyReleaseEvent(self, event):
Widget.py(1369):     def mousePressEvent(self, event):
Widget.py(1401):     def mouseMoveEvent(self, event):
Widget.py(1447):     def createComment(self, x1, y1, x2, y2, name):
Widget.py(1457):     def commentSelectedNodes(self, comment="enter comment"):
Widget.py(1492):     def remove_item_by_name(self, name):
Widget.py(1496):     def mouseReleaseEvent(self, event):
Widget.py(1558):     def update_property_view(self, node):
Widget.py(1607):     def wheelEvent(self, event):
Widget.py(1611):     def drawBackground(self, painter, rect):
Widget.py(1648):     def console_help(self):
Widget.py(1669):     def create_node(self, className, x, y, name):
Widget.py(1676):     def executeCommand(self, command):
Widget.py(1953):     def add_node(self, node, x, y):
Widget.py(1964):     def add_edge(self, src, dst):
Widget.py(1978):     def remove_edge(self, edge, call_connection_functions=True):
Widget.py(1986):     def write_to_console(self, data, force=False):
Widget.py(1994):     def plot(self):
Widget.py(2007):     def scale_step(self, direction, step_size):
Widget.py(2025):     def reset_scale(self):
Widget.py(2028):     def scale_view(self, scale_factor):
__init__.py(16): from SyntaxHighlighter import Highlighter
 --- modulename: SyntaxHighlighter, funcname: <module>
SyntaxHighlighter.py(1): from PySide import QtGui, QtCore
SyntaxHighlighter.py(2): from AbstractGraph import FLAG_SYMBOL
SyntaxHighlighter.py(5): class Highlighter(QtGui.QSyntaxHighlighter):
 --- modulename: SyntaxHighlighter, funcname: Highlighter
SyntaxHighlighter.py(5): class Highlighter(QtGui.QSyntaxHighlighter):
SyntaxHighlighter.py(6):     def __init__(self, parent=None, commandNameList= [], nodes_names = []):
SyntaxHighlighter.py(47):     def highlightBlock(self, text):
__init__.py(17): from ConsoleInputWidget import ConsoleInput
 --- modulename: ConsoleInputWidget, funcname: <module>
ConsoleInputWidget.py(1): from PySide import QtCore, QtGui
ConsoleInputWidget.py(4): class ConsoleInput(QtGui.QLineEdit):
 --- modulename: ConsoleInputWidget, funcname: ConsoleInput
ConsoleInputWidget.py(4): class ConsoleInput(QtGui.QLineEdit):
ConsoleInputWidget.py(5):     def __init__(self, parent, graph):
ConsoleInputWidget.py(22):     def OnReturnPressed(self):
__init__.py(18): import nodes_res_rc
 --- modulename: nodes_res_rc, funcname: <module>
nodes_res_rc.py(10): from PySide import QtCore
nodes_res_rc.py(12): qt_resource_data = "\x00\x00\x03|\x89PNG\x0d\x0a\x1a\x0a\x00\x00\x00\x0dIHDR\x00\x00\x00\x10\x00\x00\x00\x10\x08\x06\x00\x00\x00\x1f\xf3\xffa\x00\x00\x03CIDATx\xdaMS[HTQ\x14]g\xee\x9d\x97\x93chS3I!\x82c\x8f\x8f\x8a \x19\x0a\x12\x8c -\x92(\xb2\xa0\x07B\x10= \x8a\x04\x8bH\xd2\xac\x0f+\xd0\x22h(\x04\x85H\xb2\x07\x19\x91%TS>BR\x9a\xcaL\x9a\x1cJm\xd2t&s^\xf7\xd5>\xd7\x8c6\xec{\xcf\xc7>k\xad\xbd\xce\xde\x0c\xff\xc5\x91\x13'\xd2f\xdb\xed\xf6T\xbb\xdd&\x8a\xa2Y\x10\x04Q\xa3H\xca\xb2,IR\x22\x12\x0eO\x85#\x91\xc8\xd5\x9a\x9a\xc9\x99;\x8c\x7f|~\xffFM\x92\x1e\x04\x03\x01\x184\x0d\xa0L&\x93\xa0KPU\x15\xcc`\x80h4\xea)Q\xbdc\xfe|YR\x94\x0d[\xf3\xf3\x9fN\x03\xf4\xf4\x8c\xd4VW;s\xdcn\x18\x05\x01\xbd\xbdo1>1N9\x81p8\xac\x83h\xaaF\x7f\x05\x12\x01\x8b&#n\xdc\xbf?\xb0\xc9\xe3q\xeb\x00\x8dw\x9a\xb5\xe8\xe88^\xb5\xbf\x84\x9b@8\xf3\xe0\xe0 \x86\x87\x87\x91\x9e\x9e\x8e\x00)\x8b\xc7\xe3P\x14\x85@\x80\xa1\xafA\xd466\xaa{\x8b\x8b\x05v\xa4\xbc\xdc\x99\x9b\x933\xf2\xfc\xc9\x13T\x9c>\x0d\x9f\xcf\x07\x97\xcb\x85\xd6\xd6V\x8c\x8d\x8d\xc1\xe3\xf1\xa0\xb3\xb3\x13\xdd\xdd\xdd0P+\x1c\xe4G\xe8\x07\xaa\xeaj\xd1\xd5\xd1ad'\xcf\x9e]:/#\xe3\xdd\xc0\xbb\x0f\xd8\xbdg\x17\xea\xeb\xebuv\xf2\x0d\xa1P\x08\xd9\xd9\xd9(,,Dee%\x8c\xe4\x01y\x8a\xf1\x9f\x13(;S\x81\xafCCNv\xae\xae.O\x8d\xc5:\xdb\x9f\xbf\xc0\xb1cG\x11\x0c\x06\x11\x8dF\xd1\xd6\xd6\xa6\xcb\xee\xeb\xebCUU\x15\xbc^\xaf\xde\x0aW\x11\x09Gp\xa0\xec8\xe8u\x16\xb1\xf3\x97/\xaf\x0d\x87B\xcfZ[\x1e\xc2\xe9r\xea=\xf7\xf7\xf7c\x82\x0c\x9c\xeeY\xd5Up3GGG\xc1\x18\xc3\xe4\xaf\xdf\xd8{\xf8 ,6\xdbJv\xf1\xda\xb5\xf5\x81\x8f\x1f\x1f7\xdf\xbc\x09\xab\xd5:\xfdlT\xc4\x99x\xf2\x98\x01\xe2\xc9\xcf\xd1\xa9)l/-\xc5\x9c\xcc\xcc5\xec\xd2\xf5\xebE\xef\xdf\xbciijh\x84\xcd\x96\xa2\xf7i2\x99\xf4\xe4\x00\x1c\x8c\xc7\xcc\x5cpo&'\x7f\xa3x\xe7\x0e\xb8\xb2\xb2\xd6\xb1\x1a\xafw\xb3\xbf\xab\xeb\xde\xdd\xa6[\x985+\x15f\xb3\x19\x16\x8bEW\xc3\xcf\x1c\x843s?\x12\x89\x04b\xb1\x18h\x18QTR\x82,\xb7{\x03\xab\xbere\xcb'\xbf\xbf\xf9vC\x03\x8c\xc4*\x88\x22L\x94\xfa\x99\x86J\xf8\x0b \x113\x1f\xa2$\xa9H\x10H\xc9\xfe\xfdp,X\xb0\x91U\xd4\xd6m[\xb1byS[K\x0b~\x91Q\x09bRy\xb1$\xfd\xdb\x11\x85\x9e\x8evc\xda\x17X\x91\x91\xe9\xc0\xaa\x82||\x1e\x18(be5\x17\x96\xe5\xe5\xe5\xf5\xa6X-H!\xe9\xbcP\xe0}\xff\xed]%\xd3d\x02Hp\x0f\x92\x0c\xaf\xe5CH\x89\xe4\xc3%\x16`0\xf0)\x87\xb9\x97,6,t\xe7\xee[]PP>\xd7\xe1\x98\x9b\x9a\x9af\xb1Z-\xccl6\xe9\x06\xaat\x99V\x11\xb1x\x02S\xb1(\x948\xe2#\xdf\xbf\x0d\xf9\x9e>:5\x1c\xf8r\x8b9\x9cNZ@M \xd9F\xfa\x9bi\xd4E\x03\xad15.h\x8a\xc2\xb8\x12\xdaF\x8dR!5\xb2\x81\xb1$\x7f\x14\xf2J&\x02\xf9\x0fU\xc1\xb4\x0f\xe5\x0f\xbf/\x00\x00\x00\x00IEND\xaeB`\x82\x00\x00\x02B\x89PNG\x0d\x0a\x1a\x0a\x00\x00\x00\x0dIHDR\x00\x00\x00\x10\x00\x00\x00\x10\x08\x06\x00\x00\x00\x1f\xf3\xffa\x00\x00\x02\x09IDATx\xda\x85R\xcfk\x13A\x14~\x93\xdd\xec\xae\xbb]\xd8X\xd3\x96\x1a\x1a\xb4Z\xf0\x22\x12\xb1\x84\x9c\xe2\xc1\x83\x90c\x22\xf4\x8f\xe8\xbf\x10\xf2\x17D\xe2\xc5\x9bW\x15r\x89\x07\x03\x1e<\xb89\xe4\xe8!\x9bH\x84R\x88\xd8C\xd2&\x07\x11\xf2cw\xfb\xde0S&9\xe8\x83\x8fy\xf3\xe6}\xdf\x9b\xfdfY\xadV\x03\x8a|>\x0f\xc3\xe1\xf0t\xe7\x9b\xff\xfa\xef\x93G\xab\x14\xfb\xa5\xfb\x16\x8b=m7<\xf0\x8e\x96q\x1c\xf3\xbe\xe5r\xc9\x5c\xd75g\xb3Y\xb8X,\xde3)\x80\xb1\x85\x07W\xfb{{I\xcb\xb6\x81!!b\x00\xba\xa6\xc3j\xb5\x820\x0cyS\x14E0\x9f\xcf\x81\x04\xc7\xe3\xf1\xb9*\xf0\xa5P(\xbc\xc0\x90{\xdeLD\x12\xc0\xc9|\x95y\xaf\xd7\x83n\xb7\x1bH\x81\xe7\x88\xaf\xd5j\x15\x18ckD9]\x82\xce\x08\x83\xc1\x00:\x9d\x0e\x17\xd0\x90|Q*\x95\xd2\xb9\x5cn\xadI\xe6$\x22k\x04\x8a \x08\xc0\xf7\xfd\x80\xd5\xeb\xf5\x8f\xd9l\xf6\x95\xa6i\x90H$\xf8!\x9a\x03\xb4\xa7\xdbP\xae\xeb:$\x93I.h\x9a&x\x9e\x07\xa3\xd1\x08\xfa\xfd~\xc0\x1a\x8d\xc6\x1f,8thY\xd6\x8d\x08\x91%\xa8\xb6\x99\x93\x0f\x93\xc9\xe4\x82>\xe1\x1e\xf6?E\xdcF<Dw\x0f\x1d\xc7y\x80y\x1a\x05=\x5c-\xc308\x89n!\xcd\x9dN\xa74\xf0\x8c5\x9bM^\xa0\x86J\xa5B\xe3\x89\xb4\x8d\x08\x05\xa2b\xb1\xb8\x9d\xc9dv\xf1\x99SH\xbak\xdb\xf6\x1d\x14;\xc4\xb37\xac\xd5j\xdd\x18V.\x97m,>F\xb8\xf4\x15\xb0\x1e\xb1\x82\xcbv\xbb\xfd\x9d\xfbD?\x04M\xc7\xa0\xd78B<\x139S\xb0\x19\xbf\x91\xf7\x99{\xa5\x08\xa4\x10%\xc4\xfe\x7f\xc8\x14g\xc8\xfb\xa0\x0a\x18\x98\x1f#^*\xd3\xd5\xd8\xdc\xff@\xde;U`\x07\xf3\x13\xc4}\x85\x10\xff\xe3\x06\x03\xe4\xbdU\x05<a\x1e\xb9\x7fK\x98\xe8\x08\x90\xb1\x96\x80\x8c\x9f\xc8\xab\xab\x02\xf4|\x12&\xc2\x10+\x89m\x09\x11W -L\xfcD\x02\xd7\x1e\x16\x14d2\xed\xb7\x1e\x00\x00\x00\x00IEND\xaeB`\x82\x00\x00\x01P\x89PNG\x0d\x0a\x1a\x0a\x00\x00\x00\x0dIHDR\x00\x00\x00\x10\x00\x00\x00\x10\x08\x06\x00\x00\x00\x1f\xf3\xffa\x00\x00\x01\x17IDATx\xda\xa5\xd2\xb1KBQ\x14\xc7\xf1\xf7h(!\xcb@\xc7\xa0\xdd\xc6\x90&\xb7\xa0 lP\x02\x87\x10EB$q\x13\xfa\x0b\x04\xb7\xc0 j2\x87Pp\x08$\x87\xb6\xa0\xcd5\xc1\xad\xa1%\x0c^f\x10.\xd1\xf7\xe2\x11.\xf2\xcaw\xe9\xc1g9\x8f\xfb\xbb\xf7\x9e{l\xeb\x9f\x9f\xedR[\xc4>\xa2X\x95\xda\x10\x0fhc\xfcW\xc0\x11\x0e\xd0\xc4=\x1c\xa9\xafa\x07\x87\xb8E\xdd-\xa0\x8c\x17\x9c\xcf9u\x1e\xeb8\xd5\x03R\xf0\xe1\xc2\xe3\xd5s\xf8BM\x05,\xc8\x91\xe3\x86\xfdk\xa9+\xa9\x80ml\xa1j\x18p\x82\xae-\x8d\x19\xa1c\x18\xb0\x07\xbf\x0a\xd8\x95.\xdf\x18\x06$\xe1\xa8\x80\x00*86\x0c\xb8Di\xfa\x0agRx\xf2\xb88,\x1b\x16\xa7\x01+\xd6d8\x8ax\x9e\xb3xC6TC\xf7\xa1\x0fR\x105d\xf0\xea\xb2p\x09ik2\xe2\x05\xbc\xa9\xe2\xec(_#\x8b\x04b\x18H]\xf5\xe9\x1b\x0d\xdc\xe9\x0b\xf4\x80M\x5c\xa1\x8f\x9e4vY\xfe}\xfev\x1f= \x82\x10\x1e\xf1\xee\xf5)~\x00\xba\x95/\xfa\xd5R\xff}\x00\x00\x00\x00IEND\xaeB`\x82\x00\x00\x02\xbf\x89PNG\x0d\x0a\x1a\x0a\x00\x00\x00\x0dIHDR\x00\x00\x00\x10\x00\x00\x00\x10\x08\x06\x00\x00\x00\x1f\xf3\xffa\x00\x00\x02\x86IDATx\xda\xa5S=hSQ\x14\xfe^\xfe\x93>\xfa\x88MB\xdb!NM\x09\x91\xb4TP:8\x05\x97\x0eR!uH\xa9\x0dX\x09N-1(\x82 \xe8\xe4*ti\x06\x85Pp\x10\xb2d\x89\x1dK\x91\x100H!U\x8b8I\x13#I\x9a\xdf\xf7\x93\xf7\xe2\xb9\x17\xcdR\x15\xc5\x03\x97{9\x9c\xef;\xe7;\xe7\x1e\x01\xffi\xc2\xaf\x9csss&\xbf\xdf\x1f\xad\xd7\xeb\xa5\x83\x83\x83\xe3\xbf& \xa0ufff\xcd\xeb\xf5\xde\xb7Z\xad\x81~\xbf\xbf\x93N\xa7\x13\xd3\xd3\xd3WdY^TU\xf5E\xa7\xd3\xf9z\x86\x80@\x8e\x95\x95\x95\xdbN\xa73E\xc7o\xb7\xdbA7NNN\xfa\xd9l\xf65\xdd\xd7\x88@0\x0cC1\x99L\xaf\x86\xc3\xe1v\xb3\xd9|3\x22\x98\x98\x98\x18\xdf\xda\xda\xfa<;;{\xceA\xc0n\xa7\x83R\xa9\x84\xfd\xfd}\xd4j5\xb4\xdbm\x10\x01\x04A\x00\x11\xc0l6\x83*|K\xe0\x9b#\x09\xb1X\xeca*\x95zR,\x16\xb1\xb7\xb7\x87J\xa5\x82V\xab5:T>\x07Z,\x168\x1c\x0e\x08\xc3!\x94vk\x8d\x13\x04\x02\x01!\x18\x0c\xdeq\xbb\xdd\xdb\xd5j\x15\xddn\x97\x1f\x96\xf9\xf4\xf4\x14\xa4\x9bg\xa7\xac\x18\x1b\x1b\x83U\x919aW\xd5\xc2\x9c \x14\x0a\xed\xfa|\xbe\x98\xae\xeb\x18\x0c\x06\xbc\xdc^\xaf\x87F\xa3\xc1\xc1\xa4\x99\xf7\xc4\xe5r\xc1\xd3o\xe3\x9b\xac\xa2e\xb6\xaa\xd4d\x91\x13LMM\xa5\xa9\xbc\x8d\xc9\xc9I\x90\x13\x8a\xa2\x80F\xc8\x89\x98fI\x92`\x87\x81\xf3\x03\x19\xefe\x1d\x0dEe\xfeg\x94d\x93\x11\xd8\xa5q\xe9\x9e\xd7\xe7}\xcc\xc0L\x1f\x03\xb3\x12m6\x1bH\x16\x9c\xdd\x16\xdc\x9a\x8cOf\x07\xd6om\xa0\x5c.\x7f(\x14\x0a\x11\x92\xfb\x85\x11\x88\x94\xfd\x11\x05\xa6\x18@'\x090\x0c\x08\xd40\x97(Bj\xd4\xd0W5(\x1e\x1f\x92wS\x88\xc7\xe3\xbc\x0f\xf9|\xbe\x97\xcb\xe5n\xfc\x9c\x82H\xb3\x7fN\x04Q\xd6,\x8b\xa1C\xa2n\xdbt\x0dUE\xc3\x85K\x97\x91L&\xb1\xb4\xb4\xc4\xabb1d\x1f\x8f\x8e\x8e\x22\xa31\x92S\xa0.o\xd2\x98\x9e\xd2\xd3f\xa6 \x83\x8d\x8a\xa4d2\x19D\xa3Q>\xc6\x1fV><<\x8c\x84\xc3\xe1\xca\x99] \x82E\x22zI\xc1~\x06\xd04-K\x1f\x0c\xab\xab\xab\xd7\x13\x89\x04DQ|Gvu~~\xbe\xf6\xdbe\x22\xa0\x87J\xdd\xa1\xe71M\xe4\x01}a\x83\x96k}a\xe1\xe2x<\xbe\xbe\xbb\xbc\xbc\x5c\xff\xe36\xfe\x8b}\x07\x05\xaa\x22\xb4\xd1\xd9J\xb6\x00\x00\x00\x00IEND\xaeB`\x82\x00\x00\x01\xd4\x89PNG\x0d\x0a\x1a\x0a\x00\x00\x00\x0dIHDR\x00\x00\x00\x10\x00\x00\x00\x10\x08\x06\x00\x00\x00\x1f\xf3\xffa\x00\x00\x01\x9bIDATx\xdacd\xc0\x03$\xd2\x97i\xfc\xfd\xf2\xf6\xc1\xeb\xa5\xb9?p\xa9a\xc4%!\xe4[\xc3\xc7g\x9b\xf4\x06\xc8\xbc\xfd\xf7\xdb\x87\xf0\xc7\x0dFWH2@\xbad\xb7*\xab\x98\xf2-(\xf7\xdb\xff\xff\xffs\x1e\x96+\xcf\xc7k\x80h\xccT6n=\xcf| 3\x15\x88U\xb0X\xb0\xf0\xc7\xc3sY/\xa6\x86|\xc30@\x22c\x05\x1f\x87\x92\xd9\x0e \xd3\x92\x01?\xb8\x06\xf4R(\xd0K\xd7P\x0cP\xe8\xba7\x17H%1\x10\x07\xbe\xfc\xf9\xf4\xca\xfaI\x8b\xc5%\xb0\x01bIs%\xb84\x1c\x1f\x03\x99,D\x1a\xf0\xef\xef\xb7\x8f\xbe\x8f\x1b\x0c\xb7\x81\x0d\x90\xad=\x19\xc9\xcc+\xba\x8cH\xcdo\xff\xfd\xfe\x11\xff\xa8Zk+\xdc\x0br\x8d\x17*\x998\xf9\xda\x88\xd0|\xf4\xf7\xab{\x91O{\x5c\x1e\xa3\x04\x22\x9a\x01\xa7\xff\xff\xf99\xf7\xdf\xcf\xaf\x8f\x98\xb9\x85\xb6\xc1\x9c\x0c\xc4]_\xcem\xa8}\xb3\xa2\xe8\x0f\xb2\x89`\x03djND\xb3\xf0\x89-\xf9\xff\xef\xef\xc1\xaf\x17\xb7:\xbdY^\xf0\x0f\x98\x90\xf8\x81\x09\xe9=P\xfa\xcd\xbf_\xdf\xe2\x1e\xd5\xe8\xec\xc0\xe6$h \xce\x93\xe5\xd2px\xf0\xf7\xdb\xcb-\x8f\x1b,\xfda\x92\xd2\x15\x07}\xfe}yw\xe1\xf9\x94\xc0'\xb8\xfc\x84\x1c\x8d\x9b\xfe|z\xe8\xfe\xf7\xf3K\x83\xe7\x13#\xae\x13\x19\xa0\x08\x03\xa4\x8aw(1qq\x9ce\xf8\xf3\xfd\xdd\xdf\xaf\xef]\x9fO\x8a\xbaG\x92\x01  \x99\xbf\xc2\x8c\x99\x8b\x7f%\x90y\xffI\xbb\xa7\x13\xc9\x06\x80\x80\x80[\x16\x1b3\xaf\xb0\xfc\xdb\xb5\xcd\xb7\x891\x00\x00\xfd\xde\xa7\x11\x80;\xb7\xc8\x00\x00\x00\x00IEND\xaeB`\x82\x00\x00\x02p\x89PNG\x0d\x0a\x1a\x0a\x00\x00\x00\x0dIHDR\x00\x00\x00\x10\x00\x00\x00\x10\x08\x06\x00\x00\x00\x1f\xf3\xffa\x00\x00\x027IDATx\xda}\x92Os\xd2P\x14\xc5oB \x84@\x08 \xa5\xa8T\x98q\x9cv\x1c]\xe88\xae\x9c\xf7X\xbb\xe9\xc6q\xe1\xca/\xe1\xb6\xe1#\xe9\xd6E\x1e.tawj\xad\x8bV\x07k\x81\xa1\x81\x10\xc8\xcb\xff\xc4\x94N\x19A\xe0\xed\xee\x99\xf3~\xf7\xcc\x9d\xc3\xc0\xd2\xcbVd4\xed\xeb\xede]\x8cus\x85\xce\xfc;\x14k[hlS\x22\xe7rX;\xed.\x98\xf9\xb2\xa4\x06\xbe\x0f\xfe\x886\xd7\x02rE\xe9\x80&BE\x16E\x1cE\x91b\x19\x94\x5c\xeaB^\xc4\xee\xc4\x22\x16\x1b*\xc1`\xca\xac\x05\xdc\xde\xa9\xa0s\xc3 \xdbr\x1e7\x1e\xee\x12n;\x0b\xdf>\x7f\x05\xbf3Tl\xdf\xc7a\xecv\xf5\x0d\x09f7\x90E\x95\xc6\xe6\xa7\xcf\x9f\xc1\xc4\x9cB\xefO\x0fFg\x17\x10R\x17\x8ai\x1ek\xda\xa4\xbd\x11p\xb7QEa\xadD\xf6_\xed\xc3\xd1\xd11\x1c~8\x84\xf1@\x87\xa4n\x13:\xb5\x9b\xcb\xfe9\xa0V\x96\x91\xeezJ!\x95\xc2\x8f\xea\x0dH\x0b\x02\xbc\xfbu\x0c%/\x02\xd1\xf2f\x9e\x1f\x9e\x03y`\x14\xddtZ\x0b\x80\xac\x98FV\x86#\x12\xb0\xa4\xe2E\xf8\xe5\x93\x07\xe0\xc5\x17\xff\xd2=\x07\xd1\x8f\xe6\xdb\xdev\xfa\xc4\xcd\xa71\xe7\xf8\xc41\xae\xd20\x90N\xa2D\x8e'\xf5\x04\x8fOzZ{W\xceE\xeb\x00\xef\xbb\x9a\xa2\x99vK\xc8\x0b\xaa\x1b\x86\x10L\x9c\xe6,\x81,e\x90n\xd0\xf6^\xb5\x84.\xa6\x94\xbc\xbe_\x9f}\xf8\xaeO\xe6\x80\x81\xed\xc0\xa7\xd1\x84P\xd3\x99mN\x0bId[^{\xe1\x88RNP\x0d\xdb\xc5o\x1e\xdf\xfb\x0f\xf0;\x06|\x1c\x19p\x8b\xe3\xf0\xd9\x98\xb6\x17np\xfdXY\x88\xaa\x11\xab\xa4\x00\xf0\x8b\xbd\x1d|\x0d\xb8\xdc\xde\xb1\x1c|\x12\xf8Dr\x02E\xb7\xdc\xd6J\x80(g\xd4\x04\xcb\x8014\x9buITS\xa9\x04\x16b\x9d\xc6\xc0\xb8\x99\xf0\x93\x8d\xc8\x0d'\xc0}\xc3Z\x9d\xe0f!\x8b\xfa\x1c\x90;!\x83O\x97\x0a\x93-dT?\x8c\xc0\x1e[\x9b\x9bX\xceg\xd00\xc5\x12\xde\x0b\x09\x8dk\xbb\x15\xcfZ<'\xdd\x80,\x7f^\x09\xb8\xea\x05\x8fB\x88\x80\x9a\xee,E\x92\xe7\x0e<\xc7o\xad\xf2\xfe\x05\xacb) A\xd5\x83\x8e\x00\x00\x00\x00IEND\xaeB`\x82\x00\x00\x01q\x89PNG\x0d\x0a\x1a\x0a\x00\x00\x00\x0dIHDR\x00\x00\x00\x10\x00\x00\x00\x10\x08\x06\x00\x00\x00\x1f\xf3\xffa\x00\x00\x018IDATx\xda\xa5\xd2\xcd+Da\x14\xc7\xf1\xe7\xa6dR\xac\xc4f\x16\x94\x94\xc4\xc2J2yI\x8d\x05\x09\xc9\x82,m\xb1\xf3\x17\xccN\xb3\x9d\xa5(%\x14\x8a\x85\xbc\x8e\xb2\xb2PV\x14\xca\x86\xe5\xc8b\x90\xc6\xf7\xd4\x99z:\xeeSS\x9e\xfa\xd4\xbd\xa7{\x7f\xcfy\xce\xbd\x91\xfb\xe7\x8a\x02\xf5&\xd4\x9bZ\x01\xaf\x95\x04t\xe0\x06\xd5\xa6\xfe\x85n\xdc\xc5\x05$\xd0\x8bZ,\xa2?\xd0\xd99\xb2\xf8\xc0\x15>%\xa0\x13\x87\xbacCL\xdb.\xe68\xb2\x9e\x91\x96\x80\xbc\xbe\xd8\xaeg\x94\xeb#\xac\xe0V\x1f\xeeB\x06#&\xe4B\x02\xbeQ\x85{\xb4a\x0b3\x18\xc7\xbc>\xb8\x86=lb\xda\x0b\xf8\x91\x80\x92W(\x22\x89\x09\xe4\xccn\x0b\xd8\xc5\x0bj\xfc!\xfa\x01g\x18\xc4#\x9aM\xc0\x13Zp\x8a\x81P\xc0\x01\xc6txu&\xe0]\x87\xb9\x8f\xd1P@y\x97mL\x9a\x80\x1dL\xd9\xeel\x80\xd3!\xe5\xf5\xbc=Z\xbb\xd6\xb9\xf4\xe9\x90\x9d\x1f \x9f\xae\xd1\xab\x15t\xf7\x13\xb4j\xed\x01C\xda\x85\xffO\xbcI\xc0\x12VM\x17\xd2\xd51.\xf5>\x85a\xf7\xf7\xd7_.\x17f1\x173\xb8\xd0\x92\x81\xaec#\xaa\xf0\x85\xe0\xfa\x05L[@H\x13\x1d\x0d\xc5\x00\x00\x00\x00IEND\xaeB`\x82\x00\x00\x02\xfa\x89PNG\x0d\x0a\x1a\x0a\x00\x00\x00\x0dIHDR\x00\x00\x00\x10\x00\x00\x00\x10\x08\x06\x00\x00\x00\x1f\xf3\xffa\x00\x00\x02\xc1IDATx\xdam\xd2_HSq\x14\x07\xf0\xef\xbdwk\xd3J#\xb5\xb9\x88V\x04\xa5\xd4[\x191#\x10z\xd0\xcc;\xcd\x10\xdb&d\xef!%b\x9af\xeb\x0f\xae\xc2Rg\xe9K\xf9T31\xe7\x9d\xbe\x08RZ\x0a\x06\xb3\x02\x89JL\x98\x98\x7f\xa6\xa99\xd3\x10\xef\xbd\xfd~\xbb:\xbb\xd5\xe0\xc0\xe0\xf7;\x9f{~\xe7\x1c\x06k?\xb399e\x87\xc1\xb0\x8fa\x18\x99\x04\x94\x90Cg\xb2\xcc\x90\x90\xd7\x83\x99\x0e\x04\xbe\xf6\xf5\xf5\xbe\xa2g\xcc:P\xe1\xb8\xe9\xe5-\x96\x0c\x92\x06\x8ec\xc1\xb2J(\x80\x0cQ\x92 \x8ab\x08\xf3\x0a\x9evGE9\xaf\x02\x1c7n\x09\x99YY<\xfd2\xc7q\xe0H2\xfd\xff/ \xa3\xad\xcd\xe3\xad(/\xb3\xa8\x80\xdb\x95N!;\xfb,\xcf\xb2\x04`90,\xa3\x02d\x89\x22\x0a\xf0\xa2\xa5\xc5[ZrE\x0d\xdc\xb9{O\xc8\xc9\xcd\xe5\x19r\x81\x22,E\xfe\x00$\x89\x06\x01HJss\x93\xb7\xb8\xa8H\x0dTU\xdd\x17r\xcfYyY\x16\xc9\x134`\x99\xbf*\xa0\xcf O 2\x9a\xdcno\xe1\xe5Kj\xe0Au\x8d`\xb5R@\x0e70\xd4\x0f\x12\xac\xb8\x8a\xa1\x85E,\xae\x880EnB\x87\xa7U\xb8XP\x90\xa9\x02jj]\x82\xcdf\xe3EQ\x82F\xa3\x00:\x8d\x06\x9dc\x01T\xfa\xe7\x10\x1f\xbd\x15\xb1Z\x0es\xc1%,\xf8\xfa?\xbfq\x96\x1d^\x99\x99Z\x0a\x03\xb5\xae\xba\x10 \xcbR(YK&\xd1=:\x85\x0c\x9f\x1f\xe9{\xe3qjw\x1cN\xc4FA\x18\x9fC\xbf\x7f\x1a\x03/\xbb}\x13\xce\x82\xa40\xe0\xa2\x80\xdd\xceK\x92\x02Dj8\x98\x1e\xb5C\x8a\x8dA\x92\xc9\x08\xdb~#rv\xc5\xa0zx\x12\xef\xc6\xbe\xa3\xfb\xc30\xe6\x9f?\xb4o\x00u\xb4\x02\x05\xe08\x06\xe3\x81Y\x1c\xbc\xfe\x14\xc9'\x8f\x22\xebH\x22\x92\x0c\xd10\xc7E\xa1cr\x1e\x13\xb3\x8b(m\xe9\xc1ro\xe7\xb3\xffV@\x97\xe8\x8b\xff\x1b\x8e]p\x22/\x9fGQv\x0a\xb6\xe8\xf50EG`pf\x01:\x92u\xa8\xac\x11x\xffZP\xf7\xc0j\xe3%\xda\x03:>2\xf3\x98\xf4B\xa5\xcf\x06\x03,\xa9f4\xe6\xa7b{\x09I\x0c\x06\xa1\xf9\x11\x848\xd8\xe5\xd8\x00\xc8\x14\xac\x14 ##o\x80~\x93\x16\xc5.7\xea[{\x01\xd2\x8f3i\xc7\xe1\xbez\x1e\xba\xcc\x12h\xc9\x94\xa4\xa5\x9f\xbf\xc4\x9e'{\xc2@}}C\xbb\xdd\x9ewz\x95\x00\xb4\x02\xdaHr\x0f9\xd7\x1a\xd0>0B\x0aa\xe8F\x81\xdd\x1cA\x93\x97\xe1\xf3\xf0\x08Nu\x85\x81\x84\x84\x844\xa3q\xe7\x01\x99.\xfd\xdaz\xd0\x95\xd6\x11\xe5\xed\xc7\x11\xfd,\xb7-\x11\xfa\x88H\xccO\x7fB`\xe819\x1e\xa5w~\x03\xc4\x02E\x8a\x02\xff\xffM\x00\x00\x00\x00IEND\xaeB`\x82\x00\x00\x01\xf8\x89PNG\x0d\x0a\x1a\x0a\x00\x00\x00\x0dIHDR\x00\x00\x00\x10\x00\x00\x00\x10\x08\x06\x00\x00\x00\x1f\xf3\xffa\x00\x00\x00\x19tEXtSoftware\x00Adobe ImageReadyq\xc9e<\x00\x00\x01\x9aIDATx\xda\xa4S1k\xc2@\x18\xfdr(\x18:\xb4B\x1d:X\xda\x1f\xd0\xc9\xd5A\x10\x17\x17\xd1I\xd0\x8e\xfd\x01\xd2\xa1\xa3:u\xb1\xe0\xdaA\x90\x88\xa2\x93\xb3\xed\xea\xe2\xdaM\x17K\x97\x0e\xb6\xd4\x08\x89\x89J\xd2{\x1f$X\xbb44\xf0x\xf7.\xef\xbd\xbb\x0b\x17\xc5u]\xfa\xcf\x13\xba\xb9\xff$!\xc4_\xbc\x17\x12s\x89K\x89WL<\xdeEI\x04Xl\xbe\xcf\xde\xceC\x01\x0a\x94}\xe1\x15\x089\xb8u\x1c\xc7\x0d\x0a\xe4x\x07\xa6i6\xd4\xf7:m\xb7[\xbf}\xb1XP,\x16\xfb\xa1\xf3\xf9<\x8d\xc7cJ&\x934\x99Lh}Vm\xc8W\x0fB\xd7\x97d\xdb6\xa5\xd3i\xd24\x8d\xd9\xb2,\x1e{\x80N$\x12d\x18\x063\xfc\xc8\xf1\x11\x96\xcb/\xda\xedvT*\x95(\x97\xcb1C\x03\xd0\x00\xc6\xd3\xe9\x94\x06\x83\x0134r\x5c\xb0Z\xad|3\x18G\xf1\xd0\xef\xf7)\x9b\xcd\xf2\x18G\x80\x07\x0c\x1fr\x5c`Y6\x1b\xe2\xf18\xf5z=\xeav\xbb\xb4\xd9l\x98\x11(\x16\x8b\xac\x01\xf8<F\x8e\x0b\x1cGp\xe3l6\xf3W\x81\x09e\x98\xf7\xc2\xadV\x8bK\xc1\x98G\x8e\x0b\xc2\xe1#n\xect:\xfe\x0a\xc0\xa1\x1e\x0e\x87T(\x14\x981\x8f\x1c\x17D\x22'\xdc\xd8n\xb79\x04\x86\xe1P\xa7R)j6\x9b\xcc\xf0#\xc7\xf7@U\xa3\xa4\xe8\x0a\x8dF#\x06_9\xe5\xb7\xc67\xaaT*T.\x97Y#\xc7\xef\xae2Z\xf5\xf4<S\x0b\xfa\x17~\xbc=\xd7^\x9e\xae\xeb\xb8\xdf\xc7\x12*\x8e\x13 \xefH\xac\xe5u\xd6\xbf\x05\x18\x00\x9d[Z\x8cK\xb1\xd7t\x00\x00\x00\x00IEND\xaeB`\x82\x00\x00\x02\x19\x89PNG\x0d\x0a\x1a\x0a\x00\x00\x00\x0dIHDR\x00\x00\x00\x10\x00\x00\x00\x10\x08\x06\x00\x00\x00\x1f\xf3\xffa\x00\x00\x01\xe0IDATx\xdacd\xa0\x100\x82\x087#\x06\xaeo?\x18~\x1c\xb9\xc6\xf0\x0f\xc47`g\xe7\xf8\xfb\xff\xff\x9f\xcb\xbf~\xfd\x01\xf1%t-\xd8@J_\x5c>\xfe\x0b\xc4W6acadfd\xb9s\xf2\xe7\x0f\xc6\x0f\xeb\x19\x8f\xb03\xff\xb7\xfa\xf9\x83\xe9\xeb\xc1\x13\xac\xa9_\x96\x0by\xf123G\xfff\xf8\xff\xfb\xf6\x8f\x9fu'[V\xf3\xf0\x8b+T2\xfee`|\xfd\xee\xd1Le\xce\xd8\xf3r:\xff'3\xfcfd\x7f\xff\x95e;\xe3\xf7\xcd\x8c\xbf\xd9\x98\xff\xb3\xfc\x02\x9a}\xfe,W\xc7\xeb\xb9\x02Al\xcc\xccj\xbf\xff\xffg\xb8\xf3\xfd\xdb\x9as3\x8frqp\x0ay1\xfce`x\xf6\xfe\xf19\x13\xa9\x88c\xc2\xd2\xbfr\x98~30|\xfc\xcd\xf6\x81\xb6\x06\xdc\xfc\xf9k\xcd\xc5\xe9\x07\x07\xd0\x05C\xd5\x80y@\x03\x98p\x19\xf0\x08h@$\xaa\x01\xefN\xcf\xb8\xf7\xe1\xf9OE\xf6\x7f\x8f\x18\xce\xdfx\x95\xac&\xef\x10\xf5\xef\xe77\xe7\x9f/\x1e3\xbcf\xfc\xda\xf6\xdf\xd0_\x84\xf7\xdf\xef\xb4\xcf_\xbe2\xf03\xbdX\xf9\xf8\xdf\x97\xf3*\xe2<\x1d_\xdf?c\x10f\xe5?\xcd\xd8UY`\x1dle|\xe0\xd3\x87\x97\xdb\x0dcK\xfcr\xe2\x22\x94\x8a#\x03\xce\x7f\xff\xf0\xf2nj\xc7TK!Q)\xce\xc9e\xd9\x17~\xbc{\xc9\x5c?w\x89\xe1\x9d\x17\x9f>\xae\xeam:\xf2\xfb\xfd+\xad9\x9b\xb7\x99\x80\xf3B\x7fcM\xf7\xe6-\x9b;\xf6\x9d\xbe\xf8\x16\xc4o\xaf*->u\xe2\xf8\xf6\xf5\xfb\x80\xb9\x03\x08\xcas\xd2\x03_=}\xfcg\xfe\xfam\x9bA\xfc\xa4\x88\x10=!.\x0e\xc7\x9eyK&\x82\x0d\x90\x90\x90`~\xf1\xe2\xc5_X\x0e\x13\x11\x11a~\xf3\xe6\x0d\x9c\xcf\xcf\xcf\xcf\xf4\xe7\xcf\x9f\xff_\xbf~\xfd\x0f\x13\x13\x10\x10`\xfe\xf0\xe1\xc3_FJ\xb33\x00J?\xa0n\x954G\xad\x00\x00\x00\x00IEND\xaeB`\x82\x00\x00\x02\xf4\x89PNG\x0d\x0a\x1a\x0a\x00\x00\x00\x0dIHDR\x00\x00\x00\x10\x00\x00\x00\x10\x08\x06\x00\x00\x00\x1f\xf3\xffa\x00\x00\x02\xbbIDATx\xdacd \x01\xb4\xb46\xa7Y\x98[\x94\xff\xfc\xf5\xf3\xdf\xd5\xabW&\x97\x95VLb$VsaQ\xbefLL\xec\x15U\x155\xa6\xfc\xfc\xbc\x95{\xf7\xed\x9b\xfc\xe8\xe1\xa3\xa3D\x1b\xd0\xdd\xdbUgia\xd9\xa8\xa6\xaa\xc6\x90\x99\x99)\xb3v\xed\xba\xa7 q\xa2\x0cHOOcttr\xb8\xf9\xed\xdbwUggg\x86\x9d;w.\xf8\xfc\xe5s\xeb\xdf?\x7f\x8d\x882`\xeb\xb6\xad\x01\x8f\x9f<Y\x7f\xf1\xd2\x15\x06k+\x0b\x06^n.\x06V6\xb6\xff\x8b\x17-.!h\xc0\xc6\x8d\x1b\xfc\x80\x9a\x97\xa8\xa9\xa9\xf3\xaeY\xb7\x9eAG[\x8bAA^\xf6\xff\xca\x95\xab\xe6o\xdf\xb6=\x1d\xa7\x01@g3\x19\x1b\x1b7\xac\xdf\xb0\xa1\xfa\xe1\xc3\x87L\xb5\xb55{\xf7\xef\xdb?\xe7\xf6\x9d;w?}\xfct\xef\xec\xd9\xb3oq\x86AAa\x9e\x107\x0f\xcf\xd2\x8d\x1b6y\xfc\xfb\xf7\x8f!>>n\xee\xad\x9b\xb7\xd2\xe7\xce\x9d\xf7\x17]-\x86\x01y\xf99F\xff\xfe\xfd_{\xfa\xf4\x19\x85\xdf\x7f~3\x84\x06\x87\xec\x89\x8d\x89\xfdza\xef\xdek\x0f>\x7f~)\xca\xcc,l\xe1\xe5\xa5w\xed\xfa\xf5\x0eOO\xcf\x13(\x06\xa4\xa4&%\xf2\xf2\xf2M}\xf5\xea5\xe7\xf7\x1f\xdf\xffKIJ\xf4\xd9\xdb9z\x9e<yR+\xc0\xca\x8aA\xf6\xd5+\x86\xef\xca\xca\x0c\x87\x1f=`\x10V\x13~z`\xf5\x01\x0d\xb0\x01V\xd6\x16\xec\xbaz\xba\x93\x04\xf8\x05S9\xd89\x19?|\xfc\xf0\xff\xfd\x87w\x0d\x92\xe2\x92\xa7lm\xed\xb6\xaf_\xbf\x9e\x01\x14}FFF\x0c\x9c\xff_1<zs\x92a\xf1\xff\xdb\x0c\xf2\x87\xe5\x13\x18\xfd\x02|\xc5UT\x947|\xf9\xfc\xcd\x82\x99\x99\x99\x81\x97\x97\xe7\xff\x8b\x17\xcf\xcb\x16-\x5c\xd2\xd3\xdf\xdf\xdf\x1a\x1d\x1d]\xf5\xec\xd93\x86\xef\xdf\xbf3\xbc\x02\xba@R\x5c\x84AJR\x9c\xe1\xfd\xa7\xef\x0c\xdb\xb7o\x9f\xcbXT\x92?\xf9\xd2\xc5\xcbM:\xba:\xfd_>\x7f\x8d\xfc\xf1\xf3{\xee\x92E\xcb\xa6\x81\x5c\xd6\xd2\xd22%)))\x1b\x18\xe2\x0c\x93'O~\xfb\xe2\xc5\x8b\x87BBBR%%%\x12rrr\x0c\xabW\xaf^\xc3XRV4\xf3\xf5\xab\xd7\xb3\xc5\xc4Ek\x1e=|\xbcz\xe5\x8a\xd5Kaa\xe2\xe4\xe4\x14\x93\x9c\x9c<\xb1\xbe\xbe\xbe\xec\xfe\xfd\xfbK\xfe\xfe\xfd\xfb\x93\x83\x83\x83UWW7\x0e\x98\x9c{\x81^kf\xb4\xb04\x17\x17\x15\x13M{\xfa\xf8\xc9\xae\x9b7o\x9d\xfd\xfa\xf5\x1b\x13,\x86\x80^\x02a\xae\xdf\xbf\x7f\x7f\xfe\x0f\x04@10\x06\x8a\x810\x1fP\xe8\x0b(\x10\x99\x81\x98\x0b\x8a\xd9\x81\x18f\xc0? \xfe\x8b\x86\xff@1\x8c\xfd\x17\x00\xb6\x09;\xd6\xae\x89\x19\x89\x00\x00\x00\x00IEND\xaeB`\x82\x00\x00\x02\xf3\x89PNG\x0d\x0a\x1a\x0a\x00\x00\x00\x0dIHDR\x00\x00\x00\x10\x00\x00\x00\x10\x08\x06\x00\x00\x00\x1f\xf3\xffa\x00\x00\x02\xbaIDATx\xdam\x93KL\x13Q\x14\x86\xff;Skk\xbb\xc7\x85\x89\x09\x89P\xa0\xf8\x881\xa91\xc1G\x844`\x8d\xcaC\x1eB\x05\xe4Q1\x90\xb82h\x80D\x131\x121R\xad `\xc0\xc7\xc2\xb5+w\xba`\x81\x1b\x8a@%\xc4\x10\xa8\x101\xa4\x96\xb6\xb1\xa5\x9d\x87\xf7\xde)\x83$\x9c\xcc\x9d3\x9d{\xcew\xfe{\xce\x94 m-\xcd-w\xa3\xd1\xe8\x83\xbc\xfc\xc3\xa8q\xdf\x80(\x08\x00a\x17\x81 \xd0;}\x16\xe8M\xa4\xcf\xb2\xa2`d\xe8%\xd6\x7f\xaf\xa5\xc8\x16\xc0\xd3\xea\xe9\xde\x08\x87{l\xb9v\xb4u\xdc\x86(\x0a\xfc=\x0b d\x1b\xc0\xbc\xa2*\xe8\xef{\x8c\x95`\x10\xa4\xb1\xa1!%\x10\xc1P\xe9nD\xd6\xa1l-)\x1d\xc8<\xabN/^y6\x10\xc0\x87\xb7\xe3p^p\xe1\xeb\xe4$V\x83\xcb u\xb5u*\xab\xd2\xd4\xd6\x01\xbb\xdd\xbe%H\x03p\xf9i\x10\xfd\xed\x9f\xfe\x86a\xdfs\x9cw\x96`f\xdaO\x15,\x81\xd4\xbb\xaf\xab,\xa1\xb9\xad\x1dG\x8f\xe4c7ST\x15\x8a\xa2r\xc0\x88\xcf\x8b\xb3E\xc5\x98\x9b\xa1\x80e\x0a\xa8\xad\xb9\xc6\x01M\xb7:\x90\xcf\x1409\xaa\x96\xa8\xb2Du\x1b\x10\x98\x9b\xc5\xa8o\x00\x05\x85\xc5\x98\x9f\xf5c\x95\x01\xaa+\xabxx\xbd\xa7\x1d\xb6\x9c\xdc\x1d\x95\x19@\xdd\x02\xd0\xb50\x1f\xc0\xf8\xa0\x17y\xc7N`\xe9\xc7\x02\xc2\xa1u\x90\x8a\xb2r\x0ep\xb7\xb6#3\xcb\x96\xce\xdcv\x1aDS\xb2\xb8\xf0\x1d\xef^y\xf9^rs\x93NJ\x04)\xbd|\x85\x87\x9fq\xbap\xe0`&\x7f)\xd0\xce\xb1\xc6\xb1\x0d\x85\xce\x5c\x91\x15\xa4d\x09\xabK\x8b\xf8\xf2\xe9#R\xa9$\x12\xf1\x04\xccf3\xc8%\xd7Eu\xd7\xce\x11\xf2\xffYvl\xc9\xb2\x8cX,\xa6\x01\x5c\xc5%\xfan\xb6\xcd\x06\x93\xd9\x04\x83\xc1\xa0\xc9KC\xa4\x94\x84\x89\x89\x09^\xd9j\xb1B\x92$\xfc\x8d\xc7a`1\xce\xc2\x22\x1d\xd0r\xd3\x83\xa7O\xfa\x91H$\xd0\xd5\xd3\xcd\x8f\xc2\x8c\xf9G\x0f{!\xd3DV5\x99Lb\x93\xf6\x80\x1f\xf5\x5c\xc1i\x1dP\xd7P\x8f\xc1\x17>.\xef^w\x97.\x99\x05z\x9f\x0d\xd0^\xc80\x1a\x8d\x88\xd3\xeal\xed\xa1J\xc9)\xc7I\x1dPUS\x8d\xd1\xe1\x11D\xa2\x11\xdc\xe9\xec\xd4'\xc0\x8e2<8\xc4=\x03\x84B\xa1\xe0\x9fp8H?\xf38\xc9\xb3\xe5|\xdeg6\x170@\xe9\xd5\x0a\xf8\xa7\xa6 \xd1J\x0e\x87COf\xeb5\x0533\x99L\xf8\xb5\xb6\xd6\x1b\x5c\xf9y\x9f\x0d\x89\xd0?\xd2\xf1\xfd\x19\x19}V\xabuoYE\xb9\xd5b\xb1\x18i\x03\x8d4IP4K2{36\x16\xa3\xa3SE\x83\xa8nD\x22\xef#\xd1\xa8\x8f\xcd\xe7\x1f\xe5Y;\xdb\xccQ1S\x00\x00\x00\x00IEND\xaeB`\x82\x00\x00\x02\xae\x89PNG\x0d\x0a\x1a\x0a\x00\x00\x00\x0dIHDR\x00\x00\x00\x10\x00\x00\x00\x10\x08\x06\x00\x00\x00\x1f\xf3\xffa\x00\x00\x02uIDATx\xda\xa5\x93]h\x13A\x10\x80\xe7.\xc9E4\x92\xc4')\x81@Q\xecC\x1e\xfc\x85\x8a\xa0\x22(E\x89\xf8\xff\x9b\xa6\xd6PQ\xa3Q\xa96U\x10\xb5E\xec\x83\x8dU\xab16\xd1\xfe\xd8\xa2UQ\xb1\x88\x0aR\xa9 \x82\x05\x11I+R\xa9E\x10!\xf6A!\x85$w\xb7\xce\xce\xe6b#\xbey\xdc\xec\x0c73\xdf\xcc\xce\xeeI\xf0\x9f\x8f\xc4\x97\xc0\xee@\x1a\x8d\xa9[\xfd\x01(\x9bS\x06\x92$\xa1@^\x0b[\x06F:94\x0c\xbd=]`U\x94\x89\x0b\x17[\xa6\x11\xc0_\xe9g\xdc\xa8\x09\x1e\x02w\xe9\xec\xe2\x0a\x05\x18Bp\xf9\xf2\xf9\x13\xc4\xa3W\xc0l6\xc3\xb5\xeb1\x89\x00\xd5U\xbb\x18\xd7{\x82!X\xb4`\xee_M2`\xe8e\xb8\xe8:\x83\xc1w\xef!\x11m%@[\x22.\x00\x95;}\x04\xa890\xa9\x03F/O/\x00\xb8|\x1d\x1d\x81\x1b\xd1\xcb\x04\xb8\xd9\xd1.\x00;\xb6m'@\xf5\xbe\x10x<\x9e?\xb5yR^cq\xea\xe0\xe3p\x12:c\xad`2\x99\xa0\xab\xfb\x96\x00l\xd9\xb4\x99\x00U{C0\xd3=\x8b&\xcbX\xbe}\xc3\xe6\x10T\xdf\xc7F\xa0\xbb\x0d\xb7\x80\x80\x9e;\xb7\x05`\xe3\xfa\x0d\x14\xbe\xbc\xc2\x0b.w)\xd1eY\xa6\x01r\x87\xae\xeb\xa0k:\xe44\x15\xbe\x8d\x8d\xc2\xc0\xf3>\x8a\xe9\xbdwW\x00\xd6y\xd7\xb2\x7f\x1f\xb24i\x96\xc5!\x1cp\xff\xe1\x03\x11\xe1]\xbd\xa6\xc8\xcb\xab\xf3\x00\xe3\x1e\x80\xd1\x05\x8a\x86\xc2a<\xe6Q\xdfc\xe1\xadX\xb9\x8a\x19\x89\xc7\xea\xc3`\xb3\xd9\x0aC4\xee\x82\xaa\xaaP{\xf8\x08\x024p:\x9c\x14\xfb\xe4\xd9S\x01X\xb1t\x19E\x9a\xf0h\xc2'\x8eC\xe3\x99\x06\xc8d2p>\xd2L\x10\x9e\x9c\xcb\xe5\xe0lC#\xa8\x9a\x06\x8a\xc5B\x80\x17/\xfb\x05`I\xf9b\x01\xc0\x8f'O\x9f\x82\xfa\xba0dsY\x04D(\x91K6\x9b\x85\x96\xe6\x08m\xc3\x82\x00\x0b\x16\xeb\x7f5 \x00\x0b\xe7\xcd\xcf\xa0\xa1\x98\xd1\xc1;\xa8\xab=\x0a*\xb6z\xae\xa9\x89:\xe1\x00\xaecW\xa3\xb4\x7f\xab\xd5J\x1d\xbc\x19|+\x00N\xbb#\xe8*)\xb9\xa4(\x8a\xbc?t\x90*\xf0\xa4t:MZ\xc3\xb6\xb9\xb4\xc7\x134\x0f\x8c\xe3\x9a}\x18JN7\xcei\x06N\xbd\xdc\xe5rM\xf1\xf9|\x0e\xbb\xdd\x8e?\x9bb\xc1\xfd\xcb\xbaxr\xa9Tj\xa2\xb3\xa3\xf3\xe7\xf8\xf8\x8f\xfc\x15\x83_8\x9b\xd7\xbf\x01\x10\xb5\x1f6\x94\xbeA+\x00\x00\x00\x00IEND\xaeB`\x82\x00\x00\x01W\x89PNG\x0d\x0a\x1a\x0a\x00\x00\x00\x0dIHDR\x00\x00\x00\x10\x00\x00\x00\x10\x08\x06\x00\x00\x00\x1f\xf3\xffa\x00\x00\x01\x1eIDATx\xda\xa5\xd2\xbdKBa\x14\xc7\xf1\xe7B\xd0\xe2?PVs\x10Am\x82{KCMQC\x11M\x0e\x81\xa2N\xda N5\xf5\x0f\xb49\x04\xe5d[\xd0\x14-\xbd\x81\x84\x12\xb4DAa\x14H\x0d\x09f\xf5=p\x84\x87\xf0\xc0\xbdt\xe0s\x1fx\xee9?\x9e\xfb\x128\xe7N\xf0\xe2\xa2\xd5\x18\xe6\xf0\x19p\xd9\xc7J\xc4\x80]l\xa3%\x01\x8f\xb8\x8c\x180\x8dd?\xe0\xdf'\xe8\x07L\xe1]\x1bF\x8d\xc1\x0e\xeaV\xc0*\x1e\xb41a\x04\xbca\xcf\x0a\xd8\xc2\xad6\xce\x1b\x01\xcf(X\x011|i\xe3\xb0\x11\xf0\x8d\x0f+\xa0\x8c\xa66.xC]d\x91\xc6$\xeep\x8cS\xf4\xfc\x80E=\xa2\xd4\x8c\xae\xf7\xb8\xd2\x9e\x22.0\x8b\x1d\xacI\xbf\x1f 7\xda:8\xa1\xeb+\x96q\x84s\xefT\xf2\x1f\xac#\x17\xe6?8\xc4\x12~\xfe\xec\x1f\xc8\xbe\x044P3\x86\xe5\xf9\x87P\xc5\xb5\xb7/\xef\x22\x85\x8c\x04\xc4\xb5iP\xc9W\xe9\xa1\xa2/\xf2F\x87\xe5\xd4\x9b8\x0b\x5c\xb8\x1aA\x1e\xe3x\xd2\xc7*a#l\xc0\xa0\x92\xb0\xcc/\xee{L\xbb\x1db\xff\x22\x00\x00\x00\x00IEND\xaeB`\x82\x00\x00\x00\xf0\x89PNG\x0d\x0a\x1a\x0a\x00\x00\x00\x0dIHDR\x00\x00\x00\x10\x00\x00\x00\x10\x08\x06\x00\x00\x00\x1f\xf3\xffa\x00\x00\x00\xb7IDATx\xdacd@\x80v .\x02b6\x06\xfc\xe0\x17\x10\xf7\x01q%\x88\xc3\x08\x15\x94\x01\xe2G@\x1c\x0c\xc4\xef\x08\x18 \x04\xc4k\x81X\x0e\x88\x9f\xc0\x0cP\x07\xe2\x1b@,\x01\xc4/\x09\x18 \x0e\xc4/\x80X\x03\x88ob3@\x09\x88?\x03\xf1s \xb6A\xd3\xfc\x0a\x88\xef\x112`\x0a\x10\xdf\x06\xe2\xad@\xbc\x05\xcd\x80=@\x9cC\xc8\x00\x8a\xbd\xd0\x09\xc4w\x81x\x17\x10\xaf@\xd3l\x0a\xc4\xcc\x84\x0c0\x06\xe2\x0f@|\x1f\x88\xfd\xd0\x0cX\x04\xc4|\x94\x18\xf0\x18\x88\xcfR\xe2\x85\x83@\x5cN\xf3@\xc4\x17\x8d u\x8c\x84\x0c\xc0\x97\x90v\x00\xb1\x00M\xbc@qf\x02\x01\xb2\xb23\x00\xbb\xaaR\x11\xf5\xfa\xd6\xa6\x00\x00\x00\x00IEND\xaeB`\x82\x00\x00\x02\xfd\x89PNG\x0d\x0a\x1a\x0a\x00\x00\x00\x0dIHDR\x00\x00\x00\x10\x00\x00\x00\x10\x08\x06\x00\x00\x00\x1f\xf3\xffa\x00\x00\x02\xc4IDATx\xda\x95\x93]HSa\x18\xc7\xff\xc7\xedl;\x9bsjs\xce\xf9\x99_\x85f)V\xeaEE\x1f\xa2\xa8\x91\x17B\x22QP\x9a\x92\xeb\xe3B\xa2\x0b%\xa30\x0b4\x04\xc5(\x85\x8a\xba\x10\x84 \x22(\x12\xed\x83n\xcaT\xb2\xb0t\xd2\xa6\xe6\xd7\xb6\xb3\xa9\xf3\x9c\xb3\xb3\x9d\xd3Q\x08\x92\x14\xec\x85\xf7\xe2}\x1e\x9e\xdf\xc3\xf3\x7f\x9f?\x81\xff8Gn\xf6%\x1a\xf5!\xd4\xe3\x8a]_\xfe\xc4\x88\xcd\x16o+k\x90\xdf\xb9vy\xe8\x87mF\xb8t8*mC@}\xf7P\x86\x5cg\xea\xa5\x142\x8d\x5c\x06\xd7\xe2\x12\xdbV\x9bo\xaa/}d\xbdP\x9a\x1d\xd5\xe2v\xceW\x9e\xca6\xde[\x17P\xfd\xe0\xf3\xde\x98\xe8\xe8\xf7\x85\xe9z2X\x0d\x04\x04\x00=\xdf\x18L8\x97\xa7D*X\xf3}\xec\xe7p\x0a\xdb\x7f\xe0\xca\xd9\xe3\xc2\xba\x80\x9a\xa7\x13\xd6\x840*&T\xabB\x90F\x85\x10\x8d\x0c\xa1Z`\x8a\x96@\xc3\x0e\xc8\xe1\xed\xb3[\x06\x8f\xb6\x9a\x0b\x96\xfe\x01t6\xec&G\xb6\x98\xe7\xed\xf2\x0c]b\x94\x1e;\xe3\xf4p\xb3\x22\x94\x0a\x05\xb4j\x02\x14\x09\x8c\xfeb\xc0xy\xc6\xed\xe1\xce\xd7\xe6\x1a:\xd7\x00\xc4\x0f\xba\x16\xde\xc9\xe5\xbe\xa6\xf3\x94]\xae\xaa\xad\xfa\x88$\xe2\xf4\xa1\x04x\xbc@\xbf\x8d\x83V\xa3D \x05x\xa5\xf7,\xed\x11G,\xd6\xac\xb6\x13\xa9\x1fW\x01\xe2Hl9\xa6\x97\x9a \x10,\xa8X\xce5kqw\xbbN\x86\xbd\x5c,5\x94\xecO%\xf6$\x05IZ\xb0RZ&\x81H\xac\xe8\xf3nx~\xba\xb1\xd0`\x22Dkf\x0e\x1c\xee\x1e\xf0\x02\x09U\x9c\x0f\xf4W\x06>\x1f\xb7\x02\x9a\x9c\xa5\xe5\x1ds\xd5:+\x99\xa7\xc9I\x89$XA\x06\xbf\xa4\x84V\xad\xc4\xe8\x94}\xfav\x91\xd1D\xf8\x063rd\xa4\xd0\x0a2\x22\x03\xeeq\x11~\xde/\x15\xf3pJ-\xd5\xf1\x1a\xc1>`\x19\xf0dR\xf7g\xcc\xc6E\xd5\x0eJZ$\x04\xaa)\xd1\xc3ro\x9a\x8a#\x0f\xae\x8ep\xb7.:\xa0\xb2L\x7fF\xea|\x1d\x0a\x93\x01n\x8b\x08J\x07\xb0\x22\x83\x05\x1b#\x01\x19?=\xe2|\xe6(2u\xd1\x15:Cd\xb2]\xadRd\xdd*2N\xae\xf9\xc6\xb7\x0f\x13u\xfbr\xb4u\xf0\xf2f\xc8M\x0a,X\x04(M>\xb8F9\xa8\x12x\xde>\xe0\x98\xf3h>U\xbd*)\x7f\xde\xd1\xcel\xb8\xca3}i\xc9\xe1\xe1\xb2&p\x5c\xa1t\x012\xd4\x0f\x82\xf0\x82\x1e\xe3G\xc7\x97\xca\x92\xcb\xf9\x17\x9b\xf2\x82w =\x9f\xa4\xd0\x0c\x22|;\x5c\x16\xf0\xcb\x1ek{7\x9dx\xb1\x8d\xf5o\xdaLO\x1a\xe3\xc8\xb2c!\xe7@\x08W\x1d\xe3t\xb3\xbe\xc0v\xe3\xef\xfc\xa6\xdd\xd8\xdb\x11\xafw\xbb\x18\xa1\xb8f\xda\xf9w\xfc7\xd7Y\x22 \xf6\xd0<L\x00\x00\x00\x00IEND\xaeB`\x82\x00\x00\x01\x92\x89PNG\x0d\x0a\x1a\x0a\x00\x00\x00\x0dIHDR\x00\x00\x00\x10\x00\x00\x00\x10\x08\x06\x00\x00\x00\x1f\xf3\xffa\x00\x00\x00\x04gAMA\x00\x00\xaf\xc87\x05\x8a\xe9\x00\x00\x00\x19tEXtSoftware\x00Adobe ImageReadyq\xc9e<\x00\x00\x01$IDAT8\xcb\xad\x93;NCA\x0cE\xcf\x8b\x10\x05B)\xa0\xa4f\x13t\xec\x82\x05\xa4c-4\x91\xd8\x07\x05\xcb\xa0\xa7\xa0\x03\xa1t\x08)y\x1ff\xeck\x8ay\xbc$J\xf8(\xc1\xd2h\xec\x91||mk\xaa\x88`\x1f\x1b\x01L\xa7\xd3\x9d)\x07\x00]\xd7\x01p\xf7\xd0\x0c \x17(\xc0\x1dL`\xfd=\xb9<\xaa6\x00M\xd3\x0c\x0f\xa7\xc7#\xf4\x95,\xf0\xfe\x96\x82\x977\xdf\xae\xa0\xaek\x00\x02\x90\x96\x89R\xa9*E\x89\xfd\x9b\x16\x16\x8bE\x91\xdd\xcbT\x14\xc9\x05\x16k\xb0\x1f\x01\xe60{\xd7\xd0\xaf\xbc\xf8\x1e\x05*~\x01\x5c]\xac\x0f\xe8\xcf[\x98\xcf\xe7\x00\xdc\xdc\xcf6\xd6\xe9\x1e\x98\x89\xecANA\xcaN\xce\x22eq{}^\xad\x01\x00\xceN\x0e\x01P\x04\xf2\x15\x80\x09sa6\xc2\xb2x|\xae7\xb7\x00\x10\xd1\x0f\xce\x03wa\x16d\x13\x9e\x83\xdc\xc7\xee\xa2\xfb\xd0\xb6-\x94j\xe6\x81Y\xef\x9b\xc8\xbd\xef\xa6\x01.\xad\x00\xda\xb6\x05 %\xf1\xf4\xda\x92\x92\x93\xad\xf4\x99S\x91\x9fS\xe0\xb1L\x5c\x91\x1c\x8c\xc7\xe3\x88\x08v9\xd5\xbf\xfc\xc6}\xec\x13Y\x9a@s\xea\x03\xe0n\x00\x00\x00\x00IEND\xaeB`\x82\x00\x00\x02\x7f\x89PNG\x0d\x0a\x1a\x0a\x00\x00\x00\x0dIHDR\x00\x00\x00\x10\x00\x00\x00\x10\x08\x06\x00\x00\x00\x1f\xf3\xffa\x00\x00\x02FIDATx\xdacd\xa0\x100R\xd5\x80\x85\x8c\x8c\xa62\xd6\x96\xeb^\x9f8\x95\x1a\xf1\xe7\xcf\x0ed\xb9\xa5LL\x1e\x92\xb6Vs\x9e\x1f=\x11\x18\xfd\xe7\xcfi\x0c\x03\xe600\x98\xca*\xcb\xee\xb2LM\x158\xb7n\xed\x8f\x87\xa7.\x06\xc530l\x07\xc9\xcdc`\xf0T2\xd6Yg\x14\x1e\xc1q|\xde\xbc\x0f\xcfn\xdcsKd`8\x8db\xc0Rv\x96\xc7\xf6i\x092L\xff\xd8\x19\x18\xb89\x18\xce\xee\xdd\xf1c\xef\xd9\xab\xc1 9\x17C\xad\xb5FNn\x1c\x0c?~30J\x081\xecki{\x12\xfd\xf3\xaf,\x8a\x01\x93\x19\x18<\xe4\xd5e\xd7\xab\x18[p\xfc\xfd\xf5\x9f\x81\x91\x8f\x9ba\xef\xd9\x13?\x19\xff\xffgp22g\xff\xff\xe5;\x03\x0b7;\xc3\xdd\x8b\xe7~<\xbap=0\x8b\x81a\x07F\x18\xf4\x01\x9d*\xa7\x22\xb9NAY\x83\xe3\xef\xb7?\x0c\xff\x04x\xc0\x0a\x98>\x7fg\xe0\x90\x97d\xb8}\xf2\xd8\x8f'7\x1e\x06\xe5C\xbd\x865\x16:\x80\x86\xc8+\x89\xadS\x10\x93\xe6\xf8\xf3\xfd\x1f\xc3\x7fff\x06\x06\x0e\x06\x86GO\xef\xffx\xfe\xf0}P)\x92f\xac\x064\x03\x0dP\x94\x13Z'\xf7\xe5\x07\xc7\xafw\xdf\xc0blB\x5c\x0c\x8fx9\x7f<|\xf86\xa8\x1a\x9f\x01\xb5@\xcd\xaa\xf2\xa2\xeb\x0c?\x7f\xe7\xf8\xfb\xee\x0b\xc3\x0fa^\xb0\x02\xf6\xb7\x9f\x19\x98\x85y\x18\xce\xf3r\xff\xb8\xfb\xe0eP#6/Tp\xb2{jJ\x8a\xacs\xfc\xf8\x99\x83\xe1\xed'\x86_\xa2B\x0cu<\x1c?\x19\x18\x19\xff7\x01\x0dd{\xfd\x8e\x81AD\x80a??\xff\x8f\xb7\xff\x99\x83\x8a\xee\xdd\xdb\x8eb@\xa3\xaa\xcc\x93\x0cn~i\xae\x0bW\x19~\x89\x890\xd4\xf1\xf1\xfc\xb8s\xe7A\xf0_\xa0\x9c\x86\x8a\xe2\xda\xc6O\x9f9\xd8^\xbda\xf8f\xa4\xc7\xb0\xe1?\xf3\x93\xf4\xf3\xe7Q\xa3\xb1\x84\x85\xd9TUJrW\xa0\xb0\x90\xc0\x8c/_~\x9c\xba}/x\x0b\x03\xc36\x90\x9c\x17\xd0k\xd6\xaaJ\xebRyy8\xd6\xbfy\xf7\xe1\xc1\x93gn\xed\xff\xfe\x9d\xc6\x08\x83b>.s.q\xe1uO\xef?K\x99\xf7\xe7/J`e\xb0\xb2zz\x9a\x99\xce\xb9x\xfeB@\xdd\xb7o\x98I\x99*\x99\x89\x1c\x00\x00\x16\xa3\xd9\x11!b\xea\xb0\x00\x00\x00\x00IEND\xaeB`\x82\x00\x00\x03)\x89PNG\x0d\x0a\x1a\x0a\x00\x00\x00\x0dIHDR\x00\x00\x00\x10\x00\x00\x00\x10\x08\x06\x00\x00\x00\x1f\xf3\xffa\x00\x00\x02\xf0IDATx\xda\x8d\x93\xdbKTA\x1c\xc7\xbfs\xf6\xa8\xbb\xeb\xda\xba\xee}]-/Y\xe6^\xcat\xd7\xf05P\x88\xc8\x88 \x88\xe8!\xa3z\xedo\xe8\xb1\xa0\x1e\xa2 \xeb\xa1\x97\x1e\xb2\xa0\x08\x22\x22\xc8H\x8a\xee\xadbi\x96\x97\xd5\xbd\xe8^\xcf\xea\x9eu=g\xa6qS\xb2 h`\xe070\x9f\xef\xef\xfb\xfb\x0eC\xf0\x1f\xcb\xef\xf7;\x13\xc9D\xb0 \x17\x82\x8aJ\xbd\x82\xae:_f\xb0\xdf\x93\xe2s\x83\xe4\xef\xcb\xdd\xdd\xdd\x95.\x97k\xaf\xc3\xe1\x08\x88\xa2\x18L\xa4\xd2\xc1\xa9\xf9\x05\xf7\x5c2O\x0c\xf6\xedh\xde\xb5\x07\x81v?\x1ajm\xf4\xf2\xc5+\x97J\x02u\xf5Nc\xed\xd6\xa6s]\x1d\x9d\x87\xd3\x99l{<'\x8b\x91d\x01\xb4\xdc\x04\xafg\x0f|>/\xbc-\xf5\xb0Y\xaa\x91\x91U|\x18\x9b\xc1\xf0\xc7\x11|\x1a~|\x95\xb4\xfa\xda\x8c;w4\xbe\x0f\xcfE\x9aR\x82\x13\xfe}\xbd\xd8\xed\xf3\xc0\xd7T\x07O\x93\x03\xf9\x220\xfa#\x86\xe7o\xc7\xf0!\xf4\x09\xd1\xb9\x09\xc8\xb9\x05PE\x06\xcd,\xf4\x90@O\xef\x99\x86\x96\xc6\xeboB3\xe8\xeb;\x8d\xfe\xe3\x07\x10]\x94\xf0\xf2\xe3\x04\x86\xdf}\xc6\xf7\xc9\x11d\x93a(\x85\x1c\x18S\xb9\xdf5\xd3\x0cP\x15i5:e%\xe6]\xed\x97\x8c\xce\xda\xf3Jq\x15e\x06\x07,\xdbZ1;>\x02yi\x11T\xe5\xed\x19[\xdf\x1b)\xad\x17EyP\x1a{{\x94\x98\xda\x02\xd7\xf45\x96\xb3\xa2F\x00\xc4r\x88Z-\x12\xb1x\x09bk \xd6a\xc66E\xcd\xeb\xa5\xccIi2t\x9b\xd4\xb4u\x0e\xe8\xcd\xb6S\x1aA\xc3\x1dT\x81?\x15r\xd9\xcc/x\x03bt\x93\x83\xd2\x99)\xf1\x19{>6\xbbH\xac\x9e\xc0m\x9d\xd9v\x82\xf1\xd9*-V$\xa21\xac\x16W\xfe\x14\xa0\x0c\x7f((\xc5Yi\xf4\xd5\xd6\xb5\x92\xd8\xbc\xc1;:\xb3\xfd\xd8Z\x17\xbd\xcd\x89\xc8\xf44\xe7\xe8\xa6\xd97\x5c\xb0R~\xba\x8a\x0a\xc8\x99\xd4M\xe9\xeb\xbb\xfe\x92\x80\xdd\x17\x1c\xd4Y\x1cG\x08\xbf@\xaaLHF\xe7\x7fw\xdf\x04\x8b\x82\x80\x0eo+\xb2\x89\xf8\xc2\xfb\xa1g\x87\x94\x5c\xfauI\xc0\xe1\x0d>\xd4\xd9]\x07\x05\x9e\x81\xac2,K\xd9u\x81_a\xf1h\xd1\xec\xb6\xc3d\xd0\xe7_\xbf\x18z\x95O\xc6\x07(\xa5\x0fXaY.\x098\xfd]\x8f\xf5vW\xaf\xa6\x5c\x8b\xc5D\x0a\xaa\xaa\x94:\x0a\xdc\xae\xcd\xa0E\x85H\xe4\xe9\xf1\xf17\x1c\xbc\xcf(}\xc2\xa8:\xc9Vdu#\x0e\xe2\xf2w=\xadt\xba\xf7+\xd0 \x95J\x83\xf0\xf9k\xb4\x02\x04\xaa\x16\xa2\xe1\xf0P!\x19\xbf\xc3\xa1\x97\x1c\x9ea+y\xe5\xef\xbfC\xac\xde\xae\x1b\xd5\xee\xfa~\x85\x9b\x15\xe44\xcaE1\x1f\xfe\xf6\xe3\xae\x9c\x8c\xdcb\xaa\x12b\xaa\x9ae\xc5\x02\xc3?\x16)\xdbbr\x9bw\xb6_0Z\xcd\x1e)\x16y\x94\x98\xfc2\xa0\xc8\xcb\x11\x0e\xd1\xff\xf9\xea?\x01\x8e)\x7f\xe76zF\xf8\x00\x00\x00\x00IEND\xaeB`\x82\x00\x00\x01\x96\x89PNG\x0d\x0a\x1a\x0a\x00\x00\x00\x0dIHDR\x00\x00\x00\x10\x00\x00\x00\x10\x08\x06\x00\x00\x00\x1f\xf3\xffa\x00\x00\x00\x04gAMA\x00\x00\xaf\xc87\x05\x8a\xe9\x00\x00\x00\x19tEXtSoftware\x00Adobe ImageReadyq\xc9e<\x00\x00\x01(IDAT8\xcb\xad\x931J\x04A\x10E\xdf\x88\x18\x88\x91\x18\xe9E<\x80\xb9\x91\x87\xf0\x02\xde\xc2kll\xe0\x15635\x17AD\xc1Dpg\xdb\xea\xfa\xdf\xa0gv\x91\xdd\x11D\x0b\x9a\x86.\xfe\xaf\xd7U\xdd\x9dm\xfe\x12\xbb\x00\xb3\xd9\xcc\xa5\x14\xfa\xbeg\xb9\x5c\xb2X,6V\xdf\xf7\xab|)\x85\xf9|\xde\x01t\xffB\x00ps\xb7\xb0\x01%\x18\xb0\xe1\xe2t\xbf\xbb\xbe}^W0\xa4\xcc\xd5\xf9q\xb7a\x90\x82\xa3\x83\x1d\x04X\xf0\xf2\xae\x95\xee\xe4p\x0f\xd9H\xf0\xf8\xba\xdcN`C\xba\xed2\xd4\xb5~%V\x9aHo7\xa8\x09\xd2\xda s<7YA2\x99\x22\xca\x84\x81\x06\x02\xe9;A\xad\xa2\xa6P\x9a*Q\xa2\xfeL\xd0\x0c\x8c\xb29D\x88Z[\xf5LO\x13T\xb5F\xcan\x04\xc3\x15>\xc3+\x8aLS\xc6\xc4\xc6\x14R\xa4\xbau\x0f<\x1a$QE\x0e\x14\x11S\x04\x86\xa7\xb7$\x87\x89\x8c\xef+JR\xa3U\xaf2\x11\x13\x04\x97g\x07\xdd\xb6\x97V\xc2\xc4P]jS\xd9j0\x15\x11\xd9\xc4\xd9z#\xe9w\x06\xf5\xd3\xdc?|l\x08\xc7\xf8\xf3g\xfa\x02\x0b\xfb$#\xad\x86\x14!\x00\x00\x00\x00IEND\xaeB`\x82"
nodes_res_rc.py(13): qt_resource_name = "\x00\x05\x00o\xa6S\x00i\x00c\x00o\x00n\x00s\x00\x10\x0e\xbe\xa5\xc7\x00c\x00o\x00n\x00s\x00o\x00l\x00e\x00_\x00i\x00c\x00o\x00n\x00.\x00p\x00n\x00g\x00\x0f\x09M\x1b'\x00s\x00h\x00a\x00d\x00o\x00w\x00_\x00i\x00c\x00o\x00n\x00.\x00p\x00n\x00g\x00\x19\x09\xb0r'\x00c\x00o\x00m\x00m\x00e\x00n\x00t\x00_\x00s\x00e\x00l\x00e\x00c\x00t\x00e\x00d\x00_\x00i\x00c\x00o\x00n\x00.\x00p\x00n\x00g\x00\x0d\x08L\x1dg\x00p\x00l\x00o\x00t\x00_\x00i\x00c\x00o\x00n\x00.\x00p\x00n\x00g\x00\x12\x05\xcb\xda'\x00s\x00h\x00o\x00r\x00t\x00c\x00u\x00t\x00s\x00_\x00i\x00c\x00o\x00n\x00.\x00p\x00n\x00g\x00\x0e\x01\x96\xe6'\x00d\x00e\x00b\x00u\x00g\x00_\x00i\x00c\x00o\x00n\x00.\x00p\x00n\x00g\x00\x13\x0f1n\x07\x00s\x00c\x00r\x00e\x00e\x00n\x00s\x00h\x00o\x00t\x00_\x00i\x00c\x00o\x00n\x00.\x00p\x00n\x00g\x00\x11\x027\x09\xc7\x00n\x00e\x00w\x00_\x00f\x00i\x00l\x00e\x00_\x00i\x00c\x00o\x00n\x00.\x00p\x00n\x00g\x00\x16\x0d'\x9f\xa7\x00m\x00u\x00l\x00t\x00i\x00t\x00h\x00r\x00e\x00a\x00d\x00e\x00d\x00_\x00i\x00c\x00o\x00n\x00.\x00p\x00n\x00g\x00\x0f\x00\xb3\xd5\xc7\x00c\x00o\x00l\x00o\x00r\x00s\x00_\x00i\x00c\x00o\x00n\x00.\x00p\x00n\x00g\x00\x10\x0a\xb7\xe2g\x00o\x00p\x00t\x00i\x00o\x00n\x00s\x00_\x00i\x00c\x00o\x00n\x00.\x00p\x00n\x00g\x00\x10\x01\x0e\x1f\xa7\x00s\x00a\x00v\x00e\x00_\x00a\x00s\x00_\x00i\x00c\x00o\x00n\x00.\x00p\x00n\x00g\x00\x0d\x0dx=G\x00s\x00a\x00v\x00e\x00_\x00i\x00c\x00o\x00n\x00.\x00p\x00n\x00g\x00\x11\x02\xc8\xe5\x07\x00p\x00r\x00o\x00p\x00e\x00r\x00t\x00y\x00_\x00i\x00c\x00o\x00n\x00.\x00p\x00n\x00g\x00\x11\x04\xd8vg\x00n\x00o\x00d\x00e\x00_\x00b\x00o\x00x\x00_\x00i\x00c\x00o\x00n\x00.\x00p\x00n\x00g\x00\x0e\x0fPF'\x00c\x00l\x00e\x00a\x00r\x00_\x00i\x00c\x00o\x00n\x00.\x00p\x00n\x00g\x00\x0d\x0b\x88\x90\xa7\x00a\x00l\x00i\x00g\x00n\x00L\x00e\x00f\x00t\x00.\x00p\x00n\x00g\x00\x0f\x0f\xf5\x97\xa7\x00d\x00e\x00l\x00e\x00t\x00e\x00_\x00i\x00c\x00o\x00n\x00.\x00p\x00n\x00g\x00\x14\x0e\xe2\xe4\x87\x00f\x00o\x00l\x00d\x00e\x00r\x00_\x00o\x00p\x00e\x00n\x00_\x00i\x00c\x00o\x00n\x00.\x00p\x00n\x00g\x00\x0e\x08\x0b\xfc\xa7\x00a\x00l\x00i\x00g\x00n\x00r\x00i\x00g\x00h\x00t\x00.\x00p\x00n\x00g"
nodes_res_rc.py(14): qt_resource_struct = "\x00\x00\x00\x00\x00\x02\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x00\x00\x02\x00\x00\x00\x14\x00\x00\x00\x02\x00\x00\x01\x84\x00\x00\x00\x00\x00\x01\x00\x00\x14\x98\x00\x00\x01\xce\x00\x00\x00\x00\x00\x01\x00\x00\x19\xad\x00\x00\x00\xdc\x00\x00\x00\x00\x00\x01\x00\x00\x0b\xb5\x00\x00\x01*\x00\x00\x00\x00\x00\x01\x00\x00\x0f\x9e\x00\x00\x02\x14\x00\x00\x00\x00\x00\x01\x00\x00\x1fV\x00\x00\x02<\x00\x00\x00\x00\x00\x01\x00\x00 \xb1\x00\x00\x00\xb2\x00\x00\x00\x00\x00\x01\x00\x00\x09\xdd\x00\x00\x02\xf8\x00\x00\x00\x00\x00\x01\x00\x00+\xec\x00\x00\x00\x92\x00\x00\x00\x00\x00\x01\x00\x00\x07\x1a\x00\x00\x006\x00\x00\x00\x00\x00\x01\x00\x00\x03\x80\x00\x00\x00Z\x00\x00\x00\x00\x00\x01\x00\x00\x05\xc6\x00\x00\x01\xa8\x00\x00\x00\x00\x00\x01\x00\x00\x16\xb5\x00\x00\x02\x86\x00\x00\x00\x00\x00\x01\x00\x00$\xa6\x00\x00\x01R\x00\x00\x00\x00\x00\x01\x00\x00\x12\x9c\x00\x00\x01\xf4\x00\x00\x00\x00\x00\x01\x00\x00\x1c\xa4\x00\x00\x00\x10\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x02\xca\x00\x00\x00\x00\x00\x01\x00\x00(\xbf\x00\x00\x00\xfe\x00\x00\x00\x00\x00\x01\x00\x00\x0e)\x00\x00\x02d\x00\x00\x00\x00\x00\x01\x00\x00!\xa5\x00\x00\x02\xa6\x00\x00\x00\x00\x00\x01\x00\x00&<"
nodes_res_rc.py(15): def qInitResources():
nodes_res_rc.py(18): def qCleanupResources():
nodes_res_rc.py(21): qInitResources()
 --- modulename: nodes_res_rc, funcname: qInitResources
nodes_res_rc.py(16):     QtCore.qRegisterResourceData(0x01, qt_resource_struct, qt_resource_name, qt_resource_data)
Launcher.py(2): import GraphEditor_ui
 --- modulename: GraphEditor_ui, funcname: <module>
GraphEditor_ui.py(10): from PySide import QtCore, QtGui
GraphEditor_ui.py(12): class Ui_MainWindow(object):
 --- modulename: GraphEditor_ui, funcname: Ui_MainWindow
GraphEditor_ui.py(12): class Ui_MainWindow(object):
GraphEditor_ui.py(13):     def setupUi(self, MainWindow):
GraphEditor_ui.py(234):     def retranslateUi(self, MainWindow):
Launcher.py(3): import sys
Launcher.py(4): from os import path
Launcher.py(7): FILE_DIR = path.dirname(__file__)
 --- modulename: ntpath, funcname: dirname
ntpath.py(215):     return split(p)[0]
 --- modulename: ntpath, funcname: split
ntpath.py(180):     d, p = splitdrive(p)
 --- modulename: ntpath, funcname: splitdrive
ntpath.py(115):     if len(p) > 1:
ntpath.py(116):         normp = p.replace(altsep, sep)
ntpath.py(117):         if (normp[0:2] == sep*2) and (normp[2:3] != sep):
ntpath.py(133):         if normp[1] == ':':
ntpath.py(134):             return p[:2], p[2:]
ntpath.py(182):     i = len(p)
ntpath.py(183):     while i and p[i-1] not in '/\\':
ntpath.py(184):         i = i - 1
ntpath.py(183):     while i and p[i-1] not in '/\\':
ntpath.py(184):         i = i - 1
ntpath.py(183):     while i and p[i-1] not in '/\\':
ntpath.py(184):         i = i - 1
ntpath.py(183):     while i and p[i-1] not in '/\\':
ntpath.py(184):         i = i - 1
ntpath.py(183):     while i and p[i-1] not in '/\\':
ntpath.py(184):         i = i - 1
ntpath.py(183):     while i and p[i-1] not in '/\\':
ntpath.py(184):         i = i - 1
ntpath.py(183):     while i and p[i-1] not in '/\\':
ntpath.py(184):         i = i - 1
ntpath.py(183):     while i and p[i-1] not in '/\\':
ntpath.py(184):         i = i - 1
ntpath.py(183):     while i and p[i-1] not in '/\\':
ntpath.py(184):         i = i - 1
ntpath.py(183):     while i and p[i-1] not in '/\\':
ntpath.py(184):         i = i - 1
ntpath.py(183):     while i and p[i-1] not in '/\\':
ntpath.py(184):         i = i - 1
ntpath.py(183):     while i and p[i-1] not in '/\\':
ntpath.py(185):     head, tail = p[:i], p[i:]  # now tail has no slashes
ntpath.py(187):     head2 = head
ntpath.py(188):     while head2 and head2[-1] in '/\\':
ntpath.py(189):         head2 = head2[:-1]
ntpath.py(188):     while head2 and head2[-1] in '/\\':
ntpath.py(190):     head = head2 or head
ntpath.py(191):     return d + head, tail
Launcher.py(10): class W(QtGui.QMainWindow, GraphEditor_ui.Ui_MainWindow):
 --- modulename: Launcher, funcname: W
Launcher.py(10): class W(QtGui.QMainWindow, GraphEditor_ui.Ui_MainWindow):
Launcher.py(11):     def __init__(self):
Launcher.py(65):     def closeEvent(self, event):
Launcher.py(74):     def toggle_property_view(self):
Launcher.py(80):     def toggle_node_box(self):
Launcher.py(87):     def shortcuts_info(self):
Launcher.py(106):     def toggle_multithreaded(self):
Launcher.py(114):     def toggle_console(self):
Launcher.py(121):     def on_clear_scene(self):
Launcher.py(125):     def toggle_debug(self):
Launcher.py(133):     def toggle_shadows(self):
Launcher.py(137):     def on_delete(self):
Launcher.py(141): if __name__ == '__main__':
Launcher.py(143):     app = QtGui.QApplication(sys.argv)
Launcher.py(145):     app.setStyle(QtGui.QStyleFactory.create("Cleanlooks"))
Launcher.py(147):     darkPalette = QtGui.QPalette()
Launcher.py(148):     darkPalette.setColor(QtGui.QPalette.Window, QtGui.QColor(53, 53, 53))
Launcher.py(149):     darkPalette.setColor(QtGui.QPalette.WindowText, QtCore.Qt.white)
Launcher.py(150):     darkPalette.setColor(QtGui.QPalette.Base, QtGui.QColor(25, 25, 25))
Launcher.py(151):     darkPalette.setColor(QtGui.QPalette.AlternateBase, QtGui.QColor(53, 53, 53))
Launcher.py(152):     darkPalette.setColor(QtGui.QPalette.ToolTipBase, QtCore.Qt.white)
Launcher.py(153):     darkPalette.setColor(QtGui.QPalette.ToolTipText, QtCore.Qt.white)
Launcher.py(154):     darkPalette.setColor(QtGui.QPalette.Text, QtCore.Qt.white)
Launcher.py(155):     darkPalette.setColor(QtGui.QPalette.Button, QtGui.QColor(53, 53, 53))
Launcher.py(156):     darkPalette.setColor(QtGui.QPalette.ButtonText, QtCore.Qt.white)
Launcher.py(157):     darkPalette.setColor(QtGui.QPalette.BrightText, QtCore.Qt.red)
Launcher.py(158):     darkPalette.setColor(QtGui.QPalette.Link, QtGui.QColor(42, 130, 218))
Launcher.py(160):     darkPalette.setColor(QtGui.QPalette.Highlight, QtGui.QColor(42, 130, 218))
Launcher.py(161):     darkPalette.setColor(QtGui.QPalette.HighlightedText, QtCore.Qt.black)
Launcher.py(163):     app.setPalette(darkPalette)
Launcher.py(165):     app.setStyleSheet("QToolTip { color: #ffffff; background-color: #2a82da;+ \
Launcher.py(168):         ")
Launcher.py(170):     instance = W()
 --- modulename: Launcher, funcname: __init__
Launcher.py(12):         super(W, self).__init__()
Launcher.py(13):         self.setupUi(self)
 --- modulename: GraphEditor_ui, funcname: setupUi
GraphEditor_ui.py(14):         MainWindow.setObjectName("MainWindow")
GraphEditor_ui.py(15):         MainWindow.resize(1086, 669)
GraphEditor_ui.py(16):         icon = QtGui.QIcon()
GraphEditor_ui.py(17):         icon.addPixmap(QtGui.QPixmap("AGraphPySide/icon.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
GraphEditor_ui.py(18):         MainWindow.setWindowIcon(icon)
GraphEditor_ui.py(19):         MainWindow.setDocumentMode(False)
GraphEditor_ui.py(20):         MainWindow.setDockOptions(QtGui.QMainWindow.AllowTabbedDocks)
GraphEditor_ui.py(21):         self.centralwidget = QtGui.QWidget(MainWindow)
GraphEditor_ui.py(22):         self.centralwidget.setLocale(QtCore.QLocale(QtCore.QLocale.English, QtCore.QLocale.UnitedStates))
GraphEditor_ui.py(23):         self.centralwidget.setObjectName("centralwidget")
GraphEditor_ui.py(24):         self.gridLayout_3 = QtGui.QGridLayout(self.centralwidget)
GraphEditor_ui.py(25):         self.gridLayout_3.setContentsMargins(1, 1, 1, 1)
GraphEditor_ui.py(26):         self.gridLayout_3.setObjectName("gridLayout_3")
GraphEditor_ui.py(27):         self.horizontal_splitter = QtGui.QSplitter(self.centralwidget)
GraphEditor_ui.py(28):         self.horizontal_splitter.setStyleSheet("")
GraphEditor_ui.py(29):         self.horizontal_splitter.setOrientation(QtCore.Qt.Horizontal)
GraphEditor_ui.py(30):         self.horizontal_splitter.setObjectName("horizontal_splitter")
GraphEditor_ui.py(31):         self.SceneWidget = QtGui.QWidget(self.horizontal_splitter)
GraphEditor_ui.py(32):         self.SceneWidget.setObjectName("SceneWidget")
GraphEditor_ui.py(33):         self.gridLayout = QtGui.QGridLayout(self.SceneWidget)
GraphEditor_ui.py(34):         self.gridLayout.setContentsMargins(1, 1, 1, 1)
GraphEditor_ui.py(35):         self.gridLayout.setObjectName("gridLayout")
GraphEditor_ui.py(36):         self.SceneLayout = QtGui.QGridLayout()
GraphEditor_ui.py(37):         self.SceneLayout.setSizeConstraint(QtGui.QLayout.SetMaximumSize)
GraphEditor_ui.py(38):         self.SceneLayout.setContentsMargins(0, 0, 0, 0)
GraphEditor_ui.py(39):         self.SceneLayout.setObjectName("SceneLayout")
GraphEditor_ui.py(40):         self.gridLayout.addLayout(self.SceneLayout, 0, 0, 1, 1)
GraphEditor_ui.py(41):         self.gridLayout_3.addWidget(self.horizontal_splitter, 0, 0, 1, 1)
GraphEditor_ui.py(42):         MainWindow.setCentralWidget(self.centralwidget)
GraphEditor_ui.py(43):         self.menuBar = QtGui.QMenuBar(MainWindow)
GraphEditor_ui.py(44):         self.menuBar.setGeometry(QtCore.QRect(0, 0, 1086, 21))
GraphEditor_ui.py(45):         self.menuBar.setObjectName("menuBar")
GraphEditor_ui.py(46):         self.menuEdit = QtGui.QMenu(self.menuBar)
GraphEditor_ui.py(47):         self.menuEdit.setObjectName("menuEdit")
GraphEditor_ui.py(48):         self.menuView = QtGui.QMenu(self.menuBar)
GraphEditor_ui.py(49):         self.menuView.setObjectName("menuView")
GraphEditor_ui.py(50):         self.menuFile = QtGui.QMenu(self.menuBar)
GraphEditor_ui.py(51):         self.menuFile.setObjectName("menuFile")
GraphEditor_ui.py(52):         self.menuHelp = QtGui.QMenu(self.menuBar)
GraphEditor_ui.py(53):         self.menuHelp.setObjectName("menuHelp")
GraphEditor_ui.py(54):         MainWindow.setMenuBar(self.menuBar)
GraphEditor_ui.py(55):         self.toolBar = QtGui.QToolBar(MainWindow)
GraphEditor_ui.py(56):         self.toolBar.setObjectName("toolBar")
GraphEditor_ui.py(57):         MainWindow.addToolBar(QtCore.Qt.TopToolBarArea, self.toolBar)
GraphEditor_ui.py(58):         self.dockWidgetConsole = QtGui.QDockWidget(MainWindow)
GraphEditor_ui.py(59):         self.dockWidgetConsole.setEnabled(True)
GraphEditor_ui.py(60):         self.dockWidgetConsole.setFeatures(QtGui.QDockWidget.AllDockWidgetFeatures)
GraphEditor_ui.py(61):         self.dockWidgetConsole.setObjectName("dockWidgetConsole")
GraphEditor_ui.py(62):         self.dockWidgetContents_2 = QtGui.QWidget()
GraphEditor_ui.py(63):         self.dockWidgetContents_2.setObjectName("dockWidgetContents_2")
GraphEditor_ui.py(64):         self.gridLayout_2 = QtGui.QGridLayout(self.dockWidgetContents_2)
GraphEditor_ui.py(65):         self.gridLayout_2.setContentsMargins(1, 1, 1, 1)
GraphEditor_ui.py(66):         self.gridLayout_2.setObjectName("gridLayout_2")
GraphEditor_ui.py(67):         self.console = QtGui.QTextEdit(self.dockWidgetContents_2)
GraphEditor_ui.py(68):         sizePolicy = QtGui.QSizePolicy(QtGui.QSizePolicy.Preferred, QtGui.QSizePolicy.Minimum)
GraphEditor_ui.py(69):         sizePolicy.setHorizontalStretch(0)
GraphEditor_ui.py(70):         sizePolicy.setVerticalStretch(0)
GraphEditor_ui.py(71):         sizePolicy.setHeightForWidth(self.console.sizePolicy().hasHeightForWidth())
GraphEditor_ui.py(72):         self.console.setSizePolicy(sizePolicy)
GraphEditor_ui.py(73):         self.console.setMaximumSize(QtCore.QSize(16777215, 16777215))
GraphEditor_ui.py(74):         self.console.setStyleSheet("")
GraphEditor_ui.py(75):         self.console.setObjectName("console")
GraphEditor_ui.py(76):         self.gridLayout_2.addWidget(self.console, 0, 0, 1, 1)
GraphEditor_ui.py(77):         self.dockWidgetConsole.setWidget(self.dockWidgetContents_2)
GraphEditor_ui.py(78):         MainWindow.addDockWidget(QtCore.Qt.DockWidgetArea(8), self.dockWidgetConsole)
GraphEditor_ui.py(79):         self.dockWidgetNodeBox = QtGui.QDockWidget(MainWindow)
GraphEditor_ui.py(80):         self.dockWidgetNodeBox.setFloating(False)
GraphEditor_ui.py(81):         self.dockWidgetNodeBox.setFeatures(QtGui.QDockWidget.AllDockWidgetFeatures)
GraphEditor_ui.py(82):         self.dockWidgetNodeBox.setObjectName("dockWidgetNodeBox")
GraphEditor_ui.py(83):         self.dockWidgetContents_5 = QtGui.QWidget()
GraphEditor_ui.py(84):         self.dockWidgetContents_5.setObjectName("dockWidgetContents_5")
GraphEditor_ui.py(85):         self.gridLayout_5 = QtGui.QGridLayout(self.dockWidgetContents_5)
GraphEditor_ui.py(86):         self.gridLayout_5.setContentsMargins(1, 1, 1, 1)
GraphEditor_ui.py(87):         self.gridLayout_5.setObjectName("gridLayout_5")
GraphEditor_ui.py(88):         self.NodeBoxLayout = QtGui.QGridLayout()
GraphEditor_ui.py(89):         self.NodeBoxLayout.setObjectName("NodeBoxLayout")
GraphEditor_ui.py(90):         self.gridLayout_5.addLayout(self.NodeBoxLayout, 0, 0, 1, 1)
GraphEditor_ui.py(91):         self.dockWidgetNodeBox.setWidget(self.dockWidgetContents_5)
GraphEditor_ui.py(92):         MainWindow.addDockWidget(QtCore.Qt.DockWidgetArea(1), self.dockWidgetNodeBox)
GraphEditor_ui.py(93):         self.statusBar = QtGui.QStatusBar(MainWindow)
GraphEditor_ui.py(94):         self.statusBar.setObjectName("statusBar")
GraphEditor_ui.py(95):         MainWindow.setStatusBar(self.statusBar)
GraphEditor_ui.py(96):         self.dockWidgetNodeView = QtGui.QDockWidget(MainWindow)
GraphEditor_ui.py(97):         self.dockWidgetNodeView.setMinimumSize(QtCore.QSize(200, 100))
GraphEditor_ui.py(98):         self.dockWidgetNodeView.setAllowedAreas(QtCore.Qt.LeftDockWidgetArea|QtCore.Qt.RightDockWidgetArea)
GraphEditor_ui.py(99):         self.dockWidgetNodeView.setObjectName("dockWidgetNodeView")
GraphEditor_ui.py(100):         self.dockWidgetContents = QtGui.QWidget()
GraphEditor_ui.py(101):         self.dockWidgetContents.setObjectName("dockWidgetContents")
GraphEditor_ui.py(102):         self.gridLayout_4 = QtGui.QGridLayout(self.dockWidgetContents)
GraphEditor_ui.py(103):         self.gridLayout_4.setContentsMargins(1, 1, 1, 1)
GraphEditor_ui.py(104):         self.gridLayout_4.setObjectName("gridLayout_4")
GraphEditor_ui.py(105):         self.PropertiesformLayout = QtGui.QFormLayout()
GraphEditor_ui.py(106):         self.PropertiesformLayout.setContentsMargins(2, 2, 2, 2)
GraphEditor_ui.py(107):         self.PropertiesformLayout.setObjectName("PropertiesformLayout")
GraphEditor_ui.py(108):         self.gridLayout_4.addLayout(self.PropertiesformLayout, 0, 0, 1, 1)
GraphEditor_ui.py(109):         self.dockWidgetNodeView.setWidget(self.dockWidgetContents)
GraphEditor_ui.py(110):         MainWindow.addDockWidget(QtCore.Qt.DockWidgetArea(2), self.dockWidgetNodeView)
GraphEditor_ui.py(111):         self.actionDelete = QtGui.QAction(MainWindow)
GraphEditor_ui.py(112):         icon1 = QtGui.QIcon()
GraphEditor_ui.py(113):         icon1.addPixmap(QtGui.QPixmap(":/icons/delete_icon.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
GraphEditor_ui.py(114):         self.actionDelete.setIcon(icon1)
GraphEditor_ui.py(115):         self.actionDelete.setObjectName("actionDelete")
GraphEditor_ui.py(116):         self.actionOptions = QtGui.QAction(MainWindow)
GraphEditor_ui.py(117):         icon2 = QtGui.QIcon()
GraphEditor_ui.py(118):         icon2.addPixmap(QtGui.QPixmap(":/icons/colors_icon.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
GraphEditor_ui.py(119):         self.actionOptions.setIcon(icon2)
GraphEditor_ui.py(120):         self.actionOptions.setObjectName("actionOptions")
GraphEditor_ui.py(121):         self.actionNode_box = QtGui.QAction(MainWindow)
GraphEditor_ui.py(122):         icon3 = QtGui.QIcon()
GraphEditor_ui.py(123):         icon3.addPixmap(QtGui.QPixmap(":/icons/node_box_icon.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
GraphEditor_ui.py(124):         self.actionNode_box.setIcon(icon3)
GraphEditor_ui.py(125):         self.actionNode_box.setObjectName("actionNode_box")
GraphEditor_ui.py(126):         self.actionSave = QtGui.QAction(MainWindow)
GraphEditor_ui.py(127):         icon4 = QtGui.QIcon()
GraphEditor_ui.py(128):         icon4.addPixmap(QtGui.QPixmap(":/icons/save_icon.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
GraphEditor_ui.py(129):         self.actionSave.setIcon(icon4)
GraphEditor_ui.py(130):         self.actionSave.setObjectName("actionSave")
GraphEditor_ui.py(131):         self.actionLoad = QtGui.QAction(MainWindow)
GraphEditor_ui.py(132):         icon5 = QtGui.QIcon()
GraphEditor_ui.py(133):         icon5.addPixmap(QtGui.QPixmap(":/icons/folder_open_icon.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
GraphEditor_ui.py(134):         self.actionLoad.setIcon(icon5)
GraphEditor_ui.py(135):         self.actionLoad.setObjectName("actionLoad")
GraphEditor_ui.py(136):         self.actionSave_as = QtGui.QAction(MainWindow)
GraphEditor_ui.py(137):         icon6 = QtGui.QIcon()
GraphEditor_ui.py(138):         icon6.addPixmap(QtGui.QPixmap(":/icons/save_as_icon.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
GraphEditor_ui.py(139):         self.actionSave_as.setIcon(icon6)
GraphEditor_ui.py(140):         self.actionSave_as.setObjectName("actionSave_as")
GraphEditor_ui.py(141):         self.actionConsole = QtGui.QAction(MainWindow)
GraphEditor_ui.py(142):         icon7 = QtGui.QIcon()
GraphEditor_ui.py(143):         icon7.addPixmap(QtGui.QPixmap(":/icons/console_icon.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
GraphEditor_ui.py(144):         self.actionConsole.setIcon(icon7)
GraphEditor_ui.py(145):         self.actionConsole.setObjectName("actionConsole")
GraphEditor_ui.py(146):         self.actionPlot_graph = QtGui.QAction(MainWindow)
GraphEditor_ui.py(147):         icon8 = QtGui.QIcon()
GraphEditor_ui.py(148):         icon8.addPixmap(QtGui.QPixmap(":/icons/plot_icon.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
GraphEditor_ui.py(149):         self.actionPlot_graph.setIcon(icon8)
GraphEditor_ui.py(150):         self.actionPlot_graph.setObjectName("actionPlot_graph")
GraphEditor_ui.py(151):         self.actionGroup_selected = QtGui.QAction(MainWindow)
GraphEditor_ui.py(152):         icon9 = QtGui.QIcon()
GraphEditor_ui.py(153):         icon9.addPixmap(QtGui.QPixmap(":/icons/comment_selected_icon.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
GraphEditor_ui.py(154):         self.actionGroup_selected.setIcon(icon9)
GraphEditor_ui.py(155):         self.actionGroup_selected.setObjectName("actionGroup_selected")
GraphEditor_ui.py(156):         self.actionClear_scene = QtGui.QAction(MainWindow)
GraphEditor_ui.py(157):         icon10 = QtGui.QIcon()
GraphEditor_ui.py(158):         icon10.addPixmap(QtGui.QPixmap(":/icons/clear_icon.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
GraphEditor_ui.py(159):         self.actionClear_scene.setIcon(icon10)
GraphEditor_ui.py(160):         self.actionClear_scene.setObjectName("actionClear_scene")
GraphEditor_ui.py(161):         self.actionShadows = QtGui.QAction(MainWindow)
GraphEditor_ui.py(162):         icon11 = QtGui.QIcon()
GraphEditor_ui.py(163):         icon11.addPixmap(QtGui.QPixmap(":/icons/shadow_icon.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
GraphEditor_ui.py(164):         self.actionShadows.setIcon(icon11)
GraphEditor_ui.py(165):         self.actionShadows.setObjectName("actionShadows")
GraphEditor_ui.py(166):         self.actionMultithreaded = QtGui.QAction(MainWindow)
GraphEditor_ui.py(167):         icon12 = QtGui.QIcon()
GraphEditor_ui.py(168):         icon12.addPixmap(QtGui.QPixmap(":/icons/multithreaded_icon.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
GraphEditor_ui.py(169):         self.actionMultithreaded.setIcon(icon12)
GraphEditor_ui.py(170):         self.actionMultithreaded.setObjectName("actionMultithreaded")
GraphEditor_ui.py(171):         self.actionDebug = QtGui.QAction(MainWindow)
GraphEditor_ui.py(172):         icon13 = QtGui.QIcon()
GraphEditor_ui.py(173):         icon13.addPixmap(QtGui.QPixmap(":/icons/debug_icon.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
GraphEditor_ui.py(174):         self.actionDebug.setIcon(icon13)
GraphEditor_ui.py(175):         self.actionDebug.setObjectName("actionDebug")
GraphEditor_ui.py(176):         self.actionScreenshot = QtGui.QAction(MainWindow)
GraphEditor_ui.py(177):         icon14 = QtGui.QIcon()
GraphEditor_ui.py(178):         icon14.addPixmap(QtGui.QPixmap(":/icons/screenshot_icon.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
GraphEditor_ui.py(179):         self.actionScreenshot.setIcon(icon14)
GraphEditor_ui.py(180):         self.actionScreenshot.setObjectName("actionScreenshot")
GraphEditor_ui.py(181):         self.actionShortcuts = QtGui.QAction(MainWindow)
GraphEditor_ui.py(182):         icon15 = QtGui.QIcon()
GraphEditor_ui.py(183):         icon15.addPixmap(QtGui.QPixmap(":/icons/shortcuts_icon.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
GraphEditor_ui.py(184):         self.actionShortcuts.setIcon(icon15)
GraphEditor_ui.py(185):         self.actionShortcuts.setObjectName("actionShortcuts")
GraphEditor_ui.py(186):         self.actionAlignLeft = QtGui.QAction(MainWindow)
GraphEditor_ui.py(187):         icon16 = QtGui.QIcon()
GraphEditor_ui.py(188):         icon16.addPixmap(QtGui.QPixmap(":/icons/alignLeft.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
GraphEditor_ui.py(189):         self.actionAlignLeft.setIcon(icon16)
GraphEditor_ui.py(190):         self.actionAlignLeft.setObjectName("actionAlignLeft")
GraphEditor_ui.py(191):         self.actionAlignUp = QtGui.QAction(MainWindow)
GraphEditor_ui.py(192):         icon17 = QtGui.QIcon()
GraphEditor_ui.py(193):         icon17.addPixmap(QtGui.QPixmap(":/icons/alignright.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
GraphEditor_ui.py(194):         self.actionAlignUp.setIcon(icon17)
GraphEditor_ui.py(195):         self.actionAlignUp.setObjectName("actionAlignUp")
GraphEditor_ui.py(196):         self.actionPropertyView = QtGui.QAction(MainWindow)
GraphEditor_ui.py(197):         icon18 = QtGui.QIcon()
GraphEditor_ui.py(198):         icon18.addPixmap(QtGui.QPixmap(":/icons/property_icon.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
GraphEditor_ui.py(199):         self.actionPropertyView.setIcon(icon18)
GraphEditor_ui.py(200):         self.actionPropertyView.setObjectName("actionPropertyView")
GraphEditor_ui.py(201):         self.menuEdit.addAction(self.actionDelete)
GraphEditor_ui.py(202):         self.menuEdit.addAction(self.actionOptions)
GraphEditor_ui.py(203):         self.menuEdit.addAction(self.actionClear_scene)
GraphEditor_ui.py(204):         self.menuEdit.addSeparator()
GraphEditor_ui.py(205):         self.menuView.addAction(self.actionNode_box)
GraphEditor_ui.py(206):         self.menuView.addAction(self.actionConsole)
GraphEditor_ui.py(207):         self.menuView.addAction(self.actionPlot_graph)
GraphEditor_ui.py(208):         self.menuFile.addAction(self.actionSave)
GraphEditor_ui.py(209):         self.menuFile.addAction(self.actionLoad)
GraphEditor_ui.py(210):         self.menuFile.addAction(self.actionSave_as)
GraphEditor_ui.py(211):         self.menuHelp.addAction(self.actionShortcuts)
GraphEditor_ui.py(212):         self.menuBar.addAction(self.menuFile.menuAction())
GraphEditor_ui.py(213):         self.menuBar.addAction(self.menuEdit.menuAction())
GraphEditor_ui.py(214):         self.menuBar.addAction(self.menuView.menuAction())
GraphEditor_ui.py(215):         self.menuBar.addAction(self.menuHelp.menuAction())
GraphEditor_ui.py(216):         self.toolBar.addAction(self.actionNode_box)
GraphEditor_ui.py(217):         self.toolBar.addAction(self.actionConsole)
GraphEditor_ui.py(218):         self.toolBar.addAction(self.actionPropertyView)
GraphEditor_ui.py(219):         self.toolBar.addSeparator()
GraphEditor_ui.py(220):         self.toolBar.addAction(self.actionShadows)
GraphEditor_ui.py(221):         self.toolBar.addAction(self.actionMultithreaded)
GraphEditor_ui.py(222):         self.toolBar.addAction(self.actionDebug)
GraphEditor_ui.py(223):         self.toolBar.addSeparator()
GraphEditor_ui.py(224):         self.toolBar.addAction(self.actionPlot_graph)
GraphEditor_ui.py(225):         self.toolBar.addAction(self.actionGroup_selected)
GraphEditor_ui.py(226):         self.toolBar.addAction(self.actionScreenshot)
GraphEditor_ui.py(227):         self.toolBar.addSeparator()
GraphEditor_ui.py(228):         self.toolBar.addAction(self.actionAlignLeft)
GraphEditor_ui.py(229):         self.toolBar.addAction(self.actionAlignUp)
GraphEditor_ui.py(231):         self.retranslateUi(MainWindow)
 --- modulename: GraphEditor_ui, funcname: retranslateUi
GraphEditor_ui.py(235):         MainWindow.setWindowTitle(QtGui.QApplication.translate("MainWindow", "QtNodes", None, QtGui.QApplication.UnicodeUTF8))
GraphEditor_ui.py(236):         self.menuEdit.setTitle(QtGui.QApplication.translate("MainWindow", "Edit", None, QtGui.QApplication.UnicodeUTF8))
GraphEditor_ui.py(237):         self.menuView.setTitle(QtGui.QApplication.translate("MainWindow", "View", None, QtGui.QApplication.UnicodeUTF8))
GraphEditor_ui.py(238):         self.menuFile.setTitle(QtGui.QApplication.translate("MainWindow", "File", None, QtGui.QApplication.UnicodeUTF8))
GraphEditor_ui.py(239):         self.menuHelp.setTitle(QtGui.QApplication.translate("MainWindow", "Help", None, QtGui.QApplication.UnicodeUTF8))
GraphEditor_ui.py(240):         self.toolBar.setWindowTitle(QtGui.QApplication.translate("MainWindow", "toolBar", None, QtGui.QApplication.UnicodeUTF8))
GraphEditor_ui.py(241):         self.dockWidgetConsole.setWindowTitle(QtGui.QApplication.translate("MainWindow", "Console", None, QtGui.QApplication.UnicodeUTF8))
GraphEditor_ui.py(242):         self.dockWidgetNodeBox.setWindowTitle(QtGui.QApplication.translate("MainWindow", "Node Box", None, QtGui.QApplication.UnicodeUTF8))
GraphEditor_ui.py(243):         self.dockWidgetNodeView.setWindowTitle(QtGui.QApplication.translate("MainWindow", "PropertyView", None, QtGui.QApplication.UnicodeUTF8))
GraphEditor_ui.py(244):         self.actionDelete.setText(QtGui.QApplication.translate("MainWindow", "Delete", None, QtGui.QApplication.UnicodeUTF8))
GraphEditor_ui.py(245):         self.actionOptions.setText(QtGui.QApplication.translate("MainWindow", "Options", None, QtGui.QApplication.UnicodeUTF8))
GraphEditor_ui.py(246):         self.actionNode_box.setText(QtGui.QApplication.translate("MainWindow", "Node box", None, QtGui.QApplication.UnicodeUTF8))
GraphEditor_ui.py(247):         self.actionSave.setText(QtGui.QApplication.translate("MainWindow", "Save", None, QtGui.QApplication.UnicodeUTF8))
GraphEditor_ui.py(248):         self.actionLoad.setText(QtGui.QApplication.translate("MainWindow", "Load", None, QtGui.QApplication.UnicodeUTF8))
GraphEditor_ui.py(249):         self.actionSave_as.setText(QtGui.QApplication.translate("MainWindow", "Save as", None, QtGui.QApplication.UnicodeUTF8))
GraphEditor_ui.py(250):         self.actionConsole.setText(QtGui.QApplication.translate("MainWindow", "Console", None, QtGui.QApplication.UnicodeUTF8))
GraphEditor_ui.py(251):         self.actionPlot_graph.setText(QtGui.QApplication.translate("MainWindow", "Plot graph", None, QtGui.QApplication.UnicodeUTF8))
GraphEditor_ui.py(252):         self.actionGroup_selected.setText(QtGui.QApplication.translate("MainWindow", "Group selected", None, QtGui.QApplication.UnicodeUTF8))
GraphEditor_ui.py(253):         self.actionClear_scene.setText(QtGui.QApplication.translate("MainWindow", "Clear scene", None, QtGui.QApplication.UnicodeUTF8))
GraphEditor_ui.py(254):         self.actionShadows.setText(QtGui.QApplication.translate("MainWindow", "Shadows", None, QtGui.QApplication.UnicodeUTF8))
GraphEditor_ui.py(255):         self.actionMultithreaded.setText(QtGui.QApplication.translate("MainWindow", "Multithreaded", None, QtGui.QApplication.UnicodeUTF8))
GraphEditor_ui.py(256):         self.actionDebug.setText(QtGui.QApplication.translate("MainWindow", "Debug", None, QtGui.QApplication.UnicodeUTF8))
GraphEditor_ui.py(257):         self.actionScreenshot.setText(QtGui.QApplication.translate("MainWindow", "Screenshot", None, QtGui.QApplication.UnicodeUTF8))
GraphEditor_ui.py(258):         self.actionShortcuts.setText(QtGui.QApplication.translate("MainWindow", "Shortcuts", None, QtGui.QApplication.UnicodeUTF8))
GraphEditor_ui.py(259):         self.actionAlignLeft.setText(QtGui.QApplication.translate("MainWindow", "AlignLeft", None, QtGui.QApplication.UnicodeUTF8))
GraphEditor_ui.py(260):         self.actionAlignLeft.setToolTip(QtGui.QApplication.translate("MainWindow", "Align selected nodes by the left most", None, QtGui.QApplication.UnicodeUTF8))
GraphEditor_ui.py(261):         self.actionAlignUp.setText(QtGui.QApplication.translate("MainWindow", "AlignUp", None, QtGui.QApplication.UnicodeUTF8))
GraphEditor_ui.py(262):         self.actionAlignUp.setToolTip(QtGui.QApplication.translate("MainWindow", "Align selected nodes by the up most", None, QtGui.QApplication.UnicodeUTF8))
GraphEditor_ui.py(263):         self.actionPropertyView.setText(QtGui.QApplication.translate("MainWindow", "PropertyView", None, QtGui.QApplication.UnicodeUTF8))
GraphEditor_ui.py(264):         self.actionPropertyView.setToolTip(QtGui.QApplication.translate("MainWindow", "toggle property view", None, QtGui.QApplication.UnicodeUTF8))
GraphEditor_ui.py(232):         QtCore.QMetaObject.connectSlotsByName(MainWindow)
Launcher.py(14):         self.G = GraphWidget('MAIN_GRAPH', self)
 --- modulename: Widget, funcname: __init__
Widget.py(879):         super(GraphWidget, self).__init__()
Widget.py(880):         AGraph.__init__(self, name)
 --- modulename: AbstractGraph, funcname: __init__
AbstractGraph.py(200):         super(AGraph, self).__init__()
AbstractGraph.py(201):         self.object_type = AGObjectTypes.tGraph
AbstractGraph.py(202):         self._debug = False
AbstractGraph.py(203):         self._multithreaded = False
AbstractGraph.py(204):         self.name = name
AbstractGraph.py(205):         self.nodes = []
AbstractGraph.py(206):         self.nodesPendingKill = []
AbstractGraph.py(207):         self.edges = []
Widget.py(881):         self.parent = parent
Widget.py(882):         self.menu = QtGui.QMenu(self)
Widget.py(883):         self.node_box = NodesBox(self)
 --- modulename: Widget, funcname: __init__
Widget.py(364):         super(NodesBox, self).__init__(graph)
Widget.py(365):         self.graph = weakref.ref(graph)
Widget.py(366):         self.setWindowFlags(QtCore.Qt.WindowTitleHint | QtCore.Qt.CustomizeWindowHint)
Widget.py(367):         self.setObjectName("nodes_box_form")
Widget.py(368):         self.setWindowTitle('Node box - {0}'.format(self.graph().name))
Widget.py(370):         self.resize(160, 200)
Widget.py(371):         self.setSizePolicy(QtGui.QSizePolicy.Minimum, QtGui.QSizePolicy.Minimum)
Widget.py(372):         self.name = 'NODE_BOX'
Widget.py(374):         self.switch_button = QtGui.QPushButton("go to list mode")
Widget.py(375):         self.switch_button.clicked.connect(self.swap_appearance)
Widget.py(377):         self.verticalLayout = QtGui.QVBoxLayout(self)
Widget.py(378):         self.verticalLayout.setSpacing(2)
Widget.py(379):         self.verticalLayout.setContentsMargins(2, 2, 2, 2)
Widget.py(380):         self.verticalLayout.setObjectName("verticalLayout")
Widget.py(381):         self.le_nodes = NodeBoxLineEdit(self)
 --- modulename: Widget, funcname: __init__
Widget.py(279):         super(NodeBoxLineEdit, self).__init__(parent)
Widget.py(280):         self.setParent(parent)
Widget.py(281):         self._events = events
Widget.py(282):         self.parent = parent
Widget.py(283):         self.setLocale(QtCore.QLocale(QtCore.QLocale.English,
Widget.py(284):                        QtCore.QLocale.UnitedStates))
Widget.py(285):         self.setObjectName("le_nodes")
Widget.py(288):                 "font-size: 14px;" +\
Widget.py(289):                 "border-color: black; border-style: outset; border-width: 1px;"
Widget.py(290):         self.setStyleSheet(style)
Widget.py(291):         self.setPlaceholderText("enter node name..")
Widget.py(292):         self.setVisible(False)
Widget.py(382):         self.le_nodes.textChanged.connect(self.le_text_changed)
Widget.py(383):         self.verticalLayout.addWidget(self.switch_button)
Widget.py(384):         self.verticalLayout.addWidget(self.le_nodes)
Widget.py(385):         self.listWidget = NodesBoxListWidget(self)
 --- modulename: Widget, funcname: __init__
Widget.py(237):         super(NodesBoxListWidget, self).__init__(parent)
Widget.py(238):         self.parent_item = weakref.ref(parent)
Widget.py(239):         self._events = events
Widget.py(244):                 "font-size: 14px;" +\
Widget.py(245):                 "border-color: black; border-style: outset; border-width: 1px;"
Widget.py(246):         self.setStyleSheet(style)
Widget.py(247):         self.setParent(parent)
Widget.py(248):         self.setFrameShape(QtGui.QFrame.NoFrame)
Widget.py(249):         self.setFrameShadow(QtGui.QFrame.Sunken)
Widget.py(250):         self.setObjectName("lw_nodes")
Widget.py(251):         self.setSortingEnabled(True)
Widget.py(252):         self.setDragEnabled(True)
Widget.py(253):         self.setDragDropMode(QtGui.QAbstractItemView.DragOnly)
Widget.py(254):         self.setFocusPolicy(QtCore.Qt.StrongFocus)
Widget.py(386):         self.verticalLayout.addWidget(self.listWidget)
Widget.py(387):         self.listWidget.setVisible(False)
Widget.py(388):         self.setVisible(False)
Widget.py(389):         self.refresh_list('')
 --- modulename: Widget, funcname: refresh_list
Widget.py(413):         self.listWidget.clear()
Widget.py(414):         node_file_names = get_nodes_file_names()
 --- modulename: Widget, funcname: get_nodes_file_names
Widget.py(35):     return [i[:-3] for i in listdir(nodes_path) if i.endswith('.py') and '__init__' not in i]
Widget.py(35):     return [i[:-3] for i in listdir(nodes_path) if i.endswith('.py') and '__init__' not in i]
Widget.py(35):     return [i[:-3] for i in listdir(nodes_path) if i.endswith('.py') and '__init__' not in i]
Widget.py(35):     return [i[:-3] for i in listdir(nodes_path) if i.endswith('.py') and '__init__' not in i]
Widget.py(35):     return [i[:-3] for i in listdir(nodes_path) if i.endswith('.py') and '__init__' not in i]
Widget.py(35):     return [i[:-3] for i in listdir(nodes_path) if i.endswith('.py') and '__init__' not in i]
Widget.py(35):     return [i[:-3] for i in listdir(nodes_path) if i.endswith('.py') and '__init__' not in i]
Widget.py(35):     return [i[:-3] for i in listdir(nodes_path) if i.endswith('.py') and '__init__' not in i]
Widget.py(35):     return [i[:-3] for i in listdir(nodes_path) if i.endswith('.py') and '__init__' not in i]
Widget.py(35):     return [i[:-3] for i in listdir(nodes_path) if i.endswith('.py') and '__init__' not in i]
Widget.py(35):     return [i[:-3] for i in listdir(nodes_path) if i.endswith('.py') and '__init__' not in i]
Widget.py(35):     return [i[:-3] for i in listdir(nodes_path) if i.endswith('.py') and '__init__' not in i]
Widget.py(35):     return [i[:-3] for i in listdir(nodes_path) if i.endswith('.py') and '__init__' not in i]
Widget.py(35):     return [i[:-3] for i in listdir(nodes_path) if i.endswith('.py') and '__init__' not in i]
Widget.py(35):     return [i[:-3] for i in listdir(nodes_path) if i.endswith('.py') and '__init__' not in i]
Widget.py(35):     return [i[:-3] for i in listdir(nodes_path) if i.endswith('.py') and '__init__' not in i]
Widget.py(35):     return [i[:-3] for i in listdir(nodes_path) if i.endswith('.py') and '__init__' not in i]
Widget.py(35):     return [i[:-3] for i in listdir(nodes_path) if i.endswith('.py') and '__init__' not in i]
Widget.py(35):     return [i[:-3] for i in listdir(nodes_path) if i.endswith('.py') and '__init__' not in i]
Widget.py(35):     return [i[:-3] for i in listdir(nodes_path) if i.endswith('.py') and '__init__' not in i]
Widget.py(35):     return [i[:-3] for i in listdir(nodes_path) if i.endswith('.py') and '__init__' not in i]
Widget.py(35):     return [i[:-3] for i in listdir(nodes_path) if i.endswith('.py') and '__init__' not in i]
Widget.py(35):     return [i[:-3] for i in listdir(nodes_path) if i.endswith('.py') and '__init__' not in i]
Widget.py(35):     return [i[:-3] for i in listdir(nodes_path) if i.endswith('.py') and '__init__' not in i]
Widget.py(35):     return [i[:-3] for i in listdir(nodes_path) if i.endswith('.py') and '__init__' not in i]
Widget.py(35):     return [i[:-3] for i in listdir(nodes_path) if i.endswith('.py') and '__init__' not in i]
Widget.py(35):     return [i[:-3] for i in listdir(nodes_path) if i.endswith('.py') and '__init__' not in i]
Widget.py(35):     return [i[:-3] for i in listdir(nodes_path) if i.endswith('.py') and '__init__' not in i]
Widget.py(35):     return [i[:-3] for i in listdir(nodes_path) if i.endswith('.py') and '__init__' not in i]
Widget.py(35):     return [i[:-3] for i in listdir(nodes_path) if i.endswith('.py') and '__init__' not in i]
Widget.py(35):     return [i[:-3] for i in listdir(nodes_path) if i.endswith('.py') and '__init__' not in i]
Widget.py(35):     return [i[:-3] for i in listdir(nodes_path) if i.endswith('.py') and '__init__' not in i]
Widget.py(35):     return [i[:-3] for i in listdir(nodes_path) if i.endswith('.py') and '__init__' not in i]
Widget.py(35):     return [i[:-3] for i in listdir(nodes_path) if i.endswith('.py') and '__init__' not in i]
Widget.py(35):     return [i[:-3] for i in listdir(nodes_path) if i.endswith('.py') and '__init__' not in i]
Widget.py(35):     return [i[:-3] for i in listdir(nodes_path) if i.endswith('.py') and '__init__' not in i]
Widget.py(35):     return [i[:-3] for i in listdir(nodes_path) if i.endswith('.py') and '__init__' not in i]
Widget.py(35):     return [i[:-3] for i in listdir(nodes_path) if i.endswith('.py') and '__init__' not in i]
Widget.py(35):     return [i[:-3] for i in listdir(nodes_path) if i.endswith('.py') and '__init__' not in i]
Widget.py(35):     return [i[:-3] for i in listdir(nodes_path) if i.endswith('.py') and '__init__' not in i]
Widget.py(35):     return [i[:-3] for i in listdir(nodes_path) if i.endswith('.py') and '__init__' not in i]
Widget.py(35):     return [i[:-3] for i in listdir(nodes_path) if i.endswith('.py') and '__init__' not in i]
Widget.py(35):     return [i[:-3] for i in listdir(nodes_path) if i.endswith('.py') and '__init__' not in i]
Widget.py(35):     return [i[:-3] for i in listdir(nodes_path) if i.endswith('.py') and '__init__' not in i]
Widget.py(35):     return [i[:-3] for i in listdir(nodes_path) if i.endswith('.py') and '__init__' not in i]
Widget.py(35):     return [i[:-3] for i in listdir(nodes_path) if i.endswith('.py') and '__init__' not in i]
Widget.py(35):     return [i[:-3] for i in listdir(nodes_path) if i.endswith('.py') and '__init__' not in i]
Widget.py(35):     return [i[:-3] for i in listdir(nodes_path) if i.endswith('.py') and '__init__' not in i]
Widget.py(35):     return [i[:-3] for i in listdir(nodes_path) if i.endswith('.py') and '__init__' not in i]
Widget.py(35):     return [i[:-3] for i in listdir(nodes_path) if i.endswith('.py') and '__init__' not in i]
Widget.py(35):     return [i[:-3] for i in listdir(nodes_path) if i.endswith('.py') and '__init__' not in i]
Widget.py(35):     return [i[:-3] for i in listdir(nodes_path) if i.endswith('.py') and '__init__' not in i]
Widget.py(35):     return [i[:-3] for i in listdir(nodes_path) if i.endswith('.py') and '__init__' not in i]
Widget.py(35):     return [i[:-3] for i in listdir(nodes_path) if i.endswith('.py') and '__init__' not in i]
Widget.py(35):     return [i[:-3] for i in listdir(nodes_path) if i.endswith('.py') and '__init__' not in i]
Widget.py(35):     return [i[:-3] for i in listdir(nodes_path) if i.endswith('.py') and '__init__' not in i]
Widget.py(35):     return [i[:-3] for i in listdir(nodes_path) if i.endswith('.py') and '__init__' not in i]
Widget.py(35):     return [i[:-3] for i in listdir(nodes_path) if i.endswith('.py') and '__init__' not in i]
Widget.py(35):     return [i[:-3] for i in listdir(nodes_path) if i.endswith('.py') and '__init__' not in i]
Widget.py(35):     return [i[:-3] for i in listdir(nodes_path) if i.endswith('.py') and '__init__' not in i]
Widget.py(35):     return [i[:-3] for i in listdir(nodes_path) if i.endswith('.py') and '__init__' not in i]
Widget.py(35):     return [i[:-3] for i in listdir(nodes_path) if i.endswith('.py') and '__init__' not in i]
Widget.py(35):     return [i[:-3] for i in listdir(nodes_path) if i.endswith('.py') and '__init__' not in i]
Widget.py(35):     return [i[:-3] for i in listdir(nodes_path) if i.endswith('.py') and '__init__' not in i]
Widget.py(35):     return [i[:-3] for i in listdir(nodes_path) if i.endswith('.py') and '__init__' not in i]
Widget.py(35):     return [i[:-3] for i in listdir(nodes_path) if i.endswith('.py') and '__init__' not in i]
Widget.py(35):     return [i[:-3] for i in listdir(nodes_path) if i.endswith('.py') and '__init__' not in i]
Widget.py(35):     return [i[:-3] for i in listdir(nodes_path) if i.endswith('.py') and '__init__' not in i]
Widget.py(35):     return [i[:-3] for i in listdir(nodes_path) if i.endswith('.py') and '__init__' not in i]
Widget.py(35):     return [i[:-3] for i in listdir(nodes_path) if i.endswith('.py') and '__init__' not in i]
Widget.py(35):     return [i[:-3] for i in listdir(nodes_path) if i.endswith('.py') and '__init__' not in i]
Widget.py(35):     return [i[:-3] for i in listdir(nodes_path) if i.endswith('.py') and '__init__' not in i]
Widget.py(35):     return [i[:-3] for i in listdir(nodes_path) if i.endswith('.py') and '__init__' not in i]
Widget.py(35):     return [i[:-3] for i in listdir(nodes_path) if i.endswith('.py') and '__init__' not in i]
Widget.py(35):     return [i[:-3] for i in listdir(nodes_path) if i.endswith('.py') and '__init__' not in i]
Widget.py(35):     return [i[:-3] for i in listdir(nodes_path) if i.endswith('.py') and '__init__' not in i]
Widget.py(35):     return [i[:-3] for i in listdir(nodes_path) if i.endswith('.py') and '__init__' not in i]
Widget.py(35):     return [i[:-3] for i in listdir(nodes_path) if i.endswith('.py') and '__init__' not in i]
Widget.py(35):     return [i[:-3] for i in listdir(nodes_path) if i.endswith('.py') and '__init__' not in i]
Widget.py(35):     return [i[:-3] for i in listdir(nodes_path) if i.endswith('.py') and '__init__' not in i]
Widget.py(35):     return [i[:-3] for i in listdir(nodes_path) if i.endswith('.py') and '__init__' not in i]
Widget.py(35):     return [i[:-3] for i in listdir(nodes_path) if i.endswith('.py') and '__init__' not in i]
Widget.py(35):     return [i[:-3] for i in listdir(nodes_path) if i.endswith('.py') and '__init__' not in i]
Widget.py(35):     return [i[:-3] for i in listdir(nodes_path) if i.endswith('.py') and '__init__' not in i]
Widget.py(35):     return [i[:-3] for i in listdir(nodes_path) if i.endswith('.py') and '__init__' not in i]
Widget.py(35):     return [i[:-3] for i in listdir(nodes_path) if i.endswith('.py') and '__init__' not in i]
Widget.py(415):         self.listWidget.addItems([i for i in node_file_names if pattern.lower() in i.lower()])
Widget.py(415):         self.listWidget.addItems([i for i in node_file_names if pattern.lower() in i.lower()])
Widget.py(415):         self.listWidget.addItems([i for i in node_file_names if pattern.lower() in i.lower()])
Widget.py(415):         self.listWidget.addItems([i for i in node_file_names if pattern.lower() in i.lower()])
Widget.py(415):         self.listWidget.addItems([i for i in node_file_names if pattern.lower() in i.lower()])
Widget.py(415):         self.listWidget.addItems([i for i in node_file_names if pattern.lower() in i.lower()])
Widget.py(415):         self.listWidget.addItems([i for i in node_file_names if pattern.lower() in i.lower()])
Widget.py(415):         self.listWidget.addItems([i for i in node_file_names if pattern.lower() in i.lower()])
Widget.py(415):         self.listWidget.addItems([i for i in node_file_names if pattern.lower() in i.lower()])
Widget.py(415):         self.listWidget.addItems([i for i in node_file_names if pattern.lower() in i.lower()])
Widget.py(415):         self.listWidget.addItems([i for i in node_file_names if pattern.lower() in i.lower()])
Widget.py(415):         self.listWidget.addItems([i for i in node_file_names if pattern.lower() in i.lower()])
Widget.py(415):         self.listWidget.addItems([i for i in node_file_names if pattern.lower() in i.lower()])
Widget.py(415):         self.listWidget.addItems([i for i in node_file_names if pattern.lower() in i.lower()])
Widget.py(415):         self.listWidget.addItems([i for i in node_file_names if pattern.lower() in i.lower()])
Widget.py(415):         self.listWidget.addItems([i for i in node_file_names if pattern.lower() in i.lower()])
Widget.py(415):         self.listWidget.addItems([i for i in node_file_names if pattern.lower() in i.lower()])
Widget.py(415):         self.listWidget.addItems([i for i in node_file_names if pattern.lower() in i.lower()])
Widget.py(415):         self.listWidget.addItems([i for i in node_file_names if pattern.lower() in i.lower()])
Widget.py(415):         self.listWidget.addItems([i for i in node_file_names if pattern.lower() in i.lower()])
Widget.py(415):         self.listWidget.addItems([i for i in node_file_names if pattern.lower() in i.lower()])
Widget.py(415):         self.listWidget.addItems([i for i in node_file_names if pattern.lower() in i.lower()])
Widget.py(415):         self.listWidget.addItems([i for i in node_file_names if pattern.lower() in i.lower()])
Widget.py(415):         self.listWidget.addItems([i for i in node_file_names if pattern.lower() in i.lower()])
Widget.py(415):         self.listWidget.addItems([i for i in node_file_names if pattern.lower() in i.lower()])
Widget.py(415):         self.listWidget.addItems([i for i in node_file_names if pattern.lower() in i.lower()])
Widget.py(415):         self.listWidget.addItems([i for i in node_file_names if pattern.lower() in i.lower()])
Widget.py(415):         self.listWidget.addItems([i for i in node_file_names if pattern.lower() in i.lower()])
Widget.py(415):         self.listWidget.addItems([i for i in node_file_names if pattern.lower() in i.lower()])
Widget.py(415):         self.listWidget.addItems([i for i in node_file_names if pattern.lower() in i.lower()])
Widget.py(415):         self.listWidget.addItems([i for i in node_file_names if pattern.lower() in i.lower()])
Widget.py(415):         self.listWidget.addItems([i for i in node_file_names if pattern.lower() in i.lower()])
Widget.py(415):         self.listWidget.addItems([i for i in node_file_names if pattern.lower() in i.lower()])
Widget.py(415):         self.listWidget.addItems([i for i in node_file_names if pattern.lower() in i.lower()])
Widget.py(415):         self.listWidget.addItems([i for i in node_file_names if pattern.lower() in i.lower()])
Widget.py(415):         self.listWidget.addItems([i for i in node_file_names if pattern.lower() in i.lower()])
Widget.py(415):         self.listWidget.addItems([i for i in node_file_names if pattern.lower() in i.lower()])
Widget.py(415):         self.listWidget.addItems([i for i in node_file_names if pattern.lower() in i.lower()])
Widget.py(415):         self.listWidget.addItems([i for i in node_file_names if pattern.lower() in i.lower()])
Widget.py(415):         self.listWidget.addItems([i for i in node_file_names if pattern.lower() in i.lower()])
Widget.py(415):         self.listWidget.addItems([i for i in node_file_names if pattern.lower() in i.lower()])
Widget.py(415):         self.listWidget.addItems([i for i in node_file_names if pattern.lower() in i.lower()])
Widget.py(416):         item = self.listWidget.itemAt(0, 0)
Widget.py(417):         if item and not item.isSelected():
Widget.py(418):             item.setSelected(True)
Widget.py(390):         self.tree_widget = NodeBoxTreeWidget(self.graph())
 --- modulename: Widget, funcname: __init__
Widget.py(304):         super(NodeBoxTreeWidget, self).__init__(parent)
Widget.py(309):                 "font-size: 14px;" +\
Widget.py(310):                 "border-color: black; border-style: outset; border-width: 1px;"
Widget.py(311):         self.graph = weakref.ref(parent)
Widget.py(312):         self.setStyleSheet(style)
Widget.py(313):         self.setParent(parent)
Widget.py(314):         self.setFrameShape(QtGui.QFrame.NoFrame)
Widget.py(315):         self.setFrameShadow(QtGui.QFrame.Sunken)
Widget.py(316):         self.setObjectName("tree_nodes")
Widget.py(317):         self.setSortingEnabled(True)
Widget.py(318):         self.setDragEnabled(True)
Widget.py(319):         self.setColumnCount(1)
Widget.py(320):         self.setHeaderHidden(True)
Widget.py(321):         self.setDragDropMode(QtGui.QAbstractItemView.DragOnly)
Widget.py(322):         self.categories = {}
Widget.py(323):         self.setFocusPolicy(QtCore.Qt.StrongFocus)
Widget.py(391):         self.verticalLayout.addWidget(self.tree_widget)
Widget.py(392):         self.tree_widget.refresh()
 --- modulename: Widget, funcname: refresh
Widget.py(326):         self.clear()
Widget.py(327):         for node_file_name in get_nodes_file_names():
 --- modulename: Widget, funcname: get_nodes_file_names
Widget.py(35):     return [i[:-3] for i in listdir(nodes_path) if i.endswith('.py') and '__init__' not in i]
Widget.py(35):     return [i[:-3] for i in listdir(nodes_path) if i.endswith('.py') and '__init__' not in i]
Widget.py(35):     return [i[:-3] for i in listdir(nodes_path) if i.endswith('.py') and '__init__' not in i]
Widget.py(35):     return [i[:-3] for i in listdir(nodes_path) if i.endswith('.py') and '__init__' not in i]
Widget.py(35):     return [i[:-3] for i in listdir(nodes_path) if i.endswith('.py') and '__init__' not in i]
Widget.py(35):     return [i[:-3] for i in listdir(nodes_path) if i.endswith('.py') and '__init__' not in i]
Widget.py(35):     return [i[:-3] for i in listdir(nodes_path) if i.endswith('.py') and '__init__' not in i]
Widget.py(35):     return [i[:-3] for i in listdir(nodes_path) if i.endswith('.py') and '__init__' not in i]
Widget.py(35):     return [i[:-3] for i in listdir(nodes_path) if i.endswith('.py') and '__init__' not in i]
Widget.py(35):     return [i[:-3] for i in listdir(nodes_path) if i.endswith('.py') and '__init__' not in i]
Widget.py(35):     return [i[:-3] for i in listdir(nodes_path) if i.endswith('.py') and '__init__' not in i]
Widget.py(35):     return [i[:-3] for i in listdir(nodes_path) if i.endswith('.py') and '__init__' not in i]
Widget.py(35):     return [i[:-3] for i in listdir(nodes_path) if i.endswith('.py') and '__init__' not in i]
Widget.py(35):     return [i[:-3] for i in listdir(nodes_path) if i.endswith('.py') and '__init__' not in i]
Widget.py(35):     return [i[:-3] for i in listdir(nodes_path) if i.endswith('.py') and '__init__' not in i]
Widget.py(35):     return [i[:-3] for i in listdir(nodes_path) if i.endswith('.py') and '__init__' not in i]
Widget.py(35):     return [i[:-3] for i in listdir(nodes_path) if i.endswith('.py') and '__init__' not in i]
Widget.py(35):     return [i[:-3] for i in listdir(nodes_path) if i.endswith('.py') and '__init__' not in i]
Widget.py(35):     return [i[:-3] for i in listdir(nodes_path) if i.endswith('.py') and '__init__' not in i]
Widget.py(35):     return [i[:-3] for i in listdir(nodes_path) if i.endswith('.py') and '__init__' not in i]
Widget.py(35):     return [i[:-3] for i in listdir(nodes_path) if i.endswith('.py') and '__init__' not in i]
Widget.py(35):     return [i[:-3] for i in listdir(nodes_path) if i.endswith('.py') and '__init__' not in i]
Widget.py(35):     return [i[:-3] for i in listdir(nodes_path) if i.endswith('.py') and '__init__' not in i]
Widget.py(35):     return [i[:-3] for i in listdir(nodes_path) if i.endswith('.py') and '__init__' not in i]
Widget.py(35):     return [i[:-3] for i in listdir(nodes_path) if i.endswith('.py') and '__init__' not in i]
Widget.py(35):     return [i[:-3] for i in listdir(nodes_path) if i.endswith('.py') and '__init__' not in i]
Widget.py(35):     return [i[:-3] for i in listdir(nodes_path) if i.endswith('.py') and '__init__' not in i]
Widget.py(35):     return [i[:-3] for i in listdir(nodes_path) if i.endswith('.py') and '__init__' not in i]
Widget.py(35):     return [i[:-3] for i in listdir(nodes_path) if i.endswith('.py') and '__init__' not in i]
Widget.py(35):     return [i[:-3] for i in listdir(nodes_path) if i.endswith('.py') and '__init__' not in i]
Widget.py(35):     return [i[:-3] for i in listdir(nodes_path) if i.endswith('.py') and '__init__' not in i]
Widget.py(35):     return [i[:-3] for i in listdir(nodes_path) if i.endswith('.py') and '__init__' not in i]
Widget.py(35):     return [i[:-3] for i in listdir(nodes_path) if i.endswith('.py') and '__init__' not in i]
Widget.py(35):     return [i[:-3] for i in listdir(nodes_path) if i.endswith('.py') and '__init__' not in i]
Widget.py(35):     return [i[:-3] for i in listdir(nodes_path) if i.endswith('.py') and '__init__' not in i]
Widget.py(35):     return [i[:-3] for i in listdir(nodes_path) if i.endswith('.py') and '__init__' not in i]
Widget.py(35):     return [i[:-3] for i in listdir(nodes_path) if i.endswith('.py') and '__init__' not in i]
Widget.py(35):     return [i[:-3] for i in listdir(nodes_path) if i.endswith('.py') and '__init__' not in i]
Widget.py(35):     return [i[:-3] for i in listdir(nodes_path) if i.endswith('.py') and '__init__' not in i]
Widget.py(35):     return [i[:-3] for i in listdir(nodes_path) if i.endswith('.py') and '__init__' not in i]
Widget.py(35):     return [i[:-3] for i in listdir(nodes_path) if i.endswith('.py') and '__init__' not in i]
Widget.py(35):     return [i[:-3] for i in listdir(nodes_path) if i.endswith('.py') and '__init__' not in i]
Widget.py(35):     return [i[:-3] for i in listdir(nodes_path) if i.endswith('.py') and '__init__' not in i]
Widget.py(35):     return [i[:-3] for i in listdir(nodes_path) if i.endswith('.py') and '__init__' not in i]
Widget.py(35):     return [i[:-3] for i in listdir(nodes_path) if i.endswith('.py') and '__init__' not in i]
Widget.py(35):     return [i[:-3] for i in listdir(nodes_path) if i.endswith('.py') and '__init__' not in i]
Widget.py(35):     return [i[:-3] for i in listdir(nodes_path) if i.endswith('.py') and '__init__' not in i]
Widget.py(35):     return [i[:-3] for i in listdir(nodes_path) if i.endswith('.py') and '__init__' not in i]
Widget.py(35):     return [i[:-3] for i in listdir(nodes_path) if i.endswith('.py') and '__init__' not in i]
Widget.py(35):     return [i[:-3] for i in listdir(nodes_path) if i.endswith('.py') and '__init__' not in i]
Widget.py(35):     return [i[:-3] for i in listdir(nodes_path) if i.endswith('.py') and '__init__' not in i]
Widget.py(35):     return [i[:-3] for i in listdir(nodes_path) if i.endswith('.py') and '__init__' not in i]
Widget.py(35):     return [i[:-3] for i in listdir(nodes_path) if i.endswith('.py') and '__init__' not in i]
Widget.py(35):     return [i[:-3] for i in listdir(nodes_path) if i.endswith('.py') and '__init__' not in i]
Widget.py(35):     return [i[:-3] for i in listdir(nodes_path) if i.endswith('.py') and '__init__' not in i]
Widget.py(35):     return [i[:-3] for i in listdir(nodes_path) if i.endswith('.py') and '__init__' not in i]
Widget.py(35):     return [i[:-3] for i in listdir(nodes_path) if i.endswith('.py') and '__init__' not in i]
Widget.py(35):     return [i[:-3] for i in listdir(nodes_path) if i.endswith('.py') and '__init__' not in i]
Widget.py(35):     return [i[:-3] for i in listdir(nodes_path) if i.endswith('.py') and '__init__' not in i]
Widget.py(35):     return [i[:-3] for i in listdir(nodes_path) if i.endswith('.py') and '__init__' not in i]
Widget.py(35):     return [i[:-3] for i in listdir(nodes_path) if i.endswith('.py') and '__init__' not in i]
Widget.py(35):     return [i[:-3] for i in listdir(nodes_path) if i.endswith('.py') and '__init__' not in i]
Widget.py(35):     return [i[:-3] for i in listdir(nodes_path) if i.endswith('.py') and '__init__' not in i]
Widget.py(35):     return [i[:-3] for i in listdir(nodes_path) if i.endswith('.py') and '__init__' not in i]
Widget.py(35):     return [i[:-3] for i in listdir(nodes_path) if i.endswith('.py') and '__init__' not in i]
Widget.py(35):     return [i[:-3] for i in listdir(nodes_path) if i.endswith('.py') and '__init__' not in i]
Widget.py(35):     return [i[:-3] for i in listdir(nodes_path) if i.endswith('.py') and '__init__' not in i]
Widget.py(35):     return [i[:-3] for i in listdir(nodes_path) if i.endswith('.py') and '__init__' not in i]
Widget.py(35):     return [i[:-3] for i in listdir(nodes_path) if i.endswith('.py') and '__init__' not in i]
Widget.py(35):     return [i[:-3] for i in listdir(nodes_path) if i.endswith('.py') and '__init__' not in i]
Widget.py(35):     return [i[:-3] for i in listdir(nodes_path) if i.endswith('.py') and '__init__' not in i]
Widget.py(35):     return [i[:-3] for i in listdir(nodes_path) if i.endswith('.py') and '__init__' not in i]
Widget.py(35):     return [i[:-3] for i in listdir(nodes_path) if i.endswith('.py') and '__init__' not in i]
Widget.py(35):     return [i[:-3] for i in listdir(nodes_path) if i.endswith('.py') and '__init__' not in i]
Widget.py(35):     return [i[:-3] for i in listdir(nodes_path) if i.endswith('.py') and '__init__' not in i]
Widget.py(35):     return [i[:-3] for i in listdir(nodes_path) if i.endswith('.py') and '__init__' not in i]
Widget.py(35):     return [i[:-3] for i in listdir(nodes_path) if i.endswith('.py') and '__init__' not in i]
Widget.py(35):     return [i[:-3] for i in listdir(nodes_path) if i.endswith('.py') and '__init__' not in i]
Widget.py(35):     return [i[:-3] for i in listdir(nodes_path) if i.endswith('.py') and '__init__' not in i]
Widget.py(35):     return [i[:-3] for i in listdir(nodes_path) if i.endswith('.py') and '__init__' not in i]
Widget.py(35):     return [i[:-3] for i in listdir(nodes_path) if i.endswith('.py') and '__init__' not in i]
Widget.py(35):     return [i[:-3] for i in listdir(nodes_path) if i.endswith('.py') and '__init__' not in i]
Widget.py(35):     return [i[:-3] for i in listdir(nodes_path) if i.endswith('.py') and '__init__' not in i]
Widget.py(35):     return [i[:-3] for i in listdir(nodes_path) if i.endswith('.py') and '__init__' not in i]
Widget.py(35):     return [i[:-3] for i in listdir(nodes_path) if i.endswith('.py') and '__init__' not in i]
Widget.py(35):     return [i[:-3] for i in listdir(nodes_path) if i.endswith('.py') and '__init__' not in i]
Widget.py(328):             node_class = getattr(Nodes, node_file_name)
Widget.py(329):             category_name = node_class.get_category()
 --- modulename: Abs, funcname: get_category
Abs.py(19):         return 'Math'
Widget.py(330):             if category_name not in self.categories:
Widget.py(331):                 CatItem = QtGui.QTreeWidgetItem(self)
Widget.py(332):                 CatItem.setText(0, category_name)
Widget.py(333):                 self.categories[category_name] = CatItem
Widget.py(334):             NodeItem = QtGui.QTreeWidgetItem(self.categories[category_name])
Widget.py(335):             NodeItem.setText(0, node_file_name)
Widget.py(327):         for node_file_name in get_nodes_file_names():
Widget.py(328):             node_class = getattr(Nodes, node_file_name)
Widget.py(329):             category_name = node_class.get_category()
 --- modulename: ArrayAppend, funcname: get_category
ArrayAppend.py(23):         return 'Array'
Widget.py(330):             if category_name not in self.categories:
Widget.py(331):                 CatItem = QtGui.QTreeWidgetItem(self)
Widget.py(332):                 CatItem.setText(0, category_name)
Widget.py(333):                 self.categories[category_name] = CatItem
Widget.py(334):             NodeItem = QtGui.QTreeWidgetItem(self.categories[category_name])
Widget.py(335):             NodeItem.setText(0, node_file_name)
Widget.py(327):         for node_file_name in get_nodes_file_names():
Widget.py(328):             node_class = getattr(Nodes, node_file_name)
Widget.py(329):             category_name = node_class.get_category()
 --- modulename: ArrayConcat, funcname: get_category
ArrayConcat.py(19):         return 'Array'
Widget.py(330):             if category_name not in self.categories:
Widget.py(334):             NodeItem = QtGui.QTreeWidgetItem(self.categories[category_name])
Widget.py(335):             NodeItem.setText(0, node_file_name)
Widget.py(327):         for node_file_name in get_nodes_file_names():
Widget.py(328):             node_class = getattr(Nodes, node_file_name)
Widget.py(329):             category_name = node_class.get_category()
 --- modulename: BoolNode, funcname: get_category
BoolNode.py(37):         return 'GenericTypes'
Widget.py(330):             if category_name not in self.categories:
Widget.py(331):                 CatItem = QtGui.QTreeWidgetItem(self)
Widget.py(332):                 CatItem.setText(0, category_name)
Widget.py(333):                 self.categories[category_name] = CatItem
Widget.py(334):             NodeItem = QtGui.QTreeWidgetItem(self.categories[category_name])
Widget.py(335):             NodeItem.setText(0, node_file_name)
Widget.py(327):         for node_file_name in get_nodes_file_names():
Widget.py(328):             node_class = getattr(Nodes, node_file_name)
Widget.py(329):             category_name = node_class.get_category()
 --- modulename: ConditionalValue, funcname: get_category
ConditionalValue.py(23):         return 'FlowControl'
Widget.py(330):             if category_name not in self.categories:
Widget.py(331):                 CatItem = QtGui.QTreeWidgetItem(self)
Widget.py(332):                 CatItem.setText(0, category_name)
Widget.py(333):                 self.categories[category_name] = CatItem
Widget.py(334):             NodeItem = QtGui.QTreeWidgetItem(self.categories[category_name])
Widget.py(335):             NodeItem.setText(0, node_file_name)
Widget.py(327):         for node_file_name in get_nodes_file_names():
Widget.py(328):             node_class = getattr(Nodes, node_file_name)
Widget.py(329):             category_name = node_class.get_category()
 --- modulename: Cos, funcname: get_category
Cos.py(19):         return 'Math'
Widget.py(330):             if category_name not in self.categories:
Widget.py(334):             NodeItem = QtGui.QTreeWidgetItem(self.categories[category_name])
Widget.py(335):             NodeItem.setText(0, node_file_name)
Widget.py(327):         for node_file_name in get_nodes_file_names():
Widget.py(328):             node_class = getattr(Nodes, node_file_name)
Widget.py(329):             category_name = node_class.get_category()
 --- modulename: DegToRad, funcname: get_category
DegToRad.py(20):         return 'Convert'
Widget.py(330):             if category_name not in self.categories:
Widget.py(331):                 CatItem = QtGui.QTreeWidgetItem(self)
Widget.py(332):                 CatItem.setText(0, category_name)
Widget.py(333):                 self.categories[category_name] = CatItem
Widget.py(334):             NodeItem = QtGui.QTreeWidgetItem(self.categories[category_name])
Widget.py(335):             NodeItem.setText(0, node_file_name)
Widget.py(327):         for node_file_name in get_nodes_file_names():
Widget.py(328):             node_class = getattr(Nodes, node_file_name)
Widget.py(329):             category_name = node_class.get_category()
 --- modulename: DevideNode, funcname: get_category
DevideNode.py(28):         return 'Math'
Widget.py(330):             if category_name not in self.categories:
Widget.py(334):             NodeItem = QtGui.QTreeWidgetItem(self.categories[category_name])
Widget.py(335):             NodeItem.setText(0, node_file_name)
Widget.py(327):         for node_file_name in get_nodes_file_names():
Widget.py(328):             node_class = getattr(Nodes, node_file_name)
Widget.py(329):             category_name = node_class.get_category()
 --- modulename: DiscriminantNode, funcname: get_category
DiscriminantNode.py(19):         return 'Math'
Widget.py(330):             if category_name not in self.categories:
Widget.py(334):             NodeItem = QtGui.QTreeWidgetItem(self.categories[category_name])
Widget.py(335):             NodeItem.setText(0, node_file_name)
Widget.py(327):         for node_file_name in get_nodes_file_names():
Widget.py(328):             node_class = getattr(Nodes, node_file_name)
Widget.py(329):             category_name = node_class.get_category()
 --- modulename: FloatNode, funcname: get_category
FloatNode.py(35):         return 'GenericTypes'
Widget.py(330):             if category_name not in self.categories:
Widget.py(334):             NodeItem = QtGui.QTreeWidgetItem(self.categories[category_name])
Widget.py(335):             NodeItem.setText(0, node_file_name)
Widget.py(327):         for node_file_name in get_nodes_file_names():
Widget.py(328):             node_class = getattr(Nodes, node_file_name)
Widget.py(329):             category_name = node_class.get_category()
 --- modulename: FloatToInt, funcname: get_category
FloatToInt.py(16):         return 'Convert'
Widget.py(330):             if category_name not in self.categories:
Widget.py(334):             NodeItem = QtGui.QTreeWidgetItem(self.categories[category_name])
Widget.py(335):             NodeItem.setText(0, node_file_name)
Widget.py(327):         for node_file_name in get_nodes_file_names():
Widget.py(328):             node_class = getattr(Nodes, node_file_name)
Widget.py(329):             category_name = node_class.get_category()
 --- modulename: Index, funcname: get_category
Index.py(19):         return 'Array'
Widget.py(330):             if category_name not in self.categories:
Widget.py(334):             NodeItem = QtGui.QTreeWidgetItem(self.categories[category_name])
Widget.py(335):             NodeItem.setText(0, node_file_name)
Widget.py(327):         for node_file_name in get_nodes_file_names():
Widget.py(328):             node_class = getattr(Nodes, node_file_name)
Widget.py(329):             category_name = node_class.get_category()
 --- modulename: IntNode, funcname: get_category
IntNode.py(36):         return 'GenericTypes'
Widget.py(330):             if category_name not in self.categories:
Widget.py(334):             NodeItem = QtGui.QTreeWidgetItem(self.categories[category_name])
Widget.py(335):             NodeItem.setText(0, node_file_name)
Widget.py(327):         for node_file_name in get_nodes_file_names():
Widget.py(328):             node_class = getattr(Nodes, node_file_name)
Widget.py(329):             category_name = node_class.get_category()
 --- modulename: IsArray, funcname: get_category
IsArray.py(16):         return 'Conditions'
Widget.py(330):             if category_name not in self.categories:
Widget.py(331):                 CatItem = QtGui.QTreeWidgetItem(self)
Widget.py(332):                 CatItem.setText(0, category_name)
Widget.py(333):                 self.categories[category_name] = CatItem
Widget.py(334):             NodeItem = QtGui.QTreeWidgetItem(self.categories[category_name])
Widget.py(335):             NodeItem.setText(0, node_file_name)
Widget.py(327):         for node_file_name in get_nodes_file_names():
Widget.py(328):             node_class = getattr(Nodes, node_file_name)
Widget.py(329):             category_name = node_class.get_category()
 --- modulename: IsEqual, funcname: get_category
IsEqual.py(17):         return 'Conditions'
Widget.py(330):             if category_name not in self.categories:
Widget.py(334):             NodeItem = QtGui.QTreeWidgetItem(self.categories[category_name])
Widget.py(335):             NodeItem.setText(0, node_file_name)
Widget.py(327):         for node_file_name in get_nodes_file_names():
Widget.py(328):             node_class = getattr(Nodes, node_file_name)
Widget.py(329):             category_name = node_class.get_category()
 --- modulename: IsGreaterThan, funcname: get_category
IsGreaterThan.py(17):         return 'Conditions'
Widget.py(330):             if category_name not in self.categories:
Widget.py(334):             NodeItem = QtGui.QTreeWidgetItem(self.categories[category_name])
Widget.py(335):             NodeItem.setText(0, node_file_name)
Widget.py(327):         for node_file_name in get_nodes_file_names():
Widget.py(328):             node_class = getattr(Nodes, node_file_name)
Widget.py(329):             category_name = node_class.get_category()
 --- modulename: IsLessThan, funcname: get_category
IsLessThan.py(17):         return 'Conditions'
Widget.py(330):             if category_name not in self.categories:
Widget.py(334):             NodeItem = QtGui.QTreeWidgetItem(self.categories[category_name])
Widget.py(335):             NodeItem.setText(0, node_file_name)
Widget.py(327):         for node_file_name in get_nodes_file_names():
Widget.py(328):             node_class = getattr(Nodes, node_file_name)
Widget.py(329):             category_name = node_class.get_category()
 --- modulename: Len, funcname: get_category
Len.py(20):         return 'Array'
Widget.py(330):             if category_name not in self.categories:
Widget.py(334):             NodeItem = QtGui.QTreeWidgetItem(self.categories[category_name])
Widget.py(335):             NodeItem.setText(0, node_file_name)
Widget.py(327):         for node_file_name in get_nodes_file_names():
Widget.py(328):             node_class = getattr(Nodes, node_file_name)
Widget.py(329):             category_name = node_class.get_category()
 --- modulename: MakeArray, funcname: get_category
MakeArray.py(46):         return 'Array'
Widget.py(330):             if category_name not in self.categories:
Widget.py(334):             NodeItem = QtGui.QTreeWidgetItem(self.categories[category_name])
Widget.py(335):             NodeItem.setText(0, node_file_name)
Widget.py(327):         for node_file_name in get_nodes_file_names():
Widget.py(328):             node_class = getattr(Nodes, node_file_name)
Widget.py(329):             category_name = node_class.get_category()
 --- modulename: Max, funcname: get_category
Max.py(18):         return 'Common'
Widget.py(330):             if category_name not in self.categories:
Widget.py(331):                 CatItem = QtGui.QTreeWidgetItem(self)
Widget.py(332):                 CatItem.setText(0, category_name)
Widget.py(333):                 self.categories[category_name] = CatItem
Widget.py(334):             NodeItem = QtGui.QTreeWidgetItem(self.categories[category_name])
Widget.py(335):             NodeItem.setText(0, node_file_name)
Widget.py(327):         for node_file_name in get_nodes_file_names():
Widget.py(328):             node_class = getattr(Nodes, node_file_name)
Widget.py(329):             category_name = node_class.get_category()
 --- modulename: Min, funcname: get_category
Min.py(19):         return 'Common'
Widget.py(330):             if category_name not in self.categories:
Widget.py(334):             NodeItem = QtGui.QTreeWidgetItem(self.categories[category_name])
Widget.py(335):             NodeItem.setText(0, node_file_name)
Widget.py(327):         for node_file_name in get_nodes_file_names():
Widget.py(328):             node_class = getattr(Nodes, node_file_name)
Widget.py(329):             category_name = node_class.get_category()
 --- modulename: MultNode, funcname: get_category
MultNode.py(17):         return 'Math'
Widget.py(330):             if category_name not in self.categories:
Widget.py(334):             NodeItem = QtGui.QTreeWidgetItem(self.categories[category_name])
Widget.py(335):             NodeItem.setText(0, node_file_name)
Widget.py(327):         for node_file_name in get_nodes_file_names():
Widget.py(328):             node_class = getattr(Nodes, node_file_name)
Widget.py(329):             category_name = node_class.get_category()
 --- modulename: Not, funcname: get_category
Not.py(20):         return 'Common'
Widget.py(330):             if category_name not in self.categories:
Widget.py(334):             NodeItem = QtGui.QTreeWidgetItem(self.categories[category_name])
Widget.py(335):             NodeItem.setText(0, node_file_name)
Widget.py(327):         for node_file_name in get_nodes_file_names():
Widget.py(328):             node_class = getattr(Nodes, node_file_name)
Widget.py(329):             category_name = node_class.get_category()
 --- modulename: PowNode, funcname: get_category
PowNode.py(17):         return 'Math'
Widget.py(330):             if category_name not in self.categories:
Widget.py(334):             NodeItem = QtGui.QTreeWidgetItem(self.categories[category_name])
Widget.py(335):             NodeItem.setText(0, node_file_name)
Widget.py(327):         for node_file_name in get_nodes_file_names():
Widget.py(328):             node_class = getattr(Nodes, node_file_name)
Widget.py(329):             category_name = node_class.get_category()
 --- modulename: RadToDeg, funcname: get_category
RadToDeg.py(20):         return 'Convert'
Widget.py(330):             if category_name not in self.categories:
Widget.py(334):             NodeItem = QtGui.QTreeWidgetItem(self.categories[category_name])
Widget.py(335):             NodeItem.setText(0, node_file_name)
Widget.py(327):         for node_file_name in get_nodes_file_names():
Widget.py(328):             node_class = getattr(Nodes, node_file_name)
Widget.py(329):             category_name = node_class.get_category()
 --- modulename: RandInt, funcname: get_category
RandInt.py(21):         return 'Common'
Widget.py(330):             if category_name not in self.categories:
Widget.py(334):             NodeItem = QtGui.QTreeWidgetItem(self.categories[category_name])
Widget.py(335):             NodeItem.setText(0, node_file_name)
Widget.py(327):         for node_file_name in get_nodes_file_names():
Widget.py(328):             node_class = getattr(Nodes, node_file_name)
Widget.py(329):             category_name = node_class.get_category()
 --- modulename: RequestNode, funcname: get_category
RequestNode.py(43):         return 'Util'
Widget.py(330):             if category_name not in self.categories:
Widget.py(331):                 CatItem = QtGui.QTreeWidgetItem(self)
Widget.py(332):                 CatItem.setText(0, category_name)
Widget.py(333):                 self.categories[category_name] = CatItem
Widget.py(334):             NodeItem = QtGui.QTreeWidgetItem(self.categories[category_name])
Widget.py(335):             NodeItem.setText(0, node_file_name)
Widget.py(327):         for node_file_name in get_nodes_file_names():
Widget.py(328):             node_class = getattr(Nodes, node_file_name)
Widget.py(329):             category_name = node_class.get_category()
 --- modulename: Reroute, funcname: get_category
Reroute.py(35):         return 'Common'
Widget.py(330):             if category_name not in self.categories:
Widget.py(334):             NodeItem = QtGui.QTreeWidgetItem(self.categories[category_name])
Widget.py(335):             NodeItem.setText(0, node_file_name)
Widget.py(327):         for node_file_name in get_nodes_file_names():
Widget.py(328):             node_class = getattr(Nodes, node_file_name)
Widget.py(329):             category_name = node_class.get_category()
 --- modulename: Sin, funcname: get_category
Sin.py(19):         return 'Math'
Widget.py(330):             if category_name not in self.categories:
Widget.py(334):             NodeItem = QtGui.QTreeWidgetItem(self.categories[category_name])
Widget.py(335):             NodeItem.setText(0, node_file_name)
Widget.py(327):         for node_file_name in get_nodes_file_names():
Widget.py(328):             node_class = getattr(Nodes, node_file_name)
Widget.py(329):             category_name = node_class.get_category()
 --- modulename: StringAppend, funcname: get_category
StringAppend.py(17):         return 'StringUtils'
Widget.py(330):             if category_name not in self.categories:
Widget.py(331):                 CatItem = QtGui.QTreeWidgetItem(self)
Widget.py(332):                 CatItem.setText(0, category_name)
Widget.py(333):                 self.categories[category_name] = CatItem
Widget.py(334):             NodeItem = QtGui.QTreeWidgetItem(self.categories[category_name])
Widget.py(335):             NodeItem.setText(0, node_file_name)
Widget.py(327):         for node_file_name in get_nodes_file_names():
Widget.py(328):             node_class = getattr(Nodes, node_file_name)
Widget.py(329):             category_name = node_class.get_category()
 --- modulename: StringCapitalize, funcname: get_category
StringCapitalize.py(18):         return 'StringUtils'
Widget.py(330):             if category_name not in self.categories:
Widget.py(334):             NodeItem = QtGui.QTreeWidgetItem(self.categories[category_name])
Widget.py(335):             NodeItem.setText(0, node_file_name)
Widget.py(327):         for node_file_name in get_nodes_file_names():
Widget.py(328):             node_class = getattr(Nodes, node_file_name)
Widget.py(329):             category_name = node_class.get_category()
 --- modulename: StringContains, funcname: get_category
StringContains.py(17):         return 'StringUtils'
Widget.py(330):             if category_name not in self.categories:
Widget.py(334):             NodeItem = QtGui.QTreeWidgetItem(self.categories[category_name])
Widget.py(335):             NodeItem.setText(0, node_file_name)
Widget.py(327):         for node_file_name in get_nodes_file_names():
Widget.py(328):             node_class = getattr(Nodes, node_file_name)
Widget.py(329):             category_name = node_class.get_category()
 --- modulename: StringLower, funcname: get_category
StringLower.py(18):         return 'StringUtils'
Widget.py(330):             if category_name not in self.categories:
Widget.py(334):             NodeItem = QtGui.QTreeWidgetItem(self.categories[category_name])
Widget.py(335):             NodeItem.setText(0, node_file_name)
Widget.py(327):         for node_file_name in get_nodes_file_names():
Widget.py(328):             node_class = getattr(Nodes, node_file_name)
Widget.py(329):             category_name = node_class.get_category()
 --- modulename: StringNode, funcname: get_category
StringNode.py(37):         return 'GenericTypes'
Widget.py(330):             if category_name not in self.categories:
Widget.py(334):             NodeItem = QtGui.QTreeWidgetItem(self.categories[category_name])
Widget.py(335):             NodeItem.setText(0, node_file_name)
Widget.py(327):         for node_file_name in get_nodes_file_names():
Widget.py(328):             node_class = getattr(Nodes, node_file_name)
Widget.py(329):             category_name = node_class.get_category()
 --- modulename: StringReplace, funcname: get_category
StringReplace.py(18):         return 'StringUtils'
Widget.py(330):             if category_name not in self.categories:
Widget.py(334):             NodeItem = QtGui.QTreeWidgetItem(self.categories[category_name])
Widget.py(335):             NodeItem.setText(0, node_file_name)
Widget.py(327):         for node_file_name in get_nodes_file_names():
Widget.py(328):             node_class = getattr(Nodes, node_file_name)
Widget.py(329):             category_name = node_class.get_category()
 --- modulename: StringToFloat, funcname: get_category
StringToFloat.py(18):         return 'Convert'
Widget.py(330):             if category_name not in self.categories:
Widget.py(334):             NodeItem = QtGui.QTreeWidgetItem(self.categories[category_name])
Widget.py(335):             NodeItem.setText(0, node_file_name)
Widget.py(327):         for node_file_name in get_nodes_file_names():
Widget.py(328):             node_class = getattr(Nodes, node_file_name)
Widget.py(329):             category_name = node_class.get_category()
 --- modulename: StringToInt, funcname: get_category
StringToInt.py(18):         return 'Convert'
Widget.py(330):             if category_name not in self.categories:
Widget.py(334):             NodeItem = QtGui.QTreeWidgetItem(self.categories[category_name])
Widget.py(335):             NodeItem.setText(0, node_file_name)
Widget.py(327):         for node_file_name in get_nodes_file_names():
Widget.py(328):             node_class = getattr(Nodes, node_file_name)
Widget.py(329):             category_name = node_class.get_category()
 --- modulename: StringUpper, funcname: get_category
StringUpper.py(18):         return 'String'
Widget.py(330):             if category_name not in self.categories:
Widget.py(331):                 CatItem = QtGui.QTreeWidgetItem(self)
Widget.py(332):                 CatItem.setText(0, category_name)
Widget.py(333):                 self.categories[category_name] = CatItem
Widget.py(334):             NodeItem = QtGui.QTreeWidgetItem(self.categories[category_name])
Widget.py(335):             NodeItem.setText(0, node_file_name)
Widget.py(327):         for node_file_name in get_nodes_file_names():
Widget.py(328):             node_class = getattr(Nodes, node_file_name)
Widget.py(329):             category_name = node_class.get_category()
 --- modulename: SubstractNode, funcname: get_category
SubstractNode.py(17):         return 'Math'
Widget.py(330):             if category_name not in self.categories:
Widget.py(334):             NodeItem = QtGui.QTreeWidgetItem(self.categories[category_name])
Widget.py(335):             NodeItem.setText(0, node_file_name)
Widget.py(327):         for node_file_name in get_nodes_file_names():
Widget.py(328):             node_class = getattr(Nodes, node_file_name)
Widget.py(329):             category_name = node_class.get_category()
 --- modulename: SumNode, funcname: get_category
SumNode.py(16):         return 'Math'
Widget.py(330):             if category_name not in self.categories:
Widget.py(334):             NodeItem = QtGui.QTreeWidgetItem(self.categories[category_name])
Widget.py(335):             NodeItem.setText(0, node_file_name)
Widget.py(327):         for node_file_name in get_nodes_file_names():
Widget.py(328):             node_class = getattr(Nodes, node_file_name)
Widget.py(329):             category_name = node_class.get_category()
 --- modulename: ToString, funcname: get_category
ToString.py(18):         return 'Convert'
Widget.py(330):             if category_name not in self.categories:
Widget.py(334):             NodeItem = QtGui.QTreeWidgetItem(self.categories[category_name])
Widget.py(335):             NodeItem.setText(0, node_file_name)
Widget.py(327):         for node_file_name in get_nodes_file_names():
Widget.py(393):         self.setFocusPolicy(QtCore.Qt.StrongFocus)
Widget.py(394):         self.setStyleSheet("border:1 inset white")
Widget.py(884):         self.setScene(SceneClass(self))
 --- modulename: Widget, funcname: __init__
Widget.py(186):         super(SceneClass, self).__init__(parent)
Widget.py(187):         self.Type = 'SCENE'
Widget.py(188):         self.setItemIndexMethod(self.NoIndex)
Widget.py(189):         self.pressed_port = None
Widget.py(190):         self.selectionChanged.connect(self.OnSelectionChanged)
Widget.py(885):         self.add_actions()
 --- modulename: Widget, funcname: add_actions
Widget.py(1047):         save_action = QtGui.QAction(self)
Widget.py(1048):         save_action.setText('Save')
Widget.py(1049):         if path.isfile(_mod_folder + 'resources/save_icon.png'):
 --- modulename: genericpath, funcname: isfile
genericpath.py(36):     try:
genericpath.py(37):         st = os.stat(path)
genericpath.py(40):     return stat.S_ISREG(st.st_mode)
 --- modulename: stat, funcname: S_ISREG
stat.py(50):     return S_IFMT(mode) == S_IFREG
 --- modulename: stat, funcname: S_IFMT
stat.py(25):     return mode & 0170000
Widget.py(1050):             save_action.setIcon(QtGui.QIcon(_mod_folder + 'resources/save_icon.png'))
Widget.py(1053):         save_action.triggered.connect(self.save)
Widget.py(1055):         load_action = QtGui.QAction(self)
Widget.py(1056):         load_action.setText('Load')
Widget.py(1057):         if path.isfile(_mod_folder + 'resources/folder_open_icon.png'):
 --- modulename: genericpath, funcname: isfile
genericpath.py(36):     try:
genericpath.py(37):         st = os.stat(path)
genericpath.py(40):     return stat.S_ISREG(st.st_mode)
 --- modulename: stat, funcname: S_ISREG
stat.py(50):     return S_IFMT(mode) == S_IFREG
 --- modulename: stat, funcname: S_IFMT
stat.py(25):     return mode & 0170000
Widget.py(1058):             load_action.setIcon(QtGui.QIcon(_mod_folder + 'resources/folder_open_icon.png'))
Widget.py(1061):         load_action.triggered.connect(self.load)
Widget.py(1063):         save_as_action = QtGui.QAction(self)
Widget.py(1064):         save_as_action.setText('Save as')
Widget.py(1065):         if path.isfile(_mod_folder + 'resources/save_as_icon.png'):
 --- modulename: genericpath, funcname: isfile
genericpath.py(36):     try:
genericpath.py(37):         st = os.stat(path)
genericpath.py(40):     return stat.S_ISREG(st.st_mode)
 --- modulename: stat, funcname: S_ISREG
stat.py(50):     return S_IFMT(mode) == S_IFREG
 --- modulename: stat, funcname: S_IFMT
stat.py(25):     return mode & 0170000
Widget.py(1066):             save_as_action.setIcon(QtGui.QIcon(_mod_folder + 'resources/save_as_icon.png'))
Widget.py(1069):         save_as_action.triggered.connect(lambda: self.save(True))
Widget.py(1071):         options_action = QtGui.QAction(self)
Widget.py(1072):         options_action.setText('Options')
Widget.py(1073):         if path.isfile(_mod_folder + 'resources/colors_icon.png'):
 --- modulename: genericpath, funcname: isfile
genericpath.py(36):     try:
genericpath.py(37):         st = os.stat(path)
genericpath.py(40):     return stat.S_ISREG(st.st_mode)
 --- modulename: stat, funcname: S_ISREG
stat.py(50):     return S_IFMT(mode) == S_IFREG
 --- modulename: stat, funcname: S_IFMT
stat.py(25):     return mode & 0170000
Widget.py(1074):             options_action.setIcon(QtGui.QIcon(_mod_folder + 'resources/colors_icon.png'))
Widget.py(1077):         options_action.triggered.connect(self.options)
Widget.py(1079):         new_file_action = QtGui.QAction(self)
Widget.py(1080):         new_file_action.setText('New')
Widget.py(1081):         if path.isfile(_mod_folder + 'resources/new_file_icon.png'):
 --- modulename: genericpath, funcname: isfile
genericpath.py(36):     try:
genericpath.py(37):         st = os.stat(path)
genericpath.py(40):     return stat.S_ISREG(st.st_mode)
 --- modulename: stat, funcname: S_ISREG
stat.py(50):     return S_IFMT(mode) == S_IFREG
 --- modulename: stat, funcname: S_IFMT
stat.py(25):     return mode & 0170000
Widget.py(1082):             new_file_action.setIcon(QtGui.QIcon(_mod_folder + 'resources/new_file_icon.png'))
Widget.py(1085):         new_file_action.triggered.connect(self.new_file)
Widget.py(1087):         node_box_action = QtGui.QAction(self)
Widget.py(1088):         node_box_action.setText('Node box')
Widget.py(1089):         if path.isfile(_mod_folder + 'resources/node_box_icon.png'):
 --- modulename: genericpath, funcname: isfile
genericpath.py(36):     try:
genericpath.py(37):         st = os.stat(path)
genericpath.py(40):     return stat.S_ISREG(st.st_mode)
 --- modulename: stat, funcname: S_ISREG
stat.py(50):     return S_IFMT(mode) == S_IFREG
 --- modulename: stat, funcname: S_IFMT
stat.py(25):     return mode & 0170000
Widget.py(1090):             node_box_action.setIcon(QtGui.QIcon(_mod_folder + 'resources/node_box_icon.png'))
Widget.py(1093):         node_box_action.triggered.connect(self.node_box.set_visible)
Widget.py(1095):         separator = QtGui.QAction(self)
Widget.py(1096):         separator.setSeparator(True)
Widget.py(1098):         self.menu.addAction(new_file_action)
Widget.py(1099):         self.menu.addAction(load_action)
Widget.py(1100):         self.menu.addAction(save_action)
Widget.py(1101):         self.menu.addAction(save_as_action)
Widget.py(1102):         self.menu.addAction(separator)
Widget.py(1103):         self.menu.addAction(options_action)
Widget.py(1104):         self.menu.addAction(node_box_action)
Widget.py(886):         self.options_widget = OptionsClass()
 --- modulename: Widget, funcname: __init__
Widget.py(716):         super(OptionsClass, self).__init__()
Widget.py(717):         self.setupUi(self)
 --- modulename: OptionsWindow_ui, funcname: setupUi
OptionsWindow_ui.py(5):         OptionsUI.setObjectName("OptionsUI")
OptionsWindow_ui.py(6):         OptionsUI.resize(357, 463)
OptionsWindow_ui.py(7):         self.centralwidget = QtGui.QWidget(OptionsUI)
OptionsWindow_ui.py(8):         self.centralwidget.setObjectName("centralwidget")
OptionsWindow_ui.py(9):         self.gridLayout = QtGui.QGridLayout(self.centralwidget)
OptionsWindow_ui.py(10):         self.gridLayout.setContentsMargins(1, 1, 1, 1)
OptionsWindow_ui.py(11):         self.gridLayout.setObjectName("gridLayout")
OptionsWindow_ui.py(12):         self.tabWidget = QtGui.QTabWidget(self.centralwidget)
OptionsWindow_ui.py(13):         self.tabWidget.setObjectName("tabWidget")
OptionsWindow_ui.py(14):         self.NodesTab = QtGui.QWidget()
OptionsWindow_ui.py(15):         self.NodesTab.setObjectName("NodesTab")
OptionsWindow_ui.py(16):         self.gridLayout_2 = QtGui.QGridLayout(self.NodesTab)
OptionsWindow_ui.py(17):         self.gridLayout_2.setContentsMargins(2, 2, 2, 2)
OptionsWindow_ui.py(18):         self.gridLayout_2.setObjectName("gridLayout_2")
OptionsWindow_ui.py(19):         self.formLayout = QtGui.QFormLayout()
OptionsWindow_ui.py(20):         self.formLayout.setFieldGrowthPolicy(QtGui.QFormLayout.AllNonFixedFieldsGrow)
OptionsWindow_ui.py(21):         self.formLayout.setContentsMargins(5, 10, 5, 5)
OptionsWindow_ui.py(22):         self.formLayout.setVerticalSpacing(2)
OptionsWindow_ui.py(23):         self.formLayout.setObjectName("formLayout")
OptionsWindow_ui.py(24):         self.baseColorLabel = QtGui.QLabel(self.NodesTab)
OptionsWindow_ui.py(25):         self.baseColorLabel.setObjectName("baseColorLabel")
OptionsWindow_ui.py(26):         self.formLayout.setWidget(0, QtGui.QFormLayout.LabelRole, self.baseColorLabel)
OptionsWindow_ui.py(27):         self.baseColorWidget = QtGui.QWidget(self.NodesTab)
OptionsWindow_ui.py(28):         self.baseColorWidget.setObjectName("baseColorWidget")
OptionsWindow_ui.py(29):         self.gridLayout_3 = QtGui.QGridLayout(self.baseColorWidget)
OptionsWindow_ui.py(30):         self.gridLayout_3.setContentsMargins(1, 1, 1, 1)
OptionsWindow_ui.py(31):         self.gridLayout_3.setContentsMargins(0, 0, 0, 0)
OptionsWindow_ui.py(32):         self.gridLayout_3.setObjectName("gridLayout_3")
OptionsWindow_ui.py(33):         self.pb_node_base_color = QtGui.QPushButton(self.baseColorWidget)
OptionsWindow_ui.py(34):         self.pb_node_base_color.setObjectName("pb_node_base_color")
OptionsWindow_ui.py(35):         self.gridLayout_3.addWidget(self.pb_node_base_color, 0, 0, 1, 1)
OptionsWindow_ui.py(36):         self.formLayout.setWidget(0, QtGui.QFormLayout.FieldRole, self.baseColorWidget)
OptionsWindow_ui.py(37):         self.nodeSelectedLineColorLabel = QtGui.QLabel(self.NodesTab)
OptionsWindow_ui.py(38):         self.nodeSelectedLineColorLabel.setObjectName("nodeSelectedLineColorLabel")
OptionsWindow_ui.py(39):         self.formLayout.setWidget(1, QtGui.QFormLayout.LabelRole, self.nodeSelectedLineColorLabel)
OptionsWindow_ui.py(40):         self.pb_node_selected_pen_color = QtGui.QPushButton(self.NodesTab)
OptionsWindow_ui.py(41):         self.pb_node_selected_pen_color.setObjectName("pb_node_selected_pen_color")
OptionsWindow_ui.py(42):         self.formLayout.setWidget(1, QtGui.QFormLayout.FieldRole, self.pb_node_selected_pen_color)
OptionsWindow_ui.py(43):         self.nodeNameBgColorLabel = QtGui.QLabel(self.NodesTab)
OptionsWindow_ui.py(44):         self.nodeNameBgColorLabel.setObjectName("nodeNameBGColorLabel")
OptionsWindow_ui.py(45):         self.formLayout.setWidget(2, QtGui.QFormLayout.LabelRole, self.nodeNameBgColorLabel)
OptionsWindow_ui.py(46):         self.pb_node_label_font_color = QtGui.QPushButton(self.NodesTab)
OptionsWindow_ui.py(47):         self.pb_node_label_font_color.setObjectName("pb_node_selected_line_type")
OptionsWindow_ui.py(48):         self.formLayout.setWidget(2, QtGui.QFormLayout.FieldRole, self.pb_node_label_font_color)
OptionsWindow_ui.py(49):         self.nodeLabelBackgroundColorLabel = QtGui.QLabel(self.NodesTab)
OptionsWindow_ui.py(50):         self.nodeLabelBackgroundColorLabel.setObjectName("nodeLabelBackgroundColorLabel")
OptionsWindow_ui.py(51):         self.formLayout.setWidget(3, QtGui.QFormLayout.LabelRole, self.nodeLabelBackgroundColorLabel)
OptionsWindow_ui.py(52):         self.pb_node_label_bg_color = QtGui.QPushButton(self.NodesTab)
OptionsWindow_ui.py(53):         self.pb_node_label_bg_color.setObjectName("pb_node_label_bg_color")
OptionsWindow_ui.py(54):         self.formLayout.setWidget(3, QtGui.QFormLayout.FieldRole, self.pb_node_label_bg_color)
OptionsWindow_ui.py(55):         self.nodeLabelFontLabel = QtGui.QLabel(self.NodesTab)
OptionsWindow_ui.py(56):         self.nodeLabelFontLabel.setObjectName("nodeLabelFontLabel")
OptionsWindow_ui.py(57):         self.formLayout.setWidget(4, QtGui.QFormLayout.LabelRole, self.nodeLabelFontLabel)
OptionsWindow_ui.py(58):         self.fb_node_label_font = QtGui.QFontComboBox(self.NodesTab)
OptionsWindow_ui.py(59):         font = QtGui.QFont()
OptionsWindow_ui.py(60):         font.setFamily("Arial")
OptionsWindow_ui.py(61):         font.setWeight(75)
OptionsWindow_ui.py(62):         font.setBold(True)
OptionsWindow_ui.py(63):         self.fb_node_label_font.setCurrentFont(font)
OptionsWindow_ui.py(64):         self.fb_node_label_font.setObjectName("fb_node_label_font")
OptionsWindow_ui.py(65):         self.formLayout.setWidget(4, QtGui.QFormLayout.FieldRole, self.fb_node_label_font)
OptionsWindow_ui.py(66):         self.nodeLabelFontSizeLabel = QtGui.QLabel(self.NodesTab)
OptionsWindow_ui.py(67):         self.nodeLabelFontSizeLabel.setObjectName("nodeLabelFontSizeLabel")
OptionsWindow_ui.py(68):         self.formLayout.setWidget(5, QtGui.QFormLayout.LabelRole, self.nodeLabelFontSizeLabel)
OptionsWindow_ui.py(69):         self.sb_node_label_font_size = QtGui.QSpinBox(self.NodesTab)
OptionsWindow_ui.py(70):         self.sb_node_label_font_size.setMinimum(3)
OptionsWindow_ui.py(71):         self.sb_node_label_font_size.setMaximum(40)
OptionsWindow_ui.py(72):         self.sb_node_label_font_size.setSingleStep(1)
OptionsWindow_ui.py(73):         self.sb_node_label_font_size.setProperty("value", 14)
OptionsWindow_ui.py(74):         self.sb_node_label_font_size.setObjectName("sb_node_label_font_size")
OptionsWindow_ui.py(75):         self.formLayout.setWidget(5, QtGui.QFormLayout.FieldRole, self.sb_node_label_font_size)
OptionsWindow_ui.py(76):         self.portColorALabel = QtGui.QLabel(self.NodesTab)
OptionsWindow_ui.py(77):         self.portColorALabel.setObjectName("portColorALabel")
OptionsWindow_ui.py(78):         self.formLayout.setWidget(6, QtGui.QFormLayout.LabelRole, self.portColorALabel)
OptionsWindow_ui.py(79):         self.portColorAWidget = QtGui.QWidget(self.NodesTab)
OptionsWindow_ui.py(80):         self.portColorAWidget.setObjectName("portColorAWidget")
OptionsWindow_ui.py(81):         self.gridLayout_4 = QtGui.QGridLayout(self.portColorAWidget)
OptionsWindow_ui.py(82):         self.gridLayout_4.setContentsMargins(1, 1, 1, 1)
OptionsWindow_ui.py(83):         self.gridLayout_4.setContentsMargins(0, 0, 0, 0)
OptionsWindow_ui.py(84):         self.gridLayout_4.setObjectName("gridLayout_4")
OptionsWindow_ui.py(85):         self.pb_lyt_a_color = QtGui.QPushButton(self.portColorAWidget)
OptionsWindow_ui.py(86):         self.pb_lyt_a_color.setObjectName("pb_lyt_a_color")
OptionsWindow_ui.py(87):         self.gridLayout_4.addWidget(self.pb_lyt_a_color, 0, 0, 1, 1)
OptionsWindow_ui.py(88):         self.formLayout.setWidget(6, QtGui.QFormLayout.FieldRole, self.portColorAWidget)
OptionsWindow_ui.py(89):         self.portColorBLabel = QtGui.QLabel(self.NodesTab)
OptionsWindow_ui.py(90):         self.portColorBLabel.setObjectName("portColorBLabel")
OptionsWindow_ui.py(91):         self.formLayout.setWidget(7, QtGui.QFormLayout.LabelRole, self.portColorBLabel)
OptionsWindow_ui.py(92):         self.portColorBWidget = QtGui.QWidget(self.NodesTab)
OptionsWindow_ui.py(93):         self.portColorBWidget.setObjectName("portColorBWidget")
OptionsWindow_ui.py(94):         self.gridLayout_5 = QtGui.QGridLayout(self.portColorBWidget)
OptionsWindow_ui.py(95):         self.gridLayout_5.setContentsMargins(1, 1, 1, 1)
OptionsWindow_ui.py(96):         self.gridLayout_5.setContentsMargins(0, 0, 0, 0)
OptionsWindow_ui.py(97):         self.gridLayout_5.setObjectName("gridLayout_5")
OptionsWindow_ui.py(98):         self.pb_lyt_b_color = QtGui.QPushButton(self.portColorBWidget)
OptionsWindow_ui.py(99):         self.pb_lyt_b_color.setObjectName("pb_lyt_b_color")
OptionsWindow_ui.py(100):         self.gridLayout_5.addWidget(self.pb_lyt_b_color, 0, 0, 1, 1)
OptionsWindow_ui.py(101):         self.formLayout.setWidget(7, QtGui.QFormLayout.FieldRole, self.portColorBWidget)
OptionsWindow_ui.py(102):         self.portColorLabel = QtGui.QLabel(self.NodesTab)
OptionsWindow_ui.py(103):         self.portColorLabel.setObjectName("portColorLabel")
OptionsWindow_ui.py(104):         self.formLayout.setWidget(8, QtGui.QFormLayout.LabelRole, self.portColorLabel)
OptionsWindow_ui.py(105):         self.portColorWidget = QtGui.QWidget(self.NodesTab)
OptionsWindow_ui.py(106):         self.portColorWidget.setObjectName("portColorWidget")
OptionsWindow_ui.py(107):         self.gridLayout_6 = QtGui.QGridLayout(self.portColorWidget)
OptionsWindow_ui.py(108):         self.gridLayout_6.setContentsMargins(1, 1, 1, 1)
OptionsWindow_ui.py(109):         self.gridLayout_6.setContentsMargins(0, 0, 0, 0)
OptionsWindow_ui.py(110):         self.gridLayout_6.setObjectName("gridLayout_6")
OptionsWindow_ui.py(111):         self.pb_port_color = QtGui.QPushButton(self.portColorWidget)
OptionsWindow_ui.py(112):         self.pb_port_color.setObjectName("pb_port_color")
OptionsWindow_ui.py(113):         self.gridLayout_6.addWidget(self.pb_port_color, 0, 0, 1, 1)
OptionsWindow_ui.py(114):         self.formLayout.setWidget(8, QtGui.QFormLayout.FieldRole, self.portColorWidget)
OptionsWindow_ui.py(115):         self.portDirtyColorLabel = QtGui.QLabel(self.NodesTab)
OptionsWindow_ui.py(116):         self.portDirtyColorLabel.setObjectName("portDirtyColorLabel")
OptionsWindow_ui.py(117):         self.formLayout.setWidget(9, QtGui.QFormLayout.LabelRole, self.portDirtyColorLabel)
OptionsWindow_ui.py(118):         self.portDirtyColorWidget = QtGui.QWidget(self.NodesTab)
OptionsWindow_ui.py(119):         self.portDirtyColorWidget.setObjectName("portDirtyColorWidget")
OptionsWindow_ui.py(120):         self.gridLayout_8 = QtGui.QGridLayout(self.portDirtyColorWidget)
OptionsWindow_ui.py(121):         self.gridLayout_8.setContentsMargins(1, 1, 1, 1)
OptionsWindow_ui.py(122):         self.gridLayout_8.setContentsMargins(0, 0, 0, 0)
OptionsWindow_ui.py(123):         self.gridLayout_8.setObjectName("gridLayout_8")
OptionsWindow_ui.py(124):         self.pb_port_dirty_pen_color = QtGui.QPushButton(self.portDirtyColorWidget)
OptionsWindow_ui.py(125):         self.pb_port_dirty_pen_color.setObjectName("pb_port_dirty_pen_color")
OptionsWindow_ui.py(126):         self.gridLayout_8.addWidget(self.pb_port_dirty_pen_color, 0, 0, 1, 1)
OptionsWindow_ui.py(127):         self.formLayout.setWidget(9, QtGui.QFormLayout.FieldRole, self.portDirtyColorWidget)
OptionsWindow_ui.py(128):         self.portDirtyLineTypeLabel = QtGui.QLabel(self.NodesTab)
OptionsWindow_ui.py(129):         self.portDirtyLineTypeLabel.setObjectName("portDirtyLineTypeLabel")
OptionsWindow_ui.py(130):         self.formLayout.setWidget(10, QtGui.QFormLayout.LabelRole, self.portDirtyLineTypeLabel)
OptionsWindow_ui.py(131):         self.cb_port_dirty_pen_type = QtGui.QComboBox(self.NodesTab)
OptionsWindow_ui.py(132):         self.cb_port_dirty_pen_type.setObjectName("cb_port_dirty_pen_type")
OptionsWindow_ui.py(133):         self.formLayout.setWidget(10, QtGui.QFormLayout.FieldRole, self.cb_port_dirty_pen_type)
OptionsWindow_ui.py(134):         self.nodeSelectedLineColorWidget = QtGui.QWidget(self.NodesTab)
OptionsWindow_ui.py(135):         self.nodeSelectedLineColorWidget.setObjectName("nodeSelectedLineColorWidget")
OptionsWindow_ui.py(136):         self.formLayout.setWidget(11, QtGui.QFormLayout.FieldRole, self.nodeSelectedLineColorWidget)
OptionsWindow_ui.py(137):         self.portLabelColorLabel = QtGui.QLabel(self.NodesTab)
OptionsWindow_ui.py(138):         self.portLabelColorLabel.setObjectName("portLabelColorLabel")
OptionsWindow_ui.py(139):         self.formLayout.setWidget(13, QtGui.QFormLayout.LabelRole, self.portLabelColorLabel)
OptionsWindow_ui.py(140):         self.portLabelColorWidget = QtGui.QWidget(self.NodesTab)
OptionsWindow_ui.py(141):         self.portLabelColorWidget.setObjectName("portLabelColorWidget")
OptionsWindow_ui.py(142):         self.gridLayout_10 = QtGui.QGridLayout(self.portLabelColorWidget)
OptionsWindow_ui.py(143):         self.gridLayout_10.setContentsMargins(1, 1, 1, 0)
OptionsWindow_ui.py(144):         self.gridLayout_10.setObjectName("gridLayout_10")
OptionsWindow_ui.py(145):         self.pb_port_label_color = QtGui.QPushButton(self.portLabelColorWidget)
OptionsWindow_ui.py(146):         self.pb_port_label_color.setObjectName("pb_port_label_color")
OptionsWindow_ui.py(147):         self.gridLayout_10.addWidget(self.pb_port_label_color, 0, 0, 1, 1)
OptionsWindow_ui.py(148):         self.formLayout.setWidget(13, QtGui.QFormLayout.FieldRole, self.portLabelColorWidget)
OptionsWindow_ui.py(149):         self.portLabelFontLabel = QtGui.QLabel(self.NodesTab)
OptionsWindow_ui.py(150):         self.portLabelFontLabel.setObjectName("portLabelFontLabel")
OptionsWindow_ui.py(151):         self.formLayout.setWidget(14, QtGui.QFormLayout.LabelRole, self.portLabelFontLabel)
OptionsWindow_ui.py(152):         self.portLabelFontWidget = QtGui.QWidget(self.NodesTab)
OptionsWindow_ui.py(153):         self.portLabelFontWidget.setObjectName("portLabelFontWidget")
OptionsWindow_ui.py(154):         self.gridLayout_9 = QtGui.QGridLayout(self.portLabelFontWidget)
OptionsWindow_ui.py(155):         self.gridLayout_9.setContentsMargins(1, 1, 1, 0)
OptionsWindow_ui.py(156):         self.gridLayout_9.setObjectName("gridLayout_9")
OptionsWindow_ui.py(157):         self.fb_port_label_font = QtGui.QFontComboBox(self.portLabelFontWidget)
OptionsWindow_ui.py(158):         font = QtGui.QFont()
OptionsWindow_ui.py(159):         font.setFamily("Arial")
OptionsWindow_ui.py(160):         self.fb_port_label_font.setFont(font)
OptionsWindow_ui.py(161):         self.fb_port_label_font.setObjectName("fb_port_label_font")
OptionsWindow_ui.py(162):         self.gridLayout_9.addWidget(self.fb_port_label_font, 0, 0, 1, 1)
OptionsWindow_ui.py(163):         self.formLayout.setWidget(14, QtGui.QFormLayout.FieldRole, self.portLabelFontWidget)
OptionsWindow_ui.py(164):         self.portFontSizeLabel = QtGui.QLabel(self.NodesTab)
OptionsWindow_ui.py(165):         self.portFontSizeLabel.setObjectName("portFontSizeLabel")
OptionsWindow_ui.py(166):         self.formLayout.setWidget(15, QtGui.QFormLayout.LabelRole, self.portFontSizeLabel)
OptionsWindow_ui.py(167):         self.sb_port_font_size = QtGui.QSpinBox(self.NodesTab)
OptionsWindow_ui.py(168):         self.sb_port_font_size.setMinimum(3)
OptionsWindow_ui.py(169):         self.sb_port_font_size.setMaximum(40)
OptionsWindow_ui.py(170):         self.sb_port_font_size.setProperty("value", 10)
OptionsWindow_ui.py(171):         self.sb_port_font_size.setObjectName("sb_port_font_size")
OptionsWindow_ui.py(172):         self.formLayout.setWidget(15, QtGui.QFormLayout.FieldRole, self.sb_port_font_size)
OptionsWindow_ui.py(173):         self.nodeLabelBackgroundColorWidget = QtGui.QWidget(self.NodesTab)
OptionsWindow_ui.py(174):         self.nodeLabelBackgroundColorWidget.setObjectName("nodeLabelBackgroundColorWidget")
OptionsWindow_ui.py(175):         self.gridLayout_11 = QtGui.QGridLayout(self.nodeLabelBackgroundColorWidget)
OptionsWindow_ui.py(176):         self.gridLayout_11.setContentsMargins(1, 1, 1, 1)
OptionsWindow_ui.py(177):         self.gridLayout_11.setContentsMargins(0, 0, 0, 0)
OptionsWindow_ui.py(178):         self.gridLayout_11.setObjectName("gridLayout_11")
OptionsWindow_ui.py(179):         self.formLayout.setWidget(16, QtGui.QFormLayout.FieldRole, self.nodeLabelBackgroundColorWidget)
OptionsWindow_ui.py(180):         self.nodeLabelFontWidget = QtGui.QWidget(self.NodesTab)
OptionsWindow_ui.py(181):         self.nodeLabelFontWidget.setObjectName("nodeLabelFontWidget")
OptionsWindow_ui.py(182):         self.formLayout.setWidget(17, QtGui.QFormLayout.FieldRole, self.nodeLabelFontWidget)
OptionsWindow_ui.py(183):         self.gridLayout_2.addLayout(self.formLayout, 0, 0, 1, 1)
OptionsWindow_ui.py(184):         self.tabWidget.addTab(self.NodesTab, "")
OptionsWindow_ui.py(185):         self.SceneTab = QtGui.QWidget()
OptionsWindow_ui.py(186):         self.SceneTab.setObjectName("SceneTab")
OptionsWindow_ui.py(187):         self.gridLayout_12 = QtGui.QGridLayout(self.SceneTab)
OptionsWindow_ui.py(188):         self.gridLayout_12.setContentsMargins(2, 2, 2, 2)
OptionsWindow_ui.py(189):         self.gridLayout_12.setObjectName("gridLayout_12")
OptionsWindow_ui.py(190):         self.formLayout_2 = QtGui.QFormLayout()
OptionsWindow_ui.py(191):         self.formLayout_2.setFieldGrowthPolicy(QtGui.QFormLayout.AllNonFixedFieldsGrow)
OptionsWindow_ui.py(192):         self.formLayout_2.setContentsMargins(5, 10, 5, 5)
OptionsWindow_ui.py(193):         self.formLayout_2.setVerticalSpacing(2)
OptionsWindow_ui.py(194):         self.formLayout_2.setObjectName("formLayout_2")
OptionsWindow_ui.py(195):         self.bacgroundColorLabel = QtGui.QLabel(self.SceneTab)
OptionsWindow_ui.py(196):         self.bacgroundColorLabel.setObjectName("bacgroundColorLabel")
OptionsWindow_ui.py(197):         self.formLayout_2.setWidget(0, QtGui.QFormLayout.LabelRole, self.bacgroundColorLabel)
OptionsWindow_ui.py(198):         self.bacgroundColorWidget = QtGui.QWidget(self.SceneTab)
OptionsWindow_ui.py(199):         self.bacgroundColorWidget.setObjectName("bacgroundColorWidget")
OptionsWindow_ui.py(200):         self.gridLayout_13 = QtGui.QGridLayout(self.bacgroundColorWidget)
OptionsWindow_ui.py(201):         self.gridLayout_13.setContentsMargins(1, 1, 1, 1)
OptionsWindow_ui.py(202):         self.gridLayout_13.setContentsMargins(0, 0, 0, 0)
OptionsWindow_ui.py(203):         self.gridLayout_13.setObjectName("gridLayout_13")
OptionsWindow_ui.py(204):         self.pb_scene_bg_color = QtGui.QPushButton(self.bacgroundColorWidget)
OptionsWindow_ui.py(205):         self.pb_scene_bg_color.setObjectName("pb_scene_bg_color")
OptionsWindow_ui.py(206):         self.gridLayout_13.addWidget(self.pb_scene_bg_color, 0, 0, 1, 1)
OptionsWindow_ui.py(207):         self.formLayout_2.setWidget(0, QtGui.QFormLayout.FieldRole, self.bacgroundColorWidget)
OptionsWindow_ui.py(208):         self.gridColorLabel = QtGui.QLabel(self.SceneTab)
OptionsWindow_ui.py(209):         self.gridColorLabel.setObjectName("gridColorLabel")
OptionsWindow_ui.py(210):         self.formLayout_2.setWidget(1, QtGui.QFormLayout.LabelRole, self.gridColorLabel)
OptionsWindow_ui.py(211):         self.gridColorWidget = QtGui.QWidget(self.SceneTab)
OptionsWindow_ui.py(212):         self.gridColorWidget.setObjectName("gridColorWidget")
OptionsWindow_ui.py(213):         self.gridLayout_14 = QtGui.QGridLayout(self.gridColorWidget)
OptionsWindow_ui.py(214):         self.gridLayout_14.setContentsMargins(1, 1, 1, 1)
OptionsWindow_ui.py(215):         self.gridLayout_14.setContentsMargins(0, 0, 0, 0)
OptionsWindow_ui.py(216):         self.gridLayout_14.setObjectName("gridLayout_14")
OptionsWindow_ui.py(217):         self.pb_grid_color = QtGui.QPushButton(self.gridColorWidget)
OptionsWindow_ui.py(218):         self.pb_grid_color.setObjectName("pb_grid_color")
OptionsWindow_ui.py(219):         self.gridLayout_14.addWidget(self.pb_grid_color, 0, 0, 1, 1)
OptionsWindow_ui.py(220):         self.formLayout_2.setWidget(1, QtGui.QFormLayout.FieldRole, self.gridColorWidget)
OptionsWindow_ui.py(221):         self.gridLinesTypeLabel = QtGui.QLabel(self.SceneTab)
OptionsWindow_ui.py(222):         self.gridLinesTypeLabel.setObjectName("gridLinesTypeLabel")
OptionsWindow_ui.py(223):         self.formLayout_2.setWidget(2, QtGui.QFormLayout.LabelRole, self.gridLinesTypeLabel)
OptionsWindow_ui.py(224):         self.cb_grid_lines_type = QtGui.QComboBox(self.SceneTab)
OptionsWindow_ui.py(225):         self.cb_grid_lines_type.setObjectName("cb_grid_lines_type")
OptionsWindow_ui.py(226):         self.formLayout_2.setWidget(2, QtGui.QFormLayout.FieldRole, self.cb_grid_lines_type)
OptionsWindow_ui.py(227):         self.edgeColorLabel = QtGui.QLabel(self.SceneTab)
OptionsWindow_ui.py(228):         self.edgeColorLabel.setObjectName("edgeColorLabel")
OptionsWindow_ui.py(229):         self.formLayout_2.setWidget(3, QtGui.QFormLayout.LabelRole, self.edgeColorLabel)
OptionsWindow_ui.py(230):         self.edgeColorWidget = QtGui.QWidget(self.SceneTab)
OptionsWindow_ui.py(231):         self.edgeColorWidget.setObjectName("edgeColorWidget")
OptionsWindow_ui.py(232):         self.gridLayout_15 = QtGui.QGridLayout(self.edgeColorWidget)
OptionsWindow_ui.py(233):         self.gridLayout_15.setContentsMargins(1, 1, 1, 1)
OptionsWindow_ui.py(234):         self.gridLayout_15.setContentsMargins(0, 0, 0, 0)
OptionsWindow_ui.py(235):         self.gridLayout_15.setObjectName("gridLayout_15")
OptionsWindow_ui.py(236):         self.pb_edge_color = QtGui.QPushButton(self.edgeColorWidget)
OptionsWindow_ui.py(237):         self.pb_edge_color.setObjectName("pb_edge_color")
OptionsWindow_ui.py(238):         self.gridLayout_15.addWidget(self.pb_edge_color, 0, 0, 1, 1)
OptionsWindow_ui.py(239):         self.formLayout_2.setWidget(3, QtGui.QFormLayout.FieldRole, self.edgeColorWidget)
OptionsWindow_ui.py(240):         self.edgeLineTypeLabel = QtGui.QLabel(self.SceneTab)
OptionsWindow_ui.py(241):         self.edgeLineTypeLabel.setObjectName("edgeLineTypeLabel")
OptionsWindow_ui.py(242):         self.formLayout_2.setWidget(4, QtGui.QFormLayout.LabelRole, self.edgeLineTypeLabel)
OptionsWindow_ui.py(243):         self.cb_edge_pen_type = QtGui.QComboBox(self.SceneTab)
OptionsWindow_ui.py(244):         self.cb_edge_pen_type.setObjectName("cb_edge_pen_type")
OptionsWindow_ui.py(245):         self.formLayout_2.setWidget(4, QtGui.QFormLayout.FieldRole, self.cb_edge_pen_type)
OptionsWindow_ui.py(246):         self.edgeLineThicknessLabel = QtGui.QLabel(self.SceneTab)
OptionsWindow_ui.py(247):         self.edgeLineThicknessLabel.setObjectName("edgeLineThicknessLabel")
OptionsWindow_ui.py(248):         self.formLayout_2.setWidget(5, QtGui.QFormLayout.LabelRole, self.edgeLineThicknessLabel)
OptionsWindow_ui.py(249):         self.sb_edge_thickness = QtGui.QDoubleSpinBox(self.SceneTab)
OptionsWindow_ui.py(250):         self.sb_edge_thickness.setMinimum(0.2)
OptionsWindow_ui.py(251):         self.sb_edge_thickness.setMaximum(10.0)
OptionsWindow_ui.py(252):         self.sb_edge_thickness.setProperty("value", 0.5)
OptionsWindow_ui.py(253):         self.sb_edge_thickness.setObjectName("sb_edge_thickness")
OptionsWindow_ui.py(254):         self.formLayout_2.setWidget(5, QtGui.QFormLayout.FieldRole, self.sb_edge_thickness)
OptionsWindow_ui.py(255):         self.gridLayout_12.addLayout(self.formLayout_2, 0, 0, 1, 1)
OptionsWindow_ui.py(256):         self.tabWidget.addTab(self.SceneTab, "")
OptionsWindow_ui.py(257):         self.gridLayout.addWidget(self.tabWidget, 0, 0, 1, 1)
OptionsWindow_ui.py(258):         OptionsUI.setCentralWidget(self.centralwidget)
OptionsWindow_ui.py(259):         self.menuBar = QtGui.QMenuBar(OptionsUI)
OptionsWindow_ui.py(260):         self.menuBar.setGeometry(QtCore.QRect(0, 0, 357, 18))
OptionsWindow_ui.py(261):         self.menuBar.setObjectName("menuBar")
OptionsWindow_ui.py(262):         self.menuFile = QtGui.QMenu(self.menuBar)
OptionsWindow_ui.py(263):         self.menuFile.setObjectName("menuFile")
OptionsWindow_ui.py(264):         OptionsUI.setMenuBar(self.menuBar)
OptionsWindow_ui.py(265):         self.actionSave = QtGui.QAction(OptionsUI)
OptionsWindow_ui.py(266):         self.actionSave.setObjectName("actionSave")
OptionsWindow_ui.py(267):         self.actionSave_as = QtGui.QAction(OptionsUI)
OptionsWindow_ui.py(268):         self.actionSave_as.setObjectName("actionSave_as")
OptionsWindow_ui.py(269):         self.menuFile.addAction(self.actionSave)
OptionsWindow_ui.py(270):         self.menuBar.addAction(self.menuFile.menuAction())
OptionsWindow_ui.py(272):         self.retranslateUi(OptionsUI)
 --- modulename: OptionsWindow_ui, funcname: retranslateUi
OptionsWindow_ui.py(277):         OptionsUI.setWindowTitle(QtGui.QApplication.translate("OptionsUI", "Options", None, QtGui.QApplication.UnicodeUTF8))
OptionsWindow_ui.py(278):         self.baseColorLabel.setText(QtGui.QApplication.translate("OptionsUI", "Node base color", None, QtGui.QApplication.UnicodeUTF8))
OptionsWindow_ui.py(279):         self.pb_node_base_color.setText(QtGui.QApplication.translate("OptionsUI", "...", None, QtGui.QApplication.UnicodeUTF8))
OptionsWindow_ui.py(280):         self.nodeSelectedLineColorLabel.setText(QtGui.QApplication.translate("OptionsUI", "Node selected line color", None, QtGui.QApplication.UnicodeUTF8))
OptionsWindow_ui.py(281):         self.pb_node_selected_pen_color.setText(QtGui.QApplication.translate("OptionsUI", "...", None, QtGui.QApplication.UnicodeUTF8))
OptionsWindow_ui.py(282):         self.pb_node_label_font_color.setText(QtGui.QApplication.translate("OptionsUI", "...", None, QtGui.QApplication.UnicodeUTF8))
OptionsWindow_ui.py(283):         self.nodeNameBgColorLabel.setText(QtGui.QApplication.translate("OptionsUI", "Node name font color", None, QtGui.QApplication.UnicodeUTF8))
OptionsWindow_ui.py(284):         self.nodeLabelBackgroundColorLabel.setText(QtGui.QApplication.translate("OptionsUI", "Node label background color", None, QtGui.QApplication.UnicodeUTF8))
OptionsWindow_ui.py(285):         self.pb_node_label_bg_color.setText(QtGui.QApplication.translate("OptionsUI", "...", None, QtGui.QApplication.UnicodeUTF8))
OptionsWindow_ui.py(286):         self.nodeLabelFontLabel.setText(QtGui.QApplication.translate("OptionsUI", "Node label font", None, QtGui.QApplication.UnicodeUTF8))
OptionsWindow_ui.py(287):         self.fb_node_label_font.setProperty("currentText", QtGui.QApplication.translate("OptionsUI", "Arial", None, QtGui.QApplication.UnicodeUTF8))
OptionsWindow_ui.py(288):         self.nodeLabelFontSizeLabel.setText(QtGui.QApplication.translate("OptionsUI", "Node label font size", None, QtGui.QApplication.UnicodeUTF8))
OptionsWindow_ui.py(289):         self.portColorALabel.setText(QtGui.QApplication.translate("OptionsUI", "Layout color A", None, QtGui.QApplication.UnicodeUTF8))
OptionsWindow_ui.py(290):         self.pb_lyt_a_color.setText(QtGui.QApplication.translate("OptionsUI", "...", None, QtGui.QApplication.UnicodeUTF8))
OptionsWindow_ui.py(291):         self.portColorBLabel.setText(QtGui.QApplication.translate("OptionsUI", "Layout color B", None, QtGui.QApplication.UnicodeUTF8))
OptionsWindow_ui.py(292):         self.pb_lyt_b_color.setText(QtGui.QApplication.translate("OptionsUI", "...", None, QtGui.QApplication.UnicodeUTF8))
OptionsWindow_ui.py(293):         self.portColorLabel.setText(QtGui.QApplication.translate("OptionsUI", "Port color", None, QtGui.QApplication.UnicodeUTF8))
OptionsWindow_ui.py(294):         self.pb_port_color.setText(QtGui.QApplication.translate("OptionsUI", "...", None, QtGui.QApplication.UnicodeUTF8))
OptionsWindow_ui.py(295):         self.portDirtyColorLabel.setText(QtGui.QApplication.translate("OptionsUI", "Port dirty line color", None, QtGui.QApplication.UnicodeUTF8))
OptionsWindow_ui.py(296):         self.pb_port_dirty_pen_color.setText(QtGui.QApplication.translate("OptionsUI", "...", None, QtGui.QApplication.UnicodeUTF8))
OptionsWindow_ui.py(297):         self.portDirtyLineTypeLabel.setText(QtGui.QApplication.translate("OptionsUI", "Port dirty line type", None, QtGui.QApplication.UnicodeUTF8))
OptionsWindow_ui.py(298):         self.portLabelColorLabel.setText(QtGui.QApplication.translate("OptionsUI", "Port label color", None, QtGui.QApplication.UnicodeUTF8))
OptionsWindow_ui.py(299):         self.pb_port_label_color.setText(QtGui.QApplication.translate("OptionsUI", "...", None, QtGui.QApplication.UnicodeUTF8))
OptionsWindow_ui.py(300):         self.portLabelFontLabel.setText(QtGui.QApplication.translate("OptionsUI", "Port label font", None, QtGui.QApplication.UnicodeUTF8))
OptionsWindow_ui.py(301):         self.fb_port_label_font.setProperty("currentText", QtGui.QApplication.translate("OptionsUI", "MS Shell Dlg 2", None, QtGui.QApplication.UnicodeUTF8))
OptionsWindow_ui.py(302):         self.portFontSizeLabel.setText(QtGui.QApplication.translate("OptionsUI", "Port font size", None, QtGui.QApplication.UnicodeUTF8))
OptionsWindow_ui.py(303):         self.tabWidget.setTabText(self.tabWidget.indexOf(self.NodesTab), QtGui.QApplication.translate("OptionsUI", "Nodes", None, QtGui.QApplication.UnicodeUTF8))
OptionsWindow_ui.py(304):         self.bacgroundColorLabel.setText(QtGui.QApplication.translate("OptionsUI", "Background color", None, QtGui.QApplication.UnicodeUTF8))
OptionsWindow_ui.py(305):         self.pb_scene_bg_color.setText(QtGui.QApplication.translate("OptionsUI", "...", None, QtGui.QApplication.UnicodeUTF8))
OptionsWindow_ui.py(306):         self.gridColorLabel.setText(QtGui.QApplication.translate("OptionsUI", "Grid color", None, QtGui.QApplication.UnicodeUTF8))
OptionsWindow_ui.py(307):         self.pb_grid_color.setText(QtGui.QApplication.translate("OptionsUI", "...", None, QtGui.QApplication.UnicodeUTF8))
OptionsWindow_ui.py(308):         self.gridLinesTypeLabel.setText(QtGui.QApplication.translate("OptionsUI", "Grid lines type", None, QtGui.QApplication.UnicodeUTF8))
OptionsWindow_ui.py(309):         self.edgeColorLabel.setText(QtGui.QApplication.translate("OptionsUI", "Edge color", None, QtGui.QApplication.UnicodeUTF8))
OptionsWindow_ui.py(310):         self.pb_edge_color.setText(QtGui.QApplication.translate("OptionsUI", "...", None, QtGui.QApplication.UnicodeUTF8))
OptionsWindow_ui.py(311):         self.edgeLineTypeLabel.setText(QtGui.QApplication.translate("OptionsUI", "Edge line type", None, QtGui.QApplication.UnicodeUTF8))
OptionsWindow_ui.py(312):         self.edgeLineThicknessLabel.setText(QtGui.QApplication.translate("OptionsUI", "Edge line thickness", None, QtGui.QApplication.UnicodeUTF8))
OptionsWindow_ui.py(313):         self.tabWidget.setTabText(self.tabWidget.indexOf(self.SceneTab), QtGui.QApplication.translate("OptionsUI", "Scene", None, QtGui.QApplication.UnicodeUTF8))
OptionsWindow_ui.py(314):         self.menuFile.setTitle(QtGui.QApplication.translate("OptionsUI", "File", None, QtGui.QApplication.UnicodeUTF8))
OptionsWindow_ui.py(315):         self.actionSave.setText(QtGui.QApplication.translate("OptionsUI", "Save", None, QtGui.QApplication.UnicodeUTF8))
OptionsWindow_ui.py(316):         self.actionSave_as.setText(QtGui.QApplication.translate("OptionsUI", "Save as", None, QtGui.QApplication.UnicodeUTF8))
OptionsWindow_ui.py(273):         self.tabWidget.setCurrentIndex(1)
OptionsWindow_ui.py(274):         QtCore.QMetaObject.connectSlotsByName(OptionsUI)
Widget.py(718):         self.connect_ui()
 --- modulename: Widget, funcname: connect_ui
Widget.py(784):         self.actionSave.triggered.connect(self.save_options)
Widget.py(786):         self.pb_scene_bg_color.clicked.connect(lambda: self.set_color(self.pb_scene_bg_color))
Widget.py(787):         self.pb_grid_color.clicked.connect(lambda: self.set_color(self.pb_grid_color))
Widget.py(788):         self.pb_edge_color.clicked.connect(lambda: self.set_color(self.pb_edge_color))
Widget.py(789):         self.pb_node_base_color.clicked.connect(lambda: self.set_color(self.pb_node_base_color))
Widget.py(790):         self.pb_node_label_font_color.clicked.connect(lambda: self.set_color(self.pb_node_label_font_color))
Widget.py(792):         self.pb_node_selected_pen_color.clicked.connect(lambda: self.set_color(self.pb_node_selected_pen_color))
Widget.py(793):         self.pb_node_label_bg_color.clicked.connect(lambda: self.set_color(self.pb_node_label_bg_color))
Widget.py(794):         self.pb_lyt_a_color.clicked.connect(lambda: self.set_color(self.pb_lyt_a_color))
Widget.py(795):         self.pb_lyt_b_color.clicked.connect(lambda: self.set_color(self.pb_lyt_b_color))
Widget.py(796):         self.pb_port_color.clicked.connect(lambda: self.set_color(self.pb_port_color))
Widget.py(797):         self.pb_port_label_color.clicked.connect(lambda: self.set_color(self.pb_port_label_color))
Widget.py(798):         self.pb_port_dirty_pen_color.clicked.connect(lambda: self.set_color(self.pb_port_dirty_pen_color))
Widget.py(719):         self.populate_ui()
 --- modulename: Widget, funcname: populate_ui
Widget.py(777):         line_types = [str(i) for i in dir(LineTypes) if i[0] == 'l']
Widget.py(777):         line_types = [str(i) for i in dir(LineTypes) if i[0] == 'l']
Widget.py(777):         line_types = [str(i) for i in dir(LineTypes) if i[0] == 'l']
Widget.py(777):         line_types = [str(i) for i in dir(LineTypes) if i[0] == 'l']
Widget.py(777):         line_types = [str(i) for i in dir(LineTypes) if i[0] == 'l']
Widget.py(777):         line_types = [str(i) for i in dir(LineTypes) if i[0] == 'l']
Widget.py(777):         line_types = [str(i) for i in dir(LineTypes) if i[0] == 'l']
Widget.py(777):         line_types = [str(i) for i in dir(LineTypes) if i[0] == 'l']
Widget.py(777):         line_types = [str(i) for i in dir(LineTypes) if i[0] == 'l']
Widget.py(777):         line_types = [str(i) for i in dir(LineTypes) if i[0] == 'l']
Widget.py(777):         line_types = [str(i) for i in dir(LineTypes) if i[0] == 'l']
Widget.py(777):         line_types = [str(i) for i in dir(LineTypes) if i[0] == 'l']
Widget.py(777):         line_types = [str(i) for i in dir(LineTypes) if i[0] == 'l']
Widget.py(777):         line_types = [str(i) for i in dir(LineTypes) if i[0] == 'l']
Widget.py(777):         line_types = [str(i) for i in dir(LineTypes) if i[0] == 'l']
Widget.py(777):         line_types = [str(i) for i in dir(LineTypes) if i[0] == 'l']
Widget.py(777):         line_types = [str(i) for i in dir(LineTypes) if i[0] == 'l']
Widget.py(777):         line_types = [str(i) for i in dir(LineTypes) if i[0] == 'l']
Widget.py(777):         line_types = [str(i) for i in dir(LineTypes) if i[0] == 'l']
Widget.py(777):         line_types = [str(i) for i in dir(LineTypes) if i[0] == 'l']
Widget.py(777):         line_types = [str(i) for i in dir(LineTypes) if i[0] == 'l']
Widget.py(777):         line_types = [str(i) for i in dir(LineTypes) if i[0] == 'l']
Widget.py(777):         line_types = [str(i) for i in dir(LineTypes) if i[0] == 'l']
Widget.py(777):         line_types = [str(i) for i in dir(LineTypes) if i[0] == 'l']
Widget.py(778):         self.cb_port_dirty_pen_type.addItems(line_types)
Widget.py(779):         self.cb_grid_lines_type.addItems(line_types)
Widget.py(780):         self.cb_edge_pen_type.addItems(line_types)
Widget.py(720):         self.picker = None
Widget.py(721):         self.settings_path = path.dirname(__file__) + '\\config.ini'
 --- modulename: ntpath, funcname: dirname
ntpath.py(215):     return split(p)[0]
 --- modulename: ntpath, funcname: split
ntpath.py(180):     d, p = splitdrive(p)
 --- modulename: ntpath, funcname: splitdrive
ntpath.py(115):     if len(p) > 1:
ntpath.py(116):         normp = p.replace(altsep, sep)
ntpath.py(117):         if (normp[0:2] == sep*2) and (normp[2:3] != sep):
ntpath.py(133):         if normp[1] == ':':
ntpath.py(134):             return p[:2], p[2:]
ntpath.py(182):     i = len(p)
ntpath.py(183):     while i and p[i-1] not in '/\\':
ntpath.py(184):         i = i - 1
ntpath.py(183):     while i and p[i-1] not in '/\\':
ntpath.py(184):         i = i - 1
ntpath.py(183):     while i and p[i-1] not in '/\\':
ntpath.py(184):         i = i - 1
ntpath.py(183):     while i and p[i-1] not in '/\\':
ntpath.py(184):         i = i - 1
ntpath.py(183):     while i and p[i-1] not in '/\\':
ntpath.py(184):         i = i - 1
ntpath.py(183):     while i and p[i-1] not in '/\\':
ntpath.py(184):         i = i - 1
ntpath.py(183):     while i and p[i-1] not in '/\\':
ntpath.py(184):         i = i - 1
ntpath.py(183):     while i and p[i-1] not in '/\\':
ntpath.py(184):         i = i - 1
ntpath.py(183):     while i and p[i-1] not in '/\\':
ntpath.py(184):         i = i - 1
ntpath.py(183):     while i and p[i-1] not in '/\\':
ntpath.py(184):         i = i - 1
ntpath.py(183):     while i and p[i-1] not in '/\\':
ntpath.py(185):     head, tail = p[:i], p[i:]  # now tail has no slashes
ntpath.py(187):     head2 = head
ntpath.py(188):     while head2 and head2[-1] in '/\\':
ntpath.py(189):         head2 = head2[:-1]
ntpath.py(188):     while head2 and head2[-1] in '/\\':
ntpath.py(190):     head = head2 or head
ntpath.py(191):     return d + head, tail
Widget.py(722):         self.settings_class = QtCore.QSettings(self.settings_path, QtCore.QSettings.IniFormat, self)
Widget.py(723):         if not path.isfile(self.settings_path):
 --- modulename: genericpath, funcname: isfile
genericpath.py(36):     try:
genericpath.py(37):         st = os.stat(path)
genericpath.py(40):     return stat.S_ISREG(st.st_mode)
 --- modulename: stat, funcname: S_ISREG
stat.py(50):     return S_IFMT(mode) == S_IFREG
 --- modulename: stat, funcname: S_IFMT
stat.py(25):     return mode & 0170000
Widget.py(725):         self.pb_scene_bg_color.color = QtGui.QColor(self.settings_class.value('SCENE/Scene bg color'))
Widget.py(726):         self.set_button_background(self.pb_scene_bg_color, self.pb_scene_bg_color.color)
 --- modulename: Widget, funcname: set_button_background
Widget.py(764):         button.setStyleSheet("background-color: rgb({0}, {1}, {2}, {3});".format(
Widget.py(765):             color.red(),
Widget.py(766):             color.green(),
Widget.py(767):             color.blue(),
Widget.py(768):             color.alpha()
Widget.py(727):         self.pb_grid_color.color = QtGui.QColor(self.settings_class.value('SCENE/Grid color'))
Widget.py(728):         self.set_button_background(self.pb_grid_color, self.pb_grid_color.color)
 --- modulename: Widget, funcname: set_button_background
Widget.py(764):         button.setStyleSheet("background-color: rgb({0}, {1}, {2}, {3});".format(
Widget.py(765):             color.red(),
Widget.py(766):             color.green(),
Widget.py(767):             color.blue(),
Widget.py(768):             color.alpha()
Widget.py(729):         self.pb_edge_color.color = QtGui.QColor(self.settings_class.value('SCENE/Edge color'))
Widget.py(730):         self.set_button_background(self.pb_edge_color, self.pb_edge_color.color)
 --- modulename: Widget, funcname: set_button_background
Widget.py(764):         button.setStyleSheet("background-color: rgb({0}, {1}, {2}, {3});".format(
Widget.py(765):             color.red(),
Widget.py(766):             color.green(),
Widget.py(767):             color.blue(),
Widget.py(768):             color.alpha()
Widget.py(731):         self.pb_node_base_color.color = QtGui.QColor(self.settings_class.value('NODES/Nodes base color'))
Widget.py(732):         self.set_button_background(self.pb_node_base_color, self.pb_node_base_color.color)
 --- modulename: Widget, funcname: set_button_background
Widget.py(764):         button.setStyleSheet("background-color: rgb({0}, {1}, {2}, {3});".format(
Widget.py(765):             color.red(),
Widget.py(766):             color.green(),
Widget.py(767):             color.blue(),
Widget.py(768):             color.alpha()
Widget.py(733):         self.pb_node_selected_pen_color.color = QtGui.QColor(self.settings_class.value('NODES/Nodes selected pen color'))
Widget.py(734):         self.set_button_background(self.pb_node_selected_pen_color, self.pb_node_selected_pen_color.color)
 --- modulename: Widget, funcname: set_button_background
Widget.py(764):         button.setStyleSheet("background-color: rgb({0}, {1}, {2}, {3});".format(
Widget.py(765):             color.red(),
Widget.py(766):             color.green(),
Widget.py(767):             color.blue(),
Widget.py(768):             color.alpha()
Widget.py(735):         self.pb_node_label_bg_color.color = QtGui.QColor(self.settings_class.value('NODES/Nodes label bg color'))
Widget.py(736):         self.set_button_background(self.pb_node_label_bg_color, self.pb_node_label_bg_color.color)
 --- modulename: Widget, funcname: set_button_background
Widget.py(764):         button.setStyleSheet("background-color: rgb({0}, {1}, {2}, {3});".format(
Widget.py(765):             color.red(),
Widget.py(766):             color.green(),
Widget.py(767):             color.blue(),
Widget.py(768):             color.alpha()
Widget.py(737):         self.pb_node_label_font_color.color = QtGui.QColor(self.settings_class.value('NODES/Nodes label font color'))
Widget.py(738):         self.set_button_background(self.pb_node_label_font_color, self.pb_node_label_font_color.color)
 --- modulename: Widget, funcname: set_button_background
Widget.py(764):         button.setStyleSheet("background-color: rgb({0}, {1}, {2}, {3});".format(
Widget.py(765):             color.red(),
Widget.py(766):             color.green(),
Widget.py(767):             color.blue(),
Widget.py(768):             color.alpha()
Widget.py(739):         self.pb_lyt_a_color.color = QtGui.QColor(self.settings_class.value('NODES/Nodes lyt A color'))
Widget.py(740):         self.set_button_background(self.pb_lyt_a_color, self.pb_lyt_a_color.color)
 --- modulename: Widget, funcname: set_button_background
Widget.py(764):         button.setStyleSheet("background-color: rgb({0}, {1}, {2}, {3});".format(
Widget.py(765):             color.red(),
Widget.py(766):             color.green(),
Widget.py(767):             color.blue(),
Widget.py(768):             color.alpha()
Widget.py(741):         self.pb_lyt_b_color.color = QtGui.QColor(self.settings_class.value('NODES/Nodes lyt B color'))
Widget.py(742):         self.set_button_background(self.pb_lyt_b_color, self.pb_lyt_b_color.color)
 --- modulename: Widget, funcname: set_button_background
Widget.py(764):         button.setStyleSheet("background-color: rgb({0}, {1}, {2}, {3});".format(
Widget.py(765):             color.red(),
Widget.py(766):             color.green(),
Widget.py(767):             color.blue(),
Widget.py(768):             color.alpha()
Widget.py(743):         self.pb_port_color.color = QtGui.QColor(self.settings_class.value('NODES/Port color'))
Widget.py(744):         self.set_button_background(self.pb_port_color, self.pb_port_color.color)
 --- modulename: Widget, funcname: set_button_background
Widget.py(764):         button.setStyleSheet("background-color: rgb({0}, {1}, {2}, {3});".format(
Widget.py(765):             color.red(),
Widget.py(766):             color.green(),
Widget.py(767):             color.blue(),
Widget.py(768):             color.alpha()
Widget.py(745):         self.pb_port_label_color.color = QtGui.QColor(self.settings_class.value('NODES/Port label color'))
Widget.py(746):         self.set_button_background(self.pb_port_label_color, self.pb_port_label_color.color)
 --- modulename: Widget, funcname: set_button_background
Widget.py(764):         button.setStyleSheet("background-color: rgb({0}, {1}, {2}, {3});".format(
Widget.py(765):             color.red(),
Widget.py(766):             color.green(),
Widget.py(767):             color.blue(),
Widget.py(768):             color.alpha()
Widget.py(747):         self.pb_port_dirty_pen_color.color = QtGui.QColor(self.settings_class.value('NODES/Port dirty color'))
Widget.py(748):         self.set_button_background(self.pb_port_dirty_pen_color, self.pb_port_dirty_pen_color.color)
 --- modulename: Widget, funcname: set_button_background
Widget.py(764):         button.setStyleSheet("background-color: rgb({0}, {1}, {2}, {3});".format(
Widget.py(765):             color.red(),
Widget.py(766):             color.green(),
Widget.py(767):             color.blue(),
Widget.py(768):             color.alpha()
Widget.py(749):         self.sb_node_label_font_size.setValue(int(self.settings_class.value('NODES/Nodes label font size')))
Widget.py(750):         self.fb_node_label_font.setCurrentFont(QtGui.QFont(self.settings_class.value('NODES/Nodes label font')))
Widget.py(751):         self.fb_port_label_font.setCurrentFont(QtGui.QFont(self.settings_class.value('NODES/Port label font')))
Widget.py(752):         self.sb_port_font_size.setValue(int(self.settings_class.value('NODES/Port label size')))
Widget.py(753):         self.sb_edge_thickness.setValue(float(self.settings_class.value('SCENE/Edge line thickness')))
Widget.py(755):         idx = self.cb_grid_lines_type.findText(str(self.settings_class.value('SCENE/Grid lines type')))
Widget.py(756):         self.cb_grid_lines_type.setCurrentIndex(idx)
Widget.py(757):         idx = self.cb_edge_pen_type.findText(str(self.settings_class.value('SCENE/Edge pen type')))
Widget.py(758):         self.cb_edge_pen_type.setCurrentIndex(idx)
Widget.py(759):         idx = self.cb_port_dirty_pen_type.findText(str(self.settings_class.value('NODES/Port dirty type')))
Widget.py(760):         self.cb_port_dirty_pen_type.setCurrentIndex(idx)
Widget.py(887):         self.setSizePolicy(QtGui.QSizePolicy.Expanding, QtGui.QSizePolicy.Expanding)
Widget.py(888):         self.pressed_item = None
Widget.py(889):         self.released_item = None
Widget.py(890):         self.groupers = []
Widget.py(891):         self.reroutes = []
Widget.py(892):         self._isPanning = False
Widget.py(893):         self._mousePressed = False
Widget.py(894):         self._shadows = False
Widget.py(895):         self.scale(1.5, 1.5)
Widget.py(896):         self.minimum_scale = 0.5
Widget.py(897):         self.maximum_scale = 10
Widget.py(898):         self.setViewportUpdateMode(self.FullViewportUpdate)
Widget.py(899):         self.setCacheMode(QtGui.QGraphicsView.CacheBackground)
Widget.py(900):         self.setRenderHint(QtGui.QPainter.Antialiasing)
Widget.py(901):         self.setTransformationAnchor(QtGui.QGraphicsView.AnchorUnderMouse)
Widget.py(902):         self.setAcceptDrops(True)
Widget.py(903):         self.setResizeAnchor(QtGui.QGraphicsView.AnchorViewCenter)
Widget.py(904):         self.scene().setSceneRect(QtCore.QRect(0, 0, 10000, 10000))
Widget.py(905):         self._grid_spacing = 50
Widget.py(906):         self.factor = 1
Widget.py(907):         self.factor_diff = 0
Widget.py(908):         self.scale(self.factor, self.factor)
Widget.py(909):         self.setWindowTitle(self.tr(name))
Widget.py(911):         self.setRubberBandSelectionMode(QtCore.Qt.IntersectsItemShape)
Widget.py(913):         self._current_file_name = 'Untitled'
Widget.py(914):         self._file_name_label = QtGui.QGraphicsTextItem()
Widget.py(915):         self._file_name_label.setZValue(5)
Widget.py(916):         self._file_name_label.setEnabled(False)
Widget.py(917):         self._file_name_label.setFlag(QtGui.QGraphicsTextItem.ItemIgnoresTransformations)
Widget.py(918):         self._file_name_label.setDefaultTextColor(self.kWhite)
Widget.py(919):         self._file_name_label.setPlainText(self._current_file_name)
Widget.py(920):         self.scene().addItem(self._file_name_label)
Widget.py(921):         self.rubber_rect = RubberRect('RubberRect')
 --- modulename: Widget, funcname: __init__
Widget.py(454):         super(RubberRect, self).__init__()
Widget.py(455):         self.name = name
Widget.py(456):         self.setZValue(2)
Widget.py(457):         self.setPen(QtGui.QPen(self.kRubberRect, 0.5, QtCore.Qt.SolidLine))
Widget.py(458):         self.setBrush(QtGui.QBrush(self.kRubberRect))
Widget.py(923):         self.real_time_line = QtGui.QGraphicsPathItem(None, self.scene())
Widget.py(924):         self.real_time_line.name = 'RealTimeLine'
Widget.py(925):         self.real_time_line.object_type = AGObjectTypes.tConnectionLine
Widget.py(926):         self.real_time_line.setPen(QtGui.QPen(self.kGreen, 1.0, QtCore.Qt.DashLine))
Widget.py(927):         self.mousePressPose = QtCore.QPointF(0, 0)
Widget.py(928):         self.mousePos = QtCore.QPointF(0, 0)
Widget.py(929):         self._right_button = False
Widget.py(930):         self._is_rubber_band_selection = False
Widget.py(931):         self._draw_real_time_line = False
Widget.py(932):         self._update_items = False
Widget.py(933):         self._resize_group_mode = False
Widget.py(934):         self.horizontalScrollBar().setValue(self.horizontalScrollBar().maximum() / 2)
Widget.py(935):         self.verticalScrollBar().setValue(self.verticalScrollBar().maximum() / 2)
Widget.py(936):         self._tick_functions = []
Widget.py(937):         self.registeredCommands = {}
Widget.py(938):         self.registerCommands()
 --- modulename: Widget, funcname: registerCommands
Widget.py(997):         for d in listdir(Commands.__path__[0]):
Widget.py(998):             if d.endswith(".py") and "__init__" not in d:
Widget.py(999):                 cmd = import_by_name(Commands, d.split(".")[0])
 --- modulename: Widget, funcname: import_by_name
Widget.py(151):     if hasattr(module, name):
Widget.py(152):         try:
Widget.py(153):             mod = getattr(module, name)
Widget.py(154):             return mod
Widget.py(1000):                 if cmd:
Widget.py(1001):                     cmd = cmd(self)
 --- modulename: enableShadows, funcname: __init__
enableShadows.py(7):         super(enableShadows, self).__init__(graph)
 --- modulename: Command, funcname: __init__
Command.py(12):         super(Command, self).__init__()
Command.py(13):         self.graph = graph
Widget.py(1002):                     self.registeredCommands[cmd.__class__.__name__] = cmd
Widget.py(997):         for d in listdir(Commands.__path__[0]):
Widget.py(998):             if d.endswith(".py") and "__init__" not in d:
Widget.py(997):         for d in listdir(Commands.__path__[0]):
Widget.py(998):             if d.endswith(".py") and "__init__" not in d:
Widget.py(999):                 cmd = import_by_name(Commands, d.split(".")[0])
 --- modulename: Widget, funcname: import_by_name
Widget.py(151):     if hasattr(module, name):
Widget.py(152):         try:
Widget.py(153):             mod = getattr(module, name)
Widget.py(154):             return mod
Widget.py(1000):                 if cmd:
Widget.py(1001):                     cmd = cmd(self)
 --- modulename: helloWorld, funcname: __init__
helloWorld.py(7):         super(helloWorld, self).__init__(graph)
 --- modulename: Command, funcname: __init__
Command.py(12):         super(Command, self).__init__()
Command.py(13):         self.graph = graph
Widget.py(1002):                     self.registeredCommands[cmd.__class__.__name__] = cmd
Widget.py(997):         for d in listdir(Commands.__path__[0]):
Widget.py(998):             if d.endswith(".py") and "__init__" not in d:
Widget.py(997):         for d in listdir(Commands.__path__[0]):
Widget.py(998):             if d.endswith(".py") and "__init__" not in d:
Widget.py(997):         for d in listdir(Commands.__path__[0]):
Widget.py(998):             if d.endswith(".py") and "__init__" not in d:
Widget.py(999):                 cmd = import_by_name(Commands, d.split(".")[0])
 --- modulename: Widget, funcname: import_by_name
Widget.py(151):     if hasattr(module, name):
Widget.py(152):         try:
Widget.py(153):             mod = getattr(module, name)
Widget.py(154):             return mod
Widget.py(1000):                 if cmd:
Widget.py(1001):                     cmd = cmd(self)
 --- modulename: playSound, funcname: __init__
playSound.py(9):         super(playSound, self).__init__(graph)
 --- modulename: Command, funcname: __init__
Command.py(12):         super(Command, self).__init__()
Command.py(13):         self.graph = graph
Widget.py(1002):                     self.registeredCommands[cmd.__class__.__name__] = cmd
Widget.py(997):         for d in listdir(Commands.__path__[0]):
Widget.py(998):             if d.endswith(".py") and "__init__" not in d:
Widget.py(997):         for d in listdir(Commands.__path__[0]):
Widget.py(998):             if d.endswith(".py") and "__init__" not in d:
Widget.py(997):         for d in listdir(Commands.__path__[0]):
Widget.py(998):             if d.endswith(".py") and "__init__" not in d:
Widget.py(997):         for d in listdir(Commands.__path__[0]):
Widget.py(939):         self._sortcuts_enabled = True
Widget.py(940):         self.tick_timer = QtCore.QTimer()  # this timer executes all functions in '_tick_functions'
Widget.py(941):         self.tick_timer.timeout.connect(self._tick_executor)
Widget.py(942):         self.tick_timer.start(50)
Widget.py(943):         self.setFocusPolicy(QtCore.Qt.StrongFocus)
Widget.py(944):         self.grid_size = 10
Widget.py(945):         self.current_rounded_pos = QtCore.QPointF(0.0, 0.0)
Widget.py(947):         if (path.isfile(_mod_folder + 'resources/sounds/startup.wav') and platform.system() == "Windows"):
 --- modulename: genericpath, funcname: isfile
genericpath.py(36):     try:
genericpath.py(37):         st = os.stat(path)
genericpath.py(40):     return stat.S_ISREG(st.st_mode)
 --- modulename: stat, funcname: S_ISREG
stat.py(50):     return S_IFMT(mode) == S_IFREG
 --- modulename: stat, funcname: S_IFMT
stat.py(25):     return mode & 0170000
 --- modulename: platform, funcname: system
platform.py(1263):     return uname()[0]
 --- modulename: platform, funcname: uname
platform.py(1132):     no_os_uname = 0
platform.py(1134):     if _uname_cache is not None:
platform.py(1137):     processor = ''
platform.py(1140):     try:
platform.py(1141):         system,node,release,version,machine = os.uname()
platform.py(1142):     except AttributeError:
platform.py(1143):         no_os_uname = 1
platform.py(1145):     if no_os_uname or not filter(None, (system, node, release, version, machine)):
platform.py(1148):         if no_os_uname:
platform.py(1149):             system = sys.platform
platform.py(1150):             release = ''
platform.py(1151):             version = ''
platform.py(1152):             node = _node()
 --- modulename: platform, funcname: _node
platform.py(915):     try:
platform.py(916):         import socket
 --- modulename: socket, funcname: <module>
socket.py(45): """
socket.py(47): import _socket
socket.py(48): from _socket import *
socket.py(49): from functools import partial
socket.py(50): from types import MethodType
socket.py(52): try:
socket.py(53):     import _ssl
socket.py(58):     def ssl(sock, keyfile=None, certfile=None):
socket.py(67):     from _ssl import SSLError as sslerror
socket.py(68):     from _ssl import \
socket.py(80):     try:
socket.py(81):         from _ssl import RAND_egd
socket.py(82):     except ImportError:
socket.py(84):         pass
socket.py(86): import os, sys, warnings
socket.py(88): try:
socket.py(89):     from cStringIO import StringIO
socket.py(93): try:
socket.py(94):     import errno
socket.py(97): EBADF = getattr(errno, 'EBADF', 9)
socket.py(98): EINTR = getattr(errno, 'EINTR', 4)
socket.py(100): __all__ = ["getfqdn", "create_connection"]
socket.py(101): __all__.extend(os._get_exports_list(_socket))
 --- modulename: os, funcname: _get_exports_list
os.py(36):     try:
os.py(37):         return list(module.__all__)
os.py(38):     except AttributeError:
os.py(39):         return [n for n in dir(module) if n[0] != '_']
os.py(39):         return [n for n in dir(module) if n[0] != '_']
os.py(39):         return [n for n in dir(module) if n[0] != '_']
os.py(39):         return [n for n in dir(module) if n[0] != '_']
os.py(39):         return [n for n in dir(module) if n[0] != '_']
os.py(39):         return [n for n in dir(module) if n[0] != '_']
os.py(39):         return [n for n in dir(module) if n[0] != '_']
os.py(39):         return [n for n in dir(module) if n[0] != '_']
os.py(39):         return [n for n in dir(module) if n[0] != '_']
os.py(39):         return [n for n in dir(module) if n[0] != '_']
os.py(39):         return [n for n in dir(module) if n[0] != '_']
os.py(39):         return [n for n in dir(module) if n[0] != '_']
os.py(39):         return [n for n in dir(module) if n[0] != '_']
os.py(39):         return [n for n in dir(module) if n[0] != '_']
os.py(39):         return [n for n in dir(module) if n[0] != '_']
os.py(39):         return [n for n in dir(module) if n[0] != '_']
os.py(39):         return [n for n in dir(module) if n[0] != '_']
os.py(39):         return [n for n in dir(module) if n[0] != '_']
os.py(39):         return [n for n in dir(module) if n[0] != '_']
os.py(39):         return [n for n in dir(module) if n[0] != '_']
os.py(39):         return [n for n in dir(module) if n[0] != '_']
os.py(39):         return [n for n in dir(module) if n[0] != '_']
os.py(39):         return [n for n in dir(module) if n[0] != '_']
os.py(39):         return [n for n in dir(module) if n[0] != '_']
os.py(39):         return [n for n in dir(module) if n[0] != '_']
os.py(39):         return [n for n in dir(module) if n[0] != '_']
os.py(39):         return [n for n in dir(module) if n[0] != '_']
os.py(39):         return [n for n in dir(module) if n[0] != '_']
os.py(39):         return [n for n in dir(module) if n[0] != '_']
os.py(39):         return [n for n in dir(module) if n[0] != '_']
os.py(39):         return [n for n in dir(module) if n[0] != '_']
os.py(39):         return [n for n in dir(module) if n[0] != '_']
os.py(39):         return [n for n in dir(module) if n[0] != '_']
os.py(39):         return [n for n in dir(module) if n[0] != '_']
os.py(39):         return [n for n in dir(module) if n[0] != '_']
os.py(39):         return [n for n in dir(module) if n[0] != '_']
os.py(39):         return [n for n in dir(module) if n[0] != '_']
os.py(39):         return [n for n in dir(module) if n[0] != '_']
os.py(39):         return [n for n in dir(module) if n[0] != '_']
os.py(39):         return [n for n in dir(module) if n[0] != '_']
os.py(39):         return [n for n in dir(module) if n[0] != '_']
os.py(39):         return [n for n in dir(module) if n[0] != '_']
os.py(39):         return [n for n in dir(module) if n[0] != '_']
os.py(39):         return [n for n in dir(module) if n[0] != '_']
os.py(39):         return [n for n in dir(module) if n[0] != '_']
os.py(39):         return [n for n in dir(module) if n[0] != '_']
os.py(39):         return [n for n in dir(module) if n[0] != '_']
os.py(39):         return [n for n in dir(module) if n[0] != '_']
os.py(39):         return [n for n in dir(module) if n[0] != '_']
os.py(39):         return [n for n in dir(module) if n[0] != '_']
os.py(39):         return [n for n in dir(module) if n[0] != '_']
os.py(39):         return [n for n in dir(module) if n[0] != '_']
os.py(39):         return [n for n in dir(module) if n[0] != '_']
os.py(39):         return [n for n in dir(module) if n[0] != '_']
os.py(39):         return [n for n in dir(module) if n[0] != '_']
os.py(39):         return [n for n in dir(module) if n[0] != '_']
os.py(39):         return [n for n in dir(module) if n[0] != '_']
os.py(39):         return [n for n in dir(module) if n[0] != '_']
os.py(39):         return [n for n in dir(module) if n[0] != '_']
os.py(39):         return [n for n in dir(module) if n[0] != '_']
os.py(39):         return [n for n in dir(module) if n[0] != '_']
os.py(39):         return [n for n in dir(module) if n[0] != '_']
os.py(39):         return [n for n in dir(module) if n[0] != '_']
os.py(39):         return [n for n in dir(module) if n[0] != '_']
os.py(39):         return [n for n in dir(module) if n[0] != '_']
os.py(39):         return [n for n in dir(module) if n[0] != '_']
os.py(39):         return [n for n in dir(module) if n[0] != '_']
os.py(39):         return [n for n in dir(module) if n[0] != '_']
os.py(39):         return [n for n in dir(module) if n[0] != '_']
os.py(39):         return [n for n in dir(module) if n[0] != '_']
os.py(39):         return [n for n in dir(module) if n[0] != '_']
os.py(39):         return [n for n in dir(module) if n[0] != '_']
os.py(39):         return [n for n in dir(module) if n[0] != '_']
os.py(39):         return [n for n in dir(module) if n[0] != '_']
os.py(39):         return [n for n in dir(module) if n[0] != '_']
os.py(39):         return [n for n in dir(module) if n[0] != '_']
os.py(39):         return [n for n in dir(module) if n[0] != '_']
os.py(39):         return [n for n in dir(module) if n[0] != '_']
os.py(39):         return [n for n in dir(module) if n[0] != '_']
os.py(39):         return [n for n in dir(module) if n[0] != '_']
os.py(39):         return [n for n in dir(module) if n[0] != '_']
os.py(39):         return [n for n in dir(module) if n[0] != '_']
os.py(39):         return [n for n in dir(module) if n[0] != '_']
os.py(39):         return [n for n in dir(module) if n[0] != '_']
os.py(39):         return [n for n in dir(module) if n[0] != '_']
os.py(39):         return [n for n in dir(module) if n[0] != '_']
os.py(39):         return [n for n in dir(module) if n[0] != '_']
os.py(39):         return [n for n in dir(module) if n[0] != '_']
os.py(39):         return [n for n in dir(module) if n[0] != '_']
os.py(39):         return [n for n in dir(module) if n[0] != '_']
os.py(39):         return [n for n in dir(module) if n[0] != '_']
os.py(39):         return [n for n in dir(module) if n[0] != '_']
os.py(39):         return [n for n in dir(module) if n[0] != '_']
os.py(39):         return [n for n in dir(module) if n[0] != '_']
os.py(39):         return [n for n in dir(module) if n[0] != '_']
os.py(39):         return [n for n in dir(module) if n[0] != '_']
os.py(39):         return [n for n in dir(module) if n[0] != '_']
os.py(39):         return [n for n in dir(module) if n[0] != '_']
os.py(39):         return [n for n in dir(module) if n[0] != '_']
os.py(39):         return [n for n in dir(module) if n[0] != '_']
os.py(39):         return [n for n in dir(module) if n[0] != '_']
os.py(39):         return [n for n in dir(module) if n[0] != '_']
os.py(39):         return [n for n in dir(module) if n[0] != '_']
os.py(39):         return [n for n in dir(module) if n[0] != '_']
os.py(39):         return [n for n in dir(module) if n[0] != '_']
os.py(39):         return [n for n in dir(module) if n[0] != '_']
os.py(39):         return [n for n in dir(module) if n[0] != '_']
os.py(39):         return [n for n in dir(module) if n[0] != '_']
os.py(39):         return [n for n in dir(module) if n[0] != '_']
os.py(39):         return [n for n in dir(module) if n[0] != '_']
os.py(39):         return [n for n in dir(module) if n[0] != '_']
os.py(39):         return [n for n in dir(module) if n[0] != '_']
os.py(39):         return [n for n in dir(module) if n[0] != '_']
os.py(39):         return [n for n in dir(module) if n[0] != '_']
os.py(39):         return [n for n in dir(module) if n[0] != '_']
os.py(39):         return [n for n in dir(module) if n[0] != '_']
os.py(39):         return [n for n in dir(module) if n[0] != '_']
os.py(39):         return [n for n in dir(module) if n[0] != '_']
os.py(39):         return [n for n in dir(module) if n[0] != '_']
os.py(39):         return [n for n in dir(module) if n[0] != '_']
os.py(39):         return [n for n in dir(module) if n[0] != '_']
os.py(39):         return [n for n in dir(module) if n[0] != '_']
os.py(39):         return [n for n in dir(module) if n[0] != '_']
os.py(39):         return [n for n in dir(module) if n[0] != '_']
os.py(39):         return [n for n in dir(module) if n[0] != '_']
os.py(39):         return [n for n in dir(module) if n[0] != '_']
os.py(39):         return [n for n in dir(module) if n[0] != '_']
os.py(39):         return [n for n in dir(module) if n[0] != '_']
os.py(39):         return [n for n in dir(module) if n[0] != '_']
os.py(39):         return [n for n in dir(module) if n[0] != '_']
os.py(39):         return [n for n in dir(module) if n[0] != '_']
os.py(39):         return [n for n in dir(module) if n[0] != '_']
os.py(39):         return [n for n in dir(module) if n[0] != '_']
os.py(39):         return [n for n in dir(module) if n[0] != '_']
os.py(39):         return [n for n in dir(module) if n[0] != '_']
os.py(39):         return [n for n in dir(module) if n[0] != '_']
os.py(39):         return [n for n in dir(module) if n[0] != '_']
os.py(39):         return [n for n in dir(module) if n[0] != '_']
os.py(39):         return [n for n in dir(module) if n[0] != '_']
os.py(39):         return [n for n in dir(module) if n[0] != '_']
os.py(39):         return [n for n in dir(module) if n[0] != '_']
os.py(39):         return [n for n in dir(module) if n[0] != '_']
os.py(39):         return [n for n in dir(module) if n[0] != '_']
os.py(39):         return [n for n in dir(module) if n[0] != '_']
os.py(39):         return [n for n in dir(module) if n[0] != '_']
socket.py(104): _realsocket = socket
socket.py(107): if sys.platform.lower().startswith("win"):
socket.py(108):     errorTab = {}
socket.py(109):     errorTab[10004] = "The operation was interrupted."
socket.py(110):     errorTab[10009] = "A bad file handle was passed."
socket.py(111):     errorTab[10013] = "Permission denied."
socket.py(112):     errorTab[10014] = "A fault occurred on the network??" # WSAEFAULT
socket.py(113):     errorTab[10022] = "An invalid operation was attempted."
socket.py(114):     errorTab[10035] = "The socket operation would block"
socket.py(115):     errorTab[10036] = "A blocking operation is already in progress."
socket.py(116):     errorTab[10048] = "The network address is in use."
socket.py(117):     errorTab[10054] = "The connection has been reset."
socket.py(118):     errorTab[10058] = "The network has been shut down."
socket.py(119):     errorTab[10060] = "The operation timed out."
socket.py(120):     errorTab[10061] = "Connection refused."
socket.py(121):     errorTab[10063] = "The name is too long."
socket.py(122):     errorTab[10064] = "The host is down."
socket.py(123):     errorTab[10065] = "The host is unreachable."
socket.py(124):     __all__.append("errorTab")
socket.py(128): def getfqdn(name=''):
socket.py(155):     'bind', 'connect', 'connect_ex', 'fileno', 'listen',
socket.py(156):     'getpeername', 'getsockname', 'getsockopt', 'setsockopt',
socket.py(157):     'sendall', 'setblocking',
socket.py(158):     'settimeout', 'gettimeout', 'shutdown')
socket.py(160): if os.name == "nt":
socket.py(161):     _socketmethods = _socketmethods + ('ioctl',)
socket.py(163): if sys.platform == "riscos":
socket.py(168): _delegate_methods = ("recv", "recvfrom", "recv_into", "recvfrom_into",
socket.py(169):                      "send", "sendto")
socket.py(171): class _closedsocket(object):
 --- modulename: socket, funcname: _closedsocket
socket.py(171): class _closedsocket(object):
socket.py(172):     __slots__ = []
socket.py(173):     def _dummy(*args):
socket.py(176):     send = recv = recv_into = sendto = recvfrom = recvfrom_into = _dummy
socket.py(177):     __getattr__ = _dummy
socket.py(183): class _socketobject(object):
 --- modulename: socket, funcname: _socketobject
socket.py(183): class _socketobject(object):
socket.py(185):     __doc__ = _realsocket.__doc__
socket.py(187):     __slots__ = ["_sock", "__weakref__"] + list(_delegate_methods)
socket.py(189):     def __init__(self, family=AF_INET, type=SOCK_STREAM, proto=0, _sock=None):
socket.py(196):     def close(self, _closedsocket=_closedsocket,
socket.py(197):               _delegate_methods=_delegate_methods, setattr=setattr):
socket.py(203):     close.__doc__ = _realsocket.close.__doc__
socket.py(205):     def accept(self):
socket.py(208):     accept.__doc__ = _realsocket.accept.__doc__
socket.py(210):     def dup(self):
socket.py(216):     def makefile(self, mode='r', bufsize=-1):
socket.py(223):     family = property(lambda self: self._sock.family, doc="the socket family")
socket.py(224):     type = property(lambda self: self._sock.type, doc="the socket type")
socket.py(225):     proto = property(lambda self: self._sock.proto, doc="the socket protocol")
socket.py(227): def meth(name,self,*args):
socket.py(230): for _m in _socketmethods:
socket.py(231):     p = partial(meth,_m)
socket.py(232):     p.__name__ = _m
socket.py(233):     p.__doc__ = getattr(_realsocket,_m).__doc__
socket.py(234):     m = MethodType(p,None,_socketobject)
socket.py(235):     setattr(_socketobject,_m,m)
socket.py(230): for _m in _socketmethods:
socket.py(231):     p = partial(meth,_m)
socket.py(232):     p.__name__ = _m
socket.py(233):     p.__doc__ = getattr(_realsocket,_m).__doc__
socket.py(234):     m = MethodType(p,None,_socketobject)
socket.py(235):     setattr(_socketobject,_m,m)
socket.py(230): for _m in _socketmethods:
socket.py(231):     p = partial(meth,_m)
socket.py(232):     p.__name__ = _m
socket.py(233):     p.__doc__ = getattr(_realsocket,_m).__doc__
socket.py(234):     m = MethodType(p,None,_socketobject)
socket.py(235):     setattr(_socketobject,_m,m)
socket.py(230): for _m in _socketmethods:
socket.py(231):     p = partial(meth,_m)
socket.py(232):     p.__name__ = _m
socket.py(233):     p.__doc__ = getattr(_realsocket,_m).__doc__
socket.py(234):     m = MethodType(p,None,_socketobject)
socket.py(235):     setattr(_socketobject,_m,m)
socket.py(230): for _m in _socketmethods:
socket.py(231):     p = partial(meth,_m)
socket.py(232):     p.__name__ = _m
socket.py(233):     p.__doc__ = getattr(_realsocket,_m).__doc__
socket.py(234):     m = MethodType(p,None,_socketobject)
socket.py(235):     setattr(_socketobject,_m,m)
socket.py(230): for _m in _socketmethods:
socket.py(231):     p = partial(meth,_m)
socket.py(232):     p.__name__ = _m
socket.py(233):     p.__doc__ = getattr(_realsocket,_m).__doc__
socket.py(234):     m = MethodType(p,None,_socketobject)
socket.py(235):     setattr(_socketobject,_m,m)
socket.py(230): for _m in _socketmethods:
socket.py(231):     p = partial(meth,_m)
socket.py(232):     p.__name__ = _m
socket.py(233):     p.__doc__ = getattr(_realsocket,_m).__doc__
socket.py(234):     m = MethodType(p,None,_socketobject)
socket.py(235):     setattr(_socketobject,_m,m)
socket.py(230): for _m in _socketmethods:
socket.py(231):     p = partial(meth,_m)
socket.py(232):     p.__name__ = _m
socket.py(233):     p.__doc__ = getattr(_realsocket,_m).__doc__
socket.py(234):     m = MethodType(p,None,_socketobject)
socket.py(235):     setattr(_socketobject,_m,m)
socket.py(230): for _m in _socketmethods:
socket.py(231):     p = partial(meth,_m)
socket.py(232):     p.__name__ = _m
socket.py(233):     p.__doc__ = getattr(_realsocket,_m).__doc__
socket.py(234):     m = MethodType(p,None,_socketobject)
socket.py(235):     setattr(_socketobject,_m,m)
socket.py(230): for _m in _socketmethods:
socket.py(231):     p = partial(meth,_m)
socket.py(232):     p.__name__ = _m
socket.py(233):     p.__doc__ = getattr(_realsocket,_m).__doc__
socket.py(234):     m = MethodType(p,None,_socketobject)
socket.py(235):     setattr(_socketobject,_m,m)
socket.py(230): for _m in _socketmethods:
socket.py(231):     p = partial(meth,_m)
socket.py(232):     p.__name__ = _m
socket.py(233):     p.__doc__ = getattr(_realsocket,_m).__doc__
socket.py(234):     m = MethodType(p,None,_socketobject)
socket.py(235):     setattr(_socketobject,_m,m)
socket.py(230): for _m in _socketmethods:
socket.py(231):     p = partial(meth,_m)
socket.py(232):     p.__name__ = _m
socket.py(233):     p.__doc__ = getattr(_realsocket,_m).__doc__
socket.py(234):     m = MethodType(p,None,_socketobject)
socket.py(235):     setattr(_socketobject,_m,m)
socket.py(230): for _m in _socketmethods:
socket.py(231):     p = partial(meth,_m)
socket.py(232):     p.__name__ = _m
socket.py(233):     p.__doc__ = getattr(_realsocket,_m).__doc__
socket.py(234):     m = MethodType(p,None,_socketobject)
socket.py(235):     setattr(_socketobject,_m,m)
socket.py(230): for _m in _socketmethods:
socket.py(231):     p = partial(meth,_m)
socket.py(232):     p.__name__ = _m
socket.py(233):     p.__doc__ = getattr(_realsocket,_m).__doc__
socket.py(234):     m = MethodType(p,None,_socketobject)
socket.py(235):     setattr(_socketobject,_m,m)
socket.py(230): for _m in _socketmethods:
socket.py(231):     p = partial(meth,_m)
socket.py(232):     p.__name__ = _m
socket.py(233):     p.__doc__ = getattr(_realsocket,_m).__doc__
socket.py(234):     m = MethodType(p,None,_socketobject)
socket.py(235):     setattr(_socketobject,_m,m)
socket.py(230): for _m in _socketmethods:
socket.py(237): socket = SocketType = _socketobject
socket.py(239): class _fileobject(object):
 --- modulename: socket, funcname: _fileobject
socket.py(239): class _fileobject(object):
socket.py(240):     """Faux file object attached to a socket object."""
socket.py(242):     default_bufsize = 8192
socket.py(243):     name = "<socket>"
socket.py(245):     __slots__ = ["mode", "bufsize", "softspace",
socket.py(247):                  "_sock", "_rbufsize", "_wbufsize", "_rbuf", "_wbuf", "_wbuf_len",
socket.py(248):                  "_close"]
socket.py(250):     def __init__(self, sock, mode='rb', bufsize=-1, close=False):
socket.py(276):     def _getclosed(self):
socket.py(278):     closed = property(_getclosed, doc="True if the file is closed")
socket.py(280):     def close(self):
socket.py(289):     def __del__(self):
socket.py(296):     def flush(self):
socket.py(316):     def fileno(self):
socket.py(319):     def write(self, data):
socket.py(330):     def writelines(self, list):
socket.py(340):     def read(self, size=-1):
socket.py(410):     def readline(self, size=-1):
socket.py(515):     def readlines(self, sizehint=0):
socket.py(530):     def __iter__(self):
socket.py(533):     def next(self):
socket.py(539): _GLOBAL_DEFAULT_TIMEOUT = object()
socket.py(541): def create_connection(address, timeout=_GLOBAL_DEFAULT_TIMEOUT,
socket.py(542):                       source_address=None):
platform.py(920):     try:
platform.py(921):         return socket.gethostname()
platform.py(1153):             machine = ''
platform.py(1155):         use_syscmd_ver = 1
platform.py(1158):         if system == 'win32':
platform.py(1159):             release,version,csd,ptype = win32_ver()
 --- modulename: platform, funcname: win32_ver
platform.py(625):     try:
platform.py(626):         from sys import getwindowsversion
platform.py(629):     try:
platform.py(630):         from winreg import OpenKeyEx, QueryValueEx, CloseKey, HKEY_LOCAL_MACHINE
platform.py(631):     except ImportError:
platform.py(632):         from _winreg import OpenKeyEx, QueryValueEx, CloseKey, HKEY_LOCAL_MACHINE
platform.py(634):     winver = getwindowsversion()
platform.py(635):     maj, min, build = _get_real_winver(*winver[:3])
 --- modulename: platform, funcname: _get_real_winver
platform.py(566):     if maj < 6 or (maj == 6 and min < 2):
platform.py(569):     from ctypes import (c_buffer, POINTER, byref, create_unicode_buffer,
platform.py(571):     from ctypes.wintypes import DWORD, HANDLE
platform.py(573):     class VS_FIXEDFILEINFO(Structure):
 --- modulename: platform, funcname: VS_FIXEDFILEINFO
platform.py(573):     class VS_FIXEDFILEINFO(Structure):
platform.py(575):             ("dwSignature", DWORD),
platform.py(576):             ("dwStrucVersion", DWORD),
platform.py(577):             ("dwFileVersionMS", DWORD),
platform.py(578):             ("dwFileVersionLS", DWORD),
platform.py(579):             ("dwProductVersionMS", DWORD),
platform.py(580):             ("dwProductVersionLS", DWORD),
platform.py(581):             ("dwFileFlagsMask", DWORD),
platform.py(582):             ("dwFileFlags", DWORD),
platform.py(583):             ("dwFileOS", DWORD),
platform.py(584):             ("dwFileType", DWORD),
platform.py(585):             ("dwFileSubtype", DWORD),
platform.py(586):             ("dwFileDateMS", DWORD),
platform.py(587):             ("dwFileDateLS", DWORD),
platform.py(590):     kernel32 = WinDLL('kernel32')
 --- modulename: __init__, funcname: __init__
__init__.py(349):         self._name = name
__init__.py(350):         flags = self._func_flags_
__init__.py(351):         if use_errno:
__init__.py(353):         if use_last_error:
__init__.py(356):         class _FuncPtr(_CFuncPtr):
 --- modulename: __init__, funcname: _FuncPtr
__init__.py(356):         class _FuncPtr(_CFuncPtr):
__init__.py(357):             _flags_ = flags
__init__.py(358):             _restype_ = self._func_restype_
__init__.py(359):         self._FuncPtr = _FuncPtr
__init__.py(361):         if handle is None:
__init__.py(362):             self._handle = _dlopen(self._name, mode)
platform.py(591):     version = WinDLL('version')
 --- modulename: __init__, funcname: __init__
__init__.py(349):         self._name = name
__init__.py(350):         flags = self._func_flags_
__init__.py(351):         if use_errno:
__init__.py(353):         if use_last_error:
__init__.py(356):         class _FuncPtr(_CFuncPtr):
 --- modulename: __init__, funcname: _FuncPtr
__init__.py(356):         class _FuncPtr(_CFuncPtr):
__init__.py(357):             _flags_ = flags
__init__.py(358):             _restype_ = self._func_restype_
__init__.py(359):         self._FuncPtr = _FuncPtr
__init__.py(361):         if handle is None:
__init__.py(362):             self._handle = _dlopen(self._name, mode)
platform.py(596):     name_len = actual_len = 130
platform.py(597):     while actual_len == name_len:
platform.py(598):         name_len *= 2
platform.py(599):         name = create_unicode_buffer(name_len)
 --- modulename: __init__, funcname: create_unicode_buffer
__init__.py(299):         if isinstance(init, (str, unicode)):
__init__.py(306):         elif isinstance(init, (int, long)):
__init__.py(307):             buftype = c_wchar * init
__init__.py(308):             buf = buftype()
__init__.py(309):             return buf
platform.py(600):         actual_len = kernel32.GetModuleFileNameW(HANDLE(kernel32._handle),
 --- modulename: __init__, funcname: __getattr__
__init__.py(373):         if name.startswith('__') and name.endswith('__'):
__init__.py(375):         func = self.__getitem__(name)
 --- modulename: __init__, funcname: __getitem__
__init__.py(380):         func = self._FuncPtr((name_or_ordinal, self))
__init__.py(381):         if not isinstance(name_or_ordinal, (int, long)):
__init__.py(382):             func.__name__ = name_or_ordinal
__init__.py(383):         return func
__init__.py(376):         setattr(self, name, func)
__init__.py(377):         return func
platform.py(601):                                                  name, len(name))
platform.py(602):         if not actual_len:
platform.py(597):     while actual_len == name_len:
platform.py(605):     size = version.GetFileVersionInfoSizeW(name, None)
 --- modulename: __init__, funcname: __getattr__
__init__.py(373):         if name.startswith('__') and name.endswith('__'):
__init__.py(375):         func = self.__getitem__(name)
 --- modulename: __init__, funcname: __getitem__
__init__.py(380):         func = self._FuncPtr((name_or_ordinal, self))
__init__.py(381):         if not isinstance(name_or_ordinal, (int, long)):
__init__.py(382):             func.__name__ = name_or_ordinal
__init__.py(383):         return func
__init__.py(376):         setattr(self, name, func)
__init__.py(377):         return func
platform.py(606):     if not size:
platform.py(609):     ver_block = c_buffer(size)
 --- modulename: __init__, funcname: c_buffer
__init__.py(72):     return create_string_buffer(init, size)
 --- modulename: __init__, funcname: create_string_buffer
__init__.py(54):     if isinstance(init, (str, unicode)):
__init__.py(61):     elif isinstance(init, (int, long)):
__init__.py(62):         buftype = c_char * init
__init__.py(63):         buf = buftype()
__init__.py(64):         return buf
platform.py(610):     if (not version.GetFileVersionInfoW(name, None, size, ver_block) or
 --- modulename: __init__, funcname: __getattr__
__init__.py(373):         if name.startswith('__') and name.endswith('__'):
__init__.py(375):         func = self.__getitem__(name)
 --- modulename: __init__, funcname: __getitem__
__init__.py(380):         func = self._FuncPtr((name_or_ordinal, self))
__init__.py(381):         if not isinstance(name_or_ordinal, (int, long)):
__init__.py(382):             func.__name__ = name_or_ordinal
__init__.py(383):         return func
__init__.py(376):         setattr(self, name, func)
__init__.py(377):         return func
platform.py(611):         not ver_block):
platform.py(614):     pvi = POINTER(VS_FIXEDFILEINFO)()
platform.py(615):     if not version.VerQueryValueW(ver_block, "", byref(pvi), byref(DWORD())):
 --- modulename: __init__, funcname: __getattr__
__init__.py(373):         if name.startswith('__') and name.endswith('__'):
__init__.py(375):         func = self.__getitem__(name)
 --- modulename: __init__, funcname: __getitem__
__init__.py(380):         func = self._FuncPtr((name_or_ordinal, self))
__init__.py(381):         if not isinstance(name_or_ordinal, (int, long)):
__init__.py(382):             func.__name__ = name_or_ordinal
__init__.py(383):         return func
__init__.py(376):         setattr(self, name, func)
__init__.py(377):         return func
platform.py(618):     maj = pvi.contents.dwProductVersionMS >> 16
platform.py(619):     min = pvi.contents.dwProductVersionMS & 0xFFFF
platform.py(620):     build = pvi.contents.dwProductVersionLS >> 16
platform.py(622):     return maj, min, build
platform.py(636):     version = '{0}.{1}.{2}'.format(maj, min, build)
platform.py(638):     release = (_WIN32_CLIENT_RELEASES.get((maj, min)) or
platform.py(645):     if winver[:2] == (maj, min):
platform.py(653):     if getattr(winver, 'product', None) == 3:
platform.py(658):     key = None
platform.py(659):     try:
platform.py(660):         key = OpenKeyEx(HKEY_LOCAL_MACHINE,
platform.py(661):                         r'SOFTWARE\Microsoft\Windows NT\CurrentVersion')
platform.py(662):         ptype = QueryValueEx(key, 'CurrentType')[0]
platform.py(666):         if key:
platform.py(667):             CloseKey(key)
platform.py(669):     return release, version, csd, ptype
platform.py(1160):             if release and version:
platform.py(1161):                 use_syscmd_ver = 0
platform.py(1166):             if not machine:
platform.py(1168):                 if "PROCESSOR_ARCHITEW6432" in os.environ:
 --- modulename: os, funcname: __contains__
os.py(445):                 return key.upper() in self.data
platform.py(1169):                     machine = os.environ.get("PROCESSOR_ARCHITEW6432", '')
 --- modulename: os, funcname: get
os.py(447):                 return self.data.get(key.upper(), failobj)
platform.py(1172):             if not processor:
platform.py(1173):                 processor = os.environ.get('PROCESSOR_IDENTIFIER', machine)
 --- modulename: os, funcname: get
os.py(447):                 return self.data.get(key.upper(), failobj)
platform.py(1177):         if use_syscmd_ver:
platform.py(1196):         if system in ('win32','win16'):
platform.py(1197):             if not version:
platform.py(1202):             system = 'Windows'
platform.py(1212):     if system == 'OpenVMS':
platform.py(1228):     if not processor:
platform.py(1233):     if system == 'unknown':
platform.py(1235):     if node == 'unknown':
platform.py(1237):     if release == 'unknown':
platform.py(1239):     if version == 'unknown':
platform.py(1241):     if machine == 'unknown':
platform.py(1243):     if processor == 'unknown':
platform.py(1247):     if system == 'Microsoft' and release == 'Windows':
platform.py(1251):     _uname_cache = system,node,release,version,machine,processor
platform.py(1252):     return _uname_cache
Widget.py(948):             GraphWidget.play_sound_win(_mod_folder + 'resources/sounds/startup.wav')
 --- modulename: Widget, funcname: play_sound_win
Widget.py(984):         t = Thread(target=lambda: winsound.PlaySound(file_name, winsound.SND_FILENAME))
 --- modulename: threading, funcname: __init__
threading.py(670):         assert group is None, "group argument must be None for now"
threading.py(671):         _Verbose.__init__(self, verbose)
 --- modulename: threading, funcname: __init__
threading.py(60):             if verbose is None:
threading.py(61):                 verbose = _VERBOSE
threading.py(62):             self.__verbose = verbose
threading.py(672):         if kwargs is None:
threading.py(673):             kwargs = {}
threading.py(674):         self.__target = target
threading.py(675):         self.__name = str(name or _newname())
 --- modulename: threading, funcname: _newname
threading.py(621):     return template % _counter()
threading.py(676):         self.__args = args
threading.py(677):         self.__kwargs = kwargs
threading.py(678):         self.__daemonic = self._set_daemon()
 --- modulename: threading, funcname: _set_daemon
threading.py(702):         return current_thread().daemon
 --- modulename: threading, funcname: currentThread
threading.py(1150):     try:
threading.py(1151):         return _active[_get_ident()]
 --- modulename: threading, funcname: daemon
threading.py(1012):         assert self.__initialized, "Thread.__init__() not called"
threading.py(1013):         return self.__daemonic
threading.py(679):         self.__ident = None
threading.py(680):         self.__started = Event()
 --- modulename: threading, funcname: Event
threading.py(550):     return _Event(*args, **kwargs)
 --- modulename: threading, funcname: __init__
threading.py(562):         _Verbose.__init__(self, verbose)
 --- modulename: threading, funcname: __init__
threading.py(60):             if verbose is None:
threading.py(61):                 verbose = _VERBOSE
threading.py(62):             self.__verbose = verbose
threading.py(563):         self.__cond = Condition(Lock())
 --- modulename: threading, funcname: Condition
threading.py(253):     return _Condition(*args, **kwargs)
 --- modulename: threading, funcname: __init__
threading.py(261):         _Verbose.__init__(self, verbose)
 --- modulename: threading, funcname: __init__
threading.py(60):             if verbose is None:
threading.py(61):                 verbose = _VERBOSE
threading.py(62):             self.__verbose = verbose
threading.py(262):         if lock is None:
threading.py(264):         self.__lock = lock
threading.py(266):         self.acquire = lock.acquire
threading.py(267):         self.release = lock.release
threading.py(271):         try:
threading.py(272):             self._release_save = lock._release_save
threading.py(273):         except AttributeError:
threading.py(274):             pass
threading.py(275):         try:
threading.py(276):             self._acquire_restore = lock._acquire_restore
threading.py(277):         except AttributeError:
threading.py(278):             pass
threading.py(279):         try:
threading.py(280):             self._is_owned = lock._is_owned
threading.py(281):         except AttributeError:
threading.py(282):             pass
threading.py(283):         self.__waiters = []
threading.py(564):         self.__flag = False
threading.py(681):         self.__stopped = False
threading.py(682):         self.__block = Condition(Lock())
 --- modulename: threading, funcname: Condition
threading.py(253):     return _Condition(*args, **kwargs)
 --- modulename: threading, funcname: __init__
threading.py(261):         _Verbose.__init__(self, verbose)
 --- modulename: threading, funcname: __init__
threading.py(60):             if verbose is None:
threading.py(61):                 verbose = _VERBOSE
threading.py(62):             self.__verbose = verbose
threading.py(262):         if lock is None:
threading.py(264):         self.__lock = lock
threading.py(266):         self.acquire = lock.acquire
threading.py(267):         self.release = lock.release
threading.py(271):         try:
threading.py(272):             self._release_save = lock._release_save
threading.py(273):         except AttributeError:
threading.py(274):             pass
threading.py(275):         try:
threading.py(276):             self._acquire_restore = lock._acquire_restore
threading.py(277):         except AttributeError:
threading.py(278):             pass
threading.py(279):         try:
threading.py(280):             self._is_owned = lock._is_owned
threading.py(281):         except AttributeError:
threading.py(282):             pass
threading.py(283):         self.__waiters = []
threading.py(683):         self.__initialized = True
threading.py(686):         self.__stderr = _sys.stderr
Widget.py(985):         t.start()
 --- modulename: threading, funcname: start
threading.py(727):         if not self.__initialized:
threading.py(729):         if self.__started.is_set():
 --- modulename: threading, funcname: isSet
threading.py(572):         return self.__flag
threading.py(732):             self._note("%s.start(): starting thread", self)
 --- modulename: threading, funcname: _note
threading.py(65):             if self.__verbose:
threading.py(733):         with _active_limbo_lock:
threading.py(734):             _limbo[self] = self
threading.py(735):         try:
threading.py(736):             _start_new_thread(self.__bootstrap, ())
threading.py(741):         self.__started.wait()
 --- modulename: threading, funcname: wait
threading.py(612):         with self.__cond:
 --- modulename: threading, funcname: __enter__
threading.py(286):         return self.__lock.__enter__()
threading.py(613):             if not self.__flag:
threading.py(614):                 self.__cond.wait(timeout)
 --- modulename: threading, funcname: wait
threading.py(332):         if not self._is_owned():
 --- modulename: threading, funcname: _is_owned
threading.py(303):         if self.__lock.acquire(0):
threading.py(307):             return True
threading.py(334):         waiter = _allocate_lock()
threading.py(335):         waiter.acquire()
threading.py(336):         self.__waiters.append(waiter)
threading.py(337):         saved_state = self._release_save()
 --- modulename: threading, funcname: _release_save
threading.py(295):         self.__lock.release()           # No state to save
threading.py(338):         try:    # restore state no matter what (e.g., KeyboardInterrupt)
threading.py(339):             if timeout is None:
threading.py(340):                 waiter.acquire()
 --- modulename: threading, funcname: run
 threading.py(342):                     self._note("%s.wait(): got it", self)
threading.py(752):         try:
threading.py(753):             if self.__target:
 --- modulename: threading, funcname: _note
 threading.py(754):                 self.__target(*self.__args, **self.__kwargs)
threading.py(65):             if self.__verbose:
 --- modulename: Widget, funcname: <lambda>
 threading.py(371):             self._acquire_restore(saved_state)
Widget.py(984):         t = Thread(target=lambda: winsound.PlaySound(file_name, winsound.SND_FILENAME))
 --- modulename: threading, funcname: _acquire_restore
threading.py(298):         self.__lock.acquire()           # Ignore saved state
threading.py(615):             return self.__flag
 --- modulename: threading, funcname: __exit__
threading.py(289):         return self.__lock.__exit__(*args)
Launcher.py(15):         self.node_box = Widget.NodesBox(self.G)
 --- modulename: Widget, funcname: __init__
Widget.py(364):         super(NodesBox, self).__init__(graph)
Widget.py(365):         self.graph = weakref.ref(graph)
Widget.py(366):         self.setWindowFlags(QtCore.Qt.WindowTitleHint | QtCore.Qt.CustomizeWindowHint)
Widget.py(367):         self.setObjectName("nodes_box_form")
Widget.py(368):         self.setWindowTitle('Node box - {0}'.format(self.graph().name))
Widget.py(370):         self.resize(160, 200)
Widget.py(371):         self.setSizePolicy(QtGui.QSizePolicy.Minimum, QtGui.QSizePolicy.Minimum)
Widget.py(372):         self.name = 'NODE_BOX'
Widget.py(374):         self.switch_button = QtGui.QPushButton("go to list mode")
Widget.py(375):         self.switch_button.clicked.connect(self.swap_appearance)
Widget.py(377):         self.verticalLayout = QtGui.QVBoxLayout(self)
Widget.py(378):         self.verticalLayout.setSpacing(2)
Widget.py(379):         self.verticalLayout.setContentsMargins(2, 2, 2, 2)
Widget.py(380):         self.verticalLayout.setObjectName("verticalLayout")
Widget.py(381):         self.le_nodes = NodeBoxLineEdit(self)
 --- modulename: Widget, funcname: __init__
Widget.py(279):         super(NodeBoxLineEdit, self).__init__(parent)
Widget.py(280):         self.setParent(parent)
Widget.py(281):         self._events = events
Widget.py(282):         self.parent = parent
Widget.py(283):         self.setLocale(QtCore.QLocale(QtCore.QLocale.English,
Widget.py(284):                        QtCore.QLocale.UnitedStates))
Widget.py(285):         self.setObjectName("le_nodes")
Widget.py(288):                 "font-size: 14px;" +\
Widget.py(289):                 "border-color: black; border-style: outset; border-width: 1px;"
Widget.py(290):         self.setStyleSheet(style)
Widget.py(291):         self.setPlaceholderText("enter node name..")
Widget.py(292):         self.setVisible(False)
Widget.py(382):         self.le_nodes.textChanged.connect(self.le_text_changed)
Widget.py(383):         self.verticalLayout.addWidget(self.switch_button)
Widget.py(384):         self.verticalLayout.addWidget(self.le_nodes)
Widget.py(385):         self.listWidget = NodesBoxListWidget(self)
 --- modulename: Widget, funcname: __init__
Widget.py(237):         super(NodesBoxListWidget, self).__init__(parent)
Widget.py(238):         self.parent_item = weakref.ref(parent)
Widget.py(239):         self._events = events
Widget.py(244):                 "font-size: 14px;" +\
Widget.py(245):                 "border-color: black; border-style: outset; border-width: 1px;"
Widget.py(246):         self.setStyleSheet(style)
Widget.py(247):         self.setParent(parent)
Widget.py(248):         self.setFrameShape(QtGui.QFrame.NoFrame)
Widget.py(249):         self.setFrameShadow(QtGui.QFrame.Sunken)
Widget.py(250):         self.setObjectName("lw_nodes")
Widget.py(251):         self.setSortingEnabled(True)
Widget.py(252):         self.setDragEnabled(True)
Widget.py(253):         self.setDragDropMode(QtGui.QAbstractItemView.DragOnly)
Widget.py(254):         self.setFocusPolicy(QtCore.Qt.StrongFocus)
Widget.py(386):         self.verticalLayout.addWidget(self.listWidget)
Widget.py(387):         self.listWidget.setVisible(False)
Widget.py(388):         self.setVisible(False)
Widget.py(389):         self.refresh_list('')
 --- modulename: Widget, funcname: refresh_list
Widget.py(413):         self.listWidget.clear()
Widget.py(414):         node_file_names = get_nodes_file_names()
 --- modulename: Widget, funcname: get_nodes_file_names
Widget.py(35):     return [i[:-3] for i in listdir(nodes_path) if i.endswith('.py') and '__init__' not in i]
Widget.py(35):     return [i[:-3] for i in listdir(nodes_path) if i.endswith('.py') and '__init__' not in i]
Widget.py(35):     return [i[:-3] for i in listdir(nodes_path) if i.endswith('.py') and '__init__' not in i]
Widget.py(35):     return [i[:-3] for i in listdir(nodes_path) if i.endswith('.py') and '__init__' not in i]
Widget.py(35):     return [i[:-3] for i in listdir(nodes_path) if i.endswith('.py') and '__init__' not in i]
Widget.py(35):     return [i[:-3] for i in listdir(nodes_path) if i.endswith('.py') and '__init__' not in i]
Widget.py(35):     return [i[:-3] for i in listdir(nodes_path) if i.endswith('.py') and '__init__' not in i]
Widget.py(35):     return [i[:-3] for i in listdir(nodes_path) if i.endswith('.py') and '__init__' not in i]
Widget.py(35):     return [i[:-3] for i in listdir(nodes_path) if i.endswith('.py') and '__init__' not in i]
Widget.py(35):     return [i[:-3] for i in listdir(nodes_path) if i.endswith('.py') and '__init__' not in i]
Widget.py(35):     return [i[:-3] for i in listdir(nodes_path) if i.endswith('.py') and '__init__' not in i]
Widget.py(35):     return [i[:-3] for i in listdir(nodes_path) if i.endswith('.py') and '__init__' not in i]
Widget.py(35):     return [i[:-3] for i in listdir(nodes_path) if i.endswith('.py') and '__init__' not in i]
Widget.py(35):     return [i[:-3] for i in listdir(nodes_path) if i.endswith('.py') and '__init__' not in i]
Widget.py(35):     return [i[:-3] for i in listdir(nodes_path) if i.endswith('.py') and '__init__' not in i]
Widget.py(35):     return [i[:-3] for i in listdir(nodes_path) if i.endswith('.py') and '__init__' not in i]
Widget.py(35):     return [i[:-3] for i in listdir(nodes_path) if i.endswith('.py') and '__init__' not in i]
Widget.py(35):     return [i[:-3] for i in listdir(nodes_path) if i.endswith('.py') and '__init__' not in i]
Widget.py(35):     return [i[:-3] for i in listdir(nodes_path) if i.endswith('.py') and '__init__' not in i]
Widget.py(35):     return [i[:-3] for i in listdir(nodes_path) if i.endswith('.py') and '__init__' not in i]
Widget.py(35):     return [i[:-3] for i in listdir(nodes_path) if i.endswith('.py') and '__init__' not in i]
Widget.py(35):     return [i[:-3] for i in listdir(nodes_path) if i.endswith('.py') and '__init__' not in i]
Widget.py(35):     return [i[:-3] for i in listdir(nodes_path) if i.endswith('.py') and '__init__' not in i]
Widget.py(35):     return [i[:-3] for i in listdir(nodes_path) if i.endswith('.py') and '__init__' not in i]
Widget.py(35):     return [i[:-3] for i in listdir(nodes_path) if i.endswith('.py') and '__init__' not in i]
Widget.py(35):     return [i[:-3] for i in listdir(nodes_path) if i.endswith('.py') and '__init__' not in i]
Widget.py(35):     return [i[:-3] for i in listdir(nodes_path) if i.endswith('.py') and '__init__' not in i]
Widget.py(35):     return [i[:-3] for i in listdir(nodes_path) if i.endswith('.py') and '__init__' not in i]
Widget.py(35):     return [i[:-3] for i in listdir(nodes_path) if i.endswith('.py') and '__init__' not in i]
Widget.py(35):     return [i[:-3] for i in listdir(nodes_path) if i.endswith('.py') and '__init__' not in i]
Widget.py(35):     return [i[:-3] for i in listdir(nodes_path) if i.endswith('.py') and '__init__' not in i]
Widget.py(35):     return [i[:-3] for i in listdir(nodes_path) if i.endswith('.py') and '__init__' not in i]
Widget.py(35):     return [i[:-3] for i in listdir(nodes_path) if i.endswith('.py') and '__init__' not in i]
Widget.py(35):     return [i[:-3] for i in listdir(nodes_path) if i.endswith('.py') and '__init__' not in i]
Widget.py(35):     return [i[:-3] for i in listdir(nodes_path) if i.endswith('.py') and '__init__' not in i]
Widget.py(35):     return [i[:-3] for i in listdir(nodes_path) if i.endswith('.py') and '__init__' not in i]
Widget.py(35):     return [i[:-3] for i in listdir(nodes_path) if i.endswith('.py') and '__init__' not in i]
Widget.py(35):     return [i[:-3] for i in listdir(nodes_path) if i.endswith('.py') and '__init__' not in i]
Widget.py(35):     return [i[:-3] for i in listdir(nodes_path) if i.endswith('.py') and '__init__' not in i]
Widget.py(35):     return [i[:-3] for i in listdir(nodes_path) if i.endswith('.py') and '__init__' not in i]
Widget.py(35):     return [i[:-3] for i in listdir(nodes_path) if i.endswith('.py') and '__init__' not in i]
Widget.py(35):     return [i[:-3] for i in listdir(nodes_path) if i.endswith('.py') and '__init__' not in i]
Widget.py(35):     return [i[:-3] for i in listdir(nodes_path) if i.endswith('.py') and '__init__' not in i]
Widget.py(35):     return [i[:-3] for i in listdir(nodes_path) if i.endswith('.py') and '__init__' not in i]
Widget.py(35):     return [i[:-3] for i in listdir(nodes_path) if i.endswith('.py') and '__init__' not in i]
Widget.py(35):     return [i[:-3] for i in listdir(nodes_path) if i.endswith('.py') and '__init__' not in i]
Widget.py(35):     return [i[:-3] for i in listdir(nodes_path) if i.endswith('.py') and '__init__' not in i]
Widget.py(35):     return [i[:-3] for i in listdir(nodes_path) if i.endswith('.py') and '__init__' not in i]
Widget.py(35):     return [i[:-3] for i in listdir(nodes_path) if i.endswith('.py') and '__init__' not in i]
Widget.py(35):     return [i[:-3] for i in listdir(nodes_path) if i.endswith('.py') and '__init__' not in i]
Widget.py(35):     return [i[:-3] for i in listdir(nodes_path) if i.endswith('.py') and '__init__' not in i]
Widget.py(35):     return [i[:-3] for i in listdir(nodes_path) if i.endswith('.py') and '__init__' not in i]
Widget.py(35):     return [i[:-3] for i in listdir(nodes_path) if i.endswith('.py') and '__init__' not in i]
Widget.py(35):     return [i[:-3] for i in listdir(nodes_path) if i.endswith('.py') and '__init__' not in i]
Widget.py(35):     return [i[:-3] for i in listdir(nodes_path) if i.endswith('.py') and '__init__' not in i]
Widget.py(35):     return [i[:-3] for i in listdir(nodes_path) if i.endswith('.py') and '__init__' not in i]
Widget.py(35):     return [i[:-3] for i in listdir(nodes_path) if i.endswith('.py') and '__init__' not in i]
Widget.py(35):     return [i[:-3] for i in listdir(nodes_path) if i.endswith('.py') and '__init__' not in i]
Widget.py(35):     return [i[:-3] for i in listdir(nodes_path) if i.endswith('.py') and '__init__' not in i]
Widget.py(35):     return [i[:-3] for i in listdir(nodes_path) if i.endswith('.py') and '__init__' not in i]
Widget.py(35):     return [i[:-3] for i in listdir(nodes_path) if i.endswith('.py') and '__init__' not in i]
Widget.py(35):     return [i[:-3] for i in listdir(nodes_path) if i.endswith('.py') and '__init__' not in i]
Widget.py(35):     return [i[:-3] for i in listdir(nodes_path) if i.endswith('.py') and '__init__' not in i]
Widget.py(35):     return [i[:-3] for i in listdir(nodes_path) if i.endswith('.py') and '__init__' not in i]
Widget.py(35):     return [i[:-3] for i in listdir(nodes_path) if i.endswith('.py') and '__init__' not in i]
Widget.py(35):     return [i[:-3] for i in listdir(nodes_path) if i.endswith('.py') and '__init__' not in i]
Widget.py(35):     return [i[:-3] for i in listdir(nodes_path) if i.endswith('.py') and '__init__' not in i]
Widget.py(35):     return [i[:-3] for i in listdir(nodes_path) if i.endswith('.py') and '__init__' not in i]
Widget.py(35):     return [i[:-3] for i in listdir(nodes_path) if i.endswith('.py') and '__init__' not in i]
Widget.py(35):     return [i[:-3] for i in listdir(nodes_path) if i.endswith('.py') and '__init__' not in i]
Widget.py(35):     return [i[:-3] for i in listdir(nodes_path) if i.endswith('.py') and '__init__' not in i]
Widget.py(35):     return [i[:-3] for i in listdir(nodes_path) if i.endswith('.py') and '__init__' not in i]
Widget.py(35):     return [i[:-3] for i in listdir(nodes_path) if i.endswith('.py') and '__init__' not in i]
Widget.py(35):     return [i[:-3] for i in listdir(nodes_path) if i.endswith('.py') and '__init__' not in i]
Widget.py(35):     return [i[:-3] for i in listdir(nodes_path) if i.endswith('.py') and '__init__' not in i]
Widget.py(35):     return [i[:-3] for i in listdir(nodes_path) if i.endswith('.py') and '__init__' not in i]
Widget.py(35):     return [i[:-3] for i in listdir(nodes_path) if i.endswith('.py') and '__init__' not in i]
Widget.py(35):     return [i[:-3] for i in listdir(nodes_path) if i.endswith('.py') and '__init__' not in i]
Widget.py(35):     return [i[:-3] for i in listdir(nodes_path) if i.endswith('.py') and '__init__' not in i]
Widget.py(35):     return [i[:-3] for i in listdir(nodes_path) if i.endswith('.py') and '__init__' not in i]
Widget.py(35):     return [i[:-3] for i in listdir(nodes_path) if i.endswith('.py') and '__init__' not in i]
Widget.py(35):     return [i[:-3] for i in listdir(nodes_path) if i.endswith('.py') and '__init__' not in i]
Widget.py(35):     return [i[:-3] for i in listdir(nodes_path) if i.endswith('.py') and '__init__' not in i]
Widget.py(35):     return [i[:-3] for i in listdir(nodes_path) if i.endswith('.py') and '__init__' not in i]
Widget.py(35):     return [i[:-3] for i in listdir(nodes_path) if i.endswith('.py') and '__init__' not in i]
Widget.py(35):     return [i[:-3] for i in listdir(nodes_path) if i.endswith('.py') and '__init__' not in i]
Widget.py(415):         self.listWidget.addItems([i for i in node_file_names if pattern.lower() in i.lower()])
Widget.py(415):         self.listWidget.addItems([i for i in node_file_names if pattern.lower() in i.lower()])
Widget.py(415):         self.listWidget.addItems([i for i in node_file_names if pattern.lower() in i.lower()])
Widget.py(415):         self.listWidget.addItems([i for i in node_file_names if pattern.lower() in i.lower()])
Widget.py(415):         self.listWidget.addItems([i for i in node_file_names if pattern.lower() in i.lower()])
Widget.py(415):         self.listWidget.addItems([i for i in node_file_names if pattern.lower() in i.lower()])
Widget.py(415):         self.listWidget.addItems([i for i in node_file_names if pattern.lower() in i.lower()])
Widget.py(415):         self.listWidget.addItems([i for i in node_file_names if pattern.lower() in i.lower()])
Widget.py(415):         self.listWidget.addItems([i for i in node_file_names if pattern.lower() in i.lower()])
Widget.py(415):         self.listWidget.addItems([i for i in node_file_names if pattern.lower() in i.lower()])
Widget.py(415):         self.listWidget.addItems([i for i in node_file_names if pattern.lower() in i.lower()])
Widget.py(415):         self.listWidget.addItems([i for i in node_file_names if pattern.lower() in i.lower()])
Widget.py(415):         self.listWidget.addItems([i for i in node_file_names if pattern.lower() in i.lower()])
Widget.py(415):         self.listWidget.addItems([i for i in node_file_names if pattern.lower() in i.lower()])
Widget.py(415):         self.listWidget.addItems([i for i in node_file_names if pattern.lower() in i.lower()])
Widget.py(415):         self.listWidget.addItems([i for i in node_file_names if pattern.lower() in i.lower()])
Widget.py(415):         self.listWidget.addItems([i for i in node_file_names if pattern.lower() in i.lower()])
Widget.py(415):         self.listWidget.addItems([i for i in node_file_names if pattern.lower() in i.lower()])
Widget.py(415):         self.listWidget.addItems([i for i in node_file_names if pattern.lower() in i.lower()])
Widget.py(415):         self.listWidget.addItems([i for i in node_file_names if pattern.lower() in i.lower()])
Widget.py(415):         self.listWidget.addItems([i for i in node_file_names if pattern.lower() in i.lower()])
Widget.py(415):         self.listWidget.addItems([i for i in node_file_names if pattern.lower() in i.lower()])
Widget.py(415):         self.listWidget.addItems([i for i in node_file_names if pattern.lower() in i.lower()])
Widget.py(415):         self.listWidget.addItems([i for i in node_file_names if pattern.lower() in i.lower()])
Widget.py(415):         self.listWidget.addItems([i for i in node_file_names if pattern.lower() in i.lower()])
Widget.py(415):         self.listWidget.addItems([i for i in node_file_names if pattern.lower() in i.lower()])
Widget.py(415):         self.listWidget.addItems([i for i in node_file_names if pattern.lower() in i.lower()])
Widget.py(415):         self.listWidget.addItems([i for i in node_file_names if pattern.lower() in i.lower()])
Widget.py(415):         self.listWidget.addItems([i for i in node_file_names if pattern.lower() in i.lower()])
Widget.py(415):         self.listWidget.addItems([i for i in node_file_names if pattern.lower() in i.lower()])
Widget.py(415):         self.listWidget.addItems([i for i in node_file_names if pattern.lower() in i.lower()])
Widget.py(415):         self.listWidget.addItems([i for i in node_file_names if pattern.lower() in i.lower()])
Widget.py(415):         self.listWidget.addItems([i for i in node_file_names if pattern.lower() in i.lower()])
Widget.py(415):         self.listWidget.addItems([i for i in node_file_names if pattern.lower() in i.lower()])
Widget.py(415):         self.listWidget.addItems([i for i in node_file_names if pattern.lower() in i.lower()])
Widget.py(415):         self.listWidget.addItems([i for i in node_file_names if pattern.lower() in i.lower()])
Widget.py(415):         self.listWidget.addItems([i for i in node_file_names if pattern.lower() in i.lower()])
Widget.py(415):         self.listWidget.addItems([i for i in node_file_names if pattern.lower() in i.lower()])
Widget.py(415):         self.listWidget.addItems([i for i in node_file_names if pattern.lower() in i.lower()])
Widget.py(415):         self.listWidget.addItems([i for i in node_file_names if pattern.lower() in i.lower()])
Widget.py(415):         self.listWidget.addItems([i for i in node_file_names if pattern.lower() in i.lower()])
Widget.py(415):         self.listWidget.addItems([i for i in node_file_names if pattern.lower() in i.lower()])
Widget.py(416):         item = self.listWidget.itemAt(0, 0)
Widget.py(417):         if item and not item.isSelected():
Widget.py(418):             item.setSelected(True)
Widget.py(390):         self.tree_widget = NodeBoxTreeWidget(self.graph())
 --- modulename: Widget, funcname: __init__
Widget.py(304):         super(NodeBoxTreeWidget, self).__init__(parent)
Widget.py(309):                 "font-size: 14px;" +\
Widget.py(310):                 "border-color: black; border-style: outset; border-width: 1px;"
Widget.py(311):         self.graph = weakref.ref(parent)
Widget.py(312):         self.setStyleSheet(style)
Widget.py(313):         self.setParent(parent)
Widget.py(314):         self.setFrameShape(QtGui.QFrame.NoFrame)
Widget.py(315):         self.setFrameShadow(QtGui.QFrame.Sunken)
Widget.py(316):         self.setObjectName("tree_nodes")
Widget.py(317):         self.setSortingEnabled(True)
Widget.py(318):         self.setDragEnabled(True)
Widget.py(319):         self.setColumnCount(1)
Widget.py(320):         self.setHeaderHidden(True)
Widget.py(321):         self.setDragDropMode(QtGui.QAbstractItemView.DragOnly)
Widget.py(322):         self.categories = {}
Widget.py(323):         self.setFocusPolicy(QtCore.Qt.StrongFocus)
Widget.py(391):         self.verticalLayout.addWidget(self.tree_widget)
Widget.py(392):         self.tree_widget.refresh()
 --- modulename: Widget, funcname: refresh
Widget.py(326):         self.clear()
Widget.py(327):         for node_file_name in get_nodes_file_names():
 --- modulename: Widget, funcname: get_nodes_file_names
Widget.py(35):     return [i[:-3] for i in listdir(nodes_path) if i.endswith('.py') and '__init__' not in i]
Widget.py(35):     return [i[:-3] for i in listdir(nodes_path) if i.endswith('.py') and '__init__' not in i]
Widget.py(35):     return [i[:-3] for i in listdir(nodes_path) if i.endswith('.py') and '__init__' not in i]
Widget.py(35):     return [i[:-3] for i in listdir(nodes_path) if i.endswith('.py') and '__init__' not in i]
Widget.py(35):     return [i[:-3] for i in listdir(nodes_path) if i.endswith('.py') and '__init__' not in i]
Widget.py(35):     return [i[:-3] for i in listdir(nodes_path) if i.endswith('.py') and '__init__' not in i]
Widget.py(35):     return [i[:-3] for i in listdir(nodes_path) if i.endswith('.py') and '__init__' not in i]
Widget.py(35):     return [i[:-3] for i in listdir(nodes_path) if i.endswith('.py') and '__init__' not in i]
Widget.py(35):     return [i[:-3] for i in listdir(nodes_path) if i.endswith('.py') and '__init__' not in i]
Widget.py(35):     return [i[:-3] for i in listdir(nodes_path) if i.endswith('.py') and '__init__' not in i]
Widget.py(35):     return [i[:-3] for i in listdir(nodes_path) if i.endswith('.py') and '__init__' not in i]
Widget.py(35):     return [i[:-3] for i in listdir(nodes_path) if i.endswith('.py') and '__init__' not in i]
Widget.py(35):     return [i[:-3] for i in listdir(nodes_path) if i.endswith('.py') and '__init__' not in i]
Widget.py(35):     return [i[:-3] for i in listdir(nodes_path) if i.endswith('.py') and '__init__' not in i]
Widget.py(35):     return [i[:-3] for i in listdir(nodes_path) if i.endswith('.py') and '__init__' not in i]
Widget.py(35):     return [i[:-3] for i in listdir(nodes_path) if i.endswith('.py') and '__init__' not in i]
Widget.py(35):     return [i[:-3] for i in listdir(nodes_path) if i.endswith('.py') and '__init__' not in i]
Widget.py(35):     return [i[:-3] for i in listdir(nodes_path) if i.endswith('.py') and '__init__' not in i]
Widget.py(35):     return [i[:-3] for i in listdir(nodes_path) if i.endswith('.py') and '__init__' not in i]
Widget.py(35):     return [i[:-3] for i in listdir(nodes_path) if i.endswith('.py') and '__init__' not in i]
Widget.py(35):     return [i[:-3] for i in listdir(nodes_path) if i.endswith('.py') and '__init__' not in i]
Widget.py(35):     return [i[:-3] for i in listdir(nodes_path) if i.endswith('.py') and '__init__' not in i]
Widget.py(35):     return [i[:-3] for i in listdir(nodes_path) if i.endswith('.py') and '__init__' not in i]
Widget.py(35):     return [i[:-3] for i in listdir(nodes_path) if i.endswith('.py') and '__init__' not in i]
Widget.py(35):     return [i[:-3] for i in listdir(nodes_path) if i.endswith('.py') and '__init__' not in i]
Widget.py(35):     return [i[:-3] for i in listdir(nodes_path) if i.endswith('.py') and '__init__' not in i]
Widget.py(35):     return [i[:-3] for i in listdir(nodes_path) if i.endswith('.py') and '__init__' not in i]
Widget.py(35):     return [i[:-3] for i in listdir(nodes_path) if i.endswith('.py') and '__init__' not in i]
Widget.py(35):     return [i[:-3] for i in listdir(nodes_path) if i.endswith('.py') and '__init__' not in i]
Widget.py(35):     return [i[:-3] for i in listdir(nodes_path) if i.endswith('.py') and '__init__' not in i]
Widget.py(35):     return [i[:-3] for i in listdir(nodes_path) if i.endswith('.py') and '__init__' not in i]
Widget.py(35):     return [i[:-3] for i in listdir(nodes_path) if i.endswith('.py') and '__init__' not in i]
Widget.py(35):     return [i[:-3] for i in listdir(nodes_path) if i.endswith('.py') and '__init__' not in i]
Widget.py(35):     return [i[:-3] for i in listdir(nodes_path) if i.endswith('.py') and '__init__' not in i]
Widget.py(35):     return [i[:-3] for i in listdir(nodes_path) if i.endswith('.py') and '__init__' not in i]
Widget.py(35):     return [i[:-3] for i in listdir(nodes_path) if i.endswith('.py') and '__init__' not in i]
Widget.py(35):     return [i[:-3] for i in listdir(nodes_path) if i.endswith('.py') and '__init__' not in i]
Widget.py(35):     return [i[:-3] for i in listdir(nodes_path) if i.endswith('.py') and '__init__' not in i]
Widget.py(35):     return [i[:-3] for i in listdir(nodes_path) if i.endswith('.py') and '__init__' not in i]
Widget.py(35):     return [i[:-3] for i in listdir(nodes_path) if i.endswith('.py') and '__init__' not in i]
Widget.py(35):     return [i[:-3] for i in listdir(nodes_path) if i.endswith('.py') and '__init__' not in i]
Widget.py(35):     return [i[:-3] for i in listdir(nodes_path) if i.endswith('.py') and '__init__' not in i]
Widget.py(35):     return [i[:-3] for i in listdir(nodes_path) if i.endswith('.py') and '__init__' not in i]
Widget.py(35):     return [i[:-3] for i in listdir(nodes_path) if i.endswith('.py') and '__init__' not in i]
Widget.py(35):     return [i[:-3] for i in listdir(nodes_path) if i.endswith('.py') and '__init__' not in i]
Widget.py(35):     return [i[:-3] for i in listdir(nodes_path) if i.endswith('.py') and '__init__' not in i]
Widget.py(35):     return [i[:-3] for i in listdir(nodes_path) if i.endswith('.py') and '__init__' not in i]
Widget.py(35):     return [i[:-3] for i in listdir(nodes_path) if i.endswith('.py') and '__init__' not in i]
Widget.py(35):     return [i[:-3] for i in listdir(nodes_path) if i.endswith('.py') and '__init__' not in i]
Widget.py(35):     return [i[:-3] for i in listdir(nodes_path) if i.endswith('.py') and '__init__' not in i]
Widget.py(35):     return [i[:-3] for i in listdir(nodes_path) if i.endswith('.py') and '__init__' not in i]
Widget.py(35):     return [i[:-3] for i in listdir(nodes_path) if i.endswith('.py') and '__init__' not in i]
Widget.py(35):     return [i[:-3] for i in listdir(nodes_path) if i.endswith('.py') and '__init__' not in i]
Widget.py(35):     return [i[:-3] for i in listdir(nodes_path) if i.endswith('.py') and '__init__' not in i]
Widget.py(35):     return [i[:-3] for i in listdir(nodes_path) if i.endswith('.py') and '__init__' not in i]
Widget.py(35):     return [i[:-3] for i in listdir(nodes_path) if i.endswith('.py') and '__init__' not in i]
Widget.py(35):     return [i[:-3] for i in listdir(nodes_path) if i.endswith('.py') and '__init__' not in i]
Widget.py(35):     return [i[:-3] for i in listdir(nodes_path) if i.endswith('.py') and '__init__' not in i]
Widget.py(35):     return [i[:-3] for i in listdir(nodes_path) if i.endswith('.py') and '__init__' not in i]
Widget.py(35):     return [i[:-3] for i in listdir(nodes_path) if i.endswith('.py') and '__init__' not in i]
Widget.py(35):     return [i[:-3] for i in listdir(nodes_path) if i.endswith('.py') and '__init__' not in i]
Widget.py(35):     return [i[:-3] for i in listdir(nodes_path) if i.endswith('.py') and '__init__' not in i]
Widget.py(35):     return [i[:-3] for i in listdir(nodes_path) if i.endswith('.py') and '__init__' not in i]
Widget.py(35):     return [i[:-3] for i in listdir(nodes_path) if i.endswith('.py') and '__init__' not in i]
Widget.py(35):     return [i[:-3] for i in listdir(nodes_path) if i.endswith('.py') and '__init__' not in i]
Widget.py(35):     return [i[:-3] for i in listdir(nodes_path) if i.endswith('.py') and '__init__' not in i]
Widget.py(35):     return [i[:-3] for i in listdir(nodes_path) if i.endswith('.py') and '__init__' not in i]
Widget.py(35):     return [i[:-3] for i in listdir(nodes_path) if i.endswith('.py') and '__init__' not in i]
Widget.py(35):     return [i[:-3] for i in listdir(nodes_path) if i.endswith('.py') and '__init__' not in i]
Widget.py(35):     return [i[:-3] for i in listdir(nodes_path) if i.endswith('.py') and '__init__' not in i]
Widget.py(35):     return [i[:-3] for i in listdir(nodes_path) if i.endswith('.py') and '__init__' not in i]
Widget.py(35):     return [i[:-3] for i in listdir(nodes_path) if i.endswith('.py') and '__init__' not in i]
Widget.py(35):     return [i[:-3] for i in listdir(nodes_path) if i.endswith('.py') and '__init__' not in i]
Widget.py(35):     return [i[:-3] for i in listdir(nodes_path) if i.endswith('.py') and '__init__' not in i]
Widget.py(35):     return [i[:-3] for i in listdir(nodes_path) if i.endswith('.py') and '__init__' not in i]
Widget.py(35):     return [i[:-3] for i in listdir(nodes_path) if i.endswith('.py') and '__init__' not in i]
Widget.py(35):     return [i[:-3] for i in listdir(nodes_path) if i.endswith('.py') and '__init__' not in i]
Widget.py(35):     return [i[:-3] for i in listdir(nodes_path) if i.endswith('.py') and '__init__' not in i]
Widget.py(35):     return [i[:-3] for i in listdir(nodes_path) if i.endswith('.py') and '__init__' not in i]
Widget.py(35):     return [i[:-3] for i in listdir(nodes_path) if i.endswith('.py') and '__init__' not in i]
Widget.py(35):     return [i[:-3] for i in listdir(nodes_path) if i.endswith('.py') and '__init__' not in i]
Widget.py(35):     return [i[:-3] for i in listdir(nodes_path) if i.endswith('.py') and '__init__' not in i]
Widget.py(35):     return [i[:-3] for i in listdir(nodes_path) if i.endswith('.py') and '__init__' not in i]
Widget.py(35):     return [i[:-3] for i in listdir(nodes_path) if i.endswith('.py') and '__init__' not in i]
Widget.py(35):     return [i[:-3] for i in listdir(nodes_path) if i.endswith('.py') and '__init__' not in i]
Widget.py(35):     return [i[:-3] for i in listdir(nodes_path) if i.endswith('.py') and '__init__' not in i]
Widget.py(328):             node_class = getattr(Nodes, node_file_name)
Widget.py(329):             category_name = node_class.get_category()
 --- modulename: Abs, funcname: get_category
Abs.py(19):         return 'Math'
Widget.py(330):             if category_name not in self.categories:
Widget.py(331):                 CatItem = QtGui.QTreeWidgetItem(self)
Widget.py(332):                 CatItem.setText(0, category_name)
Widget.py(333):                 self.categories[category_name] = CatItem
Widget.py(334):             NodeItem = QtGui.QTreeWidgetItem(self.categories[category_name])
Widget.py(335):             NodeItem.setText(0, node_file_name)
Widget.py(327):         for node_file_name in get_nodes_file_names():
Widget.py(328):             node_class = getattr(Nodes, node_file_name)
Widget.py(329):             category_name = node_class.get_category()
 --- modulename: ArrayAppend, funcname: get_category
ArrayAppend.py(23):         return 'Array'
Widget.py(330):             if category_name not in self.categories:
Widget.py(331):                 CatItem = QtGui.QTreeWidgetItem(self)
Widget.py(332):                 CatItem.setText(0, category_name)
Widget.py(333):                 self.categories[category_name] = CatItem
Widget.py(334):             NodeItem = QtGui.QTreeWidgetItem(self.categories[category_name])
Widget.py(335):             NodeItem.setText(0, node_file_name)
Widget.py(327):         for node_file_name in get_nodes_file_names():
Widget.py(328):             node_class = getattr(Nodes, node_file_name)
Widget.py(329):             category_name = node_class.get_category()
 --- modulename: ArrayConcat, funcname: get_category
ArrayConcat.py(19):         return 'Array'
Widget.py(330):             if category_name not in self.categories:
Widget.py(334):             NodeItem = QtGui.QTreeWidgetItem(self.categories[category_name])
Widget.py(335):             NodeItem.setText(0, node_file_name)
Widget.py(327):         for node_file_name in get_nodes_file_names():
Widget.py(328):             node_class = getattr(Nodes, node_file_name)
Widget.py(329):             category_name = node_class.get_category()
 --- modulename: BoolNode, funcname: get_category
BoolNode.py(37):         return 'GenericTypes'
Widget.py(330):             if category_name not in self.categories:
Widget.py(331):                 CatItem = QtGui.QTreeWidgetItem(self)
Widget.py(332):                 CatItem.setText(0, category_name)
Widget.py(333):                 self.categories[category_name] = CatItem
Widget.py(334):             NodeItem = QtGui.QTreeWidgetItem(self.categories[category_name])
Widget.py(335):             NodeItem.setText(0, node_file_name)
Widget.py(327):         for node_file_name in get_nodes_file_names():
Widget.py(328):             node_class = getattr(Nodes, node_file_name)
Widget.py(329):             category_name = node_class.get_category()
 --- modulename: ConditionalValue, funcname: get_category
ConditionalValue.py(23):         return 'FlowControl'
Widget.py(330):             if category_name not in self.categories:
Widget.py(331):                 CatItem = QtGui.QTreeWidgetItem(self)
Widget.py(332):                 CatItem.setText(0, category_name)
Widget.py(333):                 self.categories[category_name] = CatItem
Widget.py(334):             NodeItem = QtGui.QTreeWidgetItem(self.categories[category_name])
Widget.py(335):             NodeItem.setText(0, node_file_name)
Widget.py(327):         for node_file_name in get_nodes_file_names():
Widget.py(328):             node_class = getattr(Nodes, node_file_name)
Widget.py(329):             category_name = node_class.get_category()
 --- modulename: Cos, funcname: get_category
Cos.py(19):         return 'Math'
Widget.py(330):             if category_name not in self.categories:
Widget.py(334):             NodeItem = QtGui.QTreeWidgetItem(self.categories[category_name])
Widget.py(335):             NodeItem.setText(0, node_file_name)
Widget.py(327):         for node_file_name in get_nodes_file_names():
Widget.py(328):             node_class = getattr(Nodes, node_file_name)
Widget.py(329):             category_name = node_class.get_category()
 --- modulename: DegToRad, funcname: get_category
DegToRad.py(20):         return 'Convert'
Widget.py(330):             if category_name not in self.categories:
Widget.py(331):                 CatItem = QtGui.QTreeWidgetItem(self)
Widget.py(332):                 CatItem.setText(0, category_name)
Widget.py(333):                 self.categories[category_name] = CatItem
Widget.py(334):             NodeItem = QtGui.QTreeWidgetItem(self.categories[category_name])
Widget.py(335):             NodeItem.setText(0, node_file_name)
Widget.py(327):         for node_file_name in get_nodes_file_names():
Widget.py(328):             node_class = getattr(Nodes, node_file_name)
Widget.py(329):             category_name = node_class.get_category()
 --- modulename: DevideNode, funcname: get_category
DevideNode.py(28):         return 'Math'
Widget.py(330):             if category_name not in self.categories:
Widget.py(334):             NodeItem = QtGui.QTreeWidgetItem(self.categories[category_name])
Widget.py(335):             NodeItem.setText(0, node_file_name)
Widget.py(327):         for node_file_name in get_nodes_file_names():
Widget.py(328):             node_class = getattr(Nodes, node_file_name)
Widget.py(329):             category_name = node_class.get_category()
 --- modulename: DiscriminantNode, funcname: get_category
DiscriminantNode.py(19):         return 'Math'
Widget.py(330):             if category_name not in self.categories:
Widget.py(334):             NodeItem = QtGui.QTreeWidgetItem(self.categories[category_name])
Widget.py(335):             NodeItem.setText(0, node_file_name)
Widget.py(327):         for node_file_name in get_nodes_file_names():
Widget.py(328):             node_class = getattr(Nodes, node_file_name)
Widget.py(329):             category_name = node_class.get_category()
 --- modulename: FloatNode, funcname: get_category
FloatNode.py(35):         return 'GenericTypes'
Widget.py(330):             if category_name not in self.categories:
Widget.py(334):             NodeItem = QtGui.QTreeWidgetItem(self.categories[category_name])
Widget.py(335):             NodeItem.setText(0, node_file_name)
Widget.py(327):         for node_file_name in get_nodes_file_names():
Widget.py(328):             node_class = getattr(Nodes, node_file_name)
Widget.py(329):             category_name = node_class.get_category()
 --- modulename: FloatToInt, funcname: get_category
FloatToInt.py(16):         return 'Convert'
Widget.py(330):             if category_name not in self.categories:
Widget.py(334):             NodeItem = QtGui.QTreeWidgetItem(self.categories[category_name])
Widget.py(335):             NodeItem.setText(0, node_file_name)
Widget.py(327):         for node_file_name in get_nodes_file_names():
Widget.py(328):             node_class = getattr(Nodes, node_file_name)
Widget.py(329):             category_name = node_class.get_category()
 --- modulename: Index, funcname: get_category
Index.py(19):         return 'Array'
Widget.py(330):             if category_name not in self.categories:
Widget.py(334):             NodeItem = QtGui.QTreeWidgetItem(self.categories[category_name])
Widget.py(335):             NodeItem.setText(0, node_file_name)
Widget.py(327):         for node_file_name in get_nodes_file_names():
Widget.py(328):             node_class = getattr(Nodes, node_file_name)
Widget.py(329):             category_name = node_class.get_category()
 --- modulename: IntNode, funcname: get_category
IntNode.py(36):         return 'GenericTypes'
Widget.py(330):             if category_name not in self.categories:
Widget.py(334):             NodeItem = QtGui.QTreeWidgetItem(self.categories[category_name])
Widget.py(335):             NodeItem.setText(0, node_file_name)
Widget.py(327):         for node_file_name in get_nodes_file_names():
Widget.py(328):             node_class = getattr(Nodes, node_file_name)
Widget.py(329):             category_name = node_class.get_category()
 --- modulename: IsArray, funcname: get_category
IsArray.py(16):         return 'Conditions'
Widget.py(330):             if category_name not in self.categories:
Widget.py(331):                 CatItem = QtGui.QTreeWidgetItem(self)
Widget.py(332):                 CatItem.setText(0, category_name)
Widget.py(333):                 self.categories[category_name] = CatItem
Widget.py(334):             NodeItem = QtGui.QTreeWidgetItem(self.categories[category_name])
Widget.py(335):             NodeItem.setText(0, node_file_name)
Widget.py(327):         for node_file_name in get_nodes_file_names():
Widget.py(328):             node_class = getattr(Nodes, node_file_name)
Widget.py(329):             category_name = node_class.get_category()
 --- modulename: IsEqual, funcname: get_category
IsEqual.py(17):         return 'Conditions'
Widget.py(330):             if category_name not in self.categories:
Widget.py(334):             NodeItem = QtGui.QTreeWidgetItem(self.categories[category_name])
Widget.py(335):             NodeItem.setText(0, node_file_name)
Widget.py(327):         for node_file_name in get_nodes_file_names():
Widget.py(328):             node_class = getattr(Nodes, node_file_name)
Widget.py(329):             category_name = node_class.get_category()
 --- modulename: IsGreaterThan, funcname: get_category
IsGreaterThan.py(17):         return 'Conditions'
Widget.py(330):             if category_name not in self.categories:
Widget.py(334):             NodeItem = QtGui.QTreeWidgetItem(self.categories[category_name])
Widget.py(335):             NodeItem.setText(0, node_file_name)
Widget.py(327):         for node_file_name in get_nodes_file_names():
Widget.py(328):             node_class = getattr(Nodes, node_file_name)
Widget.py(329):             category_name = node_class.get_category()
 --- modulename: IsLessThan, funcname: get_category
IsLessThan.py(17):         return 'Conditions'
Widget.py(330):             if category_name not in self.categories:
Widget.py(334):             NodeItem = QtGui.QTreeWidgetItem(self.categories[category_name])
Widget.py(335):             NodeItem.setText(0, node_file_name)
Widget.py(327):         for node_file_name in get_nodes_file_names():
Widget.py(328):             node_class = getattr(Nodes, node_file_name)
Widget.py(329):             category_name = node_class.get_category()
 --- modulename: Len, funcname: get_category
Len.py(20):         return 'Array'
Widget.py(330):             if category_name not in self.categories:
Widget.py(334):             NodeItem = QtGui.QTreeWidgetItem(self.categories[category_name])
Widget.py(335):             NodeItem.setText(0, node_file_name)
Widget.py(327):         for node_file_name in get_nodes_file_names():
Widget.py(328):             node_class = getattr(Nodes, node_file_name)
Widget.py(329):             category_name = node_class.get_category()
 --- modulename: MakeArray, funcname: get_category
MakeArray.py(46):         return 'Array'
Widget.py(330):             if category_name not in self.categories:
Widget.py(334):             NodeItem = QtGui.QTreeWidgetItem(self.categories[category_name])
Widget.py(335):             NodeItem.setText(0, node_file_name)
Widget.py(327):         for node_file_name in get_nodes_file_names():
Widget.py(328):             node_class = getattr(Nodes, node_file_name)
Widget.py(329):             category_name = node_class.get_category()
 --- modulename: Max, funcname: get_category
Max.py(18):         return 'Common'
Widget.py(330):             if category_name not in self.categories:
Widget.py(331):                 CatItem = QtGui.QTreeWidgetItem(self)
Widget.py(332):                 CatItem.setText(0, category_name)
Widget.py(333):                 self.categories[category_name] = CatItem
Widget.py(334):             NodeItem = QtGui.QTreeWidgetItem(self.categories[category_name])
Widget.py(335):             NodeItem.setText(0, node_file_name)
Widget.py(327):         for node_file_name in get_nodes_file_names():
Widget.py(328):             node_class = getattr(Nodes, node_file_name)
Widget.py(329):             category_name = node_class.get_category()
 --- modulename: Min, funcname: get_category
Min.py(19):         return 'Common'
Widget.py(330):             if category_name not in self.categories:
Widget.py(334):             NodeItem = QtGui.QTreeWidgetItem(self.categories[category_name])
Widget.py(335):             NodeItem.setText(0, node_file_name)
Widget.py(327):         for node_file_name in get_nodes_file_names():
Widget.py(328):             node_class = getattr(Nodes, node_file_name)
Widget.py(329):             category_name = node_class.get_category()
 --- modulename: MultNode, funcname: get_category
MultNode.py(17):         return 'Math'
Widget.py(330):             if category_name not in self.categories:
Widget.py(334):             NodeItem = QtGui.QTreeWidgetItem(self.categories[category_name])
Widget.py(335):             NodeItem.setText(0, node_file_name)
Widget.py(327):         for node_file_name in get_nodes_file_names():
Widget.py(328):             node_class = getattr(Nodes, node_file_name)
Widget.py(329):             category_name = node_class.get_category()
 --- modulename: Not, funcname: get_category
Not.py(20):         return 'Common'
Widget.py(330):             if category_name not in self.categories:
Widget.py(334):             NodeItem = QtGui.QTreeWidgetItem(self.categories[category_name])
Widget.py(335):             NodeItem.setText(0, node_file_name)
Widget.py(327):         for node_file_name in get_nodes_file_names():
Widget.py(328):             node_class = getattr(Nodes, node_file_name)
Widget.py(329):             category_name = node_class.get_category()
 --- modulename: PowNode, funcname: get_category
PowNode.py(17):         return 'Math'
Widget.py(330):             if category_name not in self.categories:
Widget.py(334):             NodeItem = QtGui.QTreeWidgetItem(self.categories[category_name])
Widget.py(335):             NodeItem.setText(0, node_file_name)
Widget.py(327):         for node_file_name in get_nodes_file_names():
Widget.py(328):             node_class = getattr(Nodes, node_file_name)
Widget.py(329):             category_name = node_class.get_category()
 --- modulename: RadToDeg, funcname: get_category
RadToDeg.py(20):         return 'Convert'
Widget.py(330):             if category_name not in self.categories:
Widget.py(334):             NodeItem = QtGui.QTreeWidgetItem(self.categories[category_name])
Widget.py(335):             NodeItem.setText(0, node_file_name)
Widget.py(327):         for node_file_name in get_nodes_file_names():
Widget.py(328):             node_class = getattr(Nodes, node_file_name)
Widget.py(329):             category_name = node_class.get_category()
 --- modulename: RandInt, funcname: get_category
RandInt.py(21):         return 'Common'
Widget.py(330):             if category_name not in self.categories:
Widget.py(334):             NodeItem = QtGui.QTreeWidgetItem(self.categories[category_name])
Widget.py(335):             NodeItem.setText(0, node_file_name)
Widget.py(327):         for node_file_name in get_nodes_file_names():
Widget.py(328):             node_class = getattr(Nodes, node_file_name)
Widget.py(329):             category_name = node_class.get_category()
 --- modulename: RequestNode, funcname: get_category
RequestNode.py(43):         return 'Util'
Widget.py(330):             if category_name not in self.categories:
Widget.py(331):                 CatItem = QtGui.QTreeWidgetItem(self)
Widget.py(332):                 CatItem.setText(0, category_name)
Widget.py(333):                 self.categories[category_name] = CatItem
Widget.py(334):             NodeItem = QtGui.QTreeWidgetItem(self.categories[category_name])
Widget.py(335):             NodeItem.setText(0, node_file_name)
Widget.py(327):         for node_file_name in get_nodes_file_names():
Widget.py(328):             node_class = getattr(Nodes, node_file_name)
Widget.py(329):             category_name = node_class.get_category()
 --- modulename: Reroute, funcname: get_category
Reroute.py(35):         return 'Common'
Widget.py(330):             if category_name not in self.categories:
Widget.py(334):             NodeItem = QtGui.QTreeWidgetItem(self.categories[category_name])
Widget.py(335):             NodeItem.setText(0, node_file_name)
Widget.py(327):         for node_file_name in get_nodes_file_names():
Widget.py(328):             node_class = getattr(Nodes, node_file_name)
Widget.py(329):             category_name = node_class.get_category()
 --- modulename: Sin, funcname: get_category
Sin.py(19):         return 'Math'
Widget.py(330):             if category_name not in self.categories:
Widget.py(334):             NodeItem = QtGui.QTreeWidgetItem(self.categories[category_name])
Widget.py(335):             NodeItem.setText(0, node_file_name)
Widget.py(327):         for node_file_name in get_nodes_file_names():
Widget.py(328):             node_class = getattr(Nodes, node_file_name)
Widget.py(329):             category_name = node_class.get_category()
 --- modulename: StringAppend, funcname: get_category
StringAppend.py(17):         return 'StringUtils'
Widget.py(330):             if category_name not in self.categories:
Widget.py(331):                 CatItem = QtGui.QTreeWidgetItem(self)
Widget.py(332):                 CatItem.setText(0, category_name)
Widget.py(333):                 self.categories[category_name] = CatItem
Widget.py(334):             NodeItem = QtGui.QTreeWidgetItem(self.categories[category_name])
Widget.py(335):             NodeItem.setText(0, node_file_name)
Widget.py(327):         for node_file_name in get_nodes_file_names():
Widget.py(328):             node_class = getattr(Nodes, node_file_name)
Widget.py(329):             category_name = node_class.get_category()
 --- modulename: StringCapitalize, funcname: get_category
StringCapitalize.py(18):         return 'StringUtils'
Widget.py(330):             if category_name not in self.categories:
Widget.py(334):             NodeItem = QtGui.QTreeWidgetItem(self.categories[category_name])
Widget.py(335):             NodeItem.setText(0, node_file_name)
Widget.py(327):         for node_file_name in get_nodes_file_names():
Widget.py(328):             node_class = getattr(Nodes, node_file_name)
Widget.py(329):             category_name = node_class.get_category()
 --- modulename: StringContains, funcname: get_category
StringContains.py(17):         return 'StringUtils'
Widget.py(330):             if category_name not in self.categories:
Widget.py(334):             NodeItem = QtGui.QTreeWidgetItem(self.categories[category_name])
Widget.py(335):             NodeItem.setText(0, node_file_name)
Widget.py(327):         for node_file_name in get_nodes_file_names():
Widget.py(328):             node_class = getattr(Nodes, node_file_name)
Widget.py(329):             category_name = node_class.get_category()
 --- modulename: StringLower, funcname: get_category
StringLower.py(18):         return 'StringUtils'
Widget.py(330):             if category_name not in self.categories:
Widget.py(334):             NodeItem = QtGui.QTreeWidgetItem(self.categories[category_name])
Widget.py(335):             NodeItem.setText(0, node_file_name)
Widget.py(327):         for node_file_name in get_nodes_file_names():
Widget.py(328):             node_class = getattr(Nodes, node_file_name)
Widget.py(329):             category_name = node_class.get_category()
 --- modulename: StringNode, funcname: get_category
StringNode.py(37):         return 'GenericTypes'
Widget.py(330):             if category_name not in self.categories:
Widget.py(334):             NodeItem = QtGui.QTreeWidgetItem(self.categories[category_name])
Widget.py(335):             NodeItem.setText(0, node_file_name)
Widget.py(327):         for node_file_name in get_nodes_file_names():
Widget.py(328):             node_class = getattr(Nodes, node_file_name)
Widget.py(329):             category_name = node_class.get_category()
 --- modulename: StringReplace, funcname: get_category
StringReplace.py(18):         return 'StringUtils'
Widget.py(330):             if category_name not in self.categories:
Widget.py(334):             NodeItem = QtGui.QTreeWidgetItem(self.categories[category_name])
Widget.py(335):             NodeItem.setText(0, node_file_name)
Widget.py(327):         for node_file_name in get_nodes_file_names():
Widget.py(328):             node_class = getattr(Nodes, node_file_name)
Widget.py(329):             category_name = node_class.get_category()
 --- modulename: StringToFloat, funcname: get_category
StringToFloat.py(18):         return 'Convert'
Widget.py(330):             if category_name not in self.categories:
Widget.py(334):             NodeItem = QtGui.QTreeWidgetItem(self.categories[category_name])
Widget.py(335):             NodeItem.setText(0, node_file_name)
Widget.py(327):         for node_file_name in get_nodes_file_names():
Widget.py(328):             node_class = getattr(Nodes, node_file_name)
Widget.py(329):             category_name = node_class.get_category()
 --- modulename: StringToInt, funcname: get_category
StringToInt.py(18):         return 'Convert'
Widget.py(330):             if category_name not in self.categories:
Widget.py(334):             NodeItem = QtGui.QTreeWidgetItem(self.categories[category_name])
Widget.py(335):             NodeItem.setText(0, node_file_name)
Widget.py(327):         for node_file_name in get_nodes_file_names():
Widget.py(328):             node_class = getattr(Nodes, node_file_name)
Widget.py(329):             category_name = node_class.get_category()
 --- modulename: StringUpper, funcname: get_category
StringUpper.py(18):         return 'String'
Widget.py(330):             if category_name not in self.categories:
Widget.py(331):                 CatItem = QtGui.QTreeWidgetItem(self)
Widget.py(332):                 CatItem.setText(0, category_name)
Widget.py(333):                 self.categories[category_name] = CatItem
Widget.py(334):             NodeItem = QtGui.QTreeWidgetItem(self.categories[category_name])
Widget.py(335):             NodeItem.setText(0, node_file_name)
Widget.py(327):         for node_file_name in get_nodes_file_names():
Widget.py(328):             node_class = getattr(Nodes, node_file_name)
Widget.py(329):             category_name = node_class.get_category()
 --- modulename: SubstractNode, funcname: get_category
SubstractNode.py(17):         return 'Math'
Widget.py(330):             if category_name not in self.categories:
Widget.py(334):             NodeItem = QtGui.QTreeWidgetItem(self.categories[category_name])
Widget.py(335):             NodeItem.setText(0, node_file_name)
Widget.py(327):         for node_file_name in get_nodes_file_names():
Widget.py(328):             node_class = getattr(Nodes, node_file_name)
Widget.py(329):             category_name = node_class.get_category()
 --- modulename: SumNode, funcname: get_category
SumNode.py(16):         return 'Math'
Widget.py(330):             if category_name not in self.categories:
Widget.py(334):             NodeItem = QtGui.QTreeWidgetItem(self.categories[category_name])
Widget.py(335):             NodeItem.setText(0, node_file_name)
Widget.py(327):         for node_file_name in get_nodes_file_names():
Widget.py(328):             node_class = getattr(Nodes, node_file_name)
Widget.py(329):             category_name = node_class.get_category()
 --- modulename: ToString, funcname: get_category
ToString.py(18):         return 'Convert'
Widget.py(330):             if category_name not in self.categories:
Widget.py(334):             NodeItem = QtGui.QTreeWidgetItem(self.categories[category_name])
Widget.py(335):             NodeItem.setText(0, node_file_name)
Widget.py(327):         for node_file_name in get_nodes_file_names():
Widget.py(393):         self.setFocusPolicy(QtCore.Qt.StrongFocus)
Widget.py(394):         self.setStyleSheet("border:1 inset white")
Launcher.py(16):         self.node_box.listWidget._events = False
Launcher.py(17):         self.node_box.le_nodes._events = False
Launcher.py(18):         self.SceneLayout.addWidget(self.G)
Launcher.py(19):         self.NodeBoxLayout.addWidget(self.node_box)
Launcher.py(20):         self.node_box.setVisible(True)
Launcher.py(22):         self.actionPlot_graph.triggered.connect(self.G.plot)
Launcher.py(23):         self.actionDelete.triggered.connect(self.on_delete)
Launcher.py(24):         self.actionConsole.triggered.connect(self.toggle_console)
Launcher.py(25):         self.actionNode_box.triggered.connect(self.toggle_node_box)
Launcher.py(26):         self.actionPropertyView.triggered.connect(self.toggle_property_view)
Launcher.py(27):         self.actionMultithreaded.triggered.connect(self.toggle_multithreaded)
Launcher.py(28):         self.actionDebug.triggered.connect(self.toggle_debug)
Launcher.py(29):         self.actionShadows.triggered.connect(self.toggle_shadows)
Launcher.py(30):         self.actionScreenshot.triggered.connect(self.G.screen_shot)
Launcher.py(31):         self.actionClear_scene.triggered.connect(self.on_clear_scene)
Launcher.py(32):         self.actionShortcuts.triggered.connect(self.shortcuts_info)
Launcher.py(33):         self.actionOptions.triggered.connect(self.G.options)
Launcher.py(34):         self.actionGroup_selected.triggered.connect(self.G.commentSelectedNodes)
Launcher.py(35):         self.actionSave.triggered.connect(self.G.save)
Launcher.py(36):         self.actionLoad.triggered.connect(self.G.load)
Launcher.py(37):         self.actionSave_as.triggered.connect(self.G.save_as)
Launcher.py(38):         self.actionAlignLeft.triggered.connect(lambda: self.G.align_selected_nodes(True))
Launcher.py(39):         self.actionAlignUp.triggered.connect(lambda: self.G.align_selected_nodes(False))
Launcher.py(41):         self.horizontal_splitter.setHandleWidth(Spacings.kSplitterHandleWidth)
Launcher.py(42):         self.console.setLineWrapMode(QtGui.QTextEdit.NoWrap)
Launcher.py(43):         self.console.setReadOnly(True)
Launcher.py(44):         self.console.setStyleSheet('background-color: rgb(49, 49, 49);' +
Launcher.py(45):                                    'font: 8pt "Consolas";' +
Launcher.py(46):                                    'color: rgb(200, 200, 200);'
Launcher.py(48):         self.clearConsoleAction = QtGui.QAction('Clear', self)
Launcher.py(49):         self.clearConsoleAction.triggered.connect(lambda: self.console.clear())
Launcher.py(50):         self.console.setContextMenuPolicy(QtCore.Qt.ActionsContextMenu)
Launcher.py(51):         self.console.addAction(self.clearConsoleAction)
Launcher.py(52):         self.consoleInput = ConsoleInput(self.dockWidgetContents_2, self.G)
 --- modulename: ConsoleInputWidget, funcname: __init__
ConsoleInputWidget.py(6):         super(ConsoleInput, self).__init__(parent)
ConsoleInputWidget.py(7):         self.graph = graph
ConsoleInputWidget.py(8):         self.returnPressed.connect(self.OnReturnPressed)
ConsoleInputWidget.py(9):         self.model = QtGui.QStringListModel()
ConsoleInputWidget.py(10):         self.cmd_list = ["renameNode", "setPropertiesVisible", "setNodeBoxVisible", "setConsoleVisible", "plot", "setVerticalScrollBar", "setHorizontalScrollBar", "setScrollbars", "help", "createNode", "save", "load", "comment", "killNode", "setAttr", "connectAttr", "disconectAttr", "select", "move", "pluginWizard"]
ConsoleInputWidget.py(11):         self.executedCommands = [i for i in self.graph.registeredCommands.iterkeys()] + self.cmd_list
ConsoleInputWidget.py(11):         self.executedCommands = [i for i in self.graph.registeredCommands.iterkeys()] + self.cmd_list
ConsoleInputWidget.py(11):         self.executedCommands = [i for i in self.graph.registeredCommands.iterkeys()] + self.cmd_list
ConsoleInputWidget.py(11):         self.executedCommands = [i for i in self.graph.registeredCommands.iterkeys()] + self.cmd_list
ConsoleInputWidget.py(12):         self.builtinCommands = self.cmd_list
ConsoleInputWidget.py(13):         self.completer = QtGui.QCompleter(self)
ConsoleInputWidget.py(14):         self.model.setStringList(self.executedCommands)
ConsoleInputWidget.py(15):         self.completer.setModel(self.model)
ConsoleInputWidget.py(16):         self.completer.setCompletionMode(self.completer.PopupCompletion)
ConsoleInputWidget.py(17):         self.completer.setCaseSensitivity(QtCore.Qt.CaseInsensitive)
ConsoleInputWidget.py(18):         self.setCompleter(self.completer)
ConsoleInputWidget.py(19):         font = QtGui.QFont("Consolas", 9, QtGui.QFont.Bold, False)
ConsoleInputWidget.py(20):         self.setFont(font)
Launcher.py(53):         commands_names = [i for i in self.G.registeredCommands.iterkeys()] + self.consoleInput.cmd_list
Launcher.py(53):         commands_names = [i for i in self.G.registeredCommands.iterkeys()] + self.consoleInput.cmd_list
Launcher.py(53):         commands_names = [i for i in self.G.registeredCommands.iterkeys()] + self.consoleInput.cmd_list
Launcher.py(53):         commands_names = [i for i in self.G.registeredCommands.iterkeys()] + self.consoleInput.cmd_list
Launcher.py(54):         self.highlighter_inst = Highlighter(self.console.document(),
Launcher.py(55):                                             commands_names,
Launcher.py(56):                                             self.node_box.get_nodes_file_names())
 --- modulename: Widget, funcname: get_nodes_file_names
Widget.py(421):         return get_nodes_file_names()
 --- modulename: Widget, funcname: get_nodes_file_names
Widget.py(35):     return [i[:-3] for i in listdir(nodes_path) if i.endswith('.py') and '__init__' not in i]
Widget.py(35):     return [i[:-3] for i in listdir(nodes_path) if i.endswith('.py') and '__init__' not in i]
Widget.py(35):     return [i[:-3] for i in listdir(nodes_path) if i.endswith('.py') and '__init__' not in i]
Widget.py(35):     return [i[:-3] for i in listdir(nodes_path) if i.endswith('.py') and '__init__' not in i]
Widget.py(35):     return [i[:-3] for i in listdir(nodes_path) if i.endswith('.py') and '__init__' not in i]
Widget.py(35):     return [i[:-3] for i in listdir(nodes_path) if i.endswith('.py') and '__init__' not in i]
Widget.py(35):     return [i[:-3] for i in listdir(nodes_path) if i.endswith('.py') and '__init__' not in i]
Widget.py(35):     return [i[:-3] for i in listdir(nodes_path) if i.endswith('.py') and '__init__' not in i]
Widget.py(35):     return [i[:-3] for i in listdir(nodes_path) if i.endswith('.py') and '__init__' not in i]
Widget.py(35):     return [i[:-3] for i in listdir(nodes_path) if i.endswith('.py') and '__init__' not in i]
Widget.py(35):     return [i[:-3] for i in listdir(nodes_path) if i.endswith('.py') and '__init__' not in i]
Widget.py(35):     return [i[:-3] for i in listdir(nodes_path) if i.endswith('.py') and '__init__' not in i]
Widget.py(35):     return [i[:-3] for i in listdir(nodes_path) if i.endswith('.py') and '__init__' not in i]
Widget.py(35):     return [i[:-3] for i in listdir(nodes_path) if i.endswith('.py') and '__init__' not in i]
Widget.py(35):     return [i[:-3] for i in listdir(nodes_path) if i.endswith('.py') and '__init__' not in i]
Widget.py(35):     return [i[:-3] for i in listdir(nodes_path) if i.endswith('.py') and '__init__' not in i]
Widget.py(35):     return [i[:-3] for i in listdir(nodes_path) if i.endswith('.py') and '__init__' not in i]
Widget.py(35):     return [i[:-3] for i in listdir(nodes_path) if i.endswith('.py') and '__init__' not in i]
Widget.py(35):     return [i[:-3] for i in listdir(nodes_path) if i.endswith('.py') and '__init__' not in i]
Widget.py(35):     return [i[:-3] for i in listdir(nodes_path) if i.endswith('.py') and '__init__' not in i]
Widget.py(35):     return [i[:-3] for i in listdir(nodes_path) if i.endswith('.py') and '__init__' not in i]
Widget.py(35):     return [i[:-3] for i in listdir(nodes_path) if i.endswith('.py') and '__init__' not in i]
Widget.py(35):     return [i[:-3] for i in listdir(nodes_path) if i.endswith('.py') and '__init__' not in i]
Widget.py(35):     return [i[:-3] for i in listdir(nodes_path) if i.endswith('.py') and '__init__' not in i]
Widget.py(35):     return [i[:-3] for i in listdir(nodes_path) if i.endswith('.py') and '__init__' not in i]
Widget.py(35):     return [i[:-3] for i in listdir(nodes_path) if i.endswith('.py') and '__init__' not in i]
Widget.py(35):     return [i[:-3] for i in listdir(nodes_path) if i.endswith('.py') and '__init__' not in i]
Widget.py(35):     return [i[:-3] for i in listdir(nodes_path) if i.endswith('.py') and '__init__' not in i]
Widget.py(35):     return [i[:-3] for i in listdir(nodes_path) if i.endswith('.py') and '__init__' not in i]
Widget.py(35):     return [i[:-3] for i in listdir(nodes_path) if i.endswith('.py') and '__init__' not in i]
Widget.py(35):     return [i[:-3] for i in listdir(nodes_path) if i.endswith('.py') and '__init__' not in i]
Widget.py(35):     return [i[:-3] for i in listdir(nodes_path) if i.endswith('.py') and '__init__' not in i]
Widget.py(35):     return [i[:-3] for i in listdir(nodes_path) if i.endswith('.py') and '__init__' not in i]
Widget.py(35):     return [i[:-3] for i in listdir(nodes_path) if i.endswith('.py') and '__init__' not in i]
Widget.py(35):     return [i[:-3] for i in listdir(nodes_path) if i.endswith('.py') and '__init__' not in i]
Widget.py(35):     return [i[:-3] for i in listdir(nodes_path) if i.endswith('.py') and '__init__' not in i]
Widget.py(35):     return [i[:-3] for i in listdir(nodes_path) if i.endswith('.py') and '__init__' not in i]
Widget.py(35):     return [i[:-3] for i in listdir(nodes_path) if i.endswith('.py') and '__init__' not in i]
Widget.py(35):     return [i[:-3] for i in listdir(nodes_path) if i.endswith('.py') and '__init__' not in i]
Widget.py(35):     return [i[:-3] for i in listdir(nodes_path) if i.endswith('.py') and '__init__' not in i]
Widget.py(35):     return [i[:-3] for i in listdir(nodes_path) if i.endswith('.py') and '__init__' not in i]
Widget.py(35):     return [i[:-3] for i in listdir(nodes_path) if i.endswith('.py') and '__init__' not in i]
Widget.py(35):     return [i[:-3] for i in listdir(nodes_path) if i.endswith('.py') and '__init__' not in i]
Widget.py(35):     return [i[:-3] for i in listdir(nodes_path) if i.endswith('.py') and '__init__' not in i]
Widget.py(35):     return [i[:-3] for i in listdir(nodes_path) if i.endswith('.py') and '__init__' not in i]
Widget.py(35):     return [i[:-3] for i in listdir(nodes_path) if i.endswith('.py') and '__init__' not in i]
Widget.py(35):     return [i[:-3] for i in listdir(nodes_path) if i.endswith('.py') and '__init__' not in i]
Widget.py(35):     return [i[:-3] for i in listdir(nodes_path) if i.endswith('.py') and '__init__' not in i]
Widget.py(35):     return [i[:-3] for i in listdir(nodes_path) if i.endswith('.py') and '__init__' not in i]
Widget.py(35):     return [i[:-3] for i in listdir(nodes_path) if i.endswith('.py') and '__init__' not in i]
Widget.py(35):     return [i[:-3] for i in listdir(nodes_path) if i.endswith('.py') and '__init__' not in i]
Widget.py(35):     return [i[:-3] for i in listdir(nodes_path) if i.endswith('.py') and '__init__' not in i]
Widget.py(35):     return [i[:-3] for i in listdir(nodes_path) if i.endswith('.py') and '__init__' not in i]
Widget.py(35):     return [i[:-3] for i in listdir(nodes_path) if i.endswith('.py') and '__init__' not in i]
Widget.py(35):     return [i[:-3] for i in listdir(nodes_path) if i.endswith('.py') and '__init__' not in i]
Widget.py(35):     return [i[:-3] for i in listdir(nodes_path) if i.endswith('.py') and '__init__' not in i]
Widget.py(35):     return [i[:-3] for i in listdir(nodes_path) if i.endswith('.py') and '__init__' not in i]
Widget.py(35):     return [i[:-3] for i in listdir(nodes_path) if i.endswith('.py') and '__init__' not in i]
Widget.py(35):     return [i[:-3] for i in listdir(nodes_path) if i.endswith('.py') and '__init__' not in i]
Widget.py(35):     return [i[:-3] for i in listdir(nodes_path) if i.endswith('.py') and '__init__' not in i]
Widget.py(35):     return [i[:-3] for i in listdir(nodes_path) if i.endswith('.py') and '__init__' not in i]
Widget.py(35):     return [i[:-3] for i in listdir(nodes_path) if i.endswith('.py') and '__init__' not in i]
Widget.py(35):     return [i[:-3] for i in listdir(nodes_path) if i.endswith('.py') and '__init__' not in i]
Widget.py(35):     return [i[:-3] for i in listdir(nodes_path) if i.endswith('.py') and '__init__' not in i]
Widget.py(35):     return [i[:-3] for i in listdir(nodes_path) if i.endswith('.py') and '__init__' not in i]
Widget.py(35):     return [i[:-3] for i in listdir(nodes_path) if i.endswith('.py') and '__init__' not in i]
Widget.py(35):     return [i[:-3] for i in listdir(nodes_path) if i.endswith('.py') and '__init__' not in i]
Widget.py(35):     return [i[:-3] for i in listdir(nodes_path) if i.endswith('.py') and '__init__' not in i]
Widget.py(35):     return [i[:-3] for i in listdir(nodes_path) if i.endswith('.py') and '__init__' not in i]
Widget.py(35):     return [i[:-3] for i in listdir(nodes_path) if i.endswith('.py') and '__init__' not in i]
Widget.py(35):     return [i[:-3] for i in listdir(nodes_path) if i.endswith('.py') and '__init__' not in i]
Widget.py(35):     return [i[:-3] for i in listdir(nodes_path) if i.endswith('.py') and '__init__' not in i]
Widget.py(35):     return [i[:-3] for i in listdir(nodes_path) if i.endswith('.py') and '__init__' not in i]
Widget.py(35):     return [i[:-3] for i in listdir(nodes_path) if i.endswith('.py') and '__init__' not in i]
Widget.py(35):     return [i[:-3] for i in listdir(nodes_path) if i.endswith('.py') and '__init__' not in i]
Widget.py(35):     return [i[:-3] for i in listdir(nodes_path) if i.endswith('.py') and '__init__' not in i]
Widget.py(35):     return [i[:-3] for i in listdir(nodes_path) if i.endswith('.py') and '__init__' not in i]
Widget.py(35):     return [i[:-3] for i in listdir(nodes_path) if i.endswith('.py') and '__init__' not in i]
Widget.py(35):     return [i[:-3] for i in listdir(nodes_path) if i.endswith('.py') and '__init__' not in i]
Widget.py(35):     return [i[:-3] for i in listdir(nodes_path) if i.endswith('.py') and '__init__' not in i]
Widget.py(35):     return [i[:-3] for i in listdir(nodes_path) if i.endswith('.py') and '__init__' not in i]
Widget.py(35):     return [i[:-3] for i in listdir(nodes_path) if i.endswith('.py') and '__init__' not in i]
Widget.py(35):     return [i[:-3] for i in listdir(nodes_path) if i.endswith('.py') and '__init__' not in i]
Widget.py(35):     return [i[:-3] for i in listdir(nodes_path) if i.endswith('.py') and '__init__' not in i]
Widget.py(35):     return [i[:-3] for i in listdir(nodes_path) if i.endswith('.py') and '__init__' not in i]
Widget.py(35):     return [i[:-3] for i in listdir(nodes_path) if i.endswith('.py') and '__init__' not in i]
 --- modulename: SyntaxHighlighter, funcname: __init__
SyntaxHighlighter.py(7):         super(Highlighter, self).__init__(parent)
SyntaxHighlighter.py(9):         comandPatterns = commandNameList
SyntaxHighlighter.py(10):         commandNameFormat = QtGui.QTextCharFormat()
SyntaxHighlighter.py(11):         commandNameFormat.setForeground(QtCore.Qt.cyan)
SyntaxHighlighter.py(12):         commandNameFormat.setFontWeight(QtGui.QFont.Bold)
SyntaxHighlighter.py(15):         self.highlightingRules = [(QtCore.QRegExp(pattern), commandNameFormat)
SyntaxHighlighter.py(16):                 for pattern in comandPatterns]
SyntaxHighlighter.py(16):                 for pattern in comandPatterns]
SyntaxHighlighter.py(16):                 for pattern in comandPatterns]
SyntaxHighlighter.py(16):                 for pattern in comandPatterns]
SyntaxHighlighter.py(16):                 for pattern in comandPatterns]
SyntaxHighlighter.py(16):                 for pattern in comandPatterns]
SyntaxHighlighter.py(16):                 for pattern in comandPatterns]
SyntaxHighlighter.py(16):                 for pattern in comandPatterns]
SyntaxHighlighter.py(16):                 for pattern in comandPatterns]
SyntaxHighlighter.py(16):                 for pattern in comandPatterns]
SyntaxHighlighter.py(16):                 for pattern in comandPatterns]
SyntaxHighlighter.py(16):                 for pattern in comandPatterns]
SyntaxHighlighter.py(16):                 for pattern in comandPatterns]
SyntaxHighlighter.py(16):                 for pattern in comandPatterns]
SyntaxHighlighter.py(16):                 for pattern in comandPatterns]
SyntaxHighlighter.py(16):                 for pattern in comandPatterns]
SyntaxHighlighter.py(16):                 for pattern in comandPatterns]
SyntaxHighlighter.py(16):                 for pattern in comandPatterns]
SyntaxHighlighter.py(16):                 for pattern in comandPatterns]
SyntaxHighlighter.py(16):                 for pattern in comandPatterns]
SyntaxHighlighter.py(16):                 for pattern in comandPatterns]
SyntaxHighlighter.py(16):                 for pattern in comandPatterns]
SyntaxHighlighter.py(16):                 for pattern in comandPatterns]
SyntaxHighlighter.py(16):                 for pattern in comandPatterns]
SyntaxHighlighter.py(18):         singleLineCommentFormat = QtGui.QTextCharFormat()
SyntaxHighlighter.py(19):         singleLineCommentFormat.setForeground(QtCore.Qt.darkYellow)
SyntaxHighlighter.py(20):         self.highlightingRules.append((QtCore.QRegExp("//[^\n]*"),
SyntaxHighlighter.py(21):                 singleLineCommentFormat))
SyntaxHighlighter.py(23):         flagFormat = QtGui.QTextCharFormat()
SyntaxHighlighter.py(24):         flagFormat.setForeground(QtCore.Qt.darkCyan)
SyntaxHighlighter.py(26):         self.highlightingRules.append((QtCore.QRegExp("{0}\w+".format(FLAG_SYMBOL)),
SyntaxHighlighter.py(27):                 flagFormat))
SyntaxHighlighter.py(30):         self.multiLineCommentFormat = QtGui.QTextCharFormat()
SyntaxHighlighter.py(31):         self.multiLineCommentFormat.setForeground(QtCore.Qt.red)
SyntaxHighlighter.py(33):         quotationFormat = QtGui.QTextCharFormat()
SyntaxHighlighter.py(34):         quotationFormat.setForeground(QtCore.Qt.yellow)
SyntaxHighlighter.py(35):         self.highlightingRules.append((QtCore.QRegExp("\'.*\'"),
SyntaxHighlighter.py(36):                 quotationFormat))
SyntaxHighlighter.py(38):         functionFormat = QtGui.QTextCharFormat()
SyntaxHighlighter.py(39):         functionFormat.setFontItalic(True)
SyntaxHighlighter.py(40):         functionFormat.setForeground(QtCore.Qt.blue)
SyntaxHighlighter.py(41):         self.highlightingRules.append((QtCore.QRegExp("\\b[A-Za-z0-9_]+(?=\\()"),
SyntaxHighlighter.py(42):                 functionFormat))
SyntaxHighlighter.py(44):         self.commentStartExpression = QtCore.QRegExp("/\\*")
SyntaxHighlighter.py(45):         self.commentEndExpression = QtCore.QRegExp("\\*/")
Launcher.py(57):         self.gridLayout_2.addWidget(self.consoleInput, 2, 0, 1, 1)
Launcher.py(58):         self.dockWidgetConsole.hide()
Launcher.py(59):         self.dockWidgetNodeBox.hide()
Launcher.py(60):         self.setMouseTracking(True)
Launcher.py(61):         self.toggle_console()
 --- modulename: Launcher, funcname: toggle_console
Launcher.py(116):         if self.dockWidgetConsole.isVisible():
Launcher.py(119):             self.dockWidgetConsole.show()
Launcher.py(62):         self.toggle_node_box()
 --- modulename: Launcher, funcname: toggle_node_box
Launcher.py(82):         if self.node_box.isVisible():
Launcher.py(85):             self.dockWidgetNodeBox.show()
Launcher.py(63):         self.toggle_shadows()
 --- modulename: Launcher, funcname: toggle_shadows
Launcher.py(135):         self.G.set_shadows_enabled(not self.G._shadows)
 --- modulename: Widget, funcname: set_shadows_enabled
Widget.py(1221):         for n in self.nodes:
Widget.py(1223):         self._shadows = state
Launcher.py(171):     instance.show()
Launcher.py(173):     try:
Launcher.py(174):         sys.exit(app.exec_())
 --- modulename: Widget, funcname: drawBackground
Widget.py(1612):         super(GraphWidget, self).drawBackground(painter, rect)
Widget.py(1614):         polygon = self.mapToScene(self.viewport().rect())
Widget.py(1615):         self._file_name_label.setPos(polygon[0])
Widget.py(1616):         scene_rect = self.sceneRect()
Widget.py(1618):         settings = self.get_settings()
 --- modulename: Widget, funcname: get_settings
Widget.py(1042):         if path.isfile(self.options_widget.settings_path):
 --- modulename: genericpath, funcname: isfile
genericpath.py(36):     try:
genericpath.py(37):         st = os.stat(path)
genericpath.py(40):     return stat.S_ISREG(st.st_mode)
 --- modulename: stat, funcname: S_ISREG
stat.py(50):     return S_IFMT(mode) == S_IFREG
 --- modulename: stat, funcname: S_IFMT
stat.py(25):     return mode & 0170000
Widget.py(1043):             settings = QtCore.QSettings(self.options_widget.settings_path, QtCore.QSettings.IniFormat)
Widget.py(1044):             return settings
Widget.py(1619):         if settings:
Widget.py(1620):             color = QtGui.QColor(settings.value('SCENE/Scene bg color'))
Widget.py(1623):         painter.fillRect(rect.intersect(scene_rect), QtGui.QBrush(color))
Widget.py(1625):         left = int(scene_rect.left()) - (int(scene_rect.left()) % self.grid_size)
Widget.py(1626):         top = int(scene_rect.top()) - (int(scene_rect.top()) % self.grid_size)
Widget.py(1628):         painter.setPen(QtGui.QPen(self.kGridColor, 0.5, QtCore.Qt.SolidLine))
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1638):         painter.setPen(QtGui.QPen(self.kGridColorDarker, 1.0, QtCore.Qt.SolidLine))
Widget.py(1641):         for x in xrange(left, int(scene_rect.right()), self.grid_size * 10):
Widget.py(1642):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1641):         for x in xrange(left, int(scene_rect.right()), self.grid_size * 10):
Widget.py(1642):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1641):         for x in xrange(left, int(scene_rect.right()), self.grid_size * 10):
Widget.py(1642):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1641):         for x in xrange(left, int(scene_rect.right()), self.grid_size * 10):
Widget.py(1642):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1641):         for x in xrange(left, int(scene_rect.right()), self.grid_size * 10):
Widget.py(1642):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1641):         for x in xrange(left, int(scene_rect.right()), self.grid_size * 10):
Widget.py(1642):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1641):         for x in xrange(left, int(scene_rect.right()), self.grid_size * 10):
Widget.py(1642):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1641):         for x in xrange(left, int(scene_rect.right()), self.grid_size * 10):
Widget.py(1642):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1641):         for x in xrange(left, int(scene_rect.right()), self.grid_size * 10):
Widget.py(1642):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1641):         for x in xrange(left, int(scene_rect.right()), self.grid_size * 10):
Widget.py(1642):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1641):         for x in xrange(left, int(scene_rect.right()), self.grid_size * 10):
Widget.py(1642):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1641):         for x in xrange(left, int(scene_rect.right()), self.grid_size * 10):
Widget.py(1642):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1641):         for x in xrange(left, int(scene_rect.right()), self.grid_size * 10):
Widget.py(1642):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1641):         for x in xrange(left, int(scene_rect.right()), self.grid_size * 10):
Widget.py(1642):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1641):         for x in xrange(left, int(scene_rect.right()), self.grid_size * 10):
Widget.py(1642):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1641):         for x in xrange(left, int(scene_rect.right()), self.grid_size * 10):
Widget.py(1642):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1641):         for x in xrange(left, int(scene_rect.right()), self.grid_size * 10):
Widget.py(1642):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1641):         for x in xrange(left, int(scene_rect.right()), self.grid_size * 10):
Widget.py(1642):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1641):         for x in xrange(left, int(scene_rect.right()), self.grid_size * 10):
Widget.py(1642):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1641):         for x in xrange(left, int(scene_rect.right()), self.grid_size * 10):
Widget.py(1642):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1641):         for x in xrange(left, int(scene_rect.right()), self.grid_size * 10):
Widget.py(1642):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1641):         for x in xrange(left, int(scene_rect.right()), self.grid_size * 10):
Widget.py(1642):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1641):         for x in xrange(left, int(scene_rect.right()), self.grid_size * 10):
Widget.py(1642):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1641):         for x in xrange(left, int(scene_rect.right()), self.grid_size * 10):
Widget.py(1642):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1641):         for x in xrange(left, int(scene_rect.right()), self.grid_size * 10):
Widget.py(1642):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1641):         for x in xrange(left, int(scene_rect.right()), self.grid_size * 10):
Widget.py(1642):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1641):         for x in xrange(left, int(scene_rect.right()), self.grid_size * 10):
Widget.py(1642):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1641):         for x in xrange(left, int(scene_rect.right()), self.grid_size * 10):
Widget.py(1642):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1641):         for x in xrange(left, int(scene_rect.right()), self.grid_size * 10):
Widget.py(1642):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1641):         for x in xrange(left, int(scene_rect.right()), self.grid_size * 10):
Widget.py(1642):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1641):         for x in xrange(left, int(scene_rect.right()), self.grid_size * 10):
Widget.py(1642):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1641):         for x in xrange(left, int(scene_rect.right()), self.grid_size * 10):
Widget.py(1642):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1641):         for x in xrange(left, int(scene_rect.right()), self.grid_size * 10):
Widget.py(1642):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1641):         for x in xrange(left, int(scene_rect.right()), self.grid_size * 10):
Widget.py(1642):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1641):         for x in xrange(left, int(scene_rect.right()), self.grid_size * 10):
Widget.py(1642):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1641):         for x in xrange(left, int(scene_rect.right()), self.grid_size * 10):
Widget.py(1642):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1641):         for x in xrange(left, int(scene_rect.right()), self.grid_size * 10):
Widget.py(1642):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1641):         for x in xrange(left, int(scene_rect.right()), self.grid_size * 10):
Widget.py(1642):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1641):         for x in xrange(left, int(scene_rect.right()), self.grid_size * 10):
Widget.py(1642):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1641):         for x in xrange(left, int(scene_rect.right()), self.grid_size * 10):
Widget.py(1642):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1641):         for x in xrange(left, int(scene_rect.right()), self.grid_size * 10):
Widget.py(1642):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1641):         for x in xrange(left, int(scene_rect.right()), self.grid_size * 10):
Widget.py(1642):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1641):         for x in xrange(left, int(scene_rect.right()), self.grid_size * 10):
Widget.py(1642):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1641):         for x in xrange(left, int(scene_rect.right()), self.grid_size * 10):
Widget.py(1642):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1641):         for x in xrange(left, int(scene_rect.right()), self.grid_size * 10):
Widget.py(1642):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1641):         for x in xrange(left, int(scene_rect.right()), self.grid_size * 10):
Widget.py(1642):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1641):         for x in xrange(left, int(scene_rect.right()), self.grid_size * 10):
Widget.py(1642):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1641):         for x in xrange(left, int(scene_rect.right()), self.grid_size * 10):
Widget.py(1642):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1641):         for x in xrange(left, int(scene_rect.right()), self.grid_size * 10):
Widget.py(1642):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1641):         for x in xrange(left, int(scene_rect.right()), self.grid_size * 10):
Widget.py(1642):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1641):         for x in xrange(left, int(scene_rect.right()), self.grid_size * 10):
Widget.py(1642):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1641):         for x in xrange(left, int(scene_rect.right()), self.grid_size * 10):
Widget.py(1642):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1641):         for x in xrange(left, int(scene_rect.right()), self.grid_size * 10):
Widget.py(1642):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1641):         for x in xrange(left, int(scene_rect.right()), self.grid_size * 10):
Widget.py(1642):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1641):         for x in xrange(left, int(scene_rect.right()), self.grid_size * 10):
Widget.py(1642):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1641):         for x in xrange(left, int(scene_rect.right()), self.grid_size * 10):
Widget.py(1642):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1641):         for x in xrange(left, int(scene_rect.right()), self.grid_size * 10):
Widget.py(1642):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1641):         for x in xrange(left, int(scene_rect.right()), self.grid_size * 10):
Widget.py(1642):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1641):         for x in xrange(left, int(scene_rect.right()), self.grid_size * 10):
Widget.py(1642):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1641):         for x in xrange(left, int(scene_rect.right()), self.grid_size * 10):
Widget.py(1642):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1641):         for x in xrange(left, int(scene_rect.right()), self.grid_size * 10):
Widget.py(1642):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1641):         for x in xrange(left, int(scene_rect.right()), self.grid_size * 10):
Widget.py(1642):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1641):         for x in xrange(left, int(scene_rect.right()), self.grid_size * 10):
Widget.py(1642):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1641):         for x in xrange(left, int(scene_rect.right()), self.grid_size * 10):
Widget.py(1642):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1641):         for x in xrange(left, int(scene_rect.right()), self.grid_size * 10):
Widget.py(1642):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1641):         for x in xrange(left, int(scene_rect.right()), self.grid_size * 10):
Widget.py(1642):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1641):         for x in xrange(left, int(scene_rect.right()), self.grid_size * 10):
Widget.py(1642):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1641):         for x in xrange(left, int(scene_rect.right()), self.grid_size * 10):
Widget.py(1642):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1641):         for x in xrange(left, int(scene_rect.right()), self.grid_size * 10):
Widget.py(1642):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1641):         for x in xrange(left, int(scene_rect.right()), self.grid_size * 10):
Widget.py(1642):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1641):         for x in xrange(left, int(scene_rect.right()), self.grid_size * 10):
Widget.py(1642):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1641):         for x in xrange(left, int(scene_rect.right()), self.grid_size * 10):
Widget.py(1642):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1641):         for x in xrange(left, int(scene_rect.right()), self.grid_size * 10):
Widget.py(1642):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1641):         for x in xrange(left, int(scene_rect.right()), self.grid_size * 10):
Widget.py(1642):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1641):         for x in xrange(left, int(scene_rect.right()), self.grid_size * 10):
Widget.py(1642):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1641):         for x in xrange(left, int(scene_rect.right()), self.grid_size * 10):
Widget.py(1642):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1641):         for x in xrange(left, int(scene_rect.right()), self.grid_size * 10):
Widget.py(1642):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1641):         for x in xrange(left, int(scene_rect.right()), self.grid_size * 10):
Widget.py(1642):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1641):         for x in xrange(left, int(scene_rect.right()), self.grid_size * 10):
Widget.py(1642):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1641):         for x in xrange(left, int(scene_rect.right()), self.grid_size * 10):
Widget.py(1642):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1641):         for x in xrange(left, int(scene_rect.right()), self.grid_size * 10):
Widget.py(1642):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1641):         for x in xrange(left, int(scene_rect.right()), self.grid_size * 10):
Widget.py(1642):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1641):         for x in xrange(left, int(scene_rect.right()), self.grid_size * 10):
Widget.py(1642):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1641):         for x in xrange(left, int(scene_rect.right()), self.grid_size * 10):
Widget.py(1642):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1641):         for x in xrange(left, int(scene_rect.right()), self.grid_size * 10):
Widget.py(1642):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1641):         for x in xrange(left, int(scene_rect.right()), self.grid_size * 10):
Widget.py(1642):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1641):         for x in xrange(left, int(scene_rect.right()), self.grid_size * 10):
Widget.py(1642):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1641):         for x in xrange(left, int(scene_rect.right()), self.grid_size * 10):
Widget.py(1642):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1641):         for x in xrange(left, int(scene_rect.right()), self.grid_size * 10):
Widget.py(1642):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1641):         for x in xrange(left, int(scene_rect.right()), self.grid_size * 10):
Widget.py(1642):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1641):         for x in xrange(left, int(scene_rect.right()), self.grid_size * 10):
Widget.py(1642):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1641):         for x in xrange(left, int(scene_rect.right()), self.grid_size * 10):
Widget.py(1642):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1641):         for x in xrange(left, int(scene_rect.right()), self.grid_size * 10):
Widget.py(1642):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1641):         for x in xrange(left, int(scene_rect.right()), self.grid_size * 10):
Widget.py(1642):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1641):         for x in xrange(left, int(scene_rect.right()), self.grid_size * 10):
Widget.py(1642):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1641):         for x in xrange(left, int(scene_rect.right()), self.grid_size * 10):
Widget.py(1642):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1641):         for x in xrange(left, int(scene_rect.right()), self.grid_size * 10):
Widget.py(1642):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1641):         for x in xrange(left, int(scene_rect.right()), self.grid_size * 10):
Widget.py(1642):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1641):         for x in xrange(left, int(scene_rect.right()), self.grid_size * 10):
Widget.py(1642):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1641):         for x in xrange(left, int(scene_rect.right()), self.grid_size * 10):
Widget.py(1642):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1641):         for x in xrange(left, int(scene_rect.right()), self.grid_size * 10):
Widget.py(1645):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size * 10):
Widget.py(1646):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1645):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size * 10):
Widget.py(1646):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1645):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size * 10):
Widget.py(1646):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1645):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size * 10):
Widget.py(1646):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1645):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size * 10):
Widget.py(1646):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1645):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size * 10):
Widget.py(1646):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1645):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size * 10):
Widget.py(1646):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1645):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size * 10):
Widget.py(1646):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1645):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size * 10):
Widget.py(1646):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1645):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size * 10):
Widget.py(1646):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1645):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size * 10):
Widget.py(1646):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1645):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size * 10):
Widget.py(1646):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1645):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size * 10):
Widget.py(1646):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1645):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size * 10):
Widget.py(1646):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1645):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size * 10):
Widget.py(1646):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1645):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size * 10):
Widget.py(1646):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1645):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size * 10):
Widget.py(1646):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1645):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size * 10):
Widget.py(1646):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1645):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size * 10):
Widget.py(1646):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1645):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size * 10):
Widget.py(1646):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1645):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size * 10):
Widget.py(1646):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1645):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size * 10):
Widget.py(1646):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1645):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size * 10):
Widget.py(1646):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1645):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size * 10):
Widget.py(1646):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1645):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size * 10):
Widget.py(1646):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1645):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size * 10):
Widget.py(1646):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1645):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size * 10):
Widget.py(1646):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1645):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size * 10):
Widget.py(1646):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1645):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size * 10):
Widget.py(1646):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1645):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size * 10):
Widget.py(1646):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1645):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size * 10):
Widget.py(1646):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1645):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size * 10):
Widget.py(1646):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1645):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size * 10):
Widget.py(1646):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1645):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size * 10):
Widget.py(1646):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1645):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size * 10):
Widget.py(1646):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1645):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size * 10):
Widget.py(1646):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1645):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size * 10):
Widget.py(1646):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1645):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size * 10):
Widget.py(1646):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1645):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size * 10):
Widget.py(1646):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1645):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size * 10):
Widget.py(1646):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1645):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size * 10):
Widget.py(1646):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1645):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size * 10):
Widget.py(1646):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1645):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size * 10):
Widget.py(1646):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1645):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size * 10):
Widget.py(1646):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1645):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size * 10):
Widget.py(1646):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1645):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size * 10):
Widget.py(1646):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1645):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size * 10):
Widget.py(1646):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1645):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size * 10):
Widget.py(1646):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1645):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size * 10):
Widget.py(1646):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1645):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size * 10):
Widget.py(1646):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1645):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size * 10):
Widget.py(1646):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1645):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size * 10):
Widget.py(1646):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1645):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size * 10):
Widget.py(1646):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1645):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size * 10):
Widget.py(1646):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1645):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size * 10):
Widget.py(1646):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1645):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size * 10):
Widget.py(1646):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1645):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size * 10):
Widget.py(1646):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1645):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size * 10):
Widget.py(1646):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1645):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size * 10):
Widget.py(1646):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1645):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size * 10):
Widget.py(1646):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1645):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size * 10):
Widget.py(1646):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1645):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size * 10):
Widget.py(1646):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1645):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size * 10):
Widget.py(1646):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1645):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size * 10):
Widget.py(1646):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1645):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size * 10):
Widget.py(1646):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1645):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size * 10):
Widget.py(1646):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1645):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size * 10):
Widget.py(1646):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1645):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size * 10):
Widget.py(1646):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1645):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size * 10):
Widget.py(1646):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1645):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size * 10):
Widget.py(1646):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1645):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size * 10):
Widget.py(1646):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1645):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size * 10):
Widget.py(1646):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1645):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size * 10):
Widget.py(1646):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1645):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size * 10):
Widget.py(1646):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1645):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size * 10):
Widget.py(1646):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1645):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size * 10):
Widget.py(1646):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1645):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size * 10):
Widget.py(1646):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1645):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size * 10):
Widget.py(1646):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1645):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size * 10):
Widget.py(1646):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1645):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size * 10):
Widget.py(1646):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1645):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size * 10):
Widget.py(1646):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1645):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size * 10):
Widget.py(1646):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1645):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size * 10):
Widget.py(1646):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1645):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size * 10):
Widget.py(1646):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1645):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size * 10):
Widget.py(1646):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1645):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size * 10):
Widget.py(1646):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1645):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size * 10):
Widget.py(1646):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1645):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size * 10):
Widget.py(1646):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1645):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size * 10):
Widget.py(1646):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1645):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size * 10):
Widget.py(1646):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1645):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size * 10):
Widget.py(1646):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1645):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size * 10):
Widget.py(1646):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1645):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size * 10):
Widget.py(1646):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1645):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size * 10):
Widget.py(1646):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1645):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size * 10):
Widget.py(1646):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1645):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size * 10):
Widget.py(1646):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1645):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size * 10):
Widget.py(1646):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1645):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size * 10):
Widget.py(1646):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1645):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size * 10):
Widget.py(1646):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1645):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size * 10):
Widget.py(1646):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1645):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size * 10):
 --- modulename: SyntaxHighlighter, funcname: highlightBlock
SyntaxHighlighter.py(48):         for pattern, format in self.highlightingRules:
SyntaxHighlighter.py(49):             expression = QtCore.QRegExp(pattern)
SyntaxHighlighter.py(50):             index = expression.indexIn(text)
SyntaxHighlighter.py(51):             while index >= 0:
SyntaxHighlighter.py(48):         for pattern, format in self.highlightingRules:
SyntaxHighlighter.py(49):             expression = QtCore.QRegExp(pattern)
SyntaxHighlighter.py(50):             index = expression.indexIn(text)
SyntaxHighlighter.py(51):             while index >= 0:
SyntaxHighlighter.py(48):         for pattern, format in self.highlightingRules:
SyntaxHighlighter.py(49):             expression = QtCore.QRegExp(pattern)
SyntaxHighlighter.py(50):             index = expression.indexIn(text)
SyntaxHighlighter.py(51):             while index >= 0:
SyntaxHighlighter.py(48):         for pattern, format in self.highlightingRules:
SyntaxHighlighter.py(49):             expression = QtCore.QRegExp(pattern)
SyntaxHighlighter.py(50):             index = expression.indexIn(text)
SyntaxHighlighter.py(51):             while index >= 0:
SyntaxHighlighter.py(48):         for pattern, format in self.highlightingRules:
SyntaxHighlighter.py(49):             expression = QtCore.QRegExp(pattern)
SyntaxHighlighter.py(50):             index = expression.indexIn(text)
SyntaxHighlighter.py(51):             while index >= 0:
SyntaxHighlighter.py(48):         for pattern, format in self.highlightingRules:
SyntaxHighlighter.py(49):             expression = QtCore.QRegExp(pattern)
SyntaxHighlighter.py(50):             index = expression.indexIn(text)
SyntaxHighlighter.py(51):             while index >= 0:
SyntaxHighlighter.py(48):         for pattern, format in self.highlightingRules:
SyntaxHighlighter.py(49):             expression = QtCore.QRegExp(pattern)
SyntaxHighlighter.py(50):             index = expression.indexIn(text)
SyntaxHighlighter.py(51):             while index >= 0:
SyntaxHighlighter.py(48):         for pattern, format in self.highlightingRules:
SyntaxHighlighter.py(49):             expression = QtCore.QRegExp(pattern)
SyntaxHighlighter.py(50):             index = expression.indexIn(text)
SyntaxHighlighter.py(51):             while index >= 0:
SyntaxHighlighter.py(48):         for pattern, format in self.highlightingRules:
SyntaxHighlighter.py(49):             expression = QtCore.QRegExp(pattern)
SyntaxHighlighter.py(50):             index = expression.indexIn(text)
SyntaxHighlighter.py(51):             while index >= 0:
SyntaxHighlighter.py(48):         for pattern, format in self.highlightingRules:
SyntaxHighlighter.py(49):             expression = QtCore.QRegExp(pattern)
SyntaxHighlighter.py(50):             index = expression.indexIn(text)
SyntaxHighlighter.py(51):             while index >= 0:
SyntaxHighlighter.py(48):         for pattern, format in self.highlightingRules:
SyntaxHighlighter.py(49):             expression = QtCore.QRegExp(pattern)
SyntaxHighlighter.py(50):             index = expression.indexIn(text)
SyntaxHighlighter.py(51):             while index >= 0:
SyntaxHighlighter.py(48):         for pattern, format in self.highlightingRules:
SyntaxHighlighter.py(49):             expression = QtCore.QRegExp(pattern)
SyntaxHighlighter.py(50):             index = expression.indexIn(text)
SyntaxHighlighter.py(51):             while index >= 0:
SyntaxHighlighter.py(48):         for pattern, format in self.highlightingRules:
SyntaxHighlighter.py(49):             expression = QtCore.QRegExp(pattern)
SyntaxHighlighter.py(50):             index = expression.indexIn(text)
SyntaxHighlighter.py(51):             while index >= 0:
SyntaxHighlighter.py(48):         for pattern, format in self.highlightingRules:
SyntaxHighlighter.py(49):             expression = QtCore.QRegExp(pattern)
SyntaxHighlighter.py(50):             index = expression.indexIn(text)
SyntaxHighlighter.py(51):             while index >= 0:
SyntaxHighlighter.py(48):         for pattern, format in self.highlightingRules:
SyntaxHighlighter.py(49):             expression = QtCore.QRegExp(pattern)
SyntaxHighlighter.py(50):             index = expression.indexIn(text)
SyntaxHighlighter.py(51):             while index >= 0:
SyntaxHighlighter.py(48):         for pattern, format in self.highlightingRules:
SyntaxHighlighter.py(49):             expression = QtCore.QRegExp(pattern)
SyntaxHighlighter.py(50):             index = expression.indexIn(text)
SyntaxHighlighter.py(51):             while index >= 0:
SyntaxHighlighter.py(48):         for pattern, format in self.highlightingRules:
SyntaxHighlighter.py(49):             expression = QtCore.QRegExp(pattern)
SyntaxHighlighter.py(50):             index = expression.indexIn(text)
SyntaxHighlighter.py(51):             while index >= 0:
SyntaxHighlighter.py(48):         for pattern, format in self.highlightingRules:
SyntaxHighlighter.py(49):             expression = QtCore.QRegExp(pattern)
SyntaxHighlighter.py(50):             index = expression.indexIn(text)
SyntaxHighlighter.py(51):             while index >= 0:
SyntaxHighlighter.py(48):         for pattern, format in self.highlightingRules:
SyntaxHighlighter.py(49):             expression = QtCore.QRegExp(pattern)
SyntaxHighlighter.py(50):             index = expression.indexIn(text)
SyntaxHighlighter.py(51):             while index >= 0:
SyntaxHighlighter.py(48):         for pattern, format in self.highlightingRules:
SyntaxHighlighter.py(49):             expression = QtCore.QRegExp(pattern)
SyntaxHighlighter.py(50):             index = expression.indexIn(text)
SyntaxHighlighter.py(51):             while index >= 0:
SyntaxHighlighter.py(48):         for pattern, format in self.highlightingRules:
SyntaxHighlighter.py(49):             expression = QtCore.QRegExp(pattern)
SyntaxHighlighter.py(50):             index = expression.indexIn(text)
SyntaxHighlighter.py(51):             while index >= 0:
SyntaxHighlighter.py(48):         for pattern, format in self.highlightingRules:
SyntaxHighlighter.py(49):             expression = QtCore.QRegExp(pattern)
SyntaxHighlighter.py(50):             index = expression.indexIn(text)
SyntaxHighlighter.py(51):             while index >= 0:
SyntaxHighlighter.py(48):         for pattern, format in self.highlightingRules:
SyntaxHighlighter.py(49):             expression = QtCore.QRegExp(pattern)
SyntaxHighlighter.py(50):             index = expression.indexIn(text)
SyntaxHighlighter.py(51):             while index >= 0:
SyntaxHighlighter.py(48):         for pattern, format in self.highlightingRules:
SyntaxHighlighter.py(49):             expression = QtCore.QRegExp(pattern)
SyntaxHighlighter.py(50):             index = expression.indexIn(text)
SyntaxHighlighter.py(51):             while index >= 0:
SyntaxHighlighter.py(48):         for pattern, format in self.highlightingRules:
SyntaxHighlighter.py(49):             expression = QtCore.QRegExp(pattern)
SyntaxHighlighter.py(50):             index = expression.indexIn(text)
SyntaxHighlighter.py(51):             while index >= 0:
SyntaxHighlighter.py(48):         for pattern, format in self.highlightingRules:
SyntaxHighlighter.py(49):             expression = QtCore.QRegExp(pattern)
SyntaxHighlighter.py(50):             index = expression.indexIn(text)
SyntaxHighlighter.py(51):             while index >= 0:
SyntaxHighlighter.py(48):         for pattern, format in self.highlightingRules:
SyntaxHighlighter.py(49):             expression = QtCore.QRegExp(pattern)
SyntaxHighlighter.py(50):             index = expression.indexIn(text)
SyntaxHighlighter.py(51):             while index >= 0:
SyntaxHighlighter.py(48):         for pattern, format in self.highlightingRules:
SyntaxHighlighter.py(56):         self.setCurrentBlockState(0)
SyntaxHighlighter.py(58):         startIndex = 0
SyntaxHighlighter.py(59):         if self.previousBlockState() != 1:
SyntaxHighlighter.py(60):             startIndex = self.commentStartExpression.indexIn(text)
SyntaxHighlighter.py(62):         while startIndex >= 0:
 --- modulename: Widget, funcname: drawBackground
Widget.py(1612):         super(GraphWidget, self).drawBackground(painter, rect)
Widget.py(1614):         polygon = self.mapToScene(self.viewport().rect())
Widget.py(1615):         self._file_name_label.setPos(polygon[0])
Widget.py(1616):         scene_rect = self.sceneRect()
Widget.py(1618):         settings = self.get_settings()
 --- modulename: Widget, funcname: get_settings
Widget.py(1042):         if path.isfile(self.options_widget.settings_path):
 --- modulename: genericpath, funcname: isfile
genericpath.py(36):     try:
genericpath.py(37):         st = os.stat(path)
genericpath.py(40):     return stat.S_ISREG(st.st_mode)
 --- modulename: stat, funcname: S_ISREG
stat.py(50):     return S_IFMT(mode) == S_IFREG
 --- modulename: stat, funcname: S_IFMT
stat.py(25):     return mode & 0170000
Widget.py(1043):             settings = QtCore.QSettings(self.options_widget.settings_path, QtCore.QSettings.IniFormat)
Widget.py(1044):             return settings
Widget.py(1619):         if settings:
Widget.py(1620):             color = QtGui.QColor(settings.value('SCENE/Scene bg color'))
Widget.py(1623):         painter.fillRect(rect.intersect(scene_rect), QtGui.QBrush(color))
Widget.py(1625):         left = int(scene_rect.left()) - (int(scene_rect.left()) % self.grid_size)
Widget.py(1626):         top = int(scene_rect.top()) - (int(scene_rect.top()) % self.grid_size)
Widget.py(1628):         painter.setPen(QtGui.QPen(self.kGridColor, 0.5, QtCore.Qt.SolidLine))
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1632):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1631):         for x in xrange(left, int(scene_rect.right()), self.grid_size):
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1636):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1635):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size):
Widget.py(1638):         painter.setPen(QtGui.QPen(self.kGridColorDarker, 1.0, QtCore.Qt.SolidLine))
Widget.py(1641):         for x in xrange(left, int(scene_rect.right()), self.grid_size * 10):
Widget.py(1642):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1641):         for x in xrange(left, int(scene_rect.right()), self.grid_size * 10):
Widget.py(1642):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1641):         for x in xrange(left, int(scene_rect.right()), self.grid_size * 10):
Widget.py(1642):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1641):         for x in xrange(left, int(scene_rect.right()), self.grid_size * 10):
Widget.py(1642):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1641):         for x in xrange(left, int(scene_rect.right()), self.grid_size * 10):
Widget.py(1642):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1641):         for x in xrange(left, int(scene_rect.right()), self.grid_size * 10):
Widget.py(1642):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1641):         for x in xrange(left, int(scene_rect.right()), self.grid_size * 10):
Widget.py(1642):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1641):         for x in xrange(left, int(scene_rect.right()), self.grid_size * 10):
Widget.py(1642):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1641):         for x in xrange(left, int(scene_rect.right()), self.grid_size * 10):
Widget.py(1642):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1641):         for x in xrange(left, int(scene_rect.right()), self.grid_size * 10):
Widget.py(1642):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1641):         for x in xrange(left, int(scene_rect.right()), self.grid_size * 10):
Widget.py(1642):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1641):         for x in xrange(left, int(scene_rect.right()), self.grid_size * 10):
Widget.py(1642):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1641):         for x in xrange(left, int(scene_rect.right()), self.grid_size * 10):
Widget.py(1642):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1641):         for x in xrange(left, int(scene_rect.right()), self.grid_size * 10):
Widget.py(1642):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1641):         for x in xrange(left, int(scene_rect.right()), self.grid_size * 10):
Widget.py(1642):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1641):         for x in xrange(left, int(scene_rect.right()), self.grid_size * 10):
Widget.py(1642):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1641):         for x in xrange(left, int(scene_rect.right()), self.grid_size * 10):
Widget.py(1642):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1641):         for x in xrange(left, int(scene_rect.right()), self.grid_size * 10):
Widget.py(1642):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1641):         for x in xrange(left, int(scene_rect.right()), self.grid_size * 10):
Widget.py(1642):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1641):         for x in xrange(left, int(scene_rect.right()), self.grid_size * 10):
Widget.py(1642):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1641):         for x in xrange(left, int(scene_rect.right()), self.grid_size * 10):
Widget.py(1642):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1641):         for x in xrange(left, int(scene_rect.right()), self.grid_size * 10):
Widget.py(1642):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1641):         for x in xrange(left, int(scene_rect.right()), self.grid_size * 10):
Widget.py(1642):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1641):         for x in xrange(left, int(scene_rect.right()), self.grid_size * 10):
Widget.py(1642):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1641):         for x in xrange(left, int(scene_rect.right()), self.grid_size * 10):
Widget.py(1642):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1641):         for x in xrange(left, int(scene_rect.right()), self.grid_size * 10):
Widget.py(1642):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1641):         for x in xrange(left, int(scene_rect.right()), self.grid_size * 10):
Widget.py(1642):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1641):         for x in xrange(left, int(scene_rect.right()), self.grid_size * 10):
Widget.py(1642):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1641):         for x in xrange(left, int(scene_rect.right()), self.grid_size * 10):
Widget.py(1642):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1641):         for x in xrange(left, int(scene_rect.right()), self.grid_size * 10):
Widget.py(1642):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1641):         for x in xrange(left, int(scene_rect.right()), self.grid_size * 10):
Widget.py(1642):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1641):         for x in xrange(left, int(scene_rect.right()), self.grid_size * 10):
Widget.py(1642):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1641):         for x in xrange(left, int(scene_rect.right()), self.grid_size * 10):
Widget.py(1642):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1641):         for x in xrange(left, int(scene_rect.right()), self.grid_size * 10):
Widget.py(1642):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1641):         for x in xrange(left, int(scene_rect.right()), self.grid_size * 10):
Widget.py(1642):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1641):         for x in xrange(left, int(scene_rect.right()), self.grid_size * 10):
Widget.py(1642):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1641):         for x in xrange(left, int(scene_rect.right()), self.grid_size * 10):
Widget.py(1642):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1641):         for x in xrange(left, int(scene_rect.right()), self.grid_size * 10):
Widget.py(1642):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1641):         for x in xrange(left, int(scene_rect.right()), self.grid_size * 10):
Widget.py(1642):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1641):         for x in xrange(left, int(scene_rect.right()), self.grid_size * 10):
Widget.py(1642):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1641):         for x in xrange(left, int(scene_rect.right()), self.grid_size * 10):
Widget.py(1642):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1641):         for x in xrange(left, int(scene_rect.right()), self.grid_size * 10):
Widget.py(1642):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1641):         for x in xrange(left, int(scene_rect.right()), self.grid_size * 10):
Widget.py(1642):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1641):         for x in xrange(left, int(scene_rect.right()), self.grid_size * 10):
Widget.py(1642):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1641):         for x in xrange(left, int(scene_rect.right()), self.grid_size * 10):
Widget.py(1642):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1641):         for x in xrange(left, int(scene_rect.right()), self.grid_size * 10):
Widget.py(1642):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1641):         for x in xrange(left, int(scene_rect.right()), self.grid_size * 10):
Widget.py(1642):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1641):         for x in xrange(left, int(scene_rect.right()), self.grid_size * 10):
Widget.py(1642):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1641):         for x in xrange(left, int(scene_rect.right()), self.grid_size * 10):
Widget.py(1642):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1641):         for x in xrange(left, int(scene_rect.right()), self.grid_size * 10):
Widget.py(1642):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1641):         for x in xrange(left, int(scene_rect.right()), self.grid_size * 10):
Widget.py(1642):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1641):         for x in xrange(left, int(scene_rect.right()), self.grid_size * 10):
Widget.py(1642):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1641):         for x in xrange(left, int(scene_rect.right()), self.grid_size * 10):
Widget.py(1642):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1641):         for x in xrange(left, int(scene_rect.right()), self.grid_size * 10):
Widget.py(1642):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1641):         for x in xrange(left, int(scene_rect.right()), self.grid_size * 10):
Widget.py(1642):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1641):         for x in xrange(left, int(scene_rect.right()), self.grid_size * 10):
Widget.py(1642):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1641):         for x in xrange(left, int(scene_rect.right()), self.grid_size * 10):
Widget.py(1642):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1641):         for x in xrange(left, int(scene_rect.right()), self.grid_size * 10):
Widget.py(1642):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1641):         for x in xrange(left, int(scene_rect.right()), self.grid_size * 10):
Widget.py(1642):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1641):         for x in xrange(left, int(scene_rect.right()), self.grid_size * 10):
Widget.py(1642):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1641):         for x in xrange(left, int(scene_rect.right()), self.grid_size * 10):
Widget.py(1642):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1641):         for x in xrange(left, int(scene_rect.right()), self.grid_size * 10):
Widget.py(1642):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1641):         for x in xrange(left, int(scene_rect.right()), self.grid_size * 10):
Widget.py(1642):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1641):         for x in xrange(left, int(scene_rect.right()), self.grid_size * 10):
Widget.py(1642):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1641):         for x in xrange(left, int(scene_rect.right()), self.grid_size * 10):
Widget.py(1642):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1641):         for x in xrange(left, int(scene_rect.right()), self.grid_size * 10):
Widget.py(1642):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1641):         for x in xrange(left, int(scene_rect.right()), self.grid_size * 10):
Widget.py(1642):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1641):         for x in xrange(left, int(scene_rect.right()), self.grid_size * 10):
Widget.py(1642):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1641):         for x in xrange(left, int(scene_rect.right()), self.grid_size * 10):
Widget.py(1642):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1641):         for x in xrange(left, int(scene_rect.right()), self.grid_size * 10):
Widget.py(1642):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1641):         for x in xrange(left, int(scene_rect.right()), self.grid_size * 10):
Widget.py(1642):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1641):         for x in xrange(left, int(scene_rect.right()), self.grid_size * 10):
Widget.py(1642):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1641):         for x in xrange(left, int(scene_rect.right()), self.grid_size * 10):
Widget.py(1642):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1641):         for x in xrange(left, int(scene_rect.right()), self.grid_size * 10):
Widget.py(1642):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1641):         for x in xrange(left, int(scene_rect.right()), self.grid_size * 10):
Widget.py(1642):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1641):         for x in xrange(left, int(scene_rect.right()), self.grid_size * 10):
Widget.py(1642):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1641):         for x in xrange(left, int(scene_rect.right()), self.grid_size * 10):
Widget.py(1642):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1641):         for x in xrange(left, int(scene_rect.right()), self.grid_size * 10):
Widget.py(1642):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1641):         for x in xrange(left, int(scene_rect.right()), self.grid_size * 10):
Widget.py(1642):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1641):         for x in xrange(left, int(scene_rect.right()), self.grid_size * 10):
Widget.py(1642):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1641):         for x in xrange(left, int(scene_rect.right()), self.grid_size * 10):
Widget.py(1642):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1641):         for x in xrange(left, int(scene_rect.right()), self.grid_size * 10):
Widget.py(1642):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1641):         for x in xrange(left, int(scene_rect.right()), self.grid_size * 10):
Widget.py(1642):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1641):         for x in xrange(left, int(scene_rect.right()), self.grid_size * 10):
Widget.py(1642):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1641):         for x in xrange(left, int(scene_rect.right()), self.grid_size * 10):
Widget.py(1642):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1641):         for x in xrange(left, int(scene_rect.right()), self.grid_size * 10):
Widget.py(1642):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1641):         for x in xrange(left, int(scene_rect.right()), self.grid_size * 10):
Widget.py(1642):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1641):         for x in xrange(left, int(scene_rect.right()), self.grid_size * 10):
Widget.py(1642):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1641):         for x in xrange(left, int(scene_rect.right()), self.grid_size * 10):
Widget.py(1642):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1641):         for x in xrange(left, int(scene_rect.right()), self.grid_size * 10):
Widget.py(1642):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1641):         for x in xrange(left, int(scene_rect.right()), self.grid_size * 10):
Widget.py(1642):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1641):         for x in xrange(left, int(scene_rect.right()), self.grid_size * 10):
Widget.py(1642):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1641):         for x in xrange(left, int(scene_rect.right()), self.grid_size * 10):
Widget.py(1642):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1641):         for x in xrange(left, int(scene_rect.right()), self.grid_size * 10):
Widget.py(1642):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1641):         for x in xrange(left, int(scene_rect.right()), self.grid_size * 10):
Widget.py(1642):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1641):         for x in xrange(left, int(scene_rect.right()), self.grid_size * 10):
Widget.py(1642):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1641):         for x in xrange(left, int(scene_rect.right()), self.grid_size * 10):
Widget.py(1642):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1641):         for x in xrange(left, int(scene_rect.right()), self.grid_size * 10):
Widget.py(1642):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1641):         for x in xrange(left, int(scene_rect.right()), self.grid_size * 10):
Widget.py(1642):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1641):         for x in xrange(left, int(scene_rect.right()), self.grid_size * 10):
Widget.py(1642):             painter.drawLine(x, scene_rect.top(), x, scene_rect.bottom())
Widget.py(1641):         for x in xrange(left, int(scene_rect.right()), self.grid_size * 10):
Widget.py(1645):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size * 10):
Widget.py(1646):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1645):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size * 10):
Widget.py(1646):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1645):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size * 10):
Widget.py(1646):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1645):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size * 10):
Widget.py(1646):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1645):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size * 10):
Widget.py(1646):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1645):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size * 10):
Widget.py(1646):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1645):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size * 10):
Widget.py(1646):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1645):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size * 10):
Widget.py(1646):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1645):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size * 10):
Widget.py(1646):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1645):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size * 10):
Widget.py(1646):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1645):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size * 10):
Widget.py(1646):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1645):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size * 10):
Widget.py(1646):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1645):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size * 10):
Widget.py(1646):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1645):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size * 10):
Widget.py(1646):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1645):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size * 10):
Widget.py(1646):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1645):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size * 10):
Widget.py(1646):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1645):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size * 10):
Widget.py(1646):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1645):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size * 10):
Widget.py(1646):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1645):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size * 10):
Widget.py(1646):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1645):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size * 10):
Widget.py(1646):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1645):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size * 10):
Widget.py(1646):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1645):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size * 10):
Widget.py(1646):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1645):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size * 10):
Widget.py(1646):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1645):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size * 10):
Widget.py(1646):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1645):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size * 10):
Widget.py(1646):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1645):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size * 10):
Widget.py(1646):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1645):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size * 10):
Widget.py(1646):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1645):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size * 10):
Widget.py(1646):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1645):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size * 10):
Widget.py(1646):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1645):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size * 10):
Widget.py(1646):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1645):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size * 10):
Widget.py(1646):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1645):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size * 10):
Widget.py(1646):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1645):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size * 10):
Widget.py(1646):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1645):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size * 10):
Widget.py(1646):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1645):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size * 10):
Widget.py(1646):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1645):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size * 10):
Widget.py(1646):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1645):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size * 10):
Widget.py(1646):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1645):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size * 10):
Widget.py(1646):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1645):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size * 10):
Widget.py(1646):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1645):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size * 10):
Widget.py(1646):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1645):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size * 10):
Widget.py(1646):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1645):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size * 10):
Widget.py(1646):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1645):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size * 10):
Widget.py(1646):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1645):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size * 10):
Widget.py(1646):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1645):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size * 10):
Widget.py(1646):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1645):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size * 10):
Widget.py(1646):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1645):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size * 10):
Widget.py(1646):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1645):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size * 10):
Widget.py(1646):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1645):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size * 10):
Widget.py(1646):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1645):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size * 10):
Widget.py(1646):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1645):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size * 10):
Widget.py(1646):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1645):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size * 10):
Widget.py(1646):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1645):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size * 10):
Widget.py(1646):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1645):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size * 10):
Widget.py(1646):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1645):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size * 10):
Widget.py(1646):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1645):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size * 10):
Widget.py(1646):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1645):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size * 10):
Widget.py(1646):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1645):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size * 10):
Widget.py(1646):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1645):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size * 10):
Widget.py(1646):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1645):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size * 10):
Widget.py(1646):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1645):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size * 10):
Widget.py(1646):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1645):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size * 10):
Widget.py(1646):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1645):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size * 10):
Widget.py(1646):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1645):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size * 10):
Widget.py(1646):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1645):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size * 10):
Widget.py(1646):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1645):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size * 10):
Widget.py(1646):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1645):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size * 10):
Widget.py(1646):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1645):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size * 10):
Widget.py(1646):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1645):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size * 10):
Widget.py(1646):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1645):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size * 10):
Widget.py(1646):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1645):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size * 10):
Widget.py(1646):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1645):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size * 10):
Widget.py(1646):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1645):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size * 10):
Widget.py(1646):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1645):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size * 10):
Widget.py(1646):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1645):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size * 10):
Widget.py(1646):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1645):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size * 10):
Widget.py(1646):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1645):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size * 10):
Widget.py(1646):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1645):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size * 10):
Widget.py(1646):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1645):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size * 10):
Widget.py(1646):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1645):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size * 10):
Widget.py(1646):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1645):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size * 10):
Widget.py(1646):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1645):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size * 10):
Widget.py(1646):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1645):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size * 10):
Widget.py(1646):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1645):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size * 10):
Widget.py(1646):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1645):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size * 10):
Widget.py(1646):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1645):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size * 10):
Widget.py(1646):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1645):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size * 10):
Widget.py(1646):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1645):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size * 10):
Widget.py(1646):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1645):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size * 10):
Widget.py(1646):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1645):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size * 10):
Widget.py(1646):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1645):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size * 10):
Widget.py(1646):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1645):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size * 10):
Widget.py(1646):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1645):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size * 10):
Widget.py(1646):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1645):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size * 10):
Widget.py(1646):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1645):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size * 10):
Widget.py(1646):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1645):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size * 10):
Widget.py(1646):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1645):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size * 10):
Widget.py(1646):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1645):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size * 10):
Widget.py(1646):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1645):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size * 10):
Widget.py(1646):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1645):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size * 10):
Widget.py(1646):             painter.drawLine(scene_rect.left(), y, scene_rect.right(), y)
Widget.py(1645):         for y in xrange(top, int(scene_rect.bottom()), self.grid_size * 10):
 --- modulename: Widget, funcname: _tick_executor
Widget.py(988):         for foo in self._tick_functions:
 --- modulename: Widget, funcname: _tick_executor
Widget.py(988):         for foo in self._tick_functions:
 --- modulename: Widget, funcname: _tick_executor
Widget.py(988):         for foo in self._tick_functions:
 --- modulename: Widget, funcname: _tick_executor
Widget.py(988):         for foo in self._tick_functions:
threading.py(758):             del self.__target, self.__args, self.__kwargs
 --- modulename: threading, funcname: _note
threading.py(65):             if self.__verbose:
 --- modulename: threading, funcname: __stop
threading.py(860):         if not hasattr(self, '_Thread__block'):
threading.py(862):         self.__block.acquire()
threading.py(863):         self.__stopped = True
threading.py(864):         self.__block.notify_all()
 --- modulename: threading, funcname: notifyAll
threading.py(407):         self.notify(len(self.__waiters))
 --- modulename: threading, funcname: notify
threading.py(383):         if not self._is_owned():
 --- modulename: threading, funcname: _is_owned
threading.py(303):         if self.__lock.acquire(0):
threading.py(307):             return True
threading.py(385):         __waiters = self.__waiters
threading.py(386):         waiters = __waiters[:n]
threading.py(387):         if not waiters:
threading.py(389):                 self._note("%s.notify(): no waiters", self)
 --- modulename: threading, funcname: _note
threading.py(65):             if self.__verbose:
threading.py(390):             return
threading.py(865):         self.__block.release()
 --- modulename: Widget, funcname: _tick_executor
Widget.py(988):         for foo in self._tick_functions:
 --- modulename: Widget, funcname: _tick_executor
Widget.py(988):         for foo in self._tick_functions:
 --- modulename: Widget, funcname: _tick_executor
Widget.py(988):         for foo in self._tick_functions:
 --- modulename: Widget, funcname: _tick_executor
Widget.py(988):         for foo in self._tick_functions:
 --- modulename: Widget, funcname: _tick_executor
Widget.py(988):         for foo in self._tick_functions:
 --- modulename: Widget, funcname: _tick_executor
Widget.py(988):         for foo in self._tick_functions:
 --- modulename: Widget, funcname: _tick_executor
Widget.py(988):         for foo in self._tick_functions:
 --- modulename: Widget, funcname: _tick_executor
Widget.py(988):         for foo in self._tick_functions:
 --- modulename: Widget, funcname: _tick_executor
Widget.py(988):         for foo in self._tick_functions:
 --- modulename: Widget, funcname: _tick_executor
Widget.py(988):         for foo in self._tick_functions:
 --- modulename: Widget, funcname: _tick_executor
Widget.py(988):         for foo in self._tick_functions:
 --- modulename: Widget, funcname: _tick_executor
Widget.py(988):         for foo in self._tick_functions:
 --- modulename: Widget, funcname: _tick_executor
Widget.py(988):         for foo in self._tick_functions:
 --- modulename: Widget, funcname: _tick_executor
Widget.py(988):         for foo in self._tick_functions:
 --- modulename: Widget, funcname: _tick_executor
Widget.py(988):         for foo in self._tick_functions:
 --- modulename: Widget, funcname: _tick_executor
Widget.py(988):         for foo in self._tick_functions:
 --- modulename: Widget, funcname: _tick_executor
Widget.py(988):         for foo in self._tick_functions:
 --- modulename: Widget, funcname: _tick_executor
Widget.py(988):         for foo in self._tick_functions:
 --- modulename: Widget, funcname: _tick_executor
Widget.py(988):         for foo in self._tick_functions:
 --- modulename: Widget, funcname: _tick_executor
Widget.py(988):         for foo in self._tick_functions:
 --- modulename: Widget, funcname: _tick_executor
Widget.py(988):         for foo in self._tick_functions:
 --- modulename: Widget, funcname: _tick_executor
Widget.py(988):         for foo in self._tick_functions:
 --- modulename: Widget, funcname: _tick_executor
Widget.py(988):         for foo in self._tick_functions:
 --- modulename: Widget, funcname: mousePressEvent
Widget.py(345):         super(NodeBoxTreeWidget, self).mousePressEvent(event)
Widget.py(346):         item_clicked = self.currentItem()
Widget.py(347):         if not item_clicked:
Widget.py(348):             event.ignore()
Widget.py(349):             return
 --- modulename: Widget, funcname: _tick_executor
Widget.py(988):         for foo in self._tick_functions:
 --- modulename: Widget, funcname: _tick_executor
Widget.py(988):         for foo in self._tick_functions:
 --- modulename: Widget, funcname: _tick_executor
Widget.py(988):         for foo in self._tick_functions:
 --- modulename: Widget, funcname: _tick_executor
Widget.py(988):         for foo in self._tick_functions:
 --- modulename: Widget, funcname: _tick_executor
Widget.py(988):         for foo in self._tick_functions:
 --- modulename: Widget, funcname: _tick_executor
Widget.py(988):         for foo in self._tick_functions:
 --- modulename: Widget, funcname: _tick_executor
Widget.py(988):         for foo in self._tick_functions:
 --- modulename: Widget, funcname: _tick_executor
Widget.py(988):         for foo in self._tick_functions:
 --- modulename: Widget, funcname: _tick_executor
Widget.py(988):         for foo in self._tick_functions:
 --- modulename: Widget, funcname: _tick_executor
Widget.py(988):         for foo in self._tick_functions:
 --- modulename: Widget, funcname: mousePressEvent
Widget.py(345):         super(NodeBoxTreeWidget, self).mousePressEvent(event)
Widget.py(346):         item_clicked = self.currentItem()
Widget.py(347):         if not item_clicked:
Widget.py(350):         pressed_text = item_clicked.text(0)
Widget.py(352):         if pressed_text in self.categories.keys():
Widget.py(355):         drag = QtGui.QDrag(self)
Widget.py(356):         mime_data = QtCore.QMimeData()
Widget.py(357):         mime_data.setText(pressed_text)
Widget.py(358):         drag.setMimeData(mime_data)
Widget.py(359):         drag.exec_()
 --- modulename: Widget, funcname: _tick_executor
Widget.py(988):         for foo in self._tick_functions:
 --- modulename: Widget, funcname: _tick_executor
Widget.py(988):         for foo in self._tick_functions:
 --- modulename: Widget, funcname: _tick_executor
Widget.py(988):         for foo in self._tick_functions:
 --- modulename: Widget, funcname: dragEnterEvent
Widget.py(197):         if event.mimeData().hasFormat('text/plain'):
Widget.py(198):             event.accept()
 --- modulename: Widget, funcname: dragMoveEvent
Widget.py(203):         if event.mimeData().hasFormat('text/plain'):
Widget.py(204):             event.setDropAction(QtCore.Qt.MoveAction)
Widget.py(205):             event.accept()
 --- modulename: Widget, funcname: dragMoveEvent
Widget.py(203):         if event.mimeData().hasFormat('text/plain'):
Widget.py(204):             event.setDropAction(QtCore.Qt.MoveAction)
Widget.py(205):             event.accept()
 --- modulename: Widget, funcname: dragMoveEvent
Widget.py(203):         if event.mimeData().hasFormat('text/plain'):
Widget.py(204):             event.setDropAction(QtCore.Qt.MoveAction)
Widget.py(205):             event.accept()
 --- modulename: Widget, funcname: dragMoveEvent
Widget.py(203):         if event.mimeData().hasFormat('text/plain'):
Widget.py(204):             event.setDropAction(QtCore.Qt.MoveAction)
Widget.py(205):             event.accept()
 --- modulename: Widget, funcname: dragMoveEvent
Widget.py(203):         if event.mimeData().hasFormat('text/plain'):
Widget.py(204):             event.setDropAction(QtCore.Qt.MoveAction)
Widget.py(205):             event.accept()
 --- modulename: Widget, funcname: _tick_executor
Widget.py(988):         for foo in self._tick_functions:
 --- modulename: Widget, funcname: dragMoveEvent
Widget.py(203):         if event.mimeData().hasFormat('text/plain'):
Widget.py(204):             event.setDropAction(QtCore.Qt.MoveAction)
Widget.py(205):             event.accept()
 --- modulename: Widget, funcname: dragMoveEvent
Widget.py(203):         if event.mimeData().hasFormat('text/plain'):
Widget.py(204):             event.setDropAction(QtCore.Qt.MoveAction)
Widget.py(205):             event.accept()
 --- modulename: Widget, funcname: dragMoveEvent
Widget.py(203):         if event.mimeData().hasFormat('text/plain'):
Widget.py(204):             event.setDropAction(QtCore.Qt.MoveAction)
Widget.py(205):             event.accept()
 --- modulename: Widget, funcname: dragMoveEvent
Widget.py(203):         if event.mimeData().hasFormat('text/plain'):
Widget.py(204):             event.setDropAction(QtCore.Qt.MoveAction)
Widget.py(205):             event.accept()
 --- modulename: Widget, funcname: dragMoveEvent
Widget.py(203):         if event.mimeData().hasFormat('text/plain'):
Widget.py(204):             event.setDropAction(QtCore.Qt.MoveAction)
Widget.py(205):             event.accept()
 --- modulename: Widget, funcname: dragMoveEvent
Widget.py(203):         if event.mimeData().hasFormat('text/plain'):
Widget.py(204):             event.setDropAction(QtCore.Qt.MoveAction)
Widget.py(205):             event.accept()
 --- modulename: Widget, funcname: dragMoveEvent
Widget.py(203):         if event.mimeData().hasFormat('text/plain'):
Widget.py(204):             event.setDropAction(QtCore.Qt.MoveAction)
Widget.py(205):             event.accept()
 --- modulename: Widget, funcname: dragMoveEvent
Widget.py(203):         if event.mimeData().hasFormat('text/plain'):
Widget.py(204):             event.setDropAction(QtCore.Qt.MoveAction)
Widget.py(205):             event.accept()
 --- modulename: Widget, funcname: _tick_executor
Widget.py(988):         for foo in self._tick_functions:
 --- modulename: Widget, funcname: _tick_executor
Widget.py(988):         for foo in self._tick_functions:
 --- modulename: Widget, funcname: dropEvent
Widget.py(224):         if event.mimeData().hasFormat('text/plain'):
Widget.py(225):             className = event.mimeData().text()
Widget.py(226):             name = self.parent().get_uniq_node_name(className)
 --- modulename: AbstractGraph, funcname: get_uniq_node_name
AbstractGraph.py(211):         nodes_names = [n.name for n in self.nodes]
AbstractGraph.py(212):         if name not in nodes_names:
AbstractGraph.py(213):             return name
Widget.py(227):             if className == "MakeArray":
Widget.py(230):                 self.parent().executeCommand("createNode {4}type {0} {4}x {1} {4}y {2} {4}n {3}".format(className, event.scenePos().x(), event.scenePos().y(), name, FLAG_SYMBOL))
 --- modulename: Widget, funcname: executeCommand
Widget.py(1678):         commandLine = parse(command)
 --- modulename: Widget, funcname: parse
Widget.py(166):     out = {}
Widget.py(167):     flag_sep = [m.start() for m in re.finditer(FLAG_SYMBOL, line)]
 --- modulename: re, funcname: finditer
re.py(190):         return _compile(pattern, flags).finditer(string)
 --- modulename: re, funcname: _compile
re.py(232):     pattern, flags = key
re.py(233):     bypass_cache = flags & DEBUG
re.py(234):     if not bypass_cache:
re.py(235):         cachekey = (type(key[0]),) + key
re.py(236):         try:
re.py(237):             p, loc = _cache[cachekey]
re.py(240):         except KeyError:
re.py(241):             pass
re.py(242):     if isinstance(pattern, _pattern_type):
re.py(246):     if not sre_compile.isstring(pattern):
 --- modulename: sre_compile, funcname: isstring
sre_compile.py(547):     for tp in STRING_TYPES:
sre_compile.py(548):         if isinstance(obj, tp):
sre_compile.py(549):             return 1
re.py(248):     try:
re.py(249):         p = sre_compile.compile(pattern, flags)
 --- modulename: sre_compile, funcname: compile
sre_compile.py(570):     if isstring(p):
 --- modulename: sre_compile, funcname: isstring
sre_compile.py(547):     for tp in STRING_TYPES:
sre_compile.py(548):         if isinstance(obj, tp):
sre_compile.py(549):             return 1
sre_compile.py(571):         pattern = p
sre_compile.py(572):         p = sre_parse.parse(p, flags)
 --- modulename: sre_parse, funcname: parse
sre_parse.py(709):     source = Tokenizer(str)
 --- modulename: sre_parse, funcname: __init__
sre_parse.py(190):         self.string = string
sre_parse.py(191):         self.index = 0
sre_parse.py(192):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(711):     if pattern is None:
sre_parse.py(712):         pattern = Pattern()
 --- modulename: sre_parse, funcname: __init__
sre_parse.py(68):         self.flags = 0
sre_parse.py(69):         self.open = []
sre_parse.py(70):         self.groups = 1
sre_parse.py(71):         self.groupdict = {}
sre_parse.py(72):         self.lookbehind = 0
sre_parse.py(713):     pattern.flags = flags
sre_parse.py(714):     pattern.str = str
sre_parse.py(716):     p = _parse_sub(source, pattern, 0)
 --- modulename: sre_parse, funcname: _parse_sub
sre_parse.py(320):     items = []
sre_parse.py(321):     itemsappend = items.append
sre_parse.py(322):     sourcematch = source.match
sre_parse.py(323):     while 1:
sre_parse.py(324):         itemsappend(_parse(source, state))
 --- modulename: sre_parse, funcname: _parse
sre_parse.py(397):     subpattern = SubPattern(state)
 --- modulename: sre_parse, funcname: __init__
sre_parse.py(93):         self.pattern = pattern
sre_parse.py(94):         if data is None:
sre_parse.py(95):             data = []
sre_parse.py(96):         self.data = data
sre_parse.py(97):         self.width = None
sre_parse.py(400):     subpatternappend = subpattern.append
sre_parse.py(401):     sourceget = source.get
sre_parse.py(402):     sourcematch = source.match
sre_parse.py(403):     _len = len
sre_parse.py(404):     PATTERNENDERS = _PATTERNENDERS
sre_parse.py(405):     ASSERTCHARS = _ASSERTCHARS
sre_parse.py(406):     LOOKBEHINDASSERTCHARS = _LOOKBEHINDASSERTCHARS
sre_parse.py(407):     REPEATCODES = _REPEATCODES
sre_parse.py(409):     while 1:
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(413):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(195):             self.next = None
sre_parse.py(196):             return
sre_parse.py(215):         return this
sre_parse.py(414):         if this is None:
sre_parse.py(417):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(428):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(429):             subpatternappend((LITERAL, ord(this)))
 --- modulename: sre_parse, funcname: append
sre_parse.py(150):         self.data.append(code)
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(413):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(195):             self.next = None
sre_parse.py(196):             return
sre_parse.py(215):         return this
sre_parse.py(414):         if this is None:
sre_parse.py(415):             break # end of pattern
sre_parse.py(704):     return subpattern
sre_parse.py(325):         if sourcematch("|"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(211):         return 0
sre_parse.py(327):         if not nested:
sre_parse.py(328):             break
sre_parse.py(334):     if len(items) == 1:
sre_parse.py(335):         return items[0]
sre_parse.py(718):     tail = source.get()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(195):             self.next = None
sre_parse.py(196):             return
sre_parse.py(215):         return this
sre_parse.py(719):     if tail == ")":
sre_parse.py(721):     elif tail:
sre_parse.py(724):     if not (flags & SRE_FLAG_VERBOSE) and p.pattern.flags & SRE_FLAG_VERBOSE:
sre_parse.py(729):     if flags & SRE_FLAG_DEBUG:
sre_parse.py(732):     return p
sre_compile.py(576):     code = _code(p, flags)
 --- modulename: sre_compile, funcname: _code
sre_compile.py(554):     flags = p.pattern.flags | flags
sre_compile.py(555):     code = []
sre_compile.py(558):     _compile_info(code, p, flags)
 --- modulename: sre_compile, funcname: _compile_info
sre_compile.py(437):     lo, hi = pattern.getwidth()
 --- modulename: sre_parse, funcname: getwidth
sre_parse.py(153):         if self.width:
sre_parse.py(155):         lo = hi = 0
sre_parse.py(156):         UNITCODES = (ANY, RANGE, IN, LITERAL, NOT_LITERAL, CATEGORY)
sre_parse.py(157):         REPEATCODES = (MIN_REPEAT, MAX_REPEAT)
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(159):             if op is BRANCH:
sre_parse.py(168):             elif op is CALL:
sre_parse.py(172):             elif op is SUBPATTERN:
sre_parse.py(176):             elif op in REPEATCODES:
sre_parse.py(180):             elif op in UNITCODES:
sre_parse.py(181):                 lo = lo + 1
sre_parse.py(182):                 hi = hi + 1
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(185):         self.width = min(lo, MAXREPEAT - 1), min(hi, MAXREPEAT)
sre_parse.py(186):         return self.width
sre_compile.py(438):     if lo == 0:
sre_compile.py(441):     prefix = []
sre_compile.py(442):     prefixappend = prefix.append
sre_compile.py(443):     prefix_skip = 0
sre_compile.py(444):     charset = [] # not used
sre_compile.py(445):     charsetappend = charset.append
sre_compile.py(446):     if not (flags & SRE_FLAG_IGNORECASE):
sre_compile.py(448):         for op, av in pattern.data:
sre_compile.py(449):             if op is LITERAL:
sre_compile.py(450):                 if len(prefix) == prefix_skip:
sre_compile.py(451):                     prefix_skip = prefix_skip + 1
sre_compile.py(452):                 prefixappend(av)
sre_compile.py(448):         for op, av in pattern.data:
sre_compile.py(462):         if not prefix and pattern.data:
sre_compile.py(501):     emit = code.append
sre_compile.py(502):     emit(OPCODES[INFO])
sre_compile.py(503):     skip = len(code); emit(0)
sre_compile.py(505):     mask = 0
sre_compile.py(506):     if prefix:
sre_compile.py(507):         mask = SRE_INFO_PREFIX
sre_compile.py(508):         if len(prefix) == prefix_skip == len(pattern.data):
sre_compile.py(509):             mask = mask + SRE_INFO_LITERAL
sre_compile.py(512):     emit(mask)
sre_compile.py(514):     if lo < MAXCODE:
sre_compile.py(515):         emit(lo)
sre_compile.py(519):     if hi < MAXCODE:
sre_compile.py(520):         emit(hi)
sre_compile.py(524):     if prefix:
sre_compile.py(525):         emit(len(prefix)) # length
sre_compile.py(526):         emit(prefix_skip) # skip
sre_compile.py(527):         code.extend(prefix)
sre_compile.py(529):         table = [-1] + ([0]*len(prefix))
sre_compile.py(530):         for i in xrange(len(prefix)):
sre_compile.py(531):             table[i+1] = table[i]+1
sre_compile.py(532):             while table[i+1] > 0 and prefix[i] != prefix[table[i+1]-1]:
sre_compile.py(530):         for i in xrange(len(prefix)):
sre_compile.py(534):         code.extend(table[1:]) # don't store first entry
sre_compile.py(537):     code[skip] = len(code) - skip
sre_compile.py(561):     _compile(code, p.data, flags)
 --- modulename: sre_compile, funcname: _compile
sre_compile.py(66):     emit = code.append
sre_compile.py(67):     _len = len
sre_compile.py(68):     LITERAL_CODES = _LITERAL_CODES
sre_compile.py(69):     REPEATING_CODES = _REPEATING_CODES
sre_compile.py(70):     SUCCESS_CODES = _SUCCESS_CODES
sre_compile.py(71):     ASSERT_CODES = _ASSERT_CODES
sre_compile.py(72):     if (flags & SRE_FLAG_IGNORECASE and
sre_compile.py(77):         fixes = None
sre_compile.py(78):     for op, av in pattern:
sre_compile.py(79):         if op in LITERAL_CODES:
sre_compile.py(80):             if flags & SRE_FLAG_IGNORECASE:
sre_compile.py(96):                 emit(OPCODES[op])
sre_compile.py(97):                 emit(av)
sre_compile.py(78):     for op, av in pattern:
sre_compile.py(563):     code.append(OPCODES[SUCCESS])
sre_compile.py(565):     return code
sre_compile.py(581):     if p.pattern.groups > 100:
sre_compile.py(587):     groupindex = p.pattern.groupdict
sre_compile.py(588):     indexgroup = [None] * p.pattern.groups
sre_compile.py(589):     for k, i in groupindex.items():
sre_compile.py(592):     return _sre.compile(
sre_compile.py(593):         pattern, flags | p.pattern.flags, code,
sre_compile.py(594):         p.pattern.groups-1,
sre_compile.py(595):         groupindex, indexgroup
re.py(252):     if not bypass_cache:
re.py(253):         if len(_cache) >= _MAXCACHE:
re.py(255):         if p.flags & LOCALE:
re.py(260):             loc = None
re.py(261):         _cache[cachekey] = p, loc
re.py(262):     return p
Widget.py(167):     flag_sep = [m.start() for m in re.finditer(FLAG_SYMBOL, line)]
Widget.py(167):     flag_sep = [m.start() for m in re.finditer(FLAG_SYMBOL, line)]
Widget.py(167):     flag_sep = [m.start() for m in re.finditer(FLAG_SYMBOL, line)]
Widget.py(167):     flag_sep = [m.start() for m in re.finditer(FLAG_SYMBOL, line)]
Widget.py(168):     if len(flag_sep) == 0:
Widget.py(171):     out = {"flags": {}}
Widget.py(172):     cmd = line.split(" ")[0]
Widget.py(173):     out["cmd"] = cmd
Widget.py(174):     for i in xrange(len(flag_sep) - 1):
Widget.py(175):         newLine = line[flag_sep[i]:]
Widget.py(176):         newLineDashes = [m.start() for m in re.finditer(FLAG_SYMBOL, newLine)]
 --- modulename: re, funcname: finditer
re.py(190):         return _compile(pattern, flags).finditer(string)
 --- modulename: re, funcname: _compile
re.py(232):     pattern, flags = key
re.py(233):     bypass_cache = flags & DEBUG
re.py(234):     if not bypass_cache:
re.py(235):         cachekey = (type(key[0]),) + key
re.py(236):         try:
re.py(237):             p, loc = _cache[cachekey]
re.py(238):             if loc is None or loc == _locale.setlocale(_locale.LC_CTYPE):
re.py(239):                 return p
Widget.py(176):         newLineDashes = [m.start() for m in re.finditer(FLAG_SYMBOL, newLine)]
Widget.py(176):         newLineDashes = [m.start() for m in re.finditer(FLAG_SYMBOL, newLine)]
Widget.py(176):         newLineDashes = [m.start() for m in re.finditer(FLAG_SYMBOL, newLine)]
Widget.py(176):         newLineDashes = [m.start() for m in re.finditer(FLAG_SYMBOL, newLine)]
Widget.py(177):         flag = newLine[:newLineDashes[1] - 1].split(" ", 1)  # flag + value
Widget.py(178):         out["flags"][flag[0]] = flag[1]
Widget.py(174):     for i in xrange(len(flag_sep) - 1):
Widget.py(175):         newLine = line[flag_sep[i]:]
Widget.py(176):         newLineDashes = [m.start() for m in re.finditer(FLAG_SYMBOL, newLine)]
 --- modulename: re, funcname: finditer
re.py(190):         return _compile(pattern, flags).finditer(string)
 --- modulename: re, funcname: _compile
re.py(232):     pattern, flags = key
re.py(233):     bypass_cache = flags & DEBUG
re.py(234):     if not bypass_cache:
re.py(235):         cachekey = (type(key[0]),) + key
re.py(236):         try:
re.py(237):             p, loc = _cache[cachekey]
re.py(238):             if loc is None or loc == _locale.setlocale(_locale.LC_CTYPE):
re.py(239):                 return p
Widget.py(176):         newLineDashes = [m.start() for m in re.finditer(FLAG_SYMBOL, newLine)]
Widget.py(176):         newLineDashes = [m.start() for m in re.finditer(FLAG_SYMBOL, newLine)]
Widget.py(176):         newLineDashes = [m.start() for m in re.finditer(FLAG_SYMBOL, newLine)]
Widget.py(177):         flag = newLine[:newLineDashes[1] - 1].split(" ", 1)  # flag + value
Widget.py(178):         out["flags"][flag[0]] = flag[1]
Widget.py(174):     for i in xrange(len(flag_sep) - 1):
Widget.py(175):         newLine = line[flag_sep[i]:]
Widget.py(176):         newLineDashes = [m.start() for m in re.finditer(FLAG_SYMBOL, newLine)]
 --- modulename: re, funcname: finditer
re.py(190):         return _compile(pattern, flags).finditer(string)
 --- modulename: re, funcname: _compile
re.py(232):     pattern, flags = key
re.py(233):     bypass_cache = flags & DEBUG
re.py(234):     if not bypass_cache:
re.py(235):         cachekey = (type(key[0]),) + key
re.py(236):         try:
re.py(237):             p, loc = _cache[cachekey]
re.py(238):             if loc is None or loc == _locale.setlocale(_locale.LC_CTYPE):
re.py(239):                 return p
Widget.py(176):         newLineDashes = [m.start() for m in re.finditer(FLAG_SYMBOL, newLine)]
Widget.py(176):         newLineDashes = [m.start() for m in re.finditer(FLAG_SYMBOL, newLine)]
Widget.py(177):         flag = newLine[:newLineDashes[1] - 1].split(" ", 1)  # flag + value
Widget.py(178):         out["flags"][flag[0]] = flag[1]
Widget.py(174):     for i in xrange(len(flag_sep) - 1):
Widget.py(179):     flag = line[flag_sep[-1]:].split(" ", 1)  # last flag + value
Widget.py(180):     out["flags"][flag[0]] = flag[1]
Widget.py(181):     return out
Widget.py(1681):         if not commandLine["cmd"] in self.parent.consoleInput.builtinCommands:
Widget.py(1705):         if commandLine['cmd'] == "renameNode":
Widget.py(1718):         if commandLine['cmd'] == "plot":
Widget.py(1723):         if commandLine['cmd'] == "load":
Widget.py(1728):         if commandLine['cmd'] == "save":
Widget.py(1733):         if commandLine['cmd'] == "setScrollbars":
Widget.py(1745):         if commandLine['cmd'] == "setHorizontalScrollBar":
Widget.py(1756):         if commandLine['cmd'] == "setVerticalScrollBar":
Widget.py(1767):         if commandLine['cmd'] == "setConsoleVisible":
Widget.py(1781):         if commandLine['cmd'] == "setNodeBoxVisible":
Widget.py(1795):         if commandLine['cmd'] == "setPropertiesVisible":
Widget.py(1809):         if commandLine['cmd'] == "createNode":
Widget.py(1810):             try:
Widget.py(1811):                 self.parent.console.append(command)
 --- modulename: SyntaxHighlighter, funcname: highlightBlock
SyntaxHighlighter.py(48):         for pattern, format in self.highlightingRules:
SyntaxHighlighter.py(49):             expression = QtCore.QRegExp(pattern)
SyntaxHighlighter.py(50):             index = expression.indexIn(text)
SyntaxHighlighter.py(51):             while index >= 0:
SyntaxHighlighter.py(48):         for pattern, format in self.highlightingRules:
SyntaxHighlighter.py(49):             expression = QtCore.QRegExp(pattern)
SyntaxHighlighter.py(50):             index = expression.indexIn(text)
SyntaxHighlighter.py(51):             while index >= 0:
SyntaxHighlighter.py(48):         for pattern, format in self.highlightingRules:
SyntaxHighlighter.py(49):             expression = QtCore.QRegExp(pattern)
SyntaxHighlighter.py(50):             index = expression.indexIn(text)
SyntaxHighlighter.py(51):             while index >= 0:
SyntaxHighlighter.py(48):         for pattern, format in self.highlightingRules:
SyntaxHighlighter.py(49):             expression = QtCore.QRegExp(pattern)
SyntaxHighlighter.py(50):             index = expression.indexIn(text)
SyntaxHighlighter.py(51):             while index >= 0:
SyntaxHighlighter.py(48):         for pattern, format in self.highlightingRules:
SyntaxHighlighter.py(49):             expression = QtCore.QRegExp(pattern)
SyntaxHighlighter.py(50):             index = expression.indexIn(text)
SyntaxHighlighter.py(51):             while index >= 0:
SyntaxHighlighter.py(48):         for pattern, format in self.highlightingRules:
SyntaxHighlighter.py(49):             expression = QtCore.QRegExp(pattern)
SyntaxHighlighter.py(50):             index = expression.indexIn(text)
SyntaxHighlighter.py(51):             while index >= 0:
SyntaxHighlighter.py(48):         for pattern, format in self.highlightingRules:
SyntaxHighlighter.py(49):             expression = QtCore.QRegExp(pattern)
SyntaxHighlighter.py(50):             index = expression.indexIn(text)
SyntaxHighlighter.py(51):             while index >= 0:
SyntaxHighlighter.py(48):         for pattern, format in self.highlightingRules:
SyntaxHighlighter.py(49):             expression = QtCore.QRegExp(pattern)
SyntaxHighlighter.py(50):             index = expression.indexIn(text)
SyntaxHighlighter.py(51):             while index >= 0:
SyntaxHighlighter.py(48):         for pattern, format in self.highlightingRules:
SyntaxHighlighter.py(49):             expression = QtCore.QRegExp(pattern)
SyntaxHighlighter.py(50):             index = expression.indexIn(text)
SyntaxHighlighter.py(51):             while index >= 0:
SyntaxHighlighter.py(48):         for pattern, format in self.highlightingRules:
SyntaxHighlighter.py(49):             expression = QtCore.QRegExp(pattern)
SyntaxHighlighter.py(50):             index = expression.indexIn(text)
SyntaxHighlighter.py(51):             while index >= 0:
SyntaxHighlighter.py(48):         for pattern, format in self.highlightingRules:
SyntaxHighlighter.py(49):             expression = QtCore.QRegExp(pattern)
SyntaxHighlighter.py(50):             index = expression.indexIn(text)
SyntaxHighlighter.py(51):             while index >= 0:
SyntaxHighlighter.py(48):         for pattern, format in self.highlightingRules:
SyntaxHighlighter.py(49):             expression = QtCore.QRegExp(pattern)
SyntaxHighlighter.py(50):             index = expression.indexIn(text)
SyntaxHighlighter.py(51):             while index >= 0:
SyntaxHighlighter.py(48):         for pattern, format in self.highlightingRules:
SyntaxHighlighter.py(49):             expression = QtCore.QRegExp(pattern)
SyntaxHighlighter.py(50):             index = expression.indexIn(text)
SyntaxHighlighter.py(51):             while index >= 0:
SyntaxHighlighter.py(52):                 length = expression.matchedLength()
SyntaxHighlighter.py(53):                 self.setFormat(index, length, format)
SyntaxHighlighter.py(54):                 index = expression.indexIn(text, index + length)
SyntaxHighlighter.py(51):             while index >= 0:
SyntaxHighlighter.py(48):         for pattern, format in self.highlightingRules:
SyntaxHighlighter.py(49):             expression = QtCore.QRegExp(pattern)
SyntaxHighlighter.py(50):             index = expression.indexIn(text)
SyntaxHighlighter.py(51):             while index >= 0:
SyntaxHighlighter.py(48):         for pattern, format in self.highlightingRules:
SyntaxHighlighter.py(49):             expression = QtCore.QRegExp(pattern)
SyntaxHighlighter.py(50):             index = expression.indexIn(text)
SyntaxHighlighter.py(51):             while index >= 0:
SyntaxHighlighter.py(48):         for pattern, format in self.highlightingRules:
SyntaxHighlighter.py(49):             expression = QtCore.QRegExp(pattern)
SyntaxHighlighter.py(50):             index = expression.indexIn(text)
SyntaxHighlighter.py(51):             while index >= 0:
SyntaxHighlighter.py(48):         for pattern, format in self.highlightingRules:
SyntaxHighlighter.py(49):             expression = QtCore.QRegExp(pattern)
SyntaxHighlighter.py(50):             index = expression.indexIn(text)
SyntaxHighlighter.py(51):             while index >= 0:
SyntaxHighlighter.py(48):         for pattern, format in self.highlightingRules:
SyntaxHighlighter.py(49):             expression = QtCore.QRegExp(pattern)
SyntaxHighlighter.py(50):             index = expression.indexIn(text)
SyntaxHighlighter.py(51):             while index >= 0:
SyntaxHighlighter.py(48):         for pattern, format in self.highlightingRules:
SyntaxHighlighter.py(49):             expression = QtCore.QRegExp(pattern)
SyntaxHighlighter.py(50):             index = expression.indexIn(text)
SyntaxHighlighter.py(51):             while index >= 0:
SyntaxHighlighter.py(48):         for pattern, format in self.highlightingRules:
SyntaxHighlighter.py(49):             expression = QtCore.QRegExp(pattern)
SyntaxHighlighter.py(50):             index = expression.indexIn(text)
SyntaxHighlighter.py(51):             while index >= 0:
SyntaxHighlighter.py(48):         for pattern, format in self.highlightingRules:
SyntaxHighlighter.py(49):             expression = QtCore.QRegExp(pattern)
SyntaxHighlighter.py(50):             index = expression.indexIn(text)
SyntaxHighlighter.py(51):             while index >= 0:
SyntaxHighlighter.py(48):         for pattern, format in self.highlightingRules:
SyntaxHighlighter.py(49):             expression = QtCore.QRegExp(pattern)
SyntaxHighlighter.py(50):             index = expression.indexIn(text)
SyntaxHighlighter.py(51):             while index >= 0:
SyntaxHighlighter.py(48):         for pattern, format in self.highlightingRules:
SyntaxHighlighter.py(49):             expression = QtCore.QRegExp(pattern)
SyntaxHighlighter.py(50):             index = expression.indexIn(text)
SyntaxHighlighter.py(51):             while index >= 0:
SyntaxHighlighter.py(48):         for pattern, format in self.highlightingRules:
SyntaxHighlighter.py(49):             expression = QtCore.QRegExp(pattern)
SyntaxHighlighter.py(50):             index = expression.indexIn(text)
SyntaxHighlighter.py(51):             while index >= 0:
SyntaxHighlighter.py(48):         for pattern, format in self.highlightingRules:
SyntaxHighlighter.py(49):             expression = QtCore.QRegExp(pattern)
SyntaxHighlighter.py(50):             index = expression.indexIn(text)
SyntaxHighlighter.py(51):             while index >= 0:
SyntaxHighlighter.py(52):                 length = expression.matchedLength()
SyntaxHighlighter.py(53):                 self.setFormat(index, length, format)
SyntaxHighlighter.py(54):                 index = expression.indexIn(text, index + length)
SyntaxHighlighter.py(51):             while index >= 0:
SyntaxHighlighter.py(52):                 length = expression.matchedLength()
SyntaxHighlighter.py(53):                 self.setFormat(index, length, format)
SyntaxHighlighter.py(54):                 index = expression.indexIn(text, index + length)
SyntaxHighlighter.py(51):             while index >= 0:
SyntaxHighlighter.py(52):                 length = expression.matchedLength()
SyntaxHighlighter.py(53):                 self.setFormat(index, length, format)
SyntaxHighlighter.py(54):                 index = expression.indexIn(text, index + length)
SyntaxHighlighter.py(51):             while index >= 0:
SyntaxHighlighter.py(52):                 length = expression.matchedLength()
SyntaxHighlighter.py(53):                 self.setFormat(index, length, format)
SyntaxHighlighter.py(54):                 index = expression.indexIn(text, index + length)
SyntaxHighlighter.py(51):             while index >= 0:
SyntaxHighlighter.py(48):         for pattern, format in self.highlightingRules:
SyntaxHighlighter.py(49):             expression = QtCore.QRegExp(pattern)
SyntaxHighlighter.py(50):             index = expression.indexIn(text)
SyntaxHighlighter.py(51):             while index >= 0:
SyntaxHighlighter.py(48):         for pattern, format in self.highlightingRules:
SyntaxHighlighter.py(49):             expression = QtCore.QRegExp(pattern)
SyntaxHighlighter.py(50):             index = expression.indexIn(text)
SyntaxHighlighter.py(51):             while index >= 0:
SyntaxHighlighter.py(48):         for pattern, format in self.highlightingRules:
SyntaxHighlighter.py(56):         self.setCurrentBlockState(0)
SyntaxHighlighter.py(58):         startIndex = 0
SyntaxHighlighter.py(59):         if self.previousBlockState() != 1:
SyntaxHighlighter.py(60):             startIndex = self.commentStartExpression.indexIn(text)
SyntaxHighlighter.py(62):         while startIndex >= 0:
Widget.py(1812):                 if commandLine['flags']['~type'] == "MakeArray":
Widget.py(1818):                     self.create_node(commandLine['flags']['~type'], float(commandLine['flags']['~x']), float(commandLine['flags']['~y']), commandLine['flags']['~n'])
 --- modulename: Widget, funcname: create_node
Widget.py(1671):         node_class = get_node(Nodes, className, self)
 --- modulename: Widget, funcname: get_node
Widget.py(49):     if hasattr(module, name):
Widget.py(50):         try:
Widget.py(51):             mod = getattr(module, name)
Widget.py(52):             mod = mod(name, graph)
 --- modulename: SumNode, funcname: __init__
SumNode.py(7):         BaseNode.Node.__init__(self, name, graph)
 --- modulename: BaseNode, funcname: __init__
BaseNode.py(78):         AGNode.__init__(self, name, graph)
 --- modulename: AbstractGraph, funcname: __init__
AbstractGraph.py(147):         super(AGNode, self).__init__()
AbstractGraph.py(148):         self.graph = weakref.ref(graph)
AbstractGraph.py(149):         self.name = name
AbstractGraph.py(150):         self.object_type = AGObjectTypes.tNode
AbstractGraph.py(151):         self.inputs = []
AbstractGraph.py(152):         self.outputs = []
AbstractGraph.py(153):         self.x = 0.0
AbstractGraph.py(154):         self.y = 0.0
BaseNode.py(79):         QtGui.QGraphicsItem.__init__(self)
BaseNode.py(80):         self.options = self.graph().get_settings()
 --- modulename: Widget, funcname: get_settings
Widget.py(1042):         if path.isfile(self.options_widget.settings_path):
 --- modulename: genericpath, funcname: isfile
genericpath.py(36):     try:
genericpath.py(37):         st = os.stat(path)
genericpath.py(40):     return stat.S_ISREG(st.st_mode)
 --- modulename: stat, funcname: S_ISREG
stat.py(50):     return S_IFMT(mode) == S_IFREG
 --- modulename: stat, funcname: S_IFMT
stat.py(25):     return mode & 0170000
Widget.py(1043):             settings = QtCore.QSettings(self.options_widget.settings_path, QtCore.QSettings.IniFormat)
Widget.py(1044):             return settings
BaseNode.py(81):         if self.options:
BaseNode.py(82):             self.opt_node_base_color = QtGui.QColor(self.options.value('NODES/Nodes base color'))
BaseNode.py(83):             self.opt_selected_pen_color = QtGui.QColor(self.options.value('NODES/Nodes selected pen color'))
BaseNode.py(84):             self.opt_lyt_a_color = QtGui.QColor(self.options.value('NODES/Nodes lyt A color'))
BaseNode.py(85):             self.opt_lyt_b_color = QtGui.QColor(self.options.value('NODES/Nodes lyt B color'))
BaseNode.py(86):             opt_pen_selected_type_name = QtGui.QColor(self.options.value('NODES/Nodes selected pen type'))
BaseNode.py(87):             self.opt_pen_selected_type = get_line_type(opt_pen_selected_type_name)
 --- modulename: Settings, funcname: get_line_type
Settings.py(27):     if name == 'lDotLine':
Settings.py(28):         opt_pen_selected_type = QtCore.Qt.DotLine
Settings.py(37):     return opt_pen_selected_type
BaseNode.py(88):         self.object_type = AGObjectTypes.tNode
BaseNode.py(89):         self._color_idx = 1
BaseNode.py(90):         self.colors = colors
BaseNode.py(91):         self.height_offset = 3
BaseNode.py(92):         self.spacings = spacings
BaseNode.py(93):         self.port_types = port_types
BaseNode.py(94):         self.nodeMainGWidget = QtGui.QGraphicsWidget()
BaseNode.py(95):         self.w = w
BaseNode.py(96):         self.h = 40
BaseNode.py(97):         self.sizes = [0, 0, self.w, self.h, 1, 1]
BaseNode.py(98):         self.setFlag(self.ItemIsMovable)
 --- modulename: BaseNode, funcname: itemChange
BaseNode.py(147):         if change == self.ItemPositionChange:
BaseNode.py(152):         return QtGui.QGraphicsItem.itemChange(self, change, value)
 --- modulename: BaseNode, funcname: itemChange
BaseNode.py(147):         if change == self.ItemPositionChange:
BaseNode.py(152):         return QtGui.QGraphicsItem.itemChange(self, change, value)
BaseNode.py(99):         self.setFlag(QtGui.QGraphicsItem.ItemIsFocusable)
 --- modulename: BaseNode, funcname: itemChange
BaseNode.py(147):         if change == self.ItemPositionChange:
BaseNode.py(152):         return QtGui.QGraphicsItem.itemChange(self, change, value)
 --- modulename: BaseNode, funcname: itemChange
BaseNode.py(147):         if change == self.ItemPositionChange:
BaseNode.py(152):         return QtGui.QGraphicsItem.itemChange(self, change, value)
BaseNode.py(100):         self.setFlag(self.ItemIsSelectable)
 --- modulename: BaseNode, funcname: itemChange
BaseNode.py(147):         if change == self.ItemPositionChange:
BaseNode.py(152):         return QtGui.QGraphicsItem.itemChange(self, change, value)
 --- modulename: BaseNode, funcname: itemChange
BaseNode.py(147):         if change == self.ItemPositionChange:
BaseNode.py(152):         return QtGui.QGraphicsItem.itemChange(self, change, value)
BaseNode.py(101):         self.setFlag(self.ItemSendsGeometryChanges)
 --- modulename: BaseNode, funcname: itemChange
BaseNode.py(147):         if change == self.ItemPositionChange:
BaseNode.py(152):         return QtGui.QGraphicsItem.itemChange(self, change, value)
 --- modulename: BaseNode, funcname: itemChange
BaseNode.py(147):         if change == self.ItemPositionChange:
BaseNode.py(152):         return QtGui.QGraphicsItem.itemChange(self, change, value)
BaseNode.py(102):         self.custom_widget_data = {}
BaseNode.py(104):         self.label = NodeName(self.name, self)
 --- modulename: BaseNode, funcname: __init__
BaseNode.py(10):         QtGui.QGraphicsTextItem.__init__(self)
BaseNode.py(11):         self.object_type = AGObjectTypes.tNodeName
BaseNode.py(12):         self.name = name
BaseNode.py(13):         self.color = color
BaseNode.py(14):         self.setPlainText(self.name)
BaseNode.py(15):         self.setParentItem(parent)
 --- modulename: BaseNode, funcname: itemChange
BaseNode.py(147):         if change == self.ItemPositionChange:
BaseNode.py(152):         return QtGui.QGraphicsItem.itemChange(self, change, value)
BaseNode.py(16):         self.setTextInteractionFlags(QtCore.Qt.TextEditorInteraction)
BaseNode.py(17):         self.setCursor(QtCore.Qt.IBeamCursor)
BaseNode.py(18):         self.options = self.parentItem().graph().get_settings()
 --- modulename: Widget, funcname: get_settings
Widget.py(1042):         if path.isfile(self.options_widget.settings_path):
 --- modulename: genericpath, funcname: isfile
genericpath.py(36):     try:
genericpath.py(37):         st = os.stat(path)
genericpath.py(40):     return stat.S_ISREG(st.st_mode)
 --- modulename: stat, funcname: S_ISREG
stat.py(50):     return S_IFMT(mode) == S_IFREG
 --- modulename: stat, funcname: S_IFMT
stat.py(25):     return mode & 0170000
Widget.py(1043):             settings = QtCore.QSettings(self.options_widget.settings_path, QtCore.QSettings.IniFormat)
Widget.py(1044):             return settings
BaseNode.py(19):         if self.options:
BaseNode.py(20):             self.opt_bg_color = QtGui.QColor(self.options.value('NODES/Nodes label bg color'))
BaseNode.py(21):             self.text_color = QtGui.QColor(self.options.value('NODES/Nodes label font color'))
BaseNode.py(22):             self.setDefaultTextColor(self.text_color)
BaseNode.py(23):             self.opt_font = QtGui.QFont(self.options.value('NODES/Nodes label font'))
BaseNode.py(24):             self.opt_font_size = int(self.options.value('NODES/Nodes label font size'))
BaseNode.py(25):             self.opt_font.setPointSize(self.opt_font_size)
BaseNode.py(26):             self.setFont(self.opt_font)
BaseNode.py(27):         self.setPos(0, -self.boundingRect().height())
BaseNode.py(106):         self.nodeMainGWidget.setParentItem(self)
 --- modulename: BaseNode, funcname: itemChange
BaseNode.py(147):         if change == self.ItemPositionChange:
BaseNode.py(152):         return QtGui.QGraphicsItem.itemChange(self, change, value)
BaseNode.py(108):         self.portsMainLayout = QtGui.QGraphicsLinearLayout(QtCore.Qt.Horizontal)
BaseNode.py(110):         self.portsMainLayout.setContentsMargins(1, 1, 1, 1)
BaseNode.py(111):         self.nodeMainGWidget.setLayout(self.portsMainLayout)
BaseNode.py(112):         self.nodeMainGWidget.setX(self.nodeMainGWidget.x() - self.spacings.kPortOffset / 2)
BaseNode.py(114):         self.inputsLayout = QtGui.QGraphicsLinearLayout(QtCore.Qt.Vertical)
BaseNode.py(116):         self.inputsLayout.setContentsMargins(1, 1, 1, 1)
BaseNode.py(117):         self.portsMainLayout.addItem(self.inputsLayout)
BaseNode.py(120):         self.outputsLayout = QtGui.QGraphicsLinearLayout(QtCore.Qt.Vertical)
BaseNode.py(121):         self.outputsLayout.setSpacing(self.spacings.kPortSpacing)
BaseNode.py(122):         self.outputsLayout.setContentsMargins(1, 1, 1, 1)
BaseNode.py(123):         self.portsMainLayout.addItem(self.outputsLayout)
BaseNode.py(125):         self.setZValue(1)
 --- modulename: BaseNode, funcname: itemChange
BaseNode.py(147):         if change == self.ItemPositionChange:
BaseNode.py(152):         return QtGui.QGraphicsItem.itemChange(self, change, value)
 --- modulename: BaseNode, funcname: itemChange
BaseNode.py(147):         if change == self.ItemPositionChange:
BaseNode.py(152):         return QtGui.QGraphicsItem.itemChange(self, change, value)
BaseNode.py(126):         self.setCursor(QtCore.Qt.OpenHandCursor)
 --- modulename: BaseNode, funcname: itemChange
BaseNode.py(147):         if change == self.ItemPositionChange:
BaseNode.py(152):         return QtGui.QGraphicsItem.itemChange(self, change, value)
 --- modulename: BaseNode, funcname: itemChange
BaseNode.py(147):         if change == self.ItemPositionChange:
BaseNode.py(152):         return QtGui.QGraphicsItem.itemChange(self, change, value)
BaseNode.py(127):         if addHeader:
BaseNode.py(128):             self.head = self.add_layout(True)
 --- modulename: BaseNode, funcname: add_layout
BaseNode.py(293):         lyt = QtGui.QGraphicsLinearLayout()
BaseNode.py(294):         lyt.setSizePolicy(QtGui.QSizePolicy.Maximum, QtGui.QSizePolicy.Maximum)
BaseNode.py(295):         lyt.setContentsMargins(1, 1, 1, 1)
BaseNode.py(300):         if portType == AGPortTypes.kInput:
BaseNode.py(303):             self.outputsLayout.addItem(lyt)
BaseNode.py(304):         return lyt
BaseNode.py(129):         self.effect = QtGui.QGraphicsDropShadowEffect()
BaseNode.py(130):         self.effect.setColor(Colors.kSceneBackground.lighter(50))
BaseNode.py(131):         self.effect.setParent(self.graph())
BaseNode.py(132):         self.effect.setBlurRadius(20)
BaseNode.py(133):         self.effect.setOffset(5, 10)
BaseNode.py(134):         self.effect.setEnabled(False)
BaseNode.py(135):         self.setGraphicsEffect(self.effect)
BaseNode.py(136):         self.tweakPosition()
 --- modulename: BaseNode, funcname: tweakPosition
BaseNode.py(139):         value = self.scenePos()
BaseNode.py(140):         self.setX(roundup(value.x() - self.graph().grid_size, self.graph().grid_size))
 --- modulename: AGraphCommon, funcname: roundup
AGraphCommon.py(11):     return int(math.ceil(x / to)) * to
 --- modulename: BaseNode, funcname: itemChange
BaseNode.py(147):         if change == self.ItemPositionChange:
BaseNode.py(149):             value.setX(roundup(value.x() - self.graph().grid_size + self.graph().grid_size / 3.0, self.graph().grid_size))
 --- modulename: AGraphCommon, funcname: roundup
AGraphCommon.py(11):     return int(math.ceil(x / to)) * to
BaseNode.py(150):             value.setY(roundup(value.y() - self.graph().grid_size + self.graph().grid_size / 3.0, self.graph().grid_size))
 --- modulename: AGraphCommon, funcname: roundup
AGraphCommon.py(11):     return int(math.ceil(x / to)) * to
BaseNode.py(151):             return value
 --- modulename: BaseNode, funcname: itemChange
BaseNode.py(147):         if change == self.ItemPositionChange:
BaseNode.py(152):         return QtGui.QGraphicsItem.itemChange(self, change, value)
BaseNode.py(141):         self.setY(roundup(value.y() - self.graph().grid_size, self.graph().grid_size))
 --- modulename: AGraphCommon, funcname: roundup
AGraphCommon.py(11):     return int(math.ceil(x / to)) * to
 --- modulename: BaseNode, funcname: itemChange
BaseNode.py(147):         if change == self.ItemPositionChange:
BaseNode.py(149):             value.setX(roundup(value.x() - self.graph().grid_size + self.graph().grid_size / 3.0, self.graph().grid_size))
 --- modulename: AGraphCommon, funcname: roundup
AGraphCommon.py(11):     return int(math.ceil(x / to)) * to
BaseNode.py(150):             value.setY(roundup(value.y() - self.graph().grid_size + self.graph().grid_size / 3.0, self.graph().grid_size))
 --- modulename: AGraphCommon, funcname: roundup
AGraphCommon.py(11):     return int(math.ceil(x / to)) * to
BaseNode.py(151):             return value
 --- modulename: BaseNode, funcname: itemChange
BaseNode.py(147):         if change == self.ItemPositionChange:
BaseNode.py(152):         return QtGui.QGraphicsItem.itemChange(self, change, value)
SumNode.py(8):         self.inputB = self.add_input_port('inputB', AGPortDataTypes.tNumeric)
 --- modulename: BaseNode, funcname: add_input_port
BaseNode.py(278):         p = self._add_port(AGPortTypes.kInput, data_type, port_name)
 --- modulename: BaseNode, funcname: _add_port
BaseNode.py(327):         newColor = color
BaseNode.py(329):         if data_type == AGPortDataTypes.tNumeric:
BaseNode.py(331):             newColor = QtGui.QColor(0, 100, 0, 255)
BaseNode.py(344):         p = Port(name, self, data_type, 10, 10, newColor)
 --- modulename: Port, funcname: __init__
Port.py(18):         AGPort.__init__(self, name, parent, data_type)
 --- modulename: AbstractGraph, funcname: __init__
AbstractGraph.py(9):         super(AGPort, self).__init__()
AbstractGraph.py(10):         self.name = name.replace(" ", "_")
AbstractGraph.py(11):         self.parent = weakref.ref(parent)
AbstractGraph.py(12):         self.object_type = AGObjectTypes.tPort
AbstractGraph.py(13):         self.data_type = data_type
AbstractGraph.py(14):         self.allowed_data_types = [data_type]
AbstractGraph.py(15):         self.affects = []
AbstractGraph.py(16):         self.affected_by = []
AbstractGraph.py(17):         self.edge_list = []
AbstractGraph.py(18):         self.type = None
AbstractGraph.py(19):         self.dirty = True
AbstractGraph.py(21):         self._data = self.getDefaultDataValue()
 --- modulename: AbstractGraph, funcname: getDefaultDataValue
AbstractGraph.py(24):         if self.data_type == AGPortDataTypes.tNumeric:
AbstractGraph.py(25):             return 0.0
Port.py(19):         QtGui.QGraphicsWidget.__init__(self)
Port.py(20):         name = name.replace(" ", "_")  # spaces are not allowed
Port.py(21):         self.setParentItem(parent)
 --- modulename: BaseNode, funcname: itemChange
BaseNode.py(147):         if change == self.ItemPositionChange:
BaseNode.py(152):         return QtGui.QGraphicsItem.itemChange(self, change, value)
Port.py(22):         self.menu = QtGui.QMenu()
Port.py(23):         self.disconnected = self.menu.addAction('Disconnect all')
Port.py(24):         self.disconnected.triggered.connect(self.disconnect_all)
Port.py(25):         self.newPos = QtCore.QPointF()
Port.py(26):         self.setFlag(QtGui.QGraphicsWidget.ItemSendsGeometryChanges)
Port.py(27):         self.setCacheMode(self.DeviceCoordinateCache)
Port.py(28):         self.setAcceptHoverEvents(True)
Port.py(29):         self.setZValue(2)
Port.py(30):         self.__width = width + 1
Port.py(31):         self.__height = height + 1
Port.py(32):         self.hovered = False
Port.py(33):         self.startPos = None
Port.py(34):         self.endPos = None
Port.py(35):         self.options = self.parent().graph().get_settings()
 --- modulename: Widget, funcname: get_settings
Widget.py(1042):         if path.isfile(self.options_widget.settings_path):
 --- modulename: genericpath, funcname: isfile
genericpath.py(36):     try:
genericpath.py(37):         st = os.stat(path)
genericpath.py(40):     return stat.S_ISREG(st.st_mode)
 --- modulename: stat, funcname: S_ISREG
stat.py(50):     return S_IFMT(mode) == S_IFREG
 --- modulename: stat, funcname: S_IFMT
stat.py(25):     return mode & 0170000
Widget.py(1043):             settings = QtCore.QSettings(self.options_widget.settings_path, QtCore.QSettings.IniFormat)
Widget.py(1044):             return settings
Port.py(36):         self.reroutes = []
Port.py(37):         if self.options:
Port.py(38):             self.color = color
Port.py(39):             opt_dirty_pen = QtGui.QColor(self.options.value('NODES/Port dirty color'))
Port.py(40):             opt_dirty_type_name = self.options.value('NODES/Port dirty type')
Port.py(41):             opt_port_dirty_pen_type = get_line_type(opt_dirty_type_name)
 --- modulename: Settings, funcname: get_line_type
Settings.py(27):     if name == 'lDotLine':
Settings.py(28):         opt_pen_selected_type = QtCore.Qt.DotLine
Settings.py(37):     return opt_pen_selected_type
Port.py(42):             self._dirty_pen = QtGui.QPen(opt_dirty_pen, 0.5, opt_port_dirty_pen_type, QtCore.Qt.RoundCap, QtCore.Qt.RoundJoin)
BaseNode.py(345):         p.type = port_type
BaseNode.py(346):         connector_name = QtGui.QGraphicsProxyWidget()
BaseNode.py(347):         lbl = QtGui.QLabel(p.name)
BaseNode.py(348):         lbl.setAlignment(QtCore.Qt.AlignVCenter)
BaseNode.py(349):         lbl.setAttribute(QtCore.Qt.WA_TranslucentBackground)
BaseNode.py(350):         if self.options:
BaseNode.py(351):             font = QtGui.QFont(self.options.value('NODES/Port label font'))
BaseNode.py(352):             color = QtGui.QColor(self.options.value('NODES/Port label color'))
BaseNode.py(353):             font.setPointSize(int(self.options.value('NODES/Port label size')))
BaseNode.py(354):             lbl.setFont(font)
BaseNode.py(355):             style = 'color: rgb({0}, {1}, {2}, {3});'.format(
BaseNode.py(356):                 color.red(),
BaseNode.py(357):                 color.green(),
BaseNode.py(358):                 color.blue(),
BaseNode.py(359):                 color.alpha())
BaseNode.py(360):             lbl.setStyleSheet(style)
BaseNode.py(361):         connector_name.setWidget(lbl)
BaseNode.py(362):         if port_type == self.port_types.kInput:
BaseNode.py(363):             inPortLyt = self.add_layout(port_type)
 --- modulename: BaseNode, funcname: add_layout
BaseNode.py(293):         lyt = QtGui.QGraphicsLinearLayout()
BaseNode.py(294):         lyt.setSizePolicy(QtGui.QSizePolicy.Maximum, QtGui.QSizePolicy.Maximum)
BaseNode.py(295):         lyt.setContentsMargins(1, 1, 1, 1)
BaseNode.py(300):         if portType == AGPortTypes.kInput:
BaseNode.py(301):             self.inputsLayout.addItem(lyt)
BaseNode.py(304):         return lyt
BaseNode.py(364):             lbl.setAlignment(QtCore.Qt.AlignLeft)
BaseNode.py(365):             inPortLyt.addItem(p)
 --- modulename: BaseNode, funcname: itemChange
BaseNode.py(147):         if change == self.ItemPositionChange:
BaseNode.py(152):         return QtGui.QGraphicsItem.itemChange(self, change, value)
BaseNode.py(366):             inPortLyt.addItem(connector_name)
BaseNode.py(367):             self.inputs.append(p)
BaseNode.py(368):             self.inputsLayout.insertItem(1, inPortLyt)
BaseNode.py(369):             self.inputsLayout.setStretchFactor(inPortLyt, 1)
BaseNode.py(378):         return p
BaseNode.py(279):         return p
SumNode.py(9):         self.inputA = self.add_input_port('inputA', AGPortDataTypes.tNumeric)
 --- modulename: BaseNode, funcname: add_input_port
BaseNode.py(278):         p = self._add_port(AGPortTypes.kInput, data_type, port_name)
 --- modulename: BaseNode, funcname: _add_port
BaseNode.py(327):         newColor = color
BaseNode.py(329):         if data_type == AGPortDataTypes.tNumeric:
BaseNode.py(331):             newColor = QtGui.QColor(0, 100, 0, 255)
BaseNode.py(344):         p = Port(name, self, data_type, 10, 10, newColor)
 --- modulename: Port, funcname: __init__
Port.py(18):         AGPort.__init__(self, name, parent, data_type)
 --- modulename: AbstractGraph, funcname: __init__
AbstractGraph.py(9):         super(AGPort, self).__init__()
AbstractGraph.py(10):         self.name = name.replace(" ", "_")
AbstractGraph.py(11):         self.parent = weakref.ref(parent)
AbstractGraph.py(12):         self.object_type = AGObjectTypes.tPort
AbstractGraph.py(13):         self.data_type = data_type
AbstractGraph.py(14):         self.allowed_data_types = [data_type]
AbstractGraph.py(15):         self.affects = []
AbstractGraph.py(16):         self.affected_by = []
AbstractGraph.py(17):         self.edge_list = []
AbstractGraph.py(18):         self.type = None
AbstractGraph.py(19):         self.dirty = True
AbstractGraph.py(21):         self._data = self.getDefaultDataValue()
 --- modulename: AbstractGraph, funcname: getDefaultDataValue
AbstractGraph.py(24):         if self.data_type == AGPortDataTypes.tNumeric:
AbstractGraph.py(25):             return 0.0
Port.py(19):         QtGui.QGraphicsWidget.__init__(self)
Port.py(20):         name = name.replace(" ", "_")  # spaces are not allowed
Port.py(21):         self.setParentItem(parent)
 --- modulename: BaseNode, funcname: itemChange
BaseNode.py(147):         if change == self.ItemPositionChange:
BaseNode.py(152):         return QtGui.QGraphicsItem.itemChange(self, change, value)
Port.py(22):         self.menu = QtGui.QMenu()
Port.py(23):         self.disconnected = self.menu.addAction('Disconnect all')
Port.py(24):         self.disconnected.triggered.connect(self.disconnect_all)
Port.py(25):         self.newPos = QtCore.QPointF()
Port.py(26):         self.setFlag(QtGui.QGraphicsWidget.ItemSendsGeometryChanges)
Port.py(27):         self.setCacheMode(self.DeviceCoordinateCache)
Port.py(28):         self.setAcceptHoverEvents(True)
Port.py(29):         self.setZValue(2)
Port.py(30):         self.__width = width + 1
Port.py(31):         self.__height = height + 1
Port.py(32):         self.hovered = False
Port.py(33):         self.startPos = None
Port.py(34):         self.endPos = None
Port.py(35):         self.options = self.parent().graph().get_settings()
 --- modulename: Widget, funcname: get_settings
Widget.py(1042):         if path.isfile(self.options_widget.settings_path):
 --- modulename: genericpath, funcname: isfile
genericpath.py(36):     try:
genericpath.py(37):         st = os.stat(path)
genericpath.py(40):     return stat.S_ISREG(st.st_mode)
 --- modulename: stat, funcname: S_ISREG
stat.py(50):     return S_IFMT(mode) == S_IFREG
 --- modulename: stat, funcname: S_IFMT
stat.py(25):     return mode & 0170000
Widget.py(1043):             settings = QtCore.QSettings(self.options_widget.settings_path, QtCore.QSettings.IniFormat)
Widget.py(1044):             return settings
Port.py(36):         self.reroutes = []
Port.py(37):         if self.options:
Port.py(38):             self.color = color
Port.py(39):             opt_dirty_pen = QtGui.QColor(self.options.value('NODES/Port dirty color'))
Port.py(40):             opt_dirty_type_name = self.options.value('NODES/Port dirty type')
Port.py(41):             opt_port_dirty_pen_type = get_line_type(opt_dirty_type_name)
 --- modulename: Settings, funcname: get_line_type
Settings.py(27):     if name == 'lDotLine':
Settings.py(28):         opt_pen_selected_type = QtCore.Qt.DotLine
Settings.py(37):     return opt_pen_selected_type
Port.py(42):             self._dirty_pen = QtGui.QPen(opt_dirty_pen, 0.5, opt_port_dirty_pen_type, QtCore.Qt.RoundCap, QtCore.Qt.RoundJoin)
BaseNode.py(345):         p.type = port_type
BaseNode.py(346):         connector_name = QtGui.QGraphicsProxyWidget()
BaseNode.py(347):         lbl = QtGui.QLabel(p.name)
BaseNode.py(348):         lbl.setAlignment(QtCore.Qt.AlignVCenter)
BaseNode.py(349):         lbl.setAttribute(QtCore.Qt.WA_TranslucentBackground)
BaseNode.py(350):         if self.options:
BaseNode.py(351):             font = QtGui.QFont(self.options.value('NODES/Port label font'))
BaseNode.py(352):             color = QtGui.QColor(self.options.value('NODES/Port label color'))
BaseNode.py(353):             font.setPointSize(int(self.options.value('NODES/Port label size')))
BaseNode.py(354):             lbl.setFont(font)
BaseNode.py(355):             style = 'color: rgb({0}, {1}, {2}, {3});'.format(
BaseNode.py(356):                 color.red(),
BaseNode.py(357):                 color.green(),
BaseNode.py(358):                 color.blue(),
BaseNode.py(359):                 color.alpha())
BaseNode.py(360):             lbl.setStyleSheet(style)
BaseNode.py(361):         connector_name.setWidget(lbl)
BaseNode.py(362):         if port_type == self.port_types.kInput:
BaseNode.py(363):             inPortLyt = self.add_layout(port_type)
 --- modulename: BaseNode, funcname: add_layout
BaseNode.py(293):         lyt = QtGui.QGraphicsLinearLayout()
BaseNode.py(294):         lyt.setSizePolicy(QtGui.QSizePolicy.Maximum, QtGui.QSizePolicy.Maximum)
BaseNode.py(295):         lyt.setContentsMargins(1, 1, 1, 1)
BaseNode.py(300):         if portType == AGPortTypes.kInput:
BaseNode.py(301):             self.inputsLayout.addItem(lyt)
BaseNode.py(304):         return lyt
BaseNode.py(364):             lbl.setAlignment(QtCore.Qt.AlignLeft)
BaseNode.py(365):             inPortLyt.addItem(p)
 --- modulename: BaseNode, funcname: itemChange
BaseNode.py(147):         if change == self.ItemPositionChange:
BaseNode.py(152):         return QtGui.QGraphicsItem.itemChange(self, change, value)
BaseNode.py(366):             inPortLyt.addItem(connector_name)
BaseNode.py(367):             self.inputs.append(p)
BaseNode.py(368):             self.inputsLayout.insertItem(1, inPortLyt)
BaseNode.py(369):             self.inputsLayout.setStretchFactor(inPortLyt, 1)
BaseNode.py(378):         return p
BaseNode.py(279):         return p
SumNode.py(10):         self.output = self.add_output_port('output', AGPortDataTypes.tNumeric)
 --- modulename: BaseNode, funcname: add_output_port
BaseNode.py(287):         p = self._add_port(AGPortTypes.kOutput, data_type, port_name)
 --- modulename: BaseNode, funcname: _add_port
BaseNode.py(327):         newColor = color
BaseNode.py(329):         if data_type == AGPortDataTypes.tNumeric:
BaseNode.py(331):             newColor = QtGui.QColor(0, 100, 0, 255)
BaseNode.py(344):         p = Port(name, self, data_type, 10, 10, newColor)
 --- modulename: Port, funcname: __init__
Port.py(18):         AGPort.__init__(self, name, parent, data_type)
 --- modulename: AbstractGraph, funcname: __init__
AbstractGraph.py(9):         super(AGPort, self).__init__()
AbstractGraph.py(10):         self.name = name.replace(" ", "_")
AbstractGraph.py(11):         self.parent = weakref.ref(parent)
AbstractGraph.py(12):         self.object_type = AGObjectTypes.tPort
AbstractGraph.py(13):         self.data_type = data_type
AbstractGraph.py(14):         self.allowed_data_types = [data_type]
AbstractGraph.py(15):         self.affects = []
AbstractGraph.py(16):         self.affected_by = []
AbstractGraph.py(17):         self.edge_list = []
AbstractGraph.py(18):         self.type = None
AbstractGraph.py(19):         self.dirty = True
AbstractGraph.py(21):         self._data = self.getDefaultDataValue()
 --- modulename: AbstractGraph, funcname: getDefaultDataValue
AbstractGraph.py(24):         if self.data_type == AGPortDataTypes.tNumeric:
AbstractGraph.py(25):             return 0.0
Port.py(19):         QtGui.QGraphicsWidget.__init__(self)
Port.py(20):         name = name.replace(" ", "_")  # spaces are not allowed
Port.py(21):         self.setParentItem(parent)
 --- modulename: BaseNode, funcname: itemChange
BaseNode.py(147):         if change == self.ItemPositionChange:
BaseNode.py(152):         return QtGui.QGraphicsItem.itemChange(self, change, value)
Port.py(22):         self.menu = QtGui.QMenu()
Port.py(23):         self.disconnected = self.menu.addAction('Disconnect all')
Port.py(24):         self.disconnected.triggered.connect(self.disconnect_all)
Port.py(25):         self.newPos = QtCore.QPointF()
Port.py(26):         self.setFlag(QtGui.QGraphicsWidget.ItemSendsGeometryChanges)
Port.py(27):         self.setCacheMode(self.DeviceCoordinateCache)
Port.py(28):         self.setAcceptHoverEvents(True)
Port.py(29):         self.setZValue(2)
Port.py(30):         self.__width = width + 1
Port.py(31):         self.__height = height + 1
Port.py(32):         self.hovered = False
Port.py(33):         self.startPos = None
Port.py(34):         self.endPos = None
Port.py(35):         self.options = self.parent().graph().get_settings()
 --- modulename: Widget, funcname: get_settings
Widget.py(1042):         if path.isfile(self.options_widget.settings_path):
 --- modulename: genericpath, funcname: isfile
genericpath.py(36):     try:
genericpath.py(37):         st = os.stat(path)
genericpath.py(40):     return stat.S_ISREG(st.st_mode)
 --- modulename: stat, funcname: S_ISREG
stat.py(50):     return S_IFMT(mode) == S_IFREG
 --- modulename: stat, funcname: S_IFMT
stat.py(25):     return mode & 0170000
Widget.py(1043):             settings = QtCore.QSettings(self.options_widget.settings_path, QtCore.QSettings.IniFormat)
Widget.py(1044):             return settings
Port.py(36):         self.reroutes = []
Port.py(37):         if self.options:
Port.py(38):             self.color = color
Port.py(39):             opt_dirty_pen = QtGui.QColor(self.options.value('NODES/Port dirty color'))
Port.py(40):             opt_dirty_type_name = self.options.value('NODES/Port dirty type')
Port.py(41):             opt_port_dirty_pen_type = get_line_type(opt_dirty_type_name)
 --- modulename: Settings, funcname: get_line_type
Settings.py(27):     if name == 'lDotLine':
Settings.py(28):         opt_pen_selected_type = QtCore.Qt.DotLine
Settings.py(37):     return opt_pen_selected_type
Port.py(42):             self._dirty_pen = QtGui.QPen(opt_dirty_pen, 0.5, opt_port_dirty_pen_type, QtCore.Qt.RoundCap, QtCore.Qt.RoundJoin)
BaseNode.py(345):         p.type = port_type
BaseNode.py(346):         connector_name = QtGui.QGraphicsProxyWidget()
BaseNode.py(347):         lbl = QtGui.QLabel(p.name)
BaseNode.py(348):         lbl.setAlignment(QtCore.Qt.AlignVCenter)
BaseNode.py(349):         lbl.setAttribute(QtCore.Qt.WA_TranslucentBackground)
BaseNode.py(350):         if self.options:
BaseNode.py(351):             font = QtGui.QFont(self.options.value('NODES/Port label font'))
BaseNode.py(352):             color = QtGui.QColor(self.options.value('NODES/Port label color'))
BaseNode.py(353):             font.setPointSize(int(self.options.value('NODES/Port label size')))
BaseNode.py(354):             lbl.setFont(font)
BaseNode.py(355):             style = 'color: rgb({0}, {1}, {2}, {3});'.format(
BaseNode.py(356):                 color.red(),
BaseNode.py(357):                 color.green(),
BaseNode.py(358):                 color.blue(),
BaseNode.py(359):                 color.alpha())
BaseNode.py(360):             lbl.setStyleSheet(style)
BaseNode.py(361):         connector_name.setWidget(lbl)
BaseNode.py(362):         if port_type == self.port_types.kInput:
BaseNode.py(370):         elif port_type == self.port_types.kOutput:
BaseNode.py(371):             outPortLyt = self.add_layout(port_type)
 --- modulename: BaseNode, funcname: add_layout
BaseNode.py(293):         lyt = QtGui.QGraphicsLinearLayout()
BaseNode.py(294):         lyt.setSizePolicy(QtGui.QSizePolicy.Maximum, QtGui.QSizePolicy.Maximum)
BaseNode.py(295):         lyt.setContentsMargins(1, 1, 1, 1)
BaseNode.py(300):         if portType == AGPortTypes.kInput:
BaseNode.py(303):             self.outputsLayout.addItem(lyt)
BaseNode.py(304):         return lyt
BaseNode.py(372):             lbl.setAlignment(QtCore.Qt.AlignRight)
BaseNode.py(373):             outPortLyt.addItem(connector_name)
BaseNode.py(374):             outPortLyt.addItem(p)
 --- modulename: BaseNode, funcname: itemChange
BaseNode.py(147):         if change == self.ItemPositionChange:
BaseNode.py(152):         return QtGui.QGraphicsItem.itemChange(self, change, value)
BaseNode.py(375):             self.outputs.append(p)
BaseNode.py(376):             self.outputsLayout.insertItem(1, outPortLyt)
BaseNode.py(377):             self.outputsLayout.setStretchFactor(outPortLyt, 1)
BaseNode.py(378):         return p
BaseNode.py(288):         return p
SumNode.py(11):         portAffects(self.inputA, self.output)
 --- modulename: AGraphCommon, funcname: portAffects
AGraphCommon.py(19):     affects_port.affects.append(affected_port)
AGraphCommon.py(20):     affected_port.affected_by.append(affects_port)
SumNode.py(12):         portAffects(self.inputB, self.output)
 --- modulename: AGraphCommon, funcname: portAffects
AGraphCommon.py(19):     affects_port.affects.append(affected_port)
AGraphCommon.py(20):     affected_port.affected_by.append(affects_port)
Widget.py(53):             return mod
Widget.py(1672):         node_class.set_name(name)
 --- modulename: BaseNode, funcname: set_name
BaseNode.py(170):         AGNode.set_name(self, name)
 --- modulename: AbstractGraph, funcname: set_name
AbstractGraph.py(164):         self.name = self.graph().get_uniq_node_name(name)
 --- modulename: AbstractGraph, funcname: get_uniq_node_name
AbstractGraph.py(211):         nodes_names = [n.name for n in self.nodes]
AbstractGraph.py(212):         if name not in nodes_names:
AbstractGraph.py(213):             return name
BaseNode.py(171):         self.label.setPlainText(self.name)
Widget.py(1673):         self.add_node(node_class, x, y)
 --- modulename: Widget, funcname: add_node
Widget.py(1955):         AGraph.add_node(self, node, x, y)
 --- modulename: AbstractGraph, funcname: add_node
AbstractGraph.py(303):         if not node:
AbstractGraph.py(305):         node.set_name(node.name)
 --- modulename: BaseNode, funcname: set_name
BaseNode.py(170):         AGNode.set_name(self, name)
 --- modulename: AbstractGraph, funcname: set_name
AbstractGraph.py(164):         self.name = self.graph().get_uniq_node_name(name)
 --- modulename: AbstractGraph, funcname: get_uniq_node_name
AbstractGraph.py(211):         nodes_names = [n.name for n in self.nodes]
AbstractGraph.py(212):         if name not in nodes_names:
AbstractGraph.py(213):             return name
BaseNode.py(171):         self.label.setPlainText(self.name)
AbstractGraph.py(306):         self.nodes.append(node)
AbstractGraph.py(307):         node.set_pos(x, y)
 --- modulename: BaseNode, funcname: set_pos
BaseNode.py(322):         AGNode.set_pos(self, x, y)
 --- modulename: AbstractGraph, funcname: set_pos
AbstractGraph.py(157):         self.x = x
AbstractGraph.py(158):         self.y = y
BaseNode.py(323):         self.setPos(QtCore.QPointF(x, y))
 --- modulename: BaseNode, funcname: itemChange
BaseNode.py(147):         if change == self.ItemPositionChange:
BaseNode.py(149):             value.setX(roundup(value.x() - self.graph().grid_size + self.graph().grid_size / 3.0, self.graph().grid_size))
 --- modulename: AGraphCommon, funcname: roundup
AGraphCommon.py(11):     return int(math.ceil(x / to)) * to
BaseNode.py(150):             value.setY(roundup(value.y() - self.graph().grid_size + self.graph().grid_size / 3.0, self.graph().grid_size))
 --- modulename: AGraphCommon, funcname: roundup
AGraphCommon.py(11):     return int(math.ceil(x / to)) * to
BaseNode.py(151):             return value
 --- modulename: BaseNode, funcname: itemChange
BaseNode.py(147):         if change == self.ItemPositionChange:
BaseNode.py(152):         return QtGui.QGraphicsItem.itemChange(self, change, value)
AbstractGraph.py(309):         return True
Widget.py(1956):         if node:
Widget.py(1957):             node.label.setPlainText(node.name)
Widget.py(1958):             self.scene().addItem(node)
 --- modulename: BaseNode, funcname: itemChange
BaseNode.py(147):         if change == self.ItemPositionChange:
BaseNode.py(152):         return QtGui.QGraphicsItem.itemChange(self, change, value)
 --- modulename: BaseNode, funcname: itemChange
BaseNode.py(147):         if change == self.ItemPositionChange:
BaseNode.py(152):         return QtGui.QGraphicsItem.itemChange(self, change, value)
Widget.py(1959):             node.set_shadows_enabled(self._shadows)
 --- modulename: BaseNode, funcname: set_shadows_enabled
BaseNode.py(175):         self.effect.setEnabled(state)
Widget.py(1960):             node.post_create()
 --- modulename: BaseNode, funcname: post_create
BaseNode.py(159):         self.w = self.childrenBoundingRect().width() + self.spacings.kPortSpacing
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
BaseNode.py(160):         self.nodeMainGWidget.setMaximumWidth(self.childrenBoundingRect().width() + self.spacings.kPortOffset)
 --- modulename: Port, funcname: sizeHint
Port.py(53):         return QtCore.QSizeF(self.__width, self.__height)
 --- modulename: Port, funcname: sizeHint
Port.py(53):         return QtCore.QSizeF(self.__width, self.__height)
 --- modulename: Port, funcname: sizeHint
Port.py(53):         return QtCore.QSizeF(self.__width, self.__height)
 --- modulename: Port, funcname: sizeHint
Port.py(53):         return QtCore.QSizeF(self.__width, self.__height)
 --- modulename: Port, funcname: sizeHint
Port.py(53):         return QtCore.QSizeF(self.__width, self.__height)
 --- modulename: Port, funcname: sizeHint
Port.py(53):         return QtCore.QSizeF(self.__width, self.__height)
 --- modulename: Port, funcname: sizeHint
Port.py(53):         return QtCore.QSizeF(self.__width, self.__height)
 --- modulename: Port, funcname: sizeHint
Port.py(53):         return QtCore.QSizeF(self.__width, self.__height)
 --- modulename: Port, funcname: sizeHint
Port.py(53):         return QtCore.QSizeF(self.__width, self.__height)
BaseNode.py(161):         self.nodeMainGWidget.setGeometry(QtCore.QRectF(0, 0, self.w + self.spacings.kPortOffset, self.h))
Widget.py(1674):         return node_class
Widget.py(1819):                 return
 --- modulename: BaseNode, funcname: itemChange
BaseNode.py(147):         if change == self.ItemPositionChange:
BaseNode.py(152):         return QtGui.QGraphicsItem.itemChange(self, change, value)
 --- modulename: BaseNode, funcname: itemChange
BaseNode.py(147):         if change == self.ItemPositionChange:
BaseNode.py(152):         return QtGui.QGraphicsItem.itemChange(self, change, value)
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: BaseNode, funcname: paint
BaseNode.py(199):         painter.setPen(QtCore.Qt.NoPen)
BaseNode.py(200):         painter.setBrush(QtCore.Qt.darkGray)
BaseNode.py(202):         if self.options:
BaseNode.py(203):             color = self.opt_node_base_color
BaseNode.py(206):         if self.isSelected():
BaseNode.py(209):         linearGrad = QtGui.QRadialGradient(QtCore.QPointF(40, 40), 300)
BaseNode.py(210):         linearGrad.setColorAt(0, color)
BaseNode.py(211):         linearGrad.setColorAt(1, color.lighter(180))
BaseNode.py(212):         br = QtGui.QBrush(linearGrad)
BaseNode.py(213):         painter.setBrush(br)
BaseNode.py(214):         pen = QtGui.QPen(QtCore.Qt.black, 0.5)
BaseNode.py(215):         if option.state & QtGui.QStyle.State_Selected:
BaseNode.py(222):         painter.setPen(pen)
BaseNode.py(223):         painter.drawRoundedRect(self.sizes[0], self.sizes[1],
BaseNode.py(224):                                 self.childrenBoundingRect().width(), self.nodeMainGWidget.boundingRect().height(),
BaseNode.py(225):                                 self.sizes[4], self.sizes[5])
 --- modulename: BaseNode, funcname: paint
BaseNode.py(39):         if self.options:
BaseNode.py(40):             painter.fillRect(option.rect, QtGui.QColor(self.opt_bg_color))
BaseNode.py(43):         super(NodeName, self).paint(painter, option, widget)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: paint
Port.py(83):         background_rect = self.boundingRect()
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
Port.py(84):         background_rect.setWidth(self.__width)
Port.py(86):         w = background_rect.width() / 2
Port.py(87):         h = background_rect.height() / 2
Port.py(89):         linearGrad = QtGui.QRadialGradient(QtCore.QPointF(w, h), self.__width / 2)
Port.py(90):         linearGrad.setColorAt(0, self.color)
Port.py(91):         linearGrad.setColorAt(0.2, self.color)
Port.py(92):         linearGrad.setColorAt(1, self.color.lighter(150))
Port.py(94):         if self.dirty:
Port.py(95):             painter.setPen(self._dirty_pen)
Port.py(96):         if self.hovered:
Port.py(99):             painter.setBrush(QtGui.QBrush(self.color))
Port.py(100):         if self.data_type == AGPortDataTypes.tArray:
Port.py(103):             painter.setBrush(linearGrad)
Port.py(104):             painter.drawEllipse(background_rect)
Port.py(105):             arrHeight = -0.4
Port.py(106):             arrow = QtGui.QPolygonF([QtCore.QPointF(self.__width, self.__height * 0.7 + arrHeight),
Port.py(107):                                     QtCore.QPointF(self.__width * 1.2, self.__height / 2.0 + arrHeight),
Port.py(108):                                     QtCore.QPointF(self.__width, self.__height * 0.3 + arrHeight),
Port.py(109):                                     QtCore.QPointF(self.__width, self.__height * 0.7 + arrHeight)])
Port.py(110):             painter.drawPolygon(arrow)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: paint
Port.py(83):         background_rect = self.boundingRect()
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
Port.py(84):         background_rect.setWidth(self.__width)
Port.py(86):         w = background_rect.width() / 2
Port.py(87):         h = background_rect.height() / 2
Port.py(89):         linearGrad = QtGui.QRadialGradient(QtCore.QPointF(w, h), self.__width / 2)
Port.py(90):         linearGrad.setColorAt(0, self.color)
Port.py(91):         linearGrad.setColorAt(0.2, self.color)
Port.py(92):         linearGrad.setColorAt(1, self.color.lighter(150))
Port.py(94):         if self.dirty:
Port.py(95):             painter.setPen(self._dirty_pen)
Port.py(96):         if self.hovered:
Port.py(99):             painter.setBrush(QtGui.QBrush(self.color))
Port.py(100):         if self.data_type == AGPortDataTypes.tArray:
Port.py(103):             painter.setBrush(linearGrad)
Port.py(104):             painter.drawEllipse(background_rect)
Port.py(105):             arrHeight = -0.4
Port.py(106):             arrow = QtGui.QPolygonF([QtCore.QPointF(self.__width, self.__height * 0.7 + arrHeight),
Port.py(107):                                     QtCore.QPointF(self.__width * 1.2, self.__height / 2.0 + arrHeight),
Port.py(108):                                     QtCore.QPointF(self.__width, self.__height * 0.3 + arrHeight),
Port.py(109):                                     QtCore.QPointF(self.__width, self.__height * 0.7 + arrHeight)])
Port.py(110):             painter.drawPolygon(arrow)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: paint
Port.py(83):         background_rect = self.boundingRect()
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
Port.py(84):         background_rect.setWidth(self.__width)
Port.py(86):         w = background_rect.width() / 2
Port.py(87):         h = background_rect.height() / 2
Port.py(89):         linearGrad = QtGui.QRadialGradient(QtCore.QPointF(w, h), self.__width / 2)
Port.py(90):         linearGrad.setColorAt(0, self.color)
Port.py(91):         linearGrad.setColorAt(0.2, self.color)
Port.py(92):         linearGrad.setColorAt(1, self.color.lighter(150))
Port.py(94):         if self.dirty:
Port.py(95):             painter.setPen(self._dirty_pen)
Port.py(96):         if self.hovered:
Port.py(99):             painter.setBrush(QtGui.QBrush(self.color))
Port.py(100):         if self.data_type == AGPortDataTypes.tArray:
Port.py(103):             painter.setBrush(linearGrad)
Port.py(104):             painter.drawEllipse(background_rect)
Port.py(105):             arrHeight = -0.4
Port.py(106):             arrow = QtGui.QPolygonF([QtCore.QPointF(self.__width, self.__height * 0.7 + arrHeight),
Port.py(107):                                     QtCore.QPointF(self.__width * 1.2, self.__height / 2.0 + arrHeight),
Port.py(108):                                     QtCore.QPointF(self.__width, self.__height * 0.3 + arrHeight),
Port.py(109):                                     QtCore.QPointF(self.__width, self.__height * 0.7 + arrHeight)])
Port.py(110):             painter.drawPolygon(arrow)
 --- modulename: Port, funcname: sizeHint
Port.py(53):         return QtCore.QSizeF(self.__width, self.__height)
 --- modulename: Port, funcname: sizeHint
Port.py(53):         return QtCore.QSizeF(self.__width, self.__height)
 --- modulename: Port, funcname: sizeHint
Port.py(53):         return QtCore.QSizeF(self.__width, self.__height)
 --- modulename: Port, funcname: sizeHint
Port.py(53):         return QtCore.QSizeF(self.__width, self.__height)
 --- modulename: Port, funcname: sizeHint
Port.py(53):         return QtCore.QSizeF(self.__width, self.__height)
 --- modulename: Port, funcname: sizeHint
Port.py(53):         return QtCore.QSizeF(self.__width, self.__height)
 --- modulename: Port, funcname: sizeHint
Port.py(53):         return QtCore.QSizeF(self.__width, self.__height)
 --- modulename: Port, funcname: sizeHint
Port.py(53):         return QtCore.QSizeF(self.__width, self.__height)
 --- modulename: Port, funcname: sizeHint
Port.py(53):         return QtCore.QSizeF(self.__width, self.__height)
 --- modulename: Widget, funcname: mouseMoveEvent
Widget.py(1402):         self.mousePos = self.mapToScene(event.pos())
Widget.py(1404):         if self._resize_group_mode:
Widget.py(1417):         if self._draw_real_time_line:
Widget.py(1434):         if self._is_rubber_band_selection:
Widget.py(1445):         super(GraphWidget, self).mouseMoveEvent(event)
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: shape
Port.py(73):         path = QtGui.QPainterPath()
Port.py(74):         path.addEllipse(self.boundingRect())
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
Port.py(75):         return path
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: hoverEnterEvent
Port.py(128):         self.update()
Port.py(129):         self.hovered = True
Port.py(130):         if self.parent().graph().is_debug():
 --- modulename: AbstractGraph, funcname: is_debug
AbstractGraph.py(223):         return self._debug
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: BaseNode, funcname: paint
BaseNode.py(199):         painter.setPen(QtCore.Qt.NoPen)
BaseNode.py(200):         painter.setBrush(QtCore.Qt.darkGray)
BaseNode.py(202):         if self.options:
BaseNode.py(203):             color = self.opt_node_base_color
BaseNode.py(206):         if self.isSelected():
BaseNode.py(209):         linearGrad = QtGui.QRadialGradient(QtCore.QPointF(40, 40), 300)
BaseNode.py(210):         linearGrad.setColorAt(0, color)
BaseNode.py(211):         linearGrad.setColorAt(1, color.lighter(180))
BaseNode.py(212):         br = QtGui.QBrush(linearGrad)
BaseNode.py(213):         painter.setBrush(br)
BaseNode.py(214):         pen = QtGui.QPen(QtCore.Qt.black, 0.5)
BaseNode.py(215):         if option.state & QtGui.QStyle.State_Selected:
BaseNode.py(222):         painter.setPen(pen)
BaseNode.py(223):         painter.drawRoundedRect(self.sizes[0], self.sizes[1],
BaseNode.py(224):                                 self.childrenBoundingRect().width(), self.nodeMainGWidget.boundingRect().height(),
BaseNode.py(225):                                 self.sizes[4], self.sizes[5])
 --- modulename: BaseNode, funcname: paint
BaseNode.py(39):         if self.options:
BaseNode.py(40):             painter.fillRect(option.rect, QtGui.QColor(self.opt_bg_color))
BaseNode.py(43):         super(NodeName, self).paint(painter, option, widget)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: paint
Port.py(83):         background_rect = self.boundingRect()
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
Port.py(84):         background_rect.setWidth(self.__width)
Port.py(86):         w = background_rect.width() / 2
Port.py(87):         h = background_rect.height() / 2
Port.py(89):         linearGrad = QtGui.QRadialGradient(QtCore.QPointF(w, h), self.__width / 2)
Port.py(90):         linearGrad.setColorAt(0, self.color)
Port.py(91):         linearGrad.setColorAt(0.2, self.color)
Port.py(92):         linearGrad.setColorAt(1, self.color.lighter(150))
Port.py(94):         if self.dirty:
Port.py(95):             painter.setPen(self._dirty_pen)
Port.py(96):         if self.hovered:
Port.py(97):             linearGrad.setColorAt(1, self.color.lighter(200))
Port.py(100):         if self.data_type == AGPortDataTypes.tArray:
Port.py(103):             painter.setBrush(linearGrad)
Port.py(104):             painter.drawEllipse(background_rect)
Port.py(105):             arrHeight = -0.4
Port.py(106):             arrow = QtGui.QPolygonF([QtCore.QPointF(self.__width, self.__height * 0.7 + arrHeight),
Port.py(107):                                     QtCore.QPointF(self.__width * 1.2, self.__height / 2.0 + arrHeight),
Port.py(108):                                     QtCore.QPointF(self.__width, self.__height * 0.3 + arrHeight),
Port.py(109):                                     QtCore.QPointF(self.__width, self.__height * 0.7 + arrHeight)])
Port.py(110):             painter.drawPolygon(arrow)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Widget, funcname: _tick_executor
Widget.py(988):         for foo in self._tick_functions:
 --- modulename: Widget, funcname: mouseMoveEvent
Widget.py(1402):         self.mousePos = self.mapToScene(event.pos())
Widget.py(1404):         if self._resize_group_mode:
Widget.py(1417):         if self._draw_real_time_line:
Widget.py(1434):         if self._is_rubber_band_selection:
Widget.py(1445):         super(GraphWidget, self).mouseMoveEvent(event)
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: shape
Port.py(73):         path = QtGui.QPainterPath()
Port.py(74):         path.addEllipse(self.boundingRect())
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
Port.py(75):         return path
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: hoverLeaveEvent
Port.py(136):         self.update()
Port.py(137):         self.hovered = False
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: BaseNode, funcname: paint
BaseNode.py(199):         painter.setPen(QtCore.Qt.NoPen)
BaseNode.py(200):         painter.setBrush(QtCore.Qt.darkGray)
BaseNode.py(202):         if self.options:
BaseNode.py(203):             color = self.opt_node_base_color
BaseNode.py(206):         if self.isSelected():
BaseNode.py(209):         linearGrad = QtGui.QRadialGradient(QtCore.QPointF(40, 40), 300)
BaseNode.py(210):         linearGrad.setColorAt(0, color)
BaseNode.py(211):         linearGrad.setColorAt(1, color.lighter(180))
BaseNode.py(212):         br = QtGui.QBrush(linearGrad)
BaseNode.py(213):         painter.setBrush(br)
BaseNode.py(214):         pen = QtGui.QPen(QtCore.Qt.black, 0.5)
BaseNode.py(215):         if option.state & QtGui.QStyle.State_Selected:
BaseNode.py(222):         painter.setPen(pen)
BaseNode.py(223):         painter.drawRoundedRect(self.sizes[0], self.sizes[1],
BaseNode.py(224):                                 self.childrenBoundingRect().width(), self.nodeMainGWidget.boundingRect().height(),
BaseNode.py(225):                                 self.sizes[4], self.sizes[5])
 --- modulename: BaseNode, funcname: paint
BaseNode.py(39):         if self.options:
BaseNode.py(40):             painter.fillRect(option.rect, QtGui.QColor(self.opt_bg_color))
BaseNode.py(43):         super(NodeName, self).paint(painter, option, widget)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: paint
Port.py(83):         background_rect = self.boundingRect()
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
Port.py(84):         background_rect.setWidth(self.__width)
Port.py(86):         w = background_rect.width() / 2
Port.py(87):         h = background_rect.height() / 2
Port.py(89):         linearGrad = QtGui.QRadialGradient(QtCore.QPointF(w, h), self.__width / 2)
Port.py(90):         linearGrad.setColorAt(0, self.color)
Port.py(91):         linearGrad.setColorAt(0.2, self.color)
Port.py(92):         linearGrad.setColorAt(1, self.color.lighter(150))
Port.py(94):         if self.dirty:
Port.py(95):             painter.setPen(self._dirty_pen)
Port.py(96):         if self.hovered:
Port.py(99):             painter.setBrush(QtGui.QBrush(self.color))
Port.py(100):         if self.data_type == AGPortDataTypes.tArray:
Port.py(103):             painter.setBrush(linearGrad)
Port.py(104):             painter.drawEllipse(background_rect)
Port.py(105):             arrHeight = -0.4
Port.py(106):             arrow = QtGui.QPolygonF([QtCore.QPointF(self.__width, self.__height * 0.7 + arrHeight),
Port.py(107):                                     QtCore.QPointF(self.__width * 1.2, self.__height / 2.0 + arrHeight),
Port.py(108):                                     QtCore.QPointF(self.__width, self.__height * 0.3 + arrHeight),
Port.py(109):                                     QtCore.QPointF(self.__width, self.__height * 0.7 + arrHeight)])
Port.py(110):             painter.drawPolygon(arrow)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Widget, funcname: mouseMoveEvent
Widget.py(1402):         self.mousePos = self.mapToScene(event.pos())
Widget.py(1404):         if self._resize_group_mode:
Widget.py(1417):         if self._draw_real_time_line:
Widget.py(1434):         if self._is_rubber_band_selection:
Widget.py(1445):         super(GraphWidget, self).mouseMoveEvent(event)
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Widget, funcname: mouseMoveEvent
Widget.py(1402):         self.mousePos = self.mapToScene(event.pos())
Widget.py(1404):         if self._resize_group_mode:
Widget.py(1417):         if self._draw_real_time_line:
Widget.py(1434):         if self._is_rubber_band_selection:
Widget.py(1445):         super(GraphWidget, self).mouseMoveEvent(event)
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Widget, funcname: mouseMoveEvent
Widget.py(1402):         self.mousePos = self.mapToScene(event.pos())
Widget.py(1404):         if self._resize_group_mode:
Widget.py(1417):         if self._draw_real_time_line:
Widget.py(1434):         if self._is_rubber_band_selection:
Widget.py(1445):         super(GraphWidget, self).mouseMoveEvent(event)
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Widget, funcname: mouseMoveEvent
Widget.py(1402):         self.mousePos = self.mapToScene(event.pos())
Widget.py(1404):         if self._resize_group_mode:
Widget.py(1417):         if self._draw_real_time_line:
Widget.py(1434):         if self._is_rubber_band_selection:
Widget.py(1445):         super(GraphWidget, self).mouseMoveEvent(event)
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Widget, funcname: mouseMoveEvent
Widget.py(1402):         self.mousePos = self.mapToScene(event.pos())
Widget.py(1404):         if self._resize_group_mode:
Widget.py(1417):         if self._draw_real_time_line:
Widget.py(1434):         if self._is_rubber_band_selection:
Widget.py(1445):         super(GraphWidget, self).mouseMoveEvent(event)
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Widget, funcname: _tick_executor
Widget.py(988):         for foo in self._tick_functions:
 --- modulename: Widget, funcname: mouseMoveEvent
Widget.py(1402):         self.mousePos = self.mapToScene(event.pos())
Widget.py(1404):         if self._resize_group_mode:
Widget.py(1417):         if self._draw_real_time_line:
Widget.py(1434):         if self._is_rubber_band_selection:
Widget.py(1445):         super(GraphWidget, self).mouseMoveEvent(event)
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Widget, funcname: mouseMoveEvent
Widget.py(1402):         self.mousePos = self.mapToScene(event.pos())
Widget.py(1404):         if self._resize_group_mode:
Widget.py(1417):         if self._draw_real_time_line:
Widget.py(1434):         if self._is_rubber_band_selection:
Widget.py(1445):         super(GraphWidget, self).mouseMoveEvent(event)
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Widget, funcname: mouseMoveEvent
Widget.py(1402):         self.mousePos = self.mapToScene(event.pos())
Widget.py(1404):         if self._resize_group_mode:
Widget.py(1417):         if self._draw_real_time_line:
Widget.py(1434):         if self._is_rubber_band_selection:
Widget.py(1445):         super(GraphWidget, self).mouseMoveEvent(event)
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Widget, funcname: mouseMoveEvent
Widget.py(1402):         self.mousePos = self.mapToScene(event.pos())
Widget.py(1404):         if self._resize_group_mode:
Widget.py(1417):         if self._draw_real_time_line:
Widget.py(1434):         if self._is_rubber_band_selection:
Widget.py(1445):         super(GraphWidget, self).mouseMoveEvent(event)
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Widget, funcname: mouseMoveEvent
Widget.py(1402):         self.mousePos = self.mapToScene(event.pos())
Widget.py(1404):         if self._resize_group_mode:
Widget.py(1417):         if self._draw_real_time_line:
Widget.py(1434):         if self._is_rubber_band_selection:
Widget.py(1445):         super(GraphWidget, self).mouseMoveEvent(event)
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Widget, funcname: mouseMoveEvent
Widget.py(1402):         self.mousePos = self.mapToScene(event.pos())
Widget.py(1404):         if self._resize_group_mode:
Widget.py(1417):         if self._draw_real_time_line:
Widget.py(1434):         if self._is_rubber_band_selection:
Widget.py(1445):         super(GraphWidget, self).mouseMoveEvent(event)
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Widget, funcname: mouseMoveEvent
Widget.py(1402):         self.mousePos = self.mapToScene(event.pos())
Widget.py(1404):         if self._resize_group_mode:
Widget.py(1417):         if self._draw_real_time_line:
Widget.py(1434):         if self._is_rubber_band_selection:
Widget.py(1445):         super(GraphWidget, self).mouseMoveEvent(event)
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Widget, funcname: mouseMoveEvent
Widget.py(1402):         self.mousePos = self.mapToScene(event.pos())
Widget.py(1404):         if self._resize_group_mode:
Widget.py(1417):         if self._draw_real_time_line:
Widget.py(1434):         if self._is_rubber_band_selection:
Widget.py(1445):         super(GraphWidget, self).mouseMoveEvent(event)
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Widget, funcname: mouseMoveEvent
Widget.py(1402):         self.mousePos = self.mapToScene(event.pos())
Widget.py(1404):         if self._resize_group_mode:
Widget.py(1417):         if self._draw_real_time_line:
Widget.py(1434):         if self._is_rubber_band_selection:
Widget.py(1445):         super(GraphWidget, self).mouseMoveEvent(event)
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Widget, funcname: _tick_executor
Widget.py(988):         for foo in self._tick_functions:
 --- modulename: Widget, funcname: mouseMoveEvent
Widget.py(1402):         self.mousePos = self.mapToScene(event.pos())
Widget.py(1404):         if self._resize_group_mode:
Widget.py(1417):         if self._draw_real_time_line:
Widget.py(1434):         if self._is_rubber_band_selection:
Widget.py(1445):         super(GraphWidget, self).mouseMoveEvent(event)
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Widget, funcname: mouseMoveEvent
Widget.py(1402):         self.mousePos = self.mapToScene(event.pos())
Widget.py(1404):         if self._resize_group_mode:
Widget.py(1417):         if self._draw_real_time_line:
Widget.py(1434):         if self._is_rubber_band_selection:
Widget.py(1445):         super(GraphWidget, self).mouseMoveEvent(event)
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Widget, funcname: mouseMoveEvent
Widget.py(1402):         self.mousePos = self.mapToScene(event.pos())
Widget.py(1404):         if self._resize_group_mode:
Widget.py(1417):         if self._draw_real_time_line:
Widget.py(1434):         if self._is_rubber_band_selection:
Widget.py(1445):         super(GraphWidget, self).mouseMoveEvent(event)
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Widget, funcname: mouseMoveEvent
Widget.py(1402):         self.mousePos = self.mapToScene(event.pos())
Widget.py(1404):         if self._resize_group_mode:
Widget.py(1417):         if self._draw_real_time_line:
Widget.py(1434):         if self._is_rubber_band_selection:
Widget.py(1445):         super(GraphWidget, self).mouseMoveEvent(event)
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Widget, funcname: mouseMoveEvent
Widget.py(1402):         self.mousePos = self.mapToScene(event.pos())
Widget.py(1404):         if self._resize_group_mode:
Widget.py(1417):         if self._draw_real_time_line:
Widget.py(1434):         if self._is_rubber_band_selection:
Widget.py(1445):         super(GraphWidget, self).mouseMoveEvent(event)
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Widget, funcname: mouseMoveEvent
Widget.py(1402):         self.mousePos = self.mapToScene(event.pos())
Widget.py(1404):         if self._resize_group_mode:
Widget.py(1417):         if self._draw_real_time_line:
Widget.py(1434):         if self._is_rubber_band_selection:
Widget.py(1445):         super(GraphWidget, self).mouseMoveEvent(event)
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Widget, funcname: mouseMoveEvent
Widget.py(1402):         self.mousePos = self.mapToScene(event.pos())
Widget.py(1404):         if self._resize_group_mode:
Widget.py(1417):         if self._draw_real_time_line:
Widget.py(1434):         if self._is_rubber_band_selection:
Widget.py(1445):         super(GraphWidget, self).mouseMoveEvent(event)
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Widget, funcname: mouseMoveEvent
Widget.py(1402):         self.mousePos = self.mapToScene(event.pos())
Widget.py(1404):         if self._resize_group_mode:
Widget.py(1417):         if self._draw_real_time_line:
Widget.py(1434):         if self._is_rubber_band_selection:
Widget.py(1445):         super(GraphWidget, self).mouseMoveEvent(event)
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Widget, funcname: _tick_executor
Widget.py(988):         for foo in self._tick_functions:
 --- modulename: Widget, funcname: mouseMoveEvent
Widget.py(1402):         self.mousePos = self.mapToScene(event.pos())
Widget.py(1404):         if self._resize_group_mode:
Widget.py(1417):         if self._draw_real_time_line:
Widget.py(1434):         if self._is_rubber_band_selection:
Widget.py(1445):         super(GraphWidget, self).mouseMoveEvent(event)
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Widget, funcname: mouseMoveEvent
Widget.py(1402):         self.mousePos = self.mapToScene(event.pos())
Widget.py(1404):         if self._resize_group_mode:
Widget.py(1417):         if self._draw_real_time_line:
Widget.py(1434):         if self._is_rubber_band_selection:
Widget.py(1445):         super(GraphWidget, self).mouseMoveEvent(event)
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Widget, funcname: mouseMoveEvent
Widget.py(1402):         self.mousePos = self.mapToScene(event.pos())
Widget.py(1404):         if self._resize_group_mode:
Widget.py(1417):         if self._draw_real_time_line:
Widget.py(1434):         if self._is_rubber_band_selection:
Widget.py(1445):         super(GraphWidget, self).mouseMoveEvent(event)
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Widget, funcname: mouseMoveEvent
Widget.py(1402):         self.mousePos = self.mapToScene(event.pos())
Widget.py(1404):         if self._resize_group_mode:
Widget.py(1417):         if self._draw_real_time_line:
Widget.py(1434):         if self._is_rubber_band_selection:
Widget.py(1445):         super(GraphWidget, self).mouseMoveEvent(event)
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Widget, funcname: mouseMoveEvent
Widget.py(1402):         self.mousePos = self.mapToScene(event.pos())
Widget.py(1404):         if self._resize_group_mode:
Widget.py(1417):         if self._draw_real_time_line:
Widget.py(1434):         if self._is_rubber_band_selection:
Widget.py(1445):         super(GraphWidget, self).mouseMoveEvent(event)
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Widget, funcname: mouseMoveEvent
Widget.py(1402):         self.mousePos = self.mapToScene(event.pos())
Widget.py(1404):         if self._resize_group_mode:
Widget.py(1417):         if self._draw_real_time_line:
Widget.py(1434):         if self._is_rubber_band_selection:
Widget.py(1445):         super(GraphWidget, self).mouseMoveEvent(event)
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Widget, funcname: _tick_executor
Widget.py(988):         for foo in self._tick_functions:
 --- modulename: Widget, funcname: mouseMoveEvent
Widget.py(1402):         self.mousePos = self.mapToScene(event.pos())
Widget.py(1404):         if self._resize_group_mode:
Widget.py(1417):         if self._draw_real_time_line:
Widget.py(1434):         if self._is_rubber_band_selection:
Widget.py(1445):         super(GraphWidget, self).mouseMoveEvent(event)
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Widget, funcname: mouseMoveEvent
Widget.py(1402):         self.mousePos = self.mapToScene(event.pos())
Widget.py(1404):         if self._resize_group_mode:
Widget.py(1417):         if self._draw_real_time_line:
Widget.py(1434):         if self._is_rubber_band_selection:
Widget.py(1445):         super(GraphWidget, self).mouseMoveEvent(event)
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Widget, funcname: mouseMoveEvent
Widget.py(1402):         self.mousePos = self.mapToScene(event.pos())
Widget.py(1404):         if self._resize_group_mode:
Widget.py(1417):         if self._draw_real_time_line:
Widget.py(1434):         if self._is_rubber_band_selection:
Widget.py(1445):         super(GraphWidget, self).mouseMoveEvent(event)
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Widget, funcname: mouseMoveEvent
Widget.py(1402):         self.mousePos = self.mapToScene(event.pos())
Widget.py(1404):         if self._resize_group_mode:
Widget.py(1417):         if self._draw_real_time_line:
Widget.py(1434):         if self._is_rubber_band_selection:
Widget.py(1445):         super(GraphWidget, self).mouseMoveEvent(event)
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Widget, funcname: mouseMoveEvent
Widget.py(1402):         self.mousePos = self.mapToScene(event.pos())
Widget.py(1404):         if self._resize_group_mode:
Widget.py(1417):         if self._draw_real_time_line:
Widget.py(1434):         if self._is_rubber_band_selection:
Widget.py(1445):         super(GraphWidget, self).mouseMoveEvent(event)
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Widget, funcname: mouseMoveEvent
Widget.py(1402):         self.mousePos = self.mapToScene(event.pos())
Widget.py(1404):         if self._resize_group_mode:
Widget.py(1417):         if self._draw_real_time_line:
Widget.py(1434):         if self._is_rubber_band_selection:
Widget.py(1445):         super(GraphWidget, self).mouseMoveEvent(event)
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Widget, funcname: mouseMoveEvent
Widget.py(1402):         self.mousePos = self.mapToScene(event.pos())
Widget.py(1404):         if self._resize_group_mode:
Widget.py(1417):         if self._draw_real_time_line:
Widget.py(1434):         if self._is_rubber_band_selection:
Widget.py(1445):         super(GraphWidget, self).mouseMoveEvent(event)
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Widget, funcname: mouseMoveEvent
Widget.py(1402):         self.mousePos = self.mapToScene(event.pos())
Widget.py(1404):         if self._resize_group_mode:
Widget.py(1417):         if self._draw_real_time_line:
Widget.py(1434):         if self._is_rubber_band_selection:
Widget.py(1445):         super(GraphWidget, self).mouseMoveEvent(event)
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Widget, funcname: mouseMoveEvent
Widget.py(1402):         self.mousePos = self.mapToScene(event.pos())
Widget.py(1404):         if self._resize_group_mode:
Widget.py(1417):         if self._draw_real_time_line:
Widget.py(1434):         if self._is_rubber_band_selection:
Widget.py(1445):         super(GraphWidget, self).mouseMoveEvent(event)
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Widget, funcname: _tick_executor
Widget.py(988):         for foo in self._tick_functions:
 --- modulename: Widget, funcname: mouseMoveEvent
Widget.py(1402):         self.mousePos = self.mapToScene(event.pos())
Widget.py(1404):         if self._resize_group_mode:
Widget.py(1417):         if self._draw_real_time_line:
Widget.py(1434):         if self._is_rubber_band_selection:
Widget.py(1445):         super(GraphWidget, self).mouseMoveEvent(event)
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Widget, funcname: mouseMoveEvent
Widget.py(1402):         self.mousePos = self.mapToScene(event.pos())
Widget.py(1404):         if self._resize_group_mode:
Widget.py(1417):         if self._draw_real_time_line:
Widget.py(1434):         if self._is_rubber_band_selection:
Widget.py(1445):         super(GraphWidget, self).mouseMoveEvent(event)
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Widget, funcname: _tick_executor
Widget.py(988):         for foo in self._tick_functions:
 --- modulename: Widget, funcname: mouseMoveEvent
Widget.py(1402):         self.mousePos = self.mapToScene(event.pos())
Widget.py(1404):         if self._resize_group_mode:
Widget.py(1417):         if self._draw_real_time_line:
Widget.py(1434):         if self._is_rubber_band_selection:
Widget.py(1445):         super(GraphWidget, self).mouseMoveEvent(event)
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Widget, funcname: mouseMoveEvent
Widget.py(1402):         self.mousePos = self.mapToScene(event.pos())
Widget.py(1404):         if self._resize_group_mode:
Widget.py(1417):         if self._draw_real_time_line:
Widget.py(1434):         if self._is_rubber_band_selection:
Widget.py(1445):         super(GraphWidget, self).mouseMoveEvent(event)
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Widget, funcname: mousePressEvent
Widget.py(1371):         modifiers = event.modifiers()
Widget.py(1372):         self.pressed_item = self.itemAt(event.pos())
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
Widget.py(1373):         if self.pressed_item and hasattr(self.pressed_item, 'mark'):
Widget.py(1376):         if not self.pressed_item:
Widget.py(1377):             self.node_box.close()
Widget.py(1378):             self.node_box.le_nodes.clear()
Widget.py(1379):         if self.pressed_item:
Widget.py(1385):         self.mousePressPose = self.mapToScene(event.pos())
Widget.py(1386):         if self.pressed_item and event.button() == QtCore.Qt.LeftButton:
Widget.py(1391):         if event.button() == QtCore.Qt.RightButton:
Widget.py(1393):         if all([event.button() == QtCore.Qt.LeftButton, modifiers == QtCore.Qt.AltModifier]):
Widget.py(1395):         if all([event.button() == QtCore.Qt.LeftButton,
Widget.py(1396):                 modifiers == QtCore.Qt.NoModifier or modifiers == QtCore.Qt.ControlModifier | QtCore.Qt.ShiftModifier]):
Widget.py(1397):             if not self.pressed_item or hasattr(self.pressed_item, 'non_selectable'):
Widget.py(1398):                 self._is_rubber_band_selection = True
Widget.py(1399):         super(GraphWidget, self).mousePressEvent(event)
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Widget, funcname: mouseMoveEvent
Widget.py(1402):         self.mousePos = self.mapToScene(event.pos())
Widget.py(1404):         if self._resize_group_mode:
Widget.py(1417):         if self._draw_real_time_line:
Widget.py(1434):         if self._is_rubber_band_selection:
Widget.py(1435):             if self.rubber_rect not in self.scene().items():
Widget.py(1436):                 self.scene().addItem(self.rubber_rect)
Widget.py(1437):             if not self.rubber_rect.isVisible():
Widget.py(1439):             r = QtCore.QRectF(self.mousePressPose.x(),
Widget.py(1440):                               self.mousePressPose.y(),
Widget.py(1441):                               self.mousePos.x() - self.mousePressPose.x(),
Widget.py(1442):                               self.mousePos.y() - self.mousePressPose.y())
Widget.py(1443):             self.rubber_rect.setRect(r.normalized())
Widget.py(1445):         super(GraphWidget, self).mouseMoveEvent(event)
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: Widget, funcname: mouseMoveEvent
Widget.py(1402):         self.mousePos = self.mapToScene(event.pos())
Widget.py(1404):         if self._resize_group_mode:
Widget.py(1417):         if self._draw_real_time_line:
Widget.py(1434):         if self._is_rubber_band_selection:
Widget.py(1435):             if self.rubber_rect not in self.scene().items():
Widget.py(1437):             if not self.rubber_rect.isVisible():
Widget.py(1439):             r = QtCore.QRectF(self.mousePressPose.x(),
Widget.py(1440):                               self.mousePressPose.y(),
Widget.py(1441):                               self.mousePos.x() - self.mousePressPose.x(),
Widget.py(1442):                               self.mousePos.y() - self.mousePressPose.y())
Widget.py(1443):             self.rubber_rect.setRect(r.normalized())
Widget.py(1445):         super(GraphWidget, self).mouseMoveEvent(event)
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: Widget, funcname: mouseMoveEvent
Widget.py(1402):         self.mousePos = self.mapToScene(event.pos())
Widget.py(1404):         if self._resize_group_mode:
Widget.py(1417):         if self._draw_real_time_line:
Widget.py(1434):         if self._is_rubber_band_selection:
Widget.py(1435):             if self.rubber_rect not in self.scene().items():
Widget.py(1437):             if not self.rubber_rect.isVisible():
Widget.py(1439):             r = QtCore.QRectF(self.mousePressPose.x(),
Widget.py(1440):                               self.mousePressPose.y(),
Widget.py(1441):                               self.mousePos.x() - self.mousePressPose.x(),
Widget.py(1442):                               self.mousePos.y() - self.mousePressPose.y())
Widget.py(1443):             self.rubber_rect.setRect(r.normalized())
Widget.py(1445):         super(GraphWidget, self).mouseMoveEvent(event)
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: Widget, funcname: mouseMoveEvent
Widget.py(1402):         self.mousePos = self.mapToScene(event.pos())
Widget.py(1404):         if self._resize_group_mode:
Widget.py(1417):         if self._draw_real_time_line:
Widget.py(1434):         if self._is_rubber_band_selection:
Widget.py(1435):             if self.rubber_rect not in self.scene().items():
Widget.py(1437):             if not self.rubber_rect.isVisible():
Widget.py(1439):             r = QtCore.QRectF(self.mousePressPose.x(),
Widget.py(1440):                               self.mousePressPose.y(),
Widget.py(1441):                               self.mousePos.x() - self.mousePressPose.x(),
Widget.py(1442):                               self.mousePos.y() - self.mousePressPose.y())
Widget.py(1443):             self.rubber_rect.setRect(r.normalized())
Widget.py(1445):         super(GraphWidget, self).mouseMoveEvent(event)
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: Widget, funcname: mouseMoveEvent
Widget.py(1402):         self.mousePos = self.mapToScene(event.pos())
Widget.py(1404):         if self._resize_group_mode:
Widget.py(1417):         if self._draw_real_time_line:
Widget.py(1434):         if self._is_rubber_band_selection:
Widget.py(1435):             if self.rubber_rect not in self.scene().items():
Widget.py(1437):             if not self.rubber_rect.isVisible():
Widget.py(1439):             r = QtCore.QRectF(self.mousePressPose.x(),
Widget.py(1440):                               self.mousePressPose.y(),
Widget.py(1441):                               self.mousePos.x() - self.mousePressPose.x(),
Widget.py(1442):                               self.mousePos.y() - self.mousePressPose.y())
Widget.py(1443):             self.rubber_rect.setRect(r.normalized())
Widget.py(1445):         super(GraphWidget, self).mouseMoveEvent(event)
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: Widget, funcname: _tick_executor
Widget.py(988):         for foo in self._tick_functions:
 --- modulename: Widget, funcname: mouseMoveEvent
Widget.py(1402):         self.mousePos = self.mapToScene(event.pos())
Widget.py(1404):         if self._resize_group_mode:
Widget.py(1417):         if self._draw_real_time_line:
Widget.py(1434):         if self._is_rubber_band_selection:
Widget.py(1435):             if self.rubber_rect not in self.scene().items():
Widget.py(1437):             if not self.rubber_rect.isVisible():
Widget.py(1439):             r = QtCore.QRectF(self.mousePressPose.x(),
Widget.py(1440):                               self.mousePressPose.y(),
Widget.py(1441):                               self.mousePos.x() - self.mousePressPose.x(),
Widget.py(1442):                               self.mousePos.y() - self.mousePressPose.y())
Widget.py(1443):             self.rubber_rect.setRect(r.normalized())
Widget.py(1445):         super(GraphWidget, self).mouseMoveEvent(event)
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: Widget, funcname: mouseMoveEvent
Widget.py(1402):         self.mousePos = self.mapToScene(event.pos())
Widget.py(1404):         if self._resize_group_mode:
Widget.py(1417):         if self._draw_real_time_line:
Widget.py(1434):         if self._is_rubber_band_selection:
Widget.py(1435):             if self.rubber_rect not in self.scene().items():
Widget.py(1437):             if not self.rubber_rect.isVisible():
Widget.py(1439):             r = QtCore.QRectF(self.mousePressPose.x(),
Widget.py(1440):                               self.mousePressPose.y(),
Widget.py(1441):                               self.mousePos.x() - self.mousePressPose.x(),
Widget.py(1442):                               self.mousePos.y() - self.mousePressPose.y())
Widget.py(1443):             self.rubber_rect.setRect(r.normalized())
Widget.py(1445):         super(GraphWidget, self).mouseMoveEvent(event)
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: Widget, funcname: mouseMoveEvent
Widget.py(1402):         self.mousePos = self.mapToScene(event.pos())
Widget.py(1404):         if self._resize_group_mode:
Widget.py(1417):         if self._draw_real_time_line:
Widget.py(1434):         if self._is_rubber_band_selection:
Widget.py(1435):             if self.rubber_rect not in self.scene().items():
Widget.py(1437):             if not self.rubber_rect.isVisible():
Widget.py(1439):             r = QtCore.QRectF(self.mousePressPose.x(),
Widget.py(1440):                               self.mousePressPose.y(),
Widget.py(1441):                               self.mousePos.x() - self.mousePressPose.x(),
Widget.py(1442):                               self.mousePos.y() - self.mousePressPose.y())
Widget.py(1443):             self.rubber_rect.setRect(r.normalized())
Widget.py(1445):         super(GraphWidget, self).mouseMoveEvent(event)
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: Widget, funcname: mouseMoveEvent
Widget.py(1402):         self.mousePos = self.mapToScene(event.pos())
Widget.py(1404):         if self._resize_group_mode:
Widget.py(1417):         if self._draw_real_time_line:
Widget.py(1434):         if self._is_rubber_band_selection:
Widget.py(1435):             if self.rubber_rect not in self.scene().items():
Widget.py(1437):             if not self.rubber_rect.isVisible():
Widget.py(1439):             r = QtCore.QRectF(self.mousePressPose.x(),
Widget.py(1440):                               self.mousePressPose.y(),
Widget.py(1441):                               self.mousePos.x() - self.mousePressPose.x(),
Widget.py(1442):                               self.mousePos.y() - self.mousePressPose.y())
Widget.py(1443):             self.rubber_rect.setRect(r.normalized())
Widget.py(1445):         super(GraphWidget, self).mouseMoveEvent(event)
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: Widget, funcname: mouseMoveEvent
Widget.py(1402):         self.mousePos = self.mapToScene(event.pos())
Widget.py(1404):         if self._resize_group_mode:
Widget.py(1417):         if self._draw_real_time_line:
Widget.py(1434):         if self._is_rubber_band_selection:
Widget.py(1435):             if self.rubber_rect not in self.scene().items():
Widget.py(1437):             if not self.rubber_rect.isVisible():
Widget.py(1439):             r = QtCore.QRectF(self.mousePressPose.x(),
Widget.py(1440):                               self.mousePressPose.y(),
Widget.py(1441):                               self.mousePos.x() - self.mousePressPose.x(),
Widget.py(1442):                               self.mousePos.y() - self.mousePressPose.y())
Widget.py(1443):             self.rubber_rect.setRect(r.normalized())
Widget.py(1445):         super(GraphWidget, self).mouseMoveEvent(event)
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: Widget, funcname: mouseMoveEvent
Widget.py(1402):         self.mousePos = self.mapToScene(event.pos())
Widget.py(1404):         if self._resize_group_mode:
Widget.py(1417):         if self._draw_real_time_line:
Widget.py(1434):         if self._is_rubber_band_selection:
Widget.py(1435):             if self.rubber_rect not in self.scene().items():
Widget.py(1437):             if not self.rubber_rect.isVisible():
Widget.py(1439):             r = QtCore.QRectF(self.mousePressPose.x(),
Widget.py(1440):                               self.mousePressPose.y(),
Widget.py(1441):                               self.mousePos.x() - self.mousePressPose.x(),
Widget.py(1442):                               self.mousePos.y() - self.mousePressPose.y())
Widget.py(1443):             self.rubber_rect.setRect(r.normalized())
Widget.py(1445):         super(GraphWidget, self).mouseMoveEvent(event)
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: Widget, funcname: mouseMoveEvent
Widget.py(1402):         self.mousePos = self.mapToScene(event.pos())
Widget.py(1404):         if self._resize_group_mode:
Widget.py(1417):         if self._draw_real_time_line:
Widget.py(1434):         if self._is_rubber_band_selection:
Widget.py(1435):             if self.rubber_rect not in self.scene().items():
Widget.py(1437):             if not self.rubber_rect.isVisible():
Widget.py(1439):             r = QtCore.QRectF(self.mousePressPose.x(),
Widget.py(1440):                               self.mousePressPose.y(),
Widget.py(1441):                               self.mousePos.x() - self.mousePressPose.x(),
Widget.py(1442):                               self.mousePos.y() - self.mousePressPose.y())
Widget.py(1443):             self.rubber_rect.setRect(r.normalized())
Widget.py(1445):         super(GraphWidget, self).mouseMoveEvent(event)
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: Widget, funcname: mouseMoveEvent
Widget.py(1402):         self.mousePos = self.mapToScene(event.pos())
Widget.py(1404):         if self._resize_group_mode:
Widget.py(1417):         if self._draw_real_time_line:
Widget.py(1434):         if self._is_rubber_band_selection:
Widget.py(1435):             if self.rubber_rect not in self.scene().items():
Widget.py(1437):             if not self.rubber_rect.isVisible():
Widget.py(1439):             r = QtCore.QRectF(self.mousePressPose.x(),
Widget.py(1440):                               self.mousePressPose.y(),
Widget.py(1441):                               self.mousePos.x() - self.mousePressPose.x(),
Widget.py(1442):                               self.mousePos.y() - self.mousePressPose.y())
Widget.py(1443):             self.rubber_rect.setRect(r.normalized())
Widget.py(1445):         super(GraphWidget, self).mouseMoveEvent(event)
 --- modulename: Widget, funcname: mouseReleaseEvent
Widget.py(1498):         self.released_item = self.itemAt(event.pos())
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
Widget.py(1499):         self.setDragMode(self.NoDrag)
Widget.py(1500):         self._resize_group_mode = False
Widget.py(1501):         self.viewport().setCursor(QtCore.Qt.ArrowCursor)
Widget.py(1502):         modifiers = event.modifiers()
Widget.py(1503):         if self.released_item and not hasattr(self.released_item, 'non_selectable'):
Widget.py(1504):             if isinstance(self.released_item, CommentNode):
Widget.py(1513):         for n in self.nodes:
Widget.py(1514):             n.setFlag(QtGui.QGraphicsItem.ItemIsMovable)
Widget.py(1513):         for n in self.nodes:
Widget.py(1516):         if event.button() == QtCore.Qt.RightButton:
Widget.py(1518):         if self._draw_real_time_line:
Widget.py(1522):         if self._is_rubber_band_selection:
Widget.py(1523):             self._is_rubber_band_selection = False
Widget.py(1524):             [i.setSelected(True) for i in self.rubber_rect.collidingItems()]
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: Port, funcname: shape
Port.py(73):         path = QtGui.QPainterPath()
Port.py(74):         path.addEllipse(self.boundingRect())
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
Port.py(75):         return path
 --- modulename: Port, funcname: shape
Port.py(73):         path = QtGui.QPainterPath()
Port.py(74):         path.addEllipse(self.boundingRect())
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
Port.py(75):         return path
 --- modulename: Port, funcname: shape
Port.py(73):         path = QtGui.QPainterPath()
Port.py(74):         path.addEllipse(self.boundingRect())
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
Port.py(75):         return path
Widget.py(1525):             self.remove_item_by_name(self.rubber_rect.name)
 --- modulename: Widget, funcname: remove_item_by_name
Widget.py(1494):         [self.scene().removeItem(i) for i in self.scene().items() if hasattr(i, 'name') and i.name == name]
Widget.py(1494):         [self.scene().removeItem(i) for i in self.scene().items() if hasattr(i, 'name') and i.name == name]
Widget.py(1494):         [self.scene().removeItem(i) for i in self.scene().items() if hasattr(i, 'name') and i.name == name]
Widget.py(1494):         [self.scene().removeItem(i) for i in self.scene().items() if hasattr(i, 'name') and i.name == name]
Widget.py(1494):         [self.scene().removeItem(i) for i in self.scene().items() if hasattr(i, 'name') and i.name == name]
Widget.py(1494):         [self.scene().removeItem(i) for i in self.scene().items() if hasattr(i, 'name') and i.name == name]
Widget.py(1494):         [self.scene().removeItem(i) for i in self.scene().items() if hasattr(i, 'name') and i.name == name]
Widget.py(1494):         [self.scene().removeItem(i) for i in self.scene().items() if hasattr(i, 'name') and i.name == name]
Widget.py(1494):         [self.scene().removeItem(i) for i in self.scene().items() if hasattr(i, 'name') and i.name == name]
Widget.py(1494):         [self.scene().removeItem(i) for i in self.scene().items() if hasattr(i, 'name') and i.name == name]
Widget.py(1494):         [self.scene().removeItem(i) for i in self.scene().items() if hasattr(i, 'name') and i.name == name]
Widget.py(1494):         [self.scene().removeItem(i) for i in self.scene().items() if hasattr(i, 'name') and i.name == name]
Widget.py(1494):         [self.scene().removeItem(i) for i in self.scene().items() if hasattr(i, 'name') and i.name == name]
Widget.py(1526):         if event.button() == QtCore.Qt.RightButton:
Widget.py(1528):         p_itm = self.pressed_item
Widget.py(1529):         r_itm = self.released_item
Widget.py(1530):         do_connect = True
Widget.py(1531):         for i in [p_itm, r_itm]:
Widget.py(1532):             if not i:
Widget.py(1533):                 do_connect = False
Widget.py(1534):                 break
Widget.py(1541):         if p_itm and r_itm:
Widget.py(1548):         if do_connect:
Widget.py(1550):         selected_nodes = self.selected_nodes()
 --- modulename: Widget, funcname: selected_nodes
Widget.py(1268):         return [i for i in self.nodes if i.isSelected()]
Widget.py(1268):         return [i for i in self.nodes if i.isSelected()]
Widget.py(1551):         if len(selected_nodes) != 0:
Widget.py(1554):             clearLayout(self.parent.PropertiesformLayout)
 --- modulename: Widget, funcname: clearLayout
Widget.py(39):     while layout.count():
Widget.py(1556):         super(GraphWidget, self).mouseReleaseEvent(event)
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: Widget, funcname: _tick_executor
Widget.py(988):         for foo in self._tick_functions:
 --- modulename: Widget, funcname: mouseMoveEvent
Widget.py(1402):         self.mousePos = self.mapToScene(event.pos())
Widget.py(1404):         if self._resize_group_mode:
Widget.py(1417):         if self._draw_real_time_line:
Widget.py(1434):         if self._is_rubber_band_selection:
Widget.py(1445):         super(GraphWidget, self).mouseMoveEvent(event)
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Widget, funcname: mouseMoveEvent
Widget.py(1402):         self.mousePos = self.mapToScene(event.pos())
Widget.py(1404):         if self._resize_group_mode:
Widget.py(1417):         if self._draw_real_time_line:
Widget.py(1434):         if self._is_rubber_band_selection:
Widget.py(1445):         super(GraphWidget, self).mouseMoveEvent(event)
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Widget, funcname: mouseMoveEvent
Widget.py(1402):         self.mousePos = self.mapToScene(event.pos())
Widget.py(1404):         if self._resize_group_mode:
Widget.py(1417):         if self._draw_real_time_line:
Widget.py(1434):         if self._is_rubber_band_selection:
Widget.py(1445):         super(GraphWidget, self).mouseMoveEvent(event)
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Widget, funcname: mouseMoveEvent
Widget.py(1402):         self.mousePos = self.mapToScene(event.pos())
Widget.py(1404):         if self._resize_group_mode:
Widget.py(1417):         if self._draw_real_time_line:
Widget.py(1434):         if self._is_rubber_band_selection:
Widget.py(1445):         super(GraphWidget, self).mouseMoveEvent(event)
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Widget, funcname: mouseMoveEvent
Widget.py(1402):         self.mousePos = self.mapToScene(event.pos())
Widget.py(1404):         if self._resize_group_mode:
Widget.py(1417):         if self._draw_real_time_line:
Widget.py(1434):         if self._is_rubber_band_selection:
Widget.py(1445):         super(GraphWidget, self).mouseMoveEvent(event)
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Widget, funcname: mouseMoveEvent
Widget.py(1402):         self.mousePos = self.mapToScene(event.pos())
Widget.py(1404):         if self._resize_group_mode:
Widget.py(1417):         if self._draw_real_time_line:
Widget.py(1434):         if self._is_rubber_band_selection:
Widget.py(1445):         super(GraphWidget, self).mouseMoveEvent(event)
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Widget, funcname: mouseMoveEvent
Widget.py(1402):         self.mousePos = self.mapToScene(event.pos())
Widget.py(1404):         if self._resize_group_mode:
Widget.py(1417):         if self._draw_real_time_line:
Widget.py(1434):         if self._is_rubber_band_selection:
Widget.py(1445):         super(GraphWidget, self).mouseMoveEvent(event)
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Widget, funcname: mouseMoveEvent
Widget.py(1402):         self.mousePos = self.mapToScene(event.pos())
Widget.py(1404):         if self._resize_group_mode:
Widget.py(1417):         if self._draw_real_time_line:
Widget.py(1434):         if self._is_rubber_band_selection:
Widget.py(1445):         super(GraphWidget, self).mouseMoveEvent(event)
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Widget, funcname: _tick_executor
Widget.py(988):         for foo in self._tick_functions:
 --- modulename: Widget, funcname: mouseMoveEvent
Widget.py(1402):         self.mousePos = self.mapToScene(event.pos())
Widget.py(1404):         if self._resize_group_mode:
Widget.py(1417):         if self._draw_real_time_line:
Widget.py(1434):         if self._is_rubber_band_selection:
Widget.py(1445):         super(GraphWidget, self).mouseMoveEvent(event)
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Widget, funcname: mouseMoveEvent
Widget.py(1402):         self.mousePos = self.mapToScene(event.pos())
Widget.py(1404):         if self._resize_group_mode:
Widget.py(1417):         if self._draw_real_time_line:
Widget.py(1434):         if self._is_rubber_band_selection:
Widget.py(1445):         super(GraphWidget, self).mouseMoveEvent(event)
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Widget, funcname: mouseMoveEvent
Widget.py(1402):         self.mousePos = self.mapToScene(event.pos())
Widget.py(1404):         if self._resize_group_mode:
Widget.py(1417):         if self._draw_real_time_line:
Widget.py(1434):         if self._is_rubber_band_selection:
Widget.py(1445):         super(GraphWidget, self).mouseMoveEvent(event)
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Widget, funcname: mouseMoveEvent
Widget.py(1402):         self.mousePos = self.mapToScene(event.pos())
Widget.py(1404):         if self._resize_group_mode:
Widget.py(1417):         if self._draw_real_time_line:
Widget.py(1434):         if self._is_rubber_band_selection:
Widget.py(1445):         super(GraphWidget, self).mouseMoveEvent(event)
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Widget, funcname: mouseMoveEvent
Widget.py(1402):         self.mousePos = self.mapToScene(event.pos())
Widget.py(1404):         if self._resize_group_mode:
Widget.py(1417):         if self._draw_real_time_line:
Widget.py(1434):         if self._is_rubber_band_selection:
Widget.py(1445):         super(GraphWidget, self).mouseMoveEvent(event)
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Widget, funcname: mouseMoveEvent
Widget.py(1402):         self.mousePos = self.mapToScene(event.pos())
Widget.py(1404):         if self._resize_group_mode:
Widget.py(1417):         if self._draw_real_time_line:
Widget.py(1434):         if self._is_rubber_band_selection:
Widget.py(1445):         super(GraphWidget, self).mouseMoveEvent(event)
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Widget, funcname: mouseMoveEvent
Widget.py(1402):         self.mousePos = self.mapToScene(event.pos())
Widget.py(1404):         if self._resize_group_mode:
Widget.py(1417):         if self._draw_real_time_line:
Widget.py(1434):         if self._is_rubber_band_selection:
Widget.py(1445):         super(GraphWidget, self).mouseMoveEvent(event)
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Widget, funcname: mouseMoveEvent
Widget.py(1402):         self.mousePos = self.mapToScene(event.pos())
Widget.py(1404):         if self._resize_group_mode:
Widget.py(1417):         if self._draw_real_time_line:
Widget.py(1434):         if self._is_rubber_band_selection:
Widget.py(1445):         super(GraphWidget, self).mouseMoveEvent(event)
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Widget, funcname: _tick_executor
Widget.py(988):         for foo in self._tick_functions:
 --- modulename: Widget, funcname: mouseMoveEvent
Widget.py(1402):         self.mousePos = self.mapToScene(event.pos())
Widget.py(1404):         if self._resize_group_mode:
Widget.py(1417):         if self._draw_real_time_line:
Widget.py(1434):         if self._is_rubber_band_selection:
Widget.py(1445):         super(GraphWidget, self).mouseMoveEvent(event)
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Widget, funcname: mouseMoveEvent
Widget.py(1402):         self.mousePos = self.mapToScene(event.pos())
Widget.py(1404):         if self._resize_group_mode:
Widget.py(1417):         if self._draw_real_time_line:
Widget.py(1434):         if self._is_rubber_band_selection:
Widget.py(1445):         super(GraphWidget, self).mouseMoveEvent(event)
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Widget, funcname: mouseMoveEvent
Widget.py(1402):         self.mousePos = self.mapToScene(event.pos())
Widget.py(1404):         if self._resize_group_mode:
Widget.py(1417):         if self._draw_real_time_line:
Widget.py(1434):         if self._is_rubber_band_selection:
Widget.py(1445):         super(GraphWidget, self).mouseMoveEvent(event)
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Widget, funcname: mouseMoveEvent
Widget.py(1402):         self.mousePos = self.mapToScene(event.pos())
Widget.py(1404):         if self._resize_group_mode:
Widget.py(1417):         if self._draw_real_time_line:
Widget.py(1434):         if self._is_rubber_band_selection:
Widget.py(1445):         super(GraphWidget, self).mouseMoveEvent(event)
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Widget, funcname: mouseMoveEvent
Widget.py(1402):         self.mousePos = self.mapToScene(event.pos())
Widget.py(1404):         if self._resize_group_mode:
Widget.py(1417):         if self._draw_real_time_line:
Widget.py(1434):         if self._is_rubber_band_selection:
Widget.py(1445):         super(GraphWidget, self).mouseMoveEvent(event)
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Widget, funcname: mouseMoveEvent
Widget.py(1402):         self.mousePos = self.mapToScene(event.pos())
Widget.py(1404):         if self._resize_group_mode:
Widget.py(1417):         if self._draw_real_time_line:
Widget.py(1434):         if self._is_rubber_band_selection:
Widget.py(1445):         super(GraphWidget, self).mouseMoveEvent(event)
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Widget, funcname: mouseMoveEvent
Widget.py(1402):         self.mousePos = self.mapToScene(event.pos())
Widget.py(1404):         if self._resize_group_mode:
Widget.py(1417):         if self._draw_real_time_line:
Widget.py(1434):         if self._is_rubber_band_selection:
Widget.py(1445):         super(GraphWidget, self).mouseMoveEvent(event)
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Widget, funcname: _tick_executor
Widget.py(988):         for foo in self._tick_functions:
 --- modulename: Widget, funcname: mouseMoveEvent
Widget.py(1402):         self.mousePos = self.mapToScene(event.pos())
Widget.py(1404):         if self._resize_group_mode:
Widget.py(1417):         if self._draw_real_time_line:
Widget.py(1434):         if self._is_rubber_band_selection:
Widget.py(1445):         super(GraphWidget, self).mouseMoveEvent(event)
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Widget, funcname: mouseMoveEvent
Widget.py(1402):         self.mousePos = self.mapToScene(event.pos())
Widget.py(1404):         if self._resize_group_mode:
Widget.py(1417):         if self._draw_real_time_line:
Widget.py(1434):         if self._is_rubber_band_selection:
Widget.py(1445):         super(GraphWidget, self).mouseMoveEvent(event)
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Widget, funcname: mouseMoveEvent
Widget.py(1402):         self.mousePos = self.mapToScene(event.pos())
Widget.py(1404):         if self._resize_group_mode:
Widget.py(1417):         if self._draw_real_time_line:
Widget.py(1434):         if self._is_rubber_band_selection:
Widget.py(1445):         super(GraphWidget, self).mouseMoveEvent(event)
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Widget, funcname: _tick_executor
Widget.py(988):         for foo in self._tick_functions:
 --- modulename: Widget, funcname: mousePressEvent
Widget.py(1371):         modifiers = event.modifiers()
Widget.py(1372):         self.pressed_item = self.itemAt(event.pos())
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
Widget.py(1373):         if self.pressed_item and hasattr(self.pressed_item, 'mark'):
Widget.py(1376):         if not self.pressed_item:
Widget.py(1379):         if self.pressed_item:
Widget.py(1380):             if hasattr(self.pressed_item, 'object_type') and not hasattr(self.pressed_item, 'non_selectable'):
Widget.py(1381):                 if self.pressed_item.object_type == AGObjectTypes.tPort:
Widget.py(1385):         self.mousePressPose = self.mapToScene(event.pos())
Widget.py(1386):         if self.pressed_item and event.button() == QtCore.Qt.LeftButton:
Widget.py(1387):             if hasattr(self.pressed_item, 'object_type'):
Widget.py(1388):                 if self.pressed_item.object_type == AGObjectTypes.tPort:
Widget.py(1391):         if event.button() == QtCore.Qt.RightButton:
Widget.py(1393):         if all([event.button() == QtCore.Qt.LeftButton, modifiers == QtCore.Qt.AltModifier]):
Widget.py(1395):         if all([event.button() == QtCore.Qt.LeftButton,
Widget.py(1396):                 modifiers == QtCore.Qt.NoModifier or modifiers == QtCore.Qt.ControlModifier | QtCore.Qt.ShiftModifier]):
Widget.py(1397):             if not self.pressed_item or hasattr(self.pressed_item, 'non_selectable'):
Widget.py(1399):         super(GraphWidget, self).mousePressEvent(event)
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: BaseNode, funcname: mousePressEvent
BaseNode.py(243):         self.update()
BaseNode.py(244):         self.setCursor(QtCore.Qt.ClosedHandCursor)
 --- modulename: BaseNode, funcname: itemChange
BaseNode.py(147):         if change == self.ItemPositionChange:
BaseNode.py(152):         return QtGui.QGraphicsItem.itemChange(self, change, value)
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: BaseNode, funcname: itemChange
BaseNode.py(147):         if change == self.ItemPositionChange:
BaseNode.py(152):         return QtGui.QGraphicsItem.itemChange(self, change, value)
BaseNode.py(245):         QtGui.QGraphicsItem.mousePressEvent(self, event)
 --- modulename: BaseNode, funcname: itemChange
BaseNode.py(147):         if change == self.ItemPositionChange:
BaseNode.py(152):         return QtGui.QGraphicsItem.itemChange(self, change, value)
 --- modulename: Widget, funcname: OnSelectionChanged
Widget.py(210):         selected_nodes = []
Widget.py(211):         for n in self.parent().get_nodes():
 --- modulename: Widget, funcname: get_nodes
Widget.py(1026):         ls = []
Widget.py(1027):         for i in self.scene().items():
Widget.py(1028):             if hasattr(i, 'object_type'):
Widget.py(1027):         for i in self.scene().items():
Widget.py(1028):             if hasattr(i, 'object_type'):
Widget.py(1029):                 if i.object_type == AGObjectTypes.tNode:
Widget.py(1027):         for i in self.scene().items():
Widget.py(1028):             if hasattr(i, 'object_type'):
Widget.py(1029):                 if i.object_type == AGObjectTypes.tNode:
Widget.py(1030):                     if i.isVisible():
Widget.py(1031):                         ls.append(i)
Widget.py(1027):         for i in self.scene().items():
Widget.py(1028):             if hasattr(i, 'object_type'):
Widget.py(1029):                 if i.object_type == AGObjectTypes.tNode:
Widget.py(1027):         for i in self.scene().items():
Widget.py(1028):             if hasattr(i, 'object_type'):
Widget.py(1027):         for i in self.scene().items():
Widget.py(1028):             if hasattr(i, 'object_type'):
Widget.py(1027):         for i in self.scene().items():
Widget.py(1028):             if hasattr(i, 'object_type'):
Widget.py(1027):         for i in self.scene().items():
Widget.py(1028):             if hasattr(i, 'object_type'):
Widget.py(1027):         for i in self.scene().items():
Widget.py(1028):             if hasattr(i, 'object_type'):
Widget.py(1029):                 if i.object_type == AGObjectTypes.tNode:
Widget.py(1027):         for i in self.scene().items():
Widget.py(1028):             if hasattr(i, 'object_type'):
Widget.py(1029):                 if i.object_type == AGObjectTypes.tNode:
Widget.py(1027):         for i in self.scene().items():
Widget.py(1028):             if hasattr(i, 'object_type'):
Widget.py(1029):                 if i.object_type == AGObjectTypes.tNode:
Widget.py(1027):         for i in self.scene().items():
Widget.py(1032):         return ls
Widget.py(212):             if n.isSelected():
Widget.py(213):                 selected_nodes.append(n.name)
Widget.py(211):         for n in self.parent().get_nodes():
Widget.py(214):         if len(selected_nodes) == 0:
Widget.py(217):         cmd = "select {0}nl ".format(FLAG_SYMBOL)
Widget.py(218):         for n in selected_nodes:
Widget.py(219):             cmd += n
Widget.py(220):             cmd += " "
Widget.py(218):         for n in selected_nodes:
Widget.py(221):         self.parent().write_to_console(cmd[:-1])
 --- modulename: Widget, funcname: write_to_console
Widget.py(1987):         if not force:
Widget.py(1988):             if not self.is_debug():
 --- modulename: AbstractGraph, funcname: is_debug
AbstractGraph.py(223):         return self._debug
Widget.py(1989):                 return
 --- modulename: BaseNode, funcname: itemChange
BaseNode.py(147):         if change == self.ItemPositionChange:
BaseNode.py(152):         return QtGui.QGraphicsItem.itemChange(self, change, value)
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: BaseNode, funcname: paint
BaseNode.py(199):         painter.setPen(QtCore.Qt.NoPen)
BaseNode.py(200):         painter.setBrush(QtCore.Qt.darkGray)
BaseNode.py(202):         if self.options:
BaseNode.py(203):             color = self.opt_node_base_color
BaseNode.py(206):         if self.isSelected():
BaseNode.py(207):             color = color.lighter(150)
BaseNode.py(209):         linearGrad = QtGui.QRadialGradient(QtCore.QPointF(40, 40), 300)
BaseNode.py(210):         linearGrad.setColorAt(0, color)
BaseNode.py(211):         linearGrad.setColorAt(1, color.lighter(180))
BaseNode.py(212):         br = QtGui.QBrush(linearGrad)
BaseNode.py(213):         painter.setBrush(br)
BaseNode.py(214):         pen = QtGui.QPen(QtCore.Qt.black, 0.5)
BaseNode.py(215):         if option.state & QtGui.QStyle.State_Selected:
BaseNode.py(216):             if self.options:
BaseNode.py(217):                 pen.setColor(self.opt_selected_pen_color)
BaseNode.py(218):                 pen.setStyle(self.opt_pen_selected_type)
BaseNode.py(222):         painter.setPen(pen)
BaseNode.py(223):         painter.drawRoundedRect(self.sizes[0], self.sizes[1],
BaseNode.py(224):                                 self.childrenBoundingRect().width(), self.nodeMainGWidget.boundingRect().height(),
BaseNode.py(225):                                 self.sizes[4], self.sizes[5])
 --- modulename: BaseNode, funcname: paint
BaseNode.py(39):         if self.options:
BaseNode.py(40):             painter.fillRect(option.rect, QtGui.QColor(self.opt_bg_color))
BaseNode.py(43):         super(NodeName, self).paint(painter, option, widget)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Widget, funcname: mouseMoveEvent
Widget.py(1402):         self.mousePos = self.mapToScene(event.pos())
Widget.py(1404):         if self._resize_group_mode:
Widget.py(1417):         if self._draw_real_time_line:
Widget.py(1434):         if self._is_rubber_band_selection:
Widget.py(1445):         super(GraphWidget, self).mouseMoveEvent(event)
 --- modulename: BaseNode, funcname: itemChange
BaseNode.py(147):         if change == self.ItemPositionChange:
BaseNode.py(149):             value.setX(roundup(value.x() - self.graph().grid_size + self.graph().grid_size / 3.0, self.graph().grid_size))
 --- modulename: AGraphCommon, funcname: roundup
AGraphCommon.py(11):     return int(math.ceil(x / to)) * to
BaseNode.py(150):             value.setY(roundup(value.y() - self.graph().grid_size + self.graph().grid_size / 3.0, self.graph().grid_size))
 --- modulename: AGraphCommon, funcname: roundup
AGraphCommon.py(11):     return int(math.ceil(x / to)) * to
BaseNode.py(151):             return value
 --- modulename: Widget, funcname: mouseMoveEvent
Widget.py(1402):         self.mousePos = self.mapToScene(event.pos())
Widget.py(1404):         if self._resize_group_mode:
Widget.py(1417):         if self._draw_real_time_line:
Widget.py(1434):         if self._is_rubber_band_selection:
Widget.py(1445):         super(GraphWidget, self).mouseMoveEvent(event)
 --- modulename: BaseNode, funcname: itemChange
BaseNode.py(147):         if change == self.ItemPositionChange:
BaseNode.py(149):             value.setX(roundup(value.x() - self.graph().grid_size + self.graph().grid_size / 3.0, self.graph().grid_size))
 --- modulename: AGraphCommon, funcname: roundup
AGraphCommon.py(11):     return int(math.ceil(x / to)) * to
BaseNode.py(150):             value.setY(roundup(value.y() - self.graph().grid_size + self.graph().grid_size / 3.0, self.graph().grid_size))
 --- modulename: AGraphCommon, funcname: roundup
AGraphCommon.py(11):     return int(math.ceil(x / to)) * to
BaseNode.py(151):             return value
 --- modulename: Widget, funcname: mouseMoveEvent
Widget.py(1402):         self.mousePos = self.mapToScene(event.pos())
Widget.py(1404):         if self._resize_group_mode:
Widget.py(1417):         if self._draw_real_time_line:
Widget.py(1434):         if self._is_rubber_band_selection:
Widget.py(1445):         super(GraphWidget, self).mouseMoveEvent(event)
 --- modulename: BaseNode, funcname: itemChange
BaseNode.py(147):         if change == self.ItemPositionChange:
BaseNode.py(149):             value.setX(roundup(value.x() - self.graph().grid_size + self.graph().grid_size / 3.0, self.graph().grid_size))
 --- modulename: AGraphCommon, funcname: roundup
AGraphCommon.py(11):     return int(math.ceil(x / to)) * to
BaseNode.py(150):             value.setY(roundup(value.y() - self.graph().grid_size + self.graph().grid_size / 3.0, self.graph().grid_size))
 --- modulename: AGraphCommon, funcname: roundup
AGraphCommon.py(11):     return int(math.ceil(x / to)) * to
BaseNode.py(151):             return value
 --- modulename: BaseNode, funcname: itemChange
BaseNode.py(147):         if change == self.ItemPositionChange:
BaseNode.py(152):         return QtGui.QGraphicsItem.itemChange(self, change, value)
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: BaseNode, funcname: paint
BaseNode.py(199):         painter.setPen(QtCore.Qt.NoPen)
BaseNode.py(200):         painter.setBrush(QtCore.Qt.darkGray)
BaseNode.py(202):         if self.options:
BaseNode.py(203):             color = self.opt_node_base_color
BaseNode.py(206):         if self.isSelected():
BaseNode.py(207):             color = color.lighter(150)
BaseNode.py(209):         linearGrad = QtGui.QRadialGradient(QtCore.QPointF(40, 40), 300)
BaseNode.py(210):         linearGrad.setColorAt(0, color)
BaseNode.py(211):         linearGrad.setColorAt(1, color.lighter(180))
BaseNode.py(212):         br = QtGui.QBrush(linearGrad)
BaseNode.py(213):         painter.setBrush(br)
BaseNode.py(214):         pen = QtGui.QPen(QtCore.Qt.black, 0.5)
BaseNode.py(215):         if option.state & QtGui.QStyle.State_Selected:
BaseNode.py(216):             if self.options:
BaseNode.py(217):                 pen.setColor(self.opt_selected_pen_color)
BaseNode.py(218):                 pen.setStyle(self.opt_pen_selected_type)
BaseNode.py(222):         painter.setPen(pen)
BaseNode.py(223):         painter.drawRoundedRect(self.sizes[0], self.sizes[1],
BaseNode.py(224):                                 self.childrenBoundingRect().width(), self.nodeMainGWidget.boundingRect().height(),
BaseNode.py(225):                                 self.sizes[4], self.sizes[5])
 --- modulename: BaseNode, funcname: paint
BaseNode.py(39):         if self.options:
BaseNode.py(40):             painter.fillRect(option.rect, QtGui.QColor(self.opt_bg_color))
BaseNode.py(43):         super(NodeName, self).paint(painter, option, widget)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Widget, funcname: _tick_executor
Widget.py(988):         for foo in self._tick_functions:
 --- modulename: Widget, funcname: mouseMoveEvent
Widget.py(1402):         self.mousePos = self.mapToScene(event.pos())
Widget.py(1404):         if self._resize_group_mode:
Widget.py(1417):         if self._draw_real_time_line:
Widget.py(1434):         if self._is_rubber_band_selection:
Widget.py(1445):         super(GraphWidget, self).mouseMoveEvent(event)
 --- modulename: BaseNode, funcname: itemChange
BaseNode.py(147):         if change == self.ItemPositionChange:
BaseNode.py(149):             value.setX(roundup(value.x() - self.graph().grid_size + self.graph().grid_size / 3.0, self.graph().grid_size))
 --- modulename: AGraphCommon, funcname: roundup
AGraphCommon.py(11):     return int(math.ceil(x / to)) * to
BaseNode.py(150):             value.setY(roundup(value.y() - self.graph().grid_size + self.graph().grid_size / 3.0, self.graph().grid_size))
 --- modulename: AGraphCommon, funcname: roundup
AGraphCommon.py(11):     return int(math.ceil(x / to)) * to
BaseNode.py(151):             return value
 --- modulename: Widget, funcname: mouseMoveEvent
Widget.py(1402):         self.mousePos = self.mapToScene(event.pos())
Widget.py(1404):         if self._resize_group_mode:
Widget.py(1417):         if self._draw_real_time_line:
Widget.py(1434):         if self._is_rubber_band_selection:
Widget.py(1445):         super(GraphWidget, self).mouseMoveEvent(event)
 --- modulename: BaseNode, funcname: itemChange
BaseNode.py(147):         if change == self.ItemPositionChange:
BaseNode.py(149):             value.setX(roundup(value.x() - self.graph().grid_size + self.graph().grid_size / 3.0, self.graph().grid_size))
 --- modulename: AGraphCommon, funcname: roundup
AGraphCommon.py(11):     return int(math.ceil(x / to)) * to
BaseNode.py(150):             value.setY(roundup(value.y() - self.graph().grid_size + self.graph().grid_size / 3.0, self.graph().grid_size))
 --- modulename: AGraphCommon, funcname: roundup
AGraphCommon.py(11):     return int(math.ceil(x / to)) * to
BaseNode.py(151):             return value
 --- modulename: Widget, funcname: mouseMoveEvent
Widget.py(1402):         self.mousePos = self.mapToScene(event.pos())
Widget.py(1404):         if self._resize_group_mode:
Widget.py(1417):         if self._draw_real_time_line:
Widget.py(1434):         if self._is_rubber_band_selection:
Widget.py(1445):         super(GraphWidget, self).mouseMoveEvent(event)
 --- modulename: BaseNode, funcname: itemChange
BaseNode.py(147):         if change == self.ItemPositionChange:
BaseNode.py(149):             value.setX(roundup(value.x() - self.graph().grid_size + self.graph().grid_size / 3.0, self.graph().grid_size))
 --- modulename: AGraphCommon, funcname: roundup
AGraphCommon.py(11):     return int(math.ceil(x / to)) * to
BaseNode.py(150):             value.setY(roundup(value.y() - self.graph().grid_size + self.graph().grid_size / 3.0, self.graph().grid_size))
 --- modulename: AGraphCommon, funcname: roundup
AGraphCommon.py(11):     return int(math.ceil(x / to)) * to
BaseNode.py(151):             return value
 --- modulename: Widget, funcname: mouseMoveEvent
Widget.py(1402):         self.mousePos = self.mapToScene(event.pos())
Widget.py(1404):         if self._resize_group_mode:
Widget.py(1417):         if self._draw_real_time_line:
Widget.py(1434):         if self._is_rubber_band_selection:
Widget.py(1445):         super(GraphWidget, self).mouseMoveEvent(event)
 --- modulename: BaseNode, funcname: itemChange
BaseNode.py(147):         if change == self.ItemPositionChange:
BaseNode.py(149):             value.setX(roundup(value.x() - self.graph().grid_size + self.graph().grid_size / 3.0, self.graph().grid_size))
 --- modulename: AGraphCommon, funcname: roundup
AGraphCommon.py(11):     return int(math.ceil(x / to)) * to
BaseNode.py(150):             value.setY(roundup(value.y() - self.graph().grid_size + self.graph().grid_size / 3.0, self.graph().grid_size))
 --- modulename: AGraphCommon, funcname: roundup
AGraphCommon.py(11):     return int(math.ceil(x / to)) * to
BaseNode.py(151):             return value
 --- modulename: BaseNode, funcname: itemChange
BaseNode.py(147):         if change == self.ItemPositionChange:
BaseNode.py(152):         return QtGui.QGraphicsItem.itemChange(self, change, value)
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: BaseNode, funcname: paint
BaseNode.py(199):         painter.setPen(QtCore.Qt.NoPen)
BaseNode.py(200):         painter.setBrush(QtCore.Qt.darkGray)
BaseNode.py(202):         if self.options:
BaseNode.py(203):             color = self.opt_node_base_color
BaseNode.py(206):         if self.isSelected():
BaseNode.py(207):             color = color.lighter(150)
BaseNode.py(209):         linearGrad = QtGui.QRadialGradient(QtCore.QPointF(40, 40), 300)
BaseNode.py(210):         linearGrad.setColorAt(0, color)
BaseNode.py(211):         linearGrad.setColorAt(1, color.lighter(180))
BaseNode.py(212):         br = QtGui.QBrush(linearGrad)
BaseNode.py(213):         painter.setBrush(br)
BaseNode.py(214):         pen = QtGui.QPen(QtCore.Qt.black, 0.5)
BaseNode.py(215):         if option.state & QtGui.QStyle.State_Selected:
BaseNode.py(216):             if self.options:
BaseNode.py(217):                 pen.setColor(self.opt_selected_pen_color)
BaseNode.py(218):                 pen.setStyle(self.opt_pen_selected_type)
BaseNode.py(222):         painter.setPen(pen)
BaseNode.py(223):         painter.drawRoundedRect(self.sizes[0], self.sizes[1],
BaseNode.py(224):                                 self.childrenBoundingRect().width(), self.nodeMainGWidget.boundingRect().height(),
BaseNode.py(225):                                 self.sizes[4], self.sizes[5])
 --- modulename: BaseNode, funcname: paint
BaseNode.py(39):         if self.options:
BaseNode.py(40):             painter.fillRect(option.rect, QtGui.QColor(self.opt_bg_color))
BaseNode.py(43):         super(NodeName, self).paint(painter, option, widget)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Widget, funcname: mouseMoveEvent
Widget.py(1402):         self.mousePos = self.mapToScene(event.pos())
Widget.py(1404):         if self._resize_group_mode:
Widget.py(1417):         if self._draw_real_time_line:
Widget.py(1434):         if self._is_rubber_band_selection:
Widget.py(1445):         super(GraphWidget, self).mouseMoveEvent(event)
 --- modulename: BaseNode, funcname: itemChange
BaseNode.py(147):         if change == self.ItemPositionChange:
BaseNode.py(149):             value.setX(roundup(value.x() - self.graph().grid_size + self.graph().grid_size / 3.0, self.graph().grid_size))
 --- modulename: AGraphCommon, funcname: roundup
AGraphCommon.py(11):     return int(math.ceil(x / to)) * to
BaseNode.py(150):             value.setY(roundup(value.y() - self.graph().grid_size + self.graph().grid_size / 3.0, self.graph().grid_size))
 --- modulename: AGraphCommon, funcname: roundup
AGraphCommon.py(11):     return int(math.ceil(x / to)) * to
BaseNode.py(151):             return value
 --- modulename: Widget, funcname: mouseMoveEvent
Widget.py(1402):         self.mousePos = self.mapToScene(event.pos())
Widget.py(1404):         if self._resize_group_mode:
Widget.py(1417):         if self._draw_real_time_line:
Widget.py(1434):         if self._is_rubber_band_selection:
Widget.py(1445):         super(GraphWidget, self).mouseMoveEvent(event)
 --- modulename: BaseNode, funcname: itemChange
BaseNode.py(147):         if change == self.ItemPositionChange:
BaseNode.py(149):             value.setX(roundup(value.x() - self.graph().grid_size + self.graph().grid_size / 3.0, self.graph().grid_size))
 --- modulename: AGraphCommon, funcname: roundup
AGraphCommon.py(11):     return int(math.ceil(x / to)) * to
BaseNode.py(150):             value.setY(roundup(value.y() - self.graph().grid_size + self.graph().grid_size / 3.0, self.graph().grid_size))
 --- modulename: AGraphCommon, funcname: roundup
AGraphCommon.py(11):     return int(math.ceil(x / to)) * to
BaseNode.py(151):             return value
 --- modulename: BaseNode, funcname: itemChange
BaseNode.py(147):         if change == self.ItemPositionChange:
BaseNode.py(152):         return QtGui.QGraphicsItem.itemChange(self, change, value)
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: BaseNode, funcname: paint
BaseNode.py(199):         painter.setPen(QtCore.Qt.NoPen)
BaseNode.py(200):         painter.setBrush(QtCore.Qt.darkGray)
BaseNode.py(202):         if self.options:
BaseNode.py(203):             color = self.opt_node_base_color
BaseNode.py(206):         if self.isSelected():
BaseNode.py(207):             color = color.lighter(150)
BaseNode.py(209):         linearGrad = QtGui.QRadialGradient(QtCore.QPointF(40, 40), 300)
BaseNode.py(210):         linearGrad.setColorAt(0, color)
BaseNode.py(211):         linearGrad.setColorAt(1, color.lighter(180))
BaseNode.py(212):         br = QtGui.QBrush(linearGrad)
BaseNode.py(213):         painter.setBrush(br)
BaseNode.py(214):         pen = QtGui.QPen(QtCore.Qt.black, 0.5)
BaseNode.py(215):         if option.state & QtGui.QStyle.State_Selected:
BaseNode.py(216):             if self.options:
BaseNode.py(217):                 pen.setColor(self.opt_selected_pen_color)
BaseNode.py(218):                 pen.setStyle(self.opt_pen_selected_type)
BaseNode.py(222):         painter.setPen(pen)
BaseNode.py(223):         painter.drawRoundedRect(self.sizes[0], self.sizes[1],
BaseNode.py(224):                                 self.childrenBoundingRect().width(), self.nodeMainGWidget.boundingRect().height(),
BaseNode.py(225):                                 self.sizes[4], self.sizes[5])
 --- modulename: BaseNode, funcname: paint
BaseNode.py(39):         if self.options:
BaseNode.py(40):             painter.fillRect(option.rect, QtGui.QColor(self.opt_bg_color))
BaseNode.py(43):         super(NodeName, self).paint(painter, option, widget)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Widget, funcname: mouseMoveEvent
Widget.py(1402):         self.mousePos = self.mapToScene(event.pos())
Widget.py(1404):         if self._resize_group_mode:
Widget.py(1417):         if self._draw_real_time_line:
Widget.py(1434):         if self._is_rubber_band_selection:
Widget.py(1445):         super(GraphWidget, self).mouseMoveEvent(event)
 --- modulename: BaseNode, funcname: itemChange
BaseNode.py(147):         if change == self.ItemPositionChange:
BaseNode.py(149):             value.setX(roundup(value.x() - self.graph().grid_size + self.graph().grid_size / 3.0, self.graph().grid_size))
 --- modulename: AGraphCommon, funcname: roundup
AGraphCommon.py(11):     return int(math.ceil(x / to)) * to
BaseNode.py(150):             value.setY(roundup(value.y() - self.graph().grid_size + self.graph().grid_size / 3.0, self.graph().grid_size))
 --- modulename: AGraphCommon, funcname: roundup
AGraphCommon.py(11):     return int(math.ceil(x / to)) * to
BaseNode.py(151):             return value
 --- modulename: Widget, funcname: mouseMoveEvent
Widget.py(1402):         self.mousePos = self.mapToScene(event.pos())
Widget.py(1404):         if self._resize_group_mode:
Widget.py(1417):         if self._draw_real_time_line:
Widget.py(1434):         if self._is_rubber_band_selection:
Widget.py(1445):         super(GraphWidget, self).mouseMoveEvent(event)
 --- modulename: BaseNode, funcname: itemChange
BaseNode.py(147):         if change == self.ItemPositionChange:
BaseNode.py(149):             value.setX(roundup(value.x() - self.graph().grid_size + self.graph().grid_size / 3.0, self.graph().grid_size))
 --- modulename: AGraphCommon, funcname: roundup
AGraphCommon.py(11):     return int(math.ceil(x / to)) * to
BaseNode.py(150):             value.setY(roundup(value.y() - self.graph().grid_size + self.graph().grid_size / 3.0, self.graph().grid_size))
 --- modulename: AGraphCommon, funcname: roundup
AGraphCommon.py(11):     return int(math.ceil(x / to)) * to
BaseNode.py(151):             return value
 --- modulename: BaseNode, funcname: itemChange
BaseNode.py(147):         if change == self.ItemPositionChange:
BaseNode.py(152):         return QtGui.QGraphicsItem.itemChange(self, change, value)
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: BaseNode, funcname: paint
BaseNode.py(199):         painter.setPen(QtCore.Qt.NoPen)
BaseNode.py(200):         painter.setBrush(QtCore.Qt.darkGray)
BaseNode.py(202):         if self.options:
BaseNode.py(203):             color = self.opt_node_base_color
BaseNode.py(206):         if self.isSelected():
BaseNode.py(207):             color = color.lighter(150)
BaseNode.py(209):         linearGrad = QtGui.QRadialGradient(QtCore.QPointF(40, 40), 300)
BaseNode.py(210):         linearGrad.setColorAt(0, color)
BaseNode.py(211):         linearGrad.setColorAt(1, color.lighter(180))
BaseNode.py(212):         br = QtGui.QBrush(linearGrad)
BaseNode.py(213):         painter.setBrush(br)
BaseNode.py(214):         pen = QtGui.QPen(QtCore.Qt.black, 0.5)
BaseNode.py(215):         if option.state & QtGui.QStyle.State_Selected:
BaseNode.py(216):             if self.options:
BaseNode.py(217):                 pen.setColor(self.opt_selected_pen_color)
BaseNode.py(218):                 pen.setStyle(self.opt_pen_selected_type)
BaseNode.py(222):         painter.setPen(pen)
BaseNode.py(223):         painter.drawRoundedRect(self.sizes[0], self.sizes[1],
BaseNode.py(224):                                 self.childrenBoundingRect().width(), self.nodeMainGWidget.boundingRect().height(),
BaseNode.py(225):                                 self.sizes[4], self.sizes[5])
 --- modulename: BaseNode, funcname: paint
BaseNode.py(39):         if self.options:
BaseNode.py(40):             painter.fillRect(option.rect, QtGui.QColor(self.opt_bg_color))
BaseNode.py(43):         super(NodeName, self).paint(painter, option, widget)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Widget, funcname: _tick_executor
Widget.py(988):         for foo in self._tick_functions:
 --- modulename: Widget, funcname: mouseMoveEvent
Widget.py(1402):         self.mousePos = self.mapToScene(event.pos())
Widget.py(1404):         if self._resize_group_mode:
Widget.py(1417):         if self._draw_real_time_line:
Widget.py(1434):         if self._is_rubber_band_selection:
Widget.py(1445):         super(GraphWidget, self).mouseMoveEvent(event)
 --- modulename: BaseNode, funcname: itemChange
BaseNode.py(147):         if change == self.ItemPositionChange:
BaseNode.py(149):             value.setX(roundup(value.x() - self.graph().grid_size + self.graph().grid_size / 3.0, self.graph().grid_size))
 --- modulename: AGraphCommon, funcname: roundup
AGraphCommon.py(11):     return int(math.ceil(x / to)) * to
BaseNode.py(150):             value.setY(roundup(value.y() - self.graph().grid_size + self.graph().grid_size / 3.0, self.graph().grid_size))
 --- modulename: AGraphCommon, funcname: roundup
AGraphCommon.py(11):     return int(math.ceil(x / to)) * to
BaseNode.py(151):             return value
 --- modulename: BaseNode, funcname: itemChange
BaseNode.py(147):         if change == self.ItemPositionChange:
BaseNode.py(152):         return QtGui.QGraphicsItem.itemChange(self, change, value)
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: BaseNode, funcname: paint
BaseNode.py(199):         painter.setPen(QtCore.Qt.NoPen)
BaseNode.py(200):         painter.setBrush(QtCore.Qt.darkGray)
BaseNode.py(202):         if self.options:
BaseNode.py(203):             color = self.opt_node_base_color
BaseNode.py(206):         if self.isSelected():
BaseNode.py(207):             color = color.lighter(150)
BaseNode.py(209):         linearGrad = QtGui.QRadialGradient(QtCore.QPointF(40, 40), 300)
BaseNode.py(210):         linearGrad.setColorAt(0, color)
BaseNode.py(211):         linearGrad.setColorAt(1, color.lighter(180))
BaseNode.py(212):         br = QtGui.QBrush(linearGrad)
BaseNode.py(213):         painter.setBrush(br)
BaseNode.py(214):         pen = QtGui.QPen(QtCore.Qt.black, 0.5)
BaseNode.py(215):         if option.state & QtGui.QStyle.State_Selected:
BaseNode.py(216):             if self.options:
BaseNode.py(217):                 pen.setColor(self.opt_selected_pen_color)
BaseNode.py(218):                 pen.setStyle(self.opt_pen_selected_type)
BaseNode.py(222):         painter.setPen(pen)
BaseNode.py(223):         painter.drawRoundedRect(self.sizes[0], self.sizes[1],
BaseNode.py(224):                                 self.childrenBoundingRect().width(), self.nodeMainGWidget.boundingRect().height(),
BaseNode.py(225):                                 self.sizes[4], self.sizes[5])
 --- modulename: BaseNode, funcname: paint
BaseNode.py(39):         if self.options:
BaseNode.py(40):             painter.fillRect(option.rect, QtGui.QColor(self.opt_bg_color))
BaseNode.py(43):         super(NodeName, self).paint(painter, option, widget)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Widget, funcname: _tick_executor
Widget.py(988):         for foo in self._tick_functions:
 --- modulename: Widget, funcname: mouseMoveEvent
Widget.py(1402):         self.mousePos = self.mapToScene(event.pos())
Widget.py(1404):         if self._resize_group_mode:
Widget.py(1417):         if self._draw_real_time_line:
Widget.py(1434):         if self._is_rubber_band_selection:
Widget.py(1445):         super(GraphWidget, self).mouseMoveEvent(event)
 --- modulename: BaseNode, funcname: itemChange
BaseNode.py(147):         if change == self.ItemPositionChange:
BaseNode.py(149):             value.setX(roundup(value.x() - self.graph().grid_size + self.graph().grid_size / 3.0, self.graph().grid_size))
 --- modulename: AGraphCommon, funcname: roundup
AGraphCommon.py(11):     return int(math.ceil(x / to)) * to
BaseNode.py(150):             value.setY(roundup(value.y() - self.graph().grid_size + self.graph().grid_size / 3.0, self.graph().grid_size))
 --- modulename: AGraphCommon, funcname: roundup
AGraphCommon.py(11):     return int(math.ceil(x / to)) * to
BaseNode.py(151):             return value
 --- modulename: BaseNode, funcname: itemChange
BaseNode.py(147):         if change == self.ItemPositionChange:
BaseNode.py(152):         return QtGui.QGraphicsItem.itemChange(self, change, value)
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: BaseNode, funcname: paint
BaseNode.py(199):         painter.setPen(QtCore.Qt.NoPen)
BaseNode.py(200):         painter.setBrush(QtCore.Qt.darkGray)
BaseNode.py(202):         if self.options:
BaseNode.py(203):             color = self.opt_node_base_color
BaseNode.py(206):         if self.isSelected():
BaseNode.py(207):             color = color.lighter(150)
BaseNode.py(209):         linearGrad = QtGui.QRadialGradient(QtCore.QPointF(40, 40), 300)
BaseNode.py(210):         linearGrad.setColorAt(0, color)
BaseNode.py(211):         linearGrad.setColorAt(1, color.lighter(180))
BaseNode.py(212):         br = QtGui.QBrush(linearGrad)
BaseNode.py(213):         painter.setBrush(br)
BaseNode.py(214):         pen = QtGui.QPen(QtCore.Qt.black, 0.5)
BaseNode.py(215):         if option.state & QtGui.QStyle.State_Selected:
BaseNode.py(216):             if self.options:
BaseNode.py(217):                 pen.setColor(self.opt_selected_pen_color)
BaseNode.py(218):                 pen.setStyle(self.opt_pen_selected_type)
BaseNode.py(222):         painter.setPen(pen)
BaseNode.py(223):         painter.drawRoundedRect(self.sizes[0], self.sizes[1],
BaseNode.py(224):                                 self.childrenBoundingRect().width(), self.nodeMainGWidget.boundingRect().height(),
BaseNode.py(225):                                 self.sizes[4], self.sizes[5])
 --- modulename: BaseNode, funcname: paint
BaseNode.py(39):         if self.options:
BaseNode.py(40):             painter.fillRect(option.rect, QtGui.QColor(self.opt_bg_color))
BaseNode.py(43):         super(NodeName, self).paint(painter, option, widget)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Widget, funcname: mouseMoveEvent
Widget.py(1402):         self.mousePos = self.mapToScene(event.pos())
Widget.py(1404):         if self._resize_group_mode:
Widget.py(1417):         if self._draw_real_time_line:
Widget.py(1434):         if self._is_rubber_band_selection:
Widget.py(1445):         super(GraphWidget, self).mouseMoveEvent(event)
 --- modulename: BaseNode, funcname: itemChange
BaseNode.py(147):         if change == self.ItemPositionChange:
BaseNode.py(149):             value.setX(roundup(value.x() - self.graph().grid_size + self.graph().grid_size / 3.0, self.graph().grid_size))
 --- modulename: AGraphCommon, funcname: roundup
AGraphCommon.py(11):     return int(math.ceil(x / to)) * to
BaseNode.py(150):             value.setY(roundup(value.y() - self.graph().grid_size + self.graph().grid_size / 3.0, self.graph().grid_size))
 --- modulename: AGraphCommon, funcname: roundup
AGraphCommon.py(11):     return int(math.ceil(x / to)) * to
BaseNode.py(151):             return value
 --- modulename: BaseNode, funcname: itemChange
BaseNode.py(147):         if change == self.ItemPositionChange:
BaseNode.py(152):         return QtGui.QGraphicsItem.itemChange(self, change, value)
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: BaseNode, funcname: paint
BaseNode.py(199):         painter.setPen(QtCore.Qt.NoPen)
BaseNode.py(200):         painter.setBrush(QtCore.Qt.darkGray)
BaseNode.py(202):         if self.options:
BaseNode.py(203):             color = self.opt_node_base_color
BaseNode.py(206):         if self.isSelected():
BaseNode.py(207):             color = color.lighter(150)
BaseNode.py(209):         linearGrad = QtGui.QRadialGradient(QtCore.QPointF(40, 40), 300)
BaseNode.py(210):         linearGrad.setColorAt(0, color)
BaseNode.py(211):         linearGrad.setColorAt(1, color.lighter(180))
BaseNode.py(212):         br = QtGui.QBrush(linearGrad)
BaseNode.py(213):         painter.setBrush(br)
BaseNode.py(214):         pen = QtGui.QPen(QtCore.Qt.black, 0.5)
BaseNode.py(215):         if option.state & QtGui.QStyle.State_Selected:
BaseNode.py(216):             if self.options:
BaseNode.py(217):                 pen.setColor(self.opt_selected_pen_color)
BaseNode.py(218):                 pen.setStyle(self.opt_pen_selected_type)
BaseNode.py(222):         painter.setPen(pen)
BaseNode.py(223):         painter.drawRoundedRect(self.sizes[0], self.sizes[1],
BaseNode.py(224):                                 self.childrenBoundingRect().width(), self.nodeMainGWidget.boundingRect().height(),
BaseNode.py(225):                                 self.sizes[4], self.sizes[5])
 --- modulename: BaseNode, funcname: paint
BaseNode.py(39):         if self.options:
BaseNode.py(40):             painter.fillRect(option.rect, QtGui.QColor(self.opt_bg_color))
BaseNode.py(43):         super(NodeName, self).paint(painter, option, widget)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Widget, funcname: mouseMoveEvent
Widget.py(1402):         self.mousePos = self.mapToScene(event.pos())
Widget.py(1404):         if self._resize_group_mode:
Widget.py(1417):         if self._draw_real_time_line:
Widget.py(1434):         if self._is_rubber_band_selection:
Widget.py(1445):         super(GraphWidget, self).mouseMoveEvent(event)
 --- modulename: BaseNode, funcname: itemChange
BaseNode.py(147):         if change == self.ItemPositionChange:
BaseNode.py(149):             value.setX(roundup(value.x() - self.graph().grid_size + self.graph().grid_size / 3.0, self.graph().grid_size))
 --- modulename: AGraphCommon, funcname: roundup
AGraphCommon.py(11):     return int(math.ceil(x / to)) * to
BaseNode.py(150):             value.setY(roundup(value.y() - self.graph().grid_size + self.graph().grid_size / 3.0, self.graph().grid_size))
 --- modulename: AGraphCommon, funcname: roundup
AGraphCommon.py(11):     return int(math.ceil(x / to)) * to
BaseNode.py(151):             return value
 --- modulename: BaseNode, funcname: itemChange
BaseNode.py(147):         if change == self.ItemPositionChange:
BaseNode.py(152):         return QtGui.QGraphicsItem.itemChange(self, change, value)
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: BaseNode, funcname: paint
BaseNode.py(199):         painter.setPen(QtCore.Qt.NoPen)
BaseNode.py(200):         painter.setBrush(QtCore.Qt.darkGray)
BaseNode.py(202):         if self.options:
BaseNode.py(203):             color = self.opt_node_base_color
BaseNode.py(206):         if self.isSelected():
BaseNode.py(207):             color = color.lighter(150)
BaseNode.py(209):         linearGrad = QtGui.QRadialGradient(QtCore.QPointF(40, 40), 300)
BaseNode.py(210):         linearGrad.setColorAt(0, color)
BaseNode.py(211):         linearGrad.setColorAt(1, color.lighter(180))
BaseNode.py(212):         br = QtGui.QBrush(linearGrad)
BaseNode.py(213):         painter.setBrush(br)
BaseNode.py(214):         pen = QtGui.QPen(QtCore.Qt.black, 0.5)
BaseNode.py(215):         if option.state & QtGui.QStyle.State_Selected:
BaseNode.py(216):             if self.options:
BaseNode.py(217):                 pen.setColor(self.opt_selected_pen_color)
BaseNode.py(218):                 pen.setStyle(self.opt_pen_selected_type)
BaseNode.py(222):         painter.setPen(pen)
BaseNode.py(223):         painter.drawRoundedRect(self.sizes[0], self.sizes[1],
BaseNode.py(224):                                 self.childrenBoundingRect().width(), self.nodeMainGWidget.boundingRect().height(),
BaseNode.py(225):                                 self.sizes[4], self.sizes[5])
 --- modulename: BaseNode, funcname: paint
BaseNode.py(39):         if self.options:
BaseNode.py(40):             painter.fillRect(option.rect, QtGui.QColor(self.opt_bg_color))
BaseNode.py(43):         super(NodeName, self).paint(painter, option, widget)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Widget, funcname: mouseMoveEvent
Widget.py(1402):         self.mousePos = self.mapToScene(event.pos())
Widget.py(1404):         if self._resize_group_mode:
Widget.py(1417):         if self._draw_real_time_line:
Widget.py(1434):         if self._is_rubber_band_selection:
Widget.py(1445):         super(GraphWidget, self).mouseMoveEvent(event)
 --- modulename: BaseNode, funcname: itemChange
BaseNode.py(147):         if change == self.ItemPositionChange:
BaseNode.py(149):             value.setX(roundup(value.x() - self.graph().grid_size + self.graph().grid_size / 3.0, self.graph().grid_size))
 --- modulename: AGraphCommon, funcname: roundup
AGraphCommon.py(11):     return int(math.ceil(x / to)) * to
BaseNode.py(150):             value.setY(roundup(value.y() - self.graph().grid_size + self.graph().grid_size / 3.0, self.graph().grid_size))
 --- modulename: AGraphCommon, funcname: roundup
AGraphCommon.py(11):     return int(math.ceil(x / to)) * to
BaseNode.py(151):             return value
 --- modulename: Widget, funcname: mouseMoveEvent
Widget.py(1402):         self.mousePos = self.mapToScene(event.pos())
Widget.py(1404):         if self._resize_group_mode:
Widget.py(1417):         if self._draw_real_time_line:
Widget.py(1434):         if self._is_rubber_band_selection:
Widget.py(1445):         super(GraphWidget, self).mouseMoveEvent(event)
 --- modulename: BaseNode, funcname: itemChange
BaseNode.py(147):         if change == self.ItemPositionChange:
BaseNode.py(149):             value.setX(roundup(value.x() - self.graph().grid_size + self.graph().grid_size / 3.0, self.graph().grid_size))
 --- modulename: AGraphCommon, funcname: roundup
AGraphCommon.py(11):     return int(math.ceil(x / to)) * to
BaseNode.py(150):             value.setY(roundup(value.y() - self.graph().grid_size + self.graph().grid_size / 3.0, self.graph().grid_size))
 --- modulename: AGraphCommon, funcname: roundup
AGraphCommon.py(11):     return int(math.ceil(x / to)) * to
BaseNode.py(151):             return value
 --- modulename: BaseNode, funcname: itemChange
BaseNode.py(147):         if change == self.ItemPositionChange:
BaseNode.py(152):         return QtGui.QGraphicsItem.itemChange(self, change, value)
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: BaseNode, funcname: paint
BaseNode.py(199):         painter.setPen(QtCore.Qt.NoPen)
BaseNode.py(200):         painter.setBrush(QtCore.Qt.darkGray)
BaseNode.py(202):         if self.options:
BaseNode.py(203):             color = self.opt_node_base_color
BaseNode.py(206):         if self.isSelected():
BaseNode.py(207):             color = color.lighter(150)
BaseNode.py(209):         linearGrad = QtGui.QRadialGradient(QtCore.QPointF(40, 40), 300)
BaseNode.py(210):         linearGrad.setColorAt(0, color)
BaseNode.py(211):         linearGrad.setColorAt(1, color.lighter(180))
BaseNode.py(212):         br = QtGui.QBrush(linearGrad)
BaseNode.py(213):         painter.setBrush(br)
BaseNode.py(214):         pen = QtGui.QPen(QtCore.Qt.black, 0.5)
BaseNode.py(215):         if option.state & QtGui.QStyle.State_Selected:
BaseNode.py(216):             if self.options:
BaseNode.py(217):                 pen.setColor(self.opt_selected_pen_color)
BaseNode.py(218):                 pen.setStyle(self.opt_pen_selected_type)
BaseNode.py(222):         painter.setPen(pen)
BaseNode.py(223):         painter.drawRoundedRect(self.sizes[0], self.sizes[1],
BaseNode.py(224):                                 self.childrenBoundingRect().width(), self.nodeMainGWidget.boundingRect().height(),
BaseNode.py(225):                                 self.sizes[4], self.sizes[5])
 --- modulename: BaseNode, funcname: paint
BaseNode.py(39):         if self.options:
BaseNode.py(40):             painter.fillRect(option.rect, QtGui.QColor(self.opt_bg_color))
BaseNode.py(43):         super(NodeName, self).paint(painter, option, widget)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Widget, funcname: mouseMoveEvent
Widget.py(1402):         self.mousePos = self.mapToScene(event.pos())
Widget.py(1404):         if self._resize_group_mode:
Widget.py(1417):         if self._draw_real_time_line:
Widget.py(1434):         if self._is_rubber_band_selection:
Widget.py(1445):         super(GraphWidget, self).mouseMoveEvent(event)
 --- modulename: BaseNode, funcname: itemChange
BaseNode.py(147):         if change == self.ItemPositionChange:
BaseNode.py(149):             value.setX(roundup(value.x() - self.graph().grid_size + self.graph().grid_size / 3.0, self.graph().grid_size))
 --- modulename: AGraphCommon, funcname: roundup
AGraphCommon.py(11):     return int(math.ceil(x / to)) * to
BaseNode.py(150):             value.setY(roundup(value.y() - self.graph().grid_size + self.graph().grid_size / 3.0, self.graph().grid_size))
 --- modulename: AGraphCommon, funcname: roundup
AGraphCommon.py(11):     return int(math.ceil(x / to)) * to
BaseNode.py(151):             return value
 --- modulename: Widget, funcname: mouseMoveEvent
Widget.py(1402):         self.mousePos = self.mapToScene(event.pos())
Widget.py(1404):         if self._resize_group_mode:
Widget.py(1417):         if self._draw_real_time_line:
Widget.py(1434):         if self._is_rubber_band_selection:
Widget.py(1445):         super(GraphWidget, self).mouseMoveEvent(event)
 --- modulename: BaseNode, funcname: itemChange
BaseNode.py(147):         if change == self.ItemPositionChange:
BaseNode.py(149):             value.setX(roundup(value.x() - self.graph().grid_size + self.graph().grid_size / 3.0, self.graph().grid_size))
 --- modulename: AGraphCommon, funcname: roundup
AGraphCommon.py(11):     return int(math.ceil(x / to)) * to
BaseNode.py(150):             value.setY(roundup(value.y() - self.graph().grid_size + self.graph().grid_size / 3.0, self.graph().grid_size))
 --- modulename: AGraphCommon, funcname: roundup
AGraphCommon.py(11):     return int(math.ceil(x / to)) * to
BaseNode.py(151):             return value
 --- modulename: Widget, funcname: _tick_executor
Widget.py(988):         for foo in self._tick_functions:
 --- modulename: Widget, funcname: mouseMoveEvent
Widget.py(1402):         self.mousePos = self.mapToScene(event.pos())
Widget.py(1404):         if self._resize_group_mode:
Widget.py(1417):         if self._draw_real_time_line:
Widget.py(1434):         if self._is_rubber_band_selection:
Widget.py(1445):         super(GraphWidget, self).mouseMoveEvent(event)
 --- modulename: BaseNode, funcname: itemChange
BaseNode.py(147):         if change == self.ItemPositionChange:
BaseNode.py(149):             value.setX(roundup(value.x() - self.graph().grid_size + self.graph().grid_size / 3.0, self.graph().grid_size))
 --- modulename: AGraphCommon, funcname: roundup
AGraphCommon.py(11):     return int(math.ceil(x / to)) * to
BaseNode.py(150):             value.setY(roundup(value.y() - self.graph().grid_size + self.graph().grid_size / 3.0, self.graph().grid_size))
 --- modulename: AGraphCommon, funcname: roundup
AGraphCommon.py(11):     return int(math.ceil(x / to)) * to
BaseNode.py(151):             return value
 --- modulename: BaseNode, funcname: itemChange
BaseNode.py(147):         if change == self.ItemPositionChange:
BaseNode.py(152):         return QtGui.QGraphicsItem.itemChange(self, change, value)
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: BaseNode, funcname: paint
BaseNode.py(199):         painter.setPen(QtCore.Qt.NoPen)
BaseNode.py(200):         painter.setBrush(QtCore.Qt.darkGray)
BaseNode.py(202):         if self.options:
BaseNode.py(203):             color = self.opt_node_base_color
BaseNode.py(206):         if self.isSelected():
BaseNode.py(207):             color = color.lighter(150)
BaseNode.py(209):         linearGrad = QtGui.QRadialGradient(QtCore.QPointF(40, 40), 300)
BaseNode.py(210):         linearGrad.setColorAt(0, color)
BaseNode.py(211):         linearGrad.setColorAt(1, color.lighter(180))
BaseNode.py(212):         br = QtGui.QBrush(linearGrad)
BaseNode.py(213):         painter.setBrush(br)
BaseNode.py(214):         pen = QtGui.QPen(QtCore.Qt.black, 0.5)
BaseNode.py(215):         if option.state & QtGui.QStyle.State_Selected:
BaseNode.py(216):             if self.options:
BaseNode.py(217):                 pen.setColor(self.opt_selected_pen_color)
BaseNode.py(218):                 pen.setStyle(self.opt_pen_selected_type)
BaseNode.py(222):         painter.setPen(pen)
BaseNode.py(223):         painter.drawRoundedRect(self.sizes[0], self.sizes[1],
BaseNode.py(224):                                 self.childrenBoundingRect().width(), self.nodeMainGWidget.boundingRect().height(),
BaseNode.py(225):                                 self.sizes[4], self.sizes[5])
 --- modulename: BaseNode, funcname: paint
BaseNode.py(39):         if self.options:
BaseNode.py(40):             painter.fillRect(option.rect, QtGui.QColor(self.opt_bg_color))
BaseNode.py(43):         super(NodeName, self).paint(painter, option, widget)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Widget, funcname: mouseMoveEvent
Widget.py(1402):         self.mousePos = self.mapToScene(event.pos())
Widget.py(1404):         if self._resize_group_mode:
Widget.py(1417):         if self._draw_real_time_line:
Widget.py(1434):         if self._is_rubber_band_selection:
Widget.py(1445):         super(GraphWidget, self).mouseMoveEvent(event)
 --- modulename: BaseNode, funcname: itemChange
BaseNode.py(147):         if change == self.ItemPositionChange:
BaseNode.py(149):             value.setX(roundup(value.x() - self.graph().grid_size + self.graph().grid_size / 3.0, self.graph().grid_size))
 --- modulename: AGraphCommon, funcname: roundup
AGraphCommon.py(11):     return int(math.ceil(x / to)) * to
BaseNode.py(150):             value.setY(roundup(value.y() - self.graph().grid_size + self.graph().grid_size / 3.0, self.graph().grid_size))
 --- modulename: AGraphCommon, funcname: roundup
AGraphCommon.py(11):     return int(math.ceil(x / to)) * to
BaseNode.py(151):             return value
 --- modulename: Widget, funcname: mouseMoveEvent
Widget.py(1402):         self.mousePos = self.mapToScene(event.pos())
Widget.py(1404):         if self._resize_group_mode:
Widget.py(1417):         if self._draw_real_time_line:
Widget.py(1434):         if self._is_rubber_band_selection:
Widget.py(1445):         super(GraphWidget, self).mouseMoveEvent(event)
 --- modulename: BaseNode, funcname: itemChange
BaseNode.py(147):         if change == self.ItemPositionChange:
BaseNode.py(149):             value.setX(roundup(value.x() - self.graph().grid_size + self.graph().grid_size / 3.0, self.graph().grid_size))
 --- modulename: AGraphCommon, funcname: roundup
AGraphCommon.py(11):     return int(math.ceil(x / to)) * to
BaseNode.py(150):             value.setY(roundup(value.y() - self.graph().grid_size + self.graph().grid_size / 3.0, self.graph().grid_size))
 --- modulename: AGraphCommon, funcname: roundup
AGraphCommon.py(11):     return int(math.ceil(x / to)) * to
BaseNode.py(151):             return value
 --- modulename: BaseNode, funcname: itemChange
BaseNode.py(147):         if change == self.ItemPositionChange:
BaseNode.py(152):         return QtGui.QGraphicsItem.itemChange(self, change, value)
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: BaseNode, funcname: paint
BaseNode.py(199):         painter.setPen(QtCore.Qt.NoPen)
BaseNode.py(200):         painter.setBrush(QtCore.Qt.darkGray)
BaseNode.py(202):         if self.options:
BaseNode.py(203):             color = self.opt_node_base_color
BaseNode.py(206):         if self.isSelected():
BaseNode.py(207):             color = color.lighter(150)
BaseNode.py(209):         linearGrad = QtGui.QRadialGradient(QtCore.QPointF(40, 40), 300)
BaseNode.py(210):         linearGrad.setColorAt(0, color)
BaseNode.py(211):         linearGrad.setColorAt(1, color.lighter(180))
BaseNode.py(212):         br = QtGui.QBrush(linearGrad)
BaseNode.py(213):         painter.setBrush(br)
BaseNode.py(214):         pen = QtGui.QPen(QtCore.Qt.black, 0.5)
BaseNode.py(215):         if option.state & QtGui.QStyle.State_Selected:
BaseNode.py(216):             if self.options:
BaseNode.py(217):                 pen.setColor(self.opt_selected_pen_color)
BaseNode.py(218):                 pen.setStyle(self.opt_pen_selected_type)
BaseNode.py(222):         painter.setPen(pen)
BaseNode.py(223):         painter.drawRoundedRect(self.sizes[0], self.sizes[1],
BaseNode.py(224):                                 self.childrenBoundingRect().width(), self.nodeMainGWidget.boundingRect().height(),
BaseNode.py(225):                                 self.sizes[4], self.sizes[5])
 --- modulename: BaseNode, funcname: paint
BaseNode.py(39):         if self.options:
BaseNode.py(40):             painter.fillRect(option.rect, QtGui.QColor(self.opt_bg_color))
BaseNode.py(43):         super(NodeName, self).paint(painter, option, widget)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Widget, funcname: mouseMoveEvent
Widget.py(1402):         self.mousePos = self.mapToScene(event.pos())
Widget.py(1404):         if self._resize_group_mode:
Widget.py(1417):         if self._draw_real_time_line:
Widget.py(1434):         if self._is_rubber_band_selection:
Widget.py(1445):         super(GraphWidget, self).mouseMoveEvent(event)
 --- modulename: BaseNode, funcname: itemChange
BaseNode.py(147):         if change == self.ItemPositionChange:
BaseNode.py(149):             value.setX(roundup(value.x() - self.graph().grid_size + self.graph().grid_size / 3.0, self.graph().grid_size))
 --- modulename: AGraphCommon, funcname: roundup
AGraphCommon.py(11):     return int(math.ceil(x / to)) * to
BaseNode.py(150):             value.setY(roundup(value.y() - self.graph().grid_size + self.graph().grid_size / 3.0, self.graph().grid_size))
 --- modulename: AGraphCommon, funcname: roundup
AGraphCommon.py(11):     return int(math.ceil(x / to)) * to
BaseNode.py(151):             return value
 --- modulename: Widget, funcname: mouseMoveEvent
Widget.py(1402):         self.mousePos = self.mapToScene(event.pos())
Widget.py(1404):         if self._resize_group_mode:
Widget.py(1417):         if self._draw_real_time_line:
Widget.py(1434):         if self._is_rubber_band_selection:
Widget.py(1445):         super(GraphWidget, self).mouseMoveEvent(event)
 --- modulename: BaseNode, funcname: itemChange
BaseNode.py(147):         if change == self.ItemPositionChange:
BaseNode.py(149):             value.setX(roundup(value.x() - self.graph().grid_size + self.graph().grid_size / 3.0, self.graph().grid_size))
 --- modulename: AGraphCommon, funcname: roundup
AGraphCommon.py(11):     return int(math.ceil(x / to)) * to
BaseNode.py(150):             value.setY(roundup(value.y() - self.graph().grid_size + self.graph().grid_size / 3.0, self.graph().grid_size))
 --- modulename: AGraphCommon, funcname: roundup
AGraphCommon.py(11):     return int(math.ceil(x / to)) * to
BaseNode.py(151):             return value
 --- modulename: Widget, funcname: mouseMoveEvent
Widget.py(1402):         self.mousePos = self.mapToScene(event.pos())
Widget.py(1404):         if self._resize_group_mode:
Widget.py(1417):         if self._draw_real_time_line:
Widget.py(1434):         if self._is_rubber_band_selection:
Widget.py(1445):         super(GraphWidget, self).mouseMoveEvent(event)
 --- modulename: BaseNode, funcname: itemChange
BaseNode.py(147):         if change == self.ItemPositionChange:
BaseNode.py(149):             value.setX(roundup(value.x() - self.graph().grid_size + self.graph().grid_size / 3.0, self.graph().grid_size))
 --- modulename: AGraphCommon, funcname: roundup
AGraphCommon.py(11):     return int(math.ceil(x / to)) * to
BaseNode.py(150):             value.setY(roundup(value.y() - self.graph().grid_size + self.graph().grid_size / 3.0, self.graph().grid_size))
 --- modulename: AGraphCommon, funcname: roundup
AGraphCommon.py(11):     return int(math.ceil(x / to)) * to
BaseNode.py(151):             return value
 --- modulename: Widget, funcname: _tick_executor
Widget.py(988):         for foo in self._tick_functions:
 --- modulename: Widget, funcname: mouseMoveEvent
Widget.py(1402):         self.mousePos = self.mapToScene(event.pos())
Widget.py(1404):         if self._resize_group_mode:
Widget.py(1417):         if self._draw_real_time_line:
Widget.py(1434):         if self._is_rubber_band_selection:
Widget.py(1445):         super(GraphWidget, self).mouseMoveEvent(event)
 --- modulename: BaseNode, funcname: itemChange
BaseNode.py(147):         if change == self.ItemPositionChange:
BaseNode.py(149):             value.setX(roundup(value.x() - self.graph().grid_size + self.graph().grid_size / 3.0, self.graph().grid_size))
 --- modulename: AGraphCommon, funcname: roundup
AGraphCommon.py(11):     return int(math.ceil(x / to)) * to
BaseNode.py(150):             value.setY(roundup(value.y() - self.graph().grid_size + self.graph().grid_size / 3.0, self.graph().grid_size))
 --- modulename: AGraphCommon, funcname: roundup
AGraphCommon.py(11):     return int(math.ceil(x / to)) * to
BaseNode.py(151):             return value
 --- modulename: Widget, funcname: mouseMoveEvent
Widget.py(1402):         self.mousePos = self.mapToScene(event.pos())
Widget.py(1404):         if self._resize_group_mode:
Widget.py(1417):         if self._draw_real_time_line:
Widget.py(1434):         if self._is_rubber_band_selection:
Widget.py(1445):         super(GraphWidget, self).mouseMoveEvent(event)
 --- modulename: BaseNode, funcname: itemChange
BaseNode.py(147):         if change == self.ItemPositionChange:
BaseNode.py(149):             value.setX(roundup(value.x() - self.graph().grid_size + self.graph().grid_size / 3.0, self.graph().grid_size))
 --- modulename: AGraphCommon, funcname: roundup
AGraphCommon.py(11):     return int(math.ceil(x / to)) * to
BaseNode.py(150):             value.setY(roundup(value.y() - self.graph().grid_size + self.graph().grid_size / 3.0, self.graph().grid_size))
 --- modulename: AGraphCommon, funcname: roundup
AGraphCommon.py(11):     return int(math.ceil(x / to)) * to
BaseNode.py(151):             return value
 --- modulename: BaseNode, funcname: itemChange
BaseNode.py(147):         if change == self.ItemPositionChange:
BaseNode.py(152):         return QtGui.QGraphicsItem.itemChange(self, change, value)
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: BaseNode, funcname: paint
BaseNode.py(199):         painter.setPen(QtCore.Qt.NoPen)
BaseNode.py(200):         painter.setBrush(QtCore.Qt.darkGray)
BaseNode.py(202):         if self.options:
BaseNode.py(203):             color = self.opt_node_base_color
BaseNode.py(206):         if self.isSelected():
BaseNode.py(207):             color = color.lighter(150)
BaseNode.py(209):         linearGrad = QtGui.QRadialGradient(QtCore.QPointF(40, 40), 300)
BaseNode.py(210):         linearGrad.setColorAt(0, color)
BaseNode.py(211):         linearGrad.setColorAt(1, color.lighter(180))
BaseNode.py(212):         br = QtGui.QBrush(linearGrad)
BaseNode.py(213):         painter.setBrush(br)
BaseNode.py(214):         pen = QtGui.QPen(QtCore.Qt.black, 0.5)
BaseNode.py(215):         if option.state & QtGui.QStyle.State_Selected:
BaseNode.py(216):             if self.options:
BaseNode.py(217):                 pen.setColor(self.opt_selected_pen_color)
BaseNode.py(218):                 pen.setStyle(self.opt_pen_selected_type)
BaseNode.py(222):         painter.setPen(pen)
BaseNode.py(223):         painter.drawRoundedRect(self.sizes[0], self.sizes[1],
BaseNode.py(224):                                 self.childrenBoundingRect().width(), self.nodeMainGWidget.boundingRect().height(),
BaseNode.py(225):                                 self.sizes[4], self.sizes[5])
 --- modulename: BaseNode, funcname: paint
BaseNode.py(39):         if self.options:
BaseNode.py(40):             painter.fillRect(option.rect, QtGui.QColor(self.opt_bg_color))
BaseNode.py(43):         super(NodeName, self).paint(painter, option, widget)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Widget, funcname: mouseMoveEvent
Widget.py(1402):         self.mousePos = self.mapToScene(event.pos())
Widget.py(1404):         if self._resize_group_mode:
Widget.py(1417):         if self._draw_real_time_line:
Widget.py(1434):         if self._is_rubber_band_selection:
Widget.py(1445):         super(GraphWidget, self).mouseMoveEvent(event)
 --- modulename: BaseNode, funcname: itemChange
BaseNode.py(147):         if change == self.ItemPositionChange:
BaseNode.py(149):             value.setX(roundup(value.x() - self.graph().grid_size + self.graph().grid_size / 3.0, self.graph().grid_size))
 --- modulename: AGraphCommon, funcname: roundup
AGraphCommon.py(11):     return int(math.ceil(x / to)) * to
BaseNode.py(150):             value.setY(roundup(value.y() - self.graph().grid_size + self.graph().grid_size / 3.0, self.graph().grid_size))
 --- modulename: AGraphCommon, funcname: roundup
AGraphCommon.py(11):     return int(math.ceil(x / to)) * to
BaseNode.py(151):             return value
 --- modulename: Widget, funcname: mouseMoveEvent
Widget.py(1402):         self.mousePos = self.mapToScene(event.pos())
Widget.py(1404):         if self._resize_group_mode:
Widget.py(1417):         if self._draw_real_time_line:
Widget.py(1434):         if self._is_rubber_band_selection:
Widget.py(1445):         super(GraphWidget, self).mouseMoveEvent(event)
 --- modulename: BaseNode, funcname: itemChange
BaseNode.py(147):         if change == self.ItemPositionChange:
BaseNode.py(149):             value.setX(roundup(value.x() - self.graph().grid_size + self.graph().grid_size / 3.0, self.graph().grid_size))
 --- modulename: AGraphCommon, funcname: roundup
AGraphCommon.py(11):     return int(math.ceil(x / to)) * to
BaseNode.py(150):             value.setY(roundup(value.y() - self.graph().grid_size + self.graph().grid_size / 3.0, self.graph().grid_size))
 --- modulename: AGraphCommon, funcname: roundup
AGraphCommon.py(11):     return int(math.ceil(x / to)) * to
BaseNode.py(151):             return value
 --- modulename: Widget, funcname: mouseMoveEvent
Widget.py(1402):         self.mousePos = self.mapToScene(event.pos())
Widget.py(1404):         if self._resize_group_mode:
Widget.py(1417):         if self._draw_real_time_line:
Widget.py(1434):         if self._is_rubber_band_selection:
Widget.py(1445):         super(GraphWidget, self).mouseMoveEvent(event)
 --- modulename: BaseNode, funcname: itemChange
BaseNode.py(147):         if change == self.ItemPositionChange:
BaseNode.py(149):             value.setX(roundup(value.x() - self.graph().grid_size + self.graph().grid_size / 3.0, self.graph().grid_size))
 --- modulename: AGraphCommon, funcname: roundup
AGraphCommon.py(11):     return int(math.ceil(x / to)) * to
BaseNode.py(150):             value.setY(roundup(value.y() - self.graph().grid_size + self.graph().grid_size / 3.0, self.graph().grid_size))
 --- modulename: AGraphCommon, funcname: roundup
AGraphCommon.py(11):     return int(math.ceil(x / to)) * to
BaseNode.py(151):             return value
 --- modulename: Widget, funcname: mouseMoveEvent
Widget.py(1402):         self.mousePos = self.mapToScene(event.pos())
Widget.py(1404):         if self._resize_group_mode:
Widget.py(1417):         if self._draw_real_time_line:
Widget.py(1434):         if self._is_rubber_band_selection:
Widget.py(1445):         super(GraphWidget, self).mouseMoveEvent(event)
 --- modulename: BaseNode, funcname: itemChange
BaseNode.py(147):         if change == self.ItemPositionChange:
BaseNode.py(149):             value.setX(roundup(value.x() - self.graph().grid_size + self.graph().grid_size / 3.0, self.graph().grid_size))
 --- modulename: AGraphCommon, funcname: roundup
AGraphCommon.py(11):     return int(math.ceil(x / to)) * to
BaseNode.py(150):             value.setY(roundup(value.y() - self.graph().grid_size + self.graph().grid_size / 3.0, self.graph().grid_size))
 --- modulename: AGraphCommon, funcname: roundup
AGraphCommon.py(11):     return int(math.ceil(x / to)) * to
BaseNode.py(151):             return value
 --- modulename: BaseNode, funcname: itemChange
BaseNode.py(147):         if change == self.ItemPositionChange:
BaseNode.py(152):         return QtGui.QGraphicsItem.itemChange(self, change, value)
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: BaseNode, funcname: paint
BaseNode.py(199):         painter.setPen(QtCore.Qt.NoPen)
BaseNode.py(200):         painter.setBrush(QtCore.Qt.darkGray)
BaseNode.py(202):         if self.options:
BaseNode.py(203):             color = self.opt_node_base_color
BaseNode.py(206):         if self.isSelected():
BaseNode.py(207):             color = color.lighter(150)
BaseNode.py(209):         linearGrad = QtGui.QRadialGradient(QtCore.QPointF(40, 40), 300)
BaseNode.py(210):         linearGrad.setColorAt(0, color)
BaseNode.py(211):         linearGrad.setColorAt(1, color.lighter(180))
BaseNode.py(212):         br = QtGui.QBrush(linearGrad)
BaseNode.py(213):         painter.setBrush(br)
BaseNode.py(214):         pen = QtGui.QPen(QtCore.Qt.black, 0.5)
BaseNode.py(215):         if option.state & QtGui.QStyle.State_Selected:
BaseNode.py(216):             if self.options:
BaseNode.py(217):                 pen.setColor(self.opt_selected_pen_color)
BaseNode.py(218):                 pen.setStyle(self.opt_pen_selected_type)
BaseNode.py(222):         painter.setPen(pen)
BaseNode.py(223):         painter.drawRoundedRect(self.sizes[0], self.sizes[1],
BaseNode.py(224):                                 self.childrenBoundingRect().width(), self.nodeMainGWidget.boundingRect().height(),
BaseNode.py(225):                                 self.sizes[4], self.sizes[5])
 --- modulename: BaseNode, funcname: paint
BaseNode.py(39):         if self.options:
BaseNode.py(40):             painter.fillRect(option.rect, QtGui.QColor(self.opt_bg_color))
BaseNode.py(43):         super(NodeName, self).paint(painter, option, widget)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Widget, funcname: mouseMoveEvent
Widget.py(1402):         self.mousePos = self.mapToScene(event.pos())
Widget.py(1404):         if self._resize_group_mode:
Widget.py(1417):         if self._draw_real_time_line:
Widget.py(1434):         if self._is_rubber_band_selection:
Widget.py(1445):         super(GraphWidget, self).mouseMoveEvent(event)
 --- modulename: BaseNode, funcname: itemChange
BaseNode.py(147):         if change == self.ItemPositionChange:
BaseNode.py(149):             value.setX(roundup(value.x() - self.graph().grid_size + self.graph().grid_size / 3.0, self.graph().grid_size))
 --- modulename: AGraphCommon, funcname: roundup
AGraphCommon.py(11):     return int(math.ceil(x / to)) * to
BaseNode.py(150):             value.setY(roundup(value.y() - self.graph().grid_size + self.graph().grid_size / 3.0, self.graph().grid_size))
 --- modulename: AGraphCommon, funcname: roundup
AGraphCommon.py(11):     return int(math.ceil(x / to)) * to
BaseNode.py(151):             return value
 --- modulename: Widget, funcname: mouseReleaseEvent
Widget.py(1498):         self.released_item = self.itemAt(event.pos())
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
Widget.py(1499):         self.setDragMode(self.NoDrag)
Widget.py(1500):         self._resize_group_mode = False
Widget.py(1501):         self.viewport().setCursor(QtCore.Qt.ArrowCursor)
Widget.py(1502):         modifiers = event.modifiers()
Widget.py(1503):         if self.released_item and not hasattr(self.released_item, 'non_selectable'):
Widget.py(1504):             if isinstance(self.released_item, CommentNode):
Widget.py(1513):         for n in self.nodes:
Widget.py(1514):             n.setFlag(QtGui.QGraphicsItem.ItemIsMovable)
Widget.py(1513):         for n in self.nodes:
Widget.py(1516):         if event.button() == QtCore.Qt.RightButton:
Widget.py(1518):         if self._draw_real_time_line:
Widget.py(1522):         if self._is_rubber_band_selection:
Widget.py(1526):         if event.button() == QtCore.Qt.RightButton:
Widget.py(1528):         p_itm = self.pressed_item
Widget.py(1529):         r_itm = self.released_item
Widget.py(1530):         do_connect = True
Widget.py(1531):         for i in [p_itm, r_itm]:
Widget.py(1532):             if not i:
Widget.py(1535):             if not hasattr(i, 'object_type'):
Widget.py(1538):             if not i.object_type == AGObjectTypes.tPort:
Widget.py(1539):                 do_connect = False
Widget.py(1540):                 break
Widget.py(1541):         if p_itm and r_itm:
Widget.py(1542):             if hasattr(p_itm, 'object_type') and hasattr(r_itm, 'object_type'):
Widget.py(1543):                 if all([p_itm.object_type == AGObjectTypes.tPort, r_itm.object_type == AGObjectTypes.tPort]):
Widget.py(1548):         if do_connect:
Widget.py(1550):         selected_nodes = self.selected_nodes()
 --- modulename: Widget, funcname: selected_nodes
Widget.py(1268):         return [i for i in self.nodes if i.isSelected()]
Widget.py(1268):         return [i for i in self.nodes if i.isSelected()]
Widget.py(1551):         if len(selected_nodes) != 0:
Widget.py(1552):             self.update_property_view(selected_nodes[0])
 --- modulename: Widget, funcname: update_property_view
Widget.py(1559):         root = self.parent.dockWidgetNodeView
Widget.py(1560):         layout = self.parent.PropertiesformLayout
Widget.py(1561):         root.owned_node = node
Widget.py(1562):         clearLayout(layout)
 --- modulename: Widget, funcname: clearLayout
Widget.py(39):     while layout.count():
Widget.py(1565):         le_name = QtGui.QLineEdit(node.get_name())
 --- modulename: AbstractGraph, funcname: get_name
AbstractGraph.py(161):         return self.name
Widget.py(1566):         le_name.returnPressed.connect(lambda: node.set_name(le_name.text()))
Widget.py(1567):         layout.addRow("Name", le_name)
Widget.py(1570):         le_pos = QtGui.QLineEdit("{0} x {1}".format(node.pos().x(), node.pos().y()))
Widget.py(1571):         layout.addRow("Pos", le_pos)
Widget.py(1574):         if len(node.inputs) != 0:
Widget.py(1575):             sep_inputs = QtGui.QLabel()
Widget.py(1576):             sep_inputs.setStyleSheet("background-color: black;")
Widget.py(1577):             sep_inputs.setText("INPUTS")
Widget.py(1578):             layout.addRow("", sep_inputs)
Widget.py(1580):             def tmp(le):
Widget.py(1583):             for inp in node.inputs:
Widget.py(1584):                 le = QtGui.QLineEdit(str(inp.current_data()))
 --- modulename: AbstractGraph, funcname: current_data
AbstractGraph.py(44):         if self._data is None:
AbstractGraph.py(46):         return self._data
Widget.py(1585):                 layout.addRow(inp.name, le)
Widget.py(1586):                 le.setReadOnly(True)
Widget.py(1583):             for inp in node.inputs:
Widget.py(1584):                 le = QtGui.QLineEdit(str(inp.current_data()))
 --- modulename: AbstractGraph, funcname: current_data
AbstractGraph.py(44):         if self._data is None:
AbstractGraph.py(46):         return self._data
Widget.py(1585):                 layout.addRow(inp.name, le)
Widget.py(1586):                 le.setReadOnly(True)
Widget.py(1583):             for inp in node.inputs:
Widget.py(1589):         if len(node.outputs) != 0:
Widget.py(1590):             sep_outputs = QtGui.QLabel()
Widget.py(1591):             sep_outputs.setStyleSheet("background-color: black;")
Widget.py(1592):             sep_outputs.setText("OUTPUTS")
Widget.py(1593):             layout.addRow("", sep_outputs)
Widget.py(1594):             for out in node.outputs:
Widget.py(1595):                 le = QtGui.QLineEdit(str(out.current_data()))
 --- modulename: AbstractGraph, funcname: current_data
AbstractGraph.py(44):         if self._data is None:
AbstractGraph.py(46):         return self._data
Widget.py(1596):                 le.setReadOnly(True)
Widget.py(1597):                 layout.addRow(out.name, le)
Widget.py(1594):             for out in node.outputs:
Widget.py(1599):         doc_lb = QtGui.QLabel()
Widget.py(1600):         doc_lb.setStyleSheet("background-color: black;")
Widget.py(1601):         doc_lb.setText("Description")
Widget.py(1602):         layout.addRow("", doc_lb)
Widget.py(1603):         doc = QtGui.QLabel(node.description())
 --- modulename: BaseNode, funcname: description
BaseNode.py(156):         return "Default node description"
Widget.py(1604):         doc.setWordWrap(True)
Widget.py(1605):         layout.addRow("", doc)
Widget.py(1556):         super(GraphWidget, self).mouseReleaseEvent(event)
 --- modulename: BaseNode, funcname: mouseReleaseEvent
BaseNode.py(249):         self.update()
BaseNode.py(250):         self.setCursor(QtCore.Qt.OpenHandCursor)
 --- modulename: BaseNode, funcname: itemChange
BaseNode.py(147):         if change == self.ItemPositionChange:
BaseNode.py(152):         return QtGui.QGraphicsItem.itemChange(self, change, value)
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: BaseNode, funcname: itemChange
BaseNode.py(147):         if change == self.ItemPositionChange:
BaseNode.py(152):         return QtGui.QGraphicsItem.itemChange(self, change, value)
BaseNode.py(251):         modifiers = event.modifiers()
BaseNode.py(252):         selected_nodes = [n for n in self.graph().nodes if n.isSelected()]
BaseNode.py(252):         selected_nodes = [n for n in self.graph().nodes if n.isSelected()]
BaseNode.py(253):         groupers = [i for i in self.graph().groupers if i.object_type == AGObjectTypes.tGrouper]
BaseNode.py(254):         grouper = [g for g in groupers if self in g.collidingItems()]
BaseNode.py(255):         if len(grouper) == 1:
BaseNode.py(259):             parent = self.parentItem()
BaseNode.py(260):             if parent and parent.object_type == AGObjectTypes.tGrouper:
BaseNode.py(269):         p_item = self.parentItem()
BaseNode.py(270):         if p_item and hasattr(p_item, 'object_type'):
BaseNode.py(274):         QtGui.QGraphicsItem.mouseReleaseEvent(self, event)
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: BaseNode, funcname: paint
BaseNode.py(199):         painter.setPen(QtCore.Qt.NoPen)
BaseNode.py(200):         painter.setBrush(QtCore.Qt.darkGray)
BaseNode.py(202):         if self.options:
BaseNode.py(203):             color = self.opt_node_base_color
BaseNode.py(206):         if self.isSelected():
BaseNode.py(207):             color = color.lighter(150)
BaseNode.py(209):         linearGrad = QtGui.QRadialGradient(QtCore.QPointF(40, 40), 300)
BaseNode.py(210):         linearGrad.setColorAt(0, color)
BaseNode.py(211):         linearGrad.setColorAt(1, color.lighter(180))
BaseNode.py(212):         br = QtGui.QBrush(linearGrad)
BaseNode.py(213):         painter.setBrush(br)
BaseNode.py(214):         pen = QtGui.QPen(QtCore.Qt.black, 0.5)
BaseNode.py(215):         if option.state & QtGui.QStyle.State_Selected:
BaseNode.py(216):             if self.options:
BaseNode.py(217):                 pen.setColor(self.opt_selected_pen_color)
BaseNode.py(218):                 pen.setStyle(self.opt_pen_selected_type)
BaseNode.py(222):         painter.setPen(pen)
BaseNode.py(223):         painter.drawRoundedRect(self.sizes[0], self.sizes[1],
BaseNode.py(224):                                 self.childrenBoundingRect().width(), self.nodeMainGWidget.boundingRect().height(),
BaseNode.py(225):                                 self.sizes[4], self.sizes[5])
 --- modulename: BaseNode, funcname: paint
BaseNode.py(39):         if self.options:
BaseNode.py(40):             painter.fillRect(option.rect, QtGui.QColor(self.opt_bg_color))
BaseNode.py(43):         super(NodeName, self).paint(painter, option, widget)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Widget, funcname: mouseMoveEvent
Widget.py(1402):         self.mousePos = self.mapToScene(event.pos())
Widget.py(1404):         if self._resize_group_mode:
Widget.py(1417):         if self._draw_real_time_line:
Widget.py(1434):         if self._is_rubber_band_selection:
Widget.py(1445):         super(GraphWidget, self).mouseMoveEvent(event)
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Widget, funcname: _tick_executor
Widget.py(988):         for foo in self._tick_functions:
 --- modulename: Widget, funcname: mouseMoveEvent
Widget.py(1402):         self.mousePos = self.mapToScene(event.pos())
Widget.py(1404):         if self._resize_group_mode:
Widget.py(1417):         if self._draw_real_time_line:
Widget.py(1434):         if self._is_rubber_band_selection:
Widget.py(1445):         super(GraphWidget, self).mouseMoveEvent(event)
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Widget, funcname: mouseMoveEvent
Widget.py(1402):         self.mousePos = self.mapToScene(event.pos())
Widget.py(1404):         if self._resize_group_mode:
Widget.py(1417):         if self._draw_real_time_line:
Widget.py(1434):         if self._is_rubber_band_selection:
Widget.py(1445):         super(GraphWidget, self).mouseMoveEvent(event)
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Widget, funcname: _tick_executor
Widget.py(988):         for foo in self._tick_functions:
 --- modulename: Widget, funcname: mouseMoveEvent
Widget.py(1402):         self.mousePos = self.mapToScene(event.pos())
Widget.py(1404):         if self._resize_group_mode:
Widget.py(1417):         if self._draw_real_time_line:
Widget.py(1434):         if self._is_rubber_band_selection:
Widget.py(1445):         super(GraphWidget, self).mouseMoveEvent(event)
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Widget, funcname: mouseMoveEvent
Widget.py(1402):         self.mousePos = self.mapToScene(event.pos())
Widget.py(1404):         if self._resize_group_mode:
Widget.py(1417):         if self._draw_real_time_line:
Widget.py(1434):         if self._is_rubber_band_selection:
Widget.py(1445):         super(GraphWidget, self).mouseMoveEvent(event)
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Widget, funcname: mouseMoveEvent
Widget.py(1402):         self.mousePos = self.mapToScene(event.pos())
Widget.py(1404):         if self._resize_group_mode:
Widget.py(1417):         if self._draw_real_time_line:
Widget.py(1434):         if self._is_rubber_band_selection:
Widget.py(1445):         super(GraphWidget, self).mouseMoveEvent(event)
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Widget, funcname: mouseMoveEvent
Widget.py(1402):         self.mousePos = self.mapToScene(event.pos())
Widget.py(1404):         if self._resize_group_mode:
Widget.py(1417):         if self._draw_real_time_line:
Widget.py(1434):         if self._is_rubber_band_selection:
Widget.py(1445):         super(GraphWidget, self).mouseMoveEvent(event)
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Widget, funcname: mouseMoveEvent
Widget.py(1402):         self.mousePos = self.mapToScene(event.pos())
Widget.py(1404):         if self._resize_group_mode:
Widget.py(1417):         if self._draw_real_time_line:
Widget.py(1434):         if self._is_rubber_band_selection:
Widget.py(1445):         super(GraphWidget, self).mouseMoveEvent(event)
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Widget, funcname: mouseMoveEvent
Widget.py(1402):         self.mousePos = self.mapToScene(event.pos())
Widget.py(1404):         if self._resize_group_mode:
Widget.py(1417):         if self._draw_real_time_line:
Widget.py(1434):         if self._is_rubber_band_selection:
Widget.py(1445):         super(GraphWidget, self).mouseMoveEvent(event)
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Widget, funcname: mouseMoveEvent
Widget.py(1402):         self.mousePos = self.mapToScene(event.pos())
Widget.py(1404):         if self._resize_group_mode:
Widget.py(1417):         if self._draw_real_time_line:
Widget.py(1434):         if self._is_rubber_band_selection:
Widget.py(1445):         super(GraphWidget, self).mouseMoveEvent(event)
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Widget, funcname: mouseMoveEvent
Widget.py(1402):         self.mousePos = self.mapToScene(event.pos())
Widget.py(1404):         if self._resize_group_mode:
Widget.py(1417):         if self._draw_real_time_line:
Widget.py(1434):         if self._is_rubber_band_selection:
Widget.py(1445):         super(GraphWidget, self).mouseMoveEvent(event)
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Widget, funcname: mouseMoveEvent
Widget.py(1402):         self.mousePos = self.mapToScene(event.pos())
Widget.py(1404):         if self._resize_group_mode:
Widget.py(1417):         if self._draw_real_time_line:
Widget.py(1434):         if self._is_rubber_band_selection:
Widget.py(1445):         super(GraphWidget, self).mouseMoveEvent(event)
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Widget, funcname: _tick_executor
Widget.py(988):         for foo in self._tick_functions:
 --- modulename: Widget, funcname: mouseMoveEvent
Widget.py(1402):         self.mousePos = self.mapToScene(event.pos())
Widget.py(1404):         if self._resize_group_mode:
Widget.py(1417):         if self._draw_real_time_line:
Widget.py(1434):         if self._is_rubber_band_selection:
Widget.py(1445):         super(GraphWidget, self).mouseMoveEvent(event)
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Widget, funcname: mouseMoveEvent
Widget.py(1402):         self.mousePos = self.mapToScene(event.pos())
Widget.py(1404):         if self._resize_group_mode:
Widget.py(1417):         if self._draw_real_time_line:
Widget.py(1434):         if self._is_rubber_band_selection:
Widget.py(1445):         super(GraphWidget, self).mouseMoveEvent(event)
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Widget, funcname: mousePressEvent
Widget.py(1371):         modifiers = event.modifiers()
Widget.py(1372):         self.pressed_item = self.itemAt(event.pos())
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
Widget.py(1373):         if self.pressed_item and hasattr(self.pressed_item, 'mark'):
Widget.py(1376):         if not self.pressed_item:
Widget.py(1377):             self.node_box.close()
Widget.py(1378):             self.node_box.le_nodes.clear()
Widget.py(1379):         if self.pressed_item:
Widget.py(1385):         self.mousePressPose = self.mapToScene(event.pos())
Widget.py(1386):         if self.pressed_item and event.button() == QtCore.Qt.LeftButton:
Widget.py(1391):         if event.button() == QtCore.Qt.RightButton:
Widget.py(1393):         if all([event.button() == QtCore.Qt.LeftButton, modifiers == QtCore.Qt.AltModifier]):
Widget.py(1395):         if all([event.button() == QtCore.Qt.LeftButton,
Widget.py(1396):                 modifiers == QtCore.Qt.NoModifier or modifiers == QtCore.Qt.ControlModifier | QtCore.Qt.ShiftModifier]):
Widget.py(1397):             if not self.pressed_item or hasattr(self.pressed_item, 'non_selectable'):
Widget.py(1398):                 self._is_rubber_band_selection = True
Widget.py(1399):         super(GraphWidget, self).mousePressEvent(event)
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: BaseNode, funcname: itemChange
BaseNode.py(147):         if change == self.ItemPositionChange:
BaseNode.py(152):         return QtGui.QGraphicsItem.itemChange(self, change, value)
 --- modulename: BaseNode, funcname: itemChange
BaseNode.py(147):         if change == self.ItemPositionChange:
BaseNode.py(152):         return QtGui.QGraphicsItem.itemChange(self, change, value)
 --- modulename: Widget, funcname: OnSelectionChanged
Widget.py(210):         selected_nodes = []
Widget.py(211):         for n in self.parent().get_nodes():
 --- modulename: Widget, funcname: get_nodes
Widget.py(1026):         ls = []
Widget.py(1027):         for i in self.scene().items():
Widget.py(1028):             if hasattr(i, 'object_type'):
Widget.py(1027):         for i in self.scene().items():
Widget.py(1028):             if hasattr(i, 'object_type'):
Widget.py(1029):                 if i.object_type == AGObjectTypes.tNode:
Widget.py(1027):         for i in self.scene().items():
Widget.py(1028):             if hasattr(i, 'object_type'):
Widget.py(1029):                 if i.object_type == AGObjectTypes.tNode:
Widget.py(1030):                     if i.isVisible():
Widget.py(1031):                         ls.append(i)
Widget.py(1027):         for i in self.scene().items():
Widget.py(1028):             if hasattr(i, 'object_type'):
Widget.py(1029):                 if i.object_type == AGObjectTypes.tNode:
Widget.py(1027):         for i in self.scene().items():
Widget.py(1028):             if hasattr(i, 'object_type'):
Widget.py(1027):         for i in self.scene().items():
Widget.py(1028):             if hasattr(i, 'object_type'):
Widget.py(1027):         for i in self.scene().items():
Widget.py(1028):             if hasattr(i, 'object_type'):
Widget.py(1027):         for i in self.scene().items():
Widget.py(1028):             if hasattr(i, 'object_type'):
Widget.py(1027):         for i in self.scene().items():
Widget.py(1028):             if hasattr(i, 'object_type'):
Widget.py(1029):                 if i.object_type == AGObjectTypes.tNode:
Widget.py(1027):         for i in self.scene().items():
Widget.py(1028):             if hasattr(i, 'object_type'):
Widget.py(1029):                 if i.object_type == AGObjectTypes.tNode:
Widget.py(1027):         for i in self.scene().items():
Widget.py(1028):             if hasattr(i, 'object_type'):
Widget.py(1029):                 if i.object_type == AGObjectTypes.tNode:
Widget.py(1027):         for i in self.scene().items():
Widget.py(1032):         return ls
Widget.py(212):             if n.isSelected():
Widget.py(211):         for n in self.parent().get_nodes():
Widget.py(214):         if len(selected_nodes) == 0:
Widget.py(215):             self.parent().write_to_console("select {0}nl none".format(FLAG_SYMBOL))
 --- modulename: Widget, funcname: write_to_console
Widget.py(1987):         if not force:
Widget.py(1988):             if not self.is_debug():
 --- modulename: AbstractGraph, funcname: is_debug
AbstractGraph.py(223):         return self._debug
Widget.py(1989):                 return
Widget.py(216):             return
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: BaseNode, funcname: paint
BaseNode.py(199):         painter.setPen(QtCore.Qt.NoPen)
BaseNode.py(200):         painter.setBrush(QtCore.Qt.darkGray)
BaseNode.py(202):         if self.options:
BaseNode.py(203):             color = self.opt_node_base_color
BaseNode.py(206):         if self.isSelected():
BaseNode.py(209):         linearGrad = QtGui.QRadialGradient(QtCore.QPointF(40, 40), 300)
BaseNode.py(210):         linearGrad.setColorAt(0, color)
BaseNode.py(211):         linearGrad.setColorAt(1, color.lighter(180))
BaseNode.py(212):         br = QtGui.QBrush(linearGrad)
BaseNode.py(213):         painter.setBrush(br)
BaseNode.py(214):         pen = QtGui.QPen(QtCore.Qt.black, 0.5)
BaseNode.py(215):         if option.state & QtGui.QStyle.State_Selected:
BaseNode.py(222):         painter.setPen(pen)
BaseNode.py(223):         painter.drawRoundedRect(self.sizes[0], self.sizes[1],
BaseNode.py(224):                                 self.childrenBoundingRect().width(), self.nodeMainGWidget.boundingRect().height(),
BaseNode.py(225):                                 self.sizes[4], self.sizes[5])
 --- modulename: BaseNode, funcname: paint
BaseNode.py(39):         if self.options:
BaseNode.py(40):             painter.fillRect(option.rect, QtGui.QColor(self.opt_bg_color))
BaseNode.py(43):         super(NodeName, self).paint(painter, option, widget)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Widget, funcname: mouseMoveEvent
Widget.py(1402):         self.mousePos = self.mapToScene(event.pos())
Widget.py(1404):         if self._resize_group_mode:
Widget.py(1417):         if self._draw_real_time_line:
Widget.py(1434):         if self._is_rubber_band_selection:
Widget.py(1435):             if self.rubber_rect not in self.scene().items():
Widget.py(1436):                 self.scene().addItem(self.rubber_rect)
Widget.py(1437):             if not self.rubber_rect.isVisible():
Widget.py(1439):             r = QtCore.QRectF(self.mousePressPose.x(),
Widget.py(1440):                               self.mousePressPose.y(),
Widget.py(1441):                               self.mousePos.x() - self.mousePressPose.x(),
Widget.py(1442):                               self.mousePos.y() - self.mousePressPose.y())
Widget.py(1443):             self.rubber_rect.setRect(r.normalized())
Widget.py(1445):         super(GraphWidget, self).mouseMoveEvent(event)
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: Widget, funcname: _tick_executor
Widget.py(988):         for foo in self._tick_functions:
 --- modulename: Widget, funcname: mouseMoveEvent
Widget.py(1402):         self.mousePos = self.mapToScene(event.pos())
Widget.py(1404):         if self._resize_group_mode:
Widget.py(1417):         if self._draw_real_time_line:
Widget.py(1434):         if self._is_rubber_band_selection:
Widget.py(1435):             if self.rubber_rect not in self.scene().items():
Widget.py(1437):             if not self.rubber_rect.isVisible():
Widget.py(1439):             r = QtCore.QRectF(self.mousePressPose.x(),
Widget.py(1440):                               self.mousePressPose.y(),
Widget.py(1441):                               self.mousePos.x() - self.mousePressPose.x(),
Widget.py(1442):                               self.mousePos.y() - self.mousePressPose.y())
Widget.py(1443):             self.rubber_rect.setRect(r.normalized())
Widget.py(1445):         super(GraphWidget, self).mouseMoveEvent(event)
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: Widget, funcname: mouseMoveEvent
Widget.py(1402):         self.mousePos = self.mapToScene(event.pos())
Widget.py(1404):         if self._resize_group_mode:
Widget.py(1417):         if self._draw_real_time_line:
Widget.py(1434):         if self._is_rubber_band_selection:
Widget.py(1435):             if self.rubber_rect not in self.scene().items():
Widget.py(1437):             if not self.rubber_rect.isVisible():
Widget.py(1439):             r = QtCore.QRectF(self.mousePressPose.x(),
Widget.py(1440):                               self.mousePressPose.y(),
Widget.py(1441):                               self.mousePos.x() - self.mousePressPose.x(),
Widget.py(1442):                               self.mousePos.y() - self.mousePressPose.y())
Widget.py(1443):             self.rubber_rect.setRect(r.normalized())
Widget.py(1445):         super(GraphWidget, self).mouseMoveEvent(event)
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: Widget, funcname: mouseMoveEvent
Widget.py(1402):         self.mousePos = self.mapToScene(event.pos())
Widget.py(1404):         if self._resize_group_mode:
Widget.py(1417):         if self._draw_real_time_line:
Widget.py(1434):         if self._is_rubber_band_selection:
Widget.py(1435):             if self.rubber_rect not in self.scene().items():
Widget.py(1437):             if not self.rubber_rect.isVisible():
Widget.py(1439):             r = QtCore.QRectF(self.mousePressPose.x(),
Widget.py(1440):                               self.mousePressPose.y(),
Widget.py(1441):                               self.mousePos.x() - self.mousePressPose.x(),
Widget.py(1442):                               self.mousePos.y() - self.mousePressPose.y())
Widget.py(1443):             self.rubber_rect.setRect(r.normalized())
Widget.py(1445):         super(GraphWidget, self).mouseMoveEvent(event)
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: Widget, funcname: mouseMoveEvent
Widget.py(1402):         self.mousePos = self.mapToScene(event.pos())
Widget.py(1404):         if self._resize_group_mode:
Widget.py(1417):         if self._draw_real_time_line:
Widget.py(1434):         if self._is_rubber_band_selection:
Widget.py(1435):             if self.rubber_rect not in self.scene().items():
Widget.py(1437):             if not self.rubber_rect.isVisible():
Widget.py(1439):             r = QtCore.QRectF(self.mousePressPose.x(),
Widget.py(1440):                               self.mousePressPose.y(),
Widget.py(1441):                               self.mousePos.x() - self.mousePressPose.x(),
Widget.py(1442):                               self.mousePos.y() - self.mousePressPose.y())
Widget.py(1443):             self.rubber_rect.setRect(r.normalized())
Widget.py(1445):         super(GraphWidget, self).mouseMoveEvent(event)
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: Widget, funcname: mouseMoveEvent
Widget.py(1402):         self.mousePos = self.mapToScene(event.pos())
Widget.py(1404):         if self._resize_group_mode:
Widget.py(1417):         if self._draw_real_time_line:
Widget.py(1434):         if self._is_rubber_band_selection:
Widget.py(1435):             if self.rubber_rect not in self.scene().items():
Widget.py(1437):             if not self.rubber_rect.isVisible():
Widget.py(1439):             r = QtCore.QRectF(self.mousePressPose.x(),
Widget.py(1440):                               self.mousePressPose.y(),
Widget.py(1441):                               self.mousePos.x() - self.mousePressPose.x(),
Widget.py(1442):                               self.mousePos.y() - self.mousePressPose.y())
Widget.py(1443):             self.rubber_rect.setRect(r.normalized())
Widget.py(1445):         super(GraphWidget, self).mouseMoveEvent(event)
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: Widget, funcname: mouseMoveEvent
Widget.py(1402):         self.mousePos = self.mapToScene(event.pos())
Widget.py(1404):         if self._resize_group_mode:
Widget.py(1417):         if self._draw_real_time_line:
Widget.py(1434):         if self._is_rubber_band_selection:
Widget.py(1435):             if self.rubber_rect not in self.scene().items():
Widget.py(1437):             if not self.rubber_rect.isVisible():
Widget.py(1439):             r = QtCore.QRectF(self.mousePressPose.x(),
Widget.py(1440):                               self.mousePressPose.y(),
Widget.py(1441):                               self.mousePos.x() - self.mousePressPose.x(),
Widget.py(1442):                               self.mousePos.y() - self.mousePressPose.y())
Widget.py(1443):             self.rubber_rect.setRect(r.normalized())
Widget.py(1445):         super(GraphWidget, self).mouseMoveEvent(event)
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: Widget, funcname: mouseMoveEvent
Widget.py(1402):         self.mousePos = self.mapToScene(event.pos())
Widget.py(1404):         if self._resize_group_mode:
Widget.py(1417):         if self._draw_real_time_line:
Widget.py(1434):         if self._is_rubber_band_selection:
Widget.py(1435):             if self.rubber_rect not in self.scene().items():
Widget.py(1437):             if not self.rubber_rect.isVisible():
Widget.py(1439):             r = QtCore.QRectF(self.mousePressPose.x(),
Widget.py(1440):                               self.mousePressPose.y(),
Widget.py(1441):                               self.mousePos.x() - self.mousePressPose.x(),
Widget.py(1442):                               self.mousePos.y() - self.mousePressPose.y())
Widget.py(1443):             self.rubber_rect.setRect(r.normalized())
Widget.py(1445):         super(GraphWidget, self).mouseMoveEvent(event)
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: Widget, funcname: _tick_executor
Widget.py(988):         for foo in self._tick_functions:
 --- modulename: Widget, funcname: mouseMoveEvent
Widget.py(1402):         self.mousePos = self.mapToScene(event.pos())
Widget.py(1404):         if self._resize_group_mode:
Widget.py(1417):         if self._draw_real_time_line:
Widget.py(1434):         if self._is_rubber_band_selection:
Widget.py(1435):             if self.rubber_rect not in self.scene().items():
Widget.py(1437):             if not self.rubber_rect.isVisible():
Widget.py(1439):             r = QtCore.QRectF(self.mousePressPose.x(),
Widget.py(1440):                               self.mousePressPose.y(),
Widget.py(1441):                               self.mousePos.x() - self.mousePressPose.x(),
Widget.py(1442):                               self.mousePos.y() - self.mousePressPose.y())
Widget.py(1443):             self.rubber_rect.setRect(r.normalized())
Widget.py(1445):         super(GraphWidget, self).mouseMoveEvent(event)
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: Widget, funcname: mouseMoveEvent
Widget.py(1402):         self.mousePos = self.mapToScene(event.pos())
Widget.py(1404):         if self._resize_group_mode:
Widget.py(1417):         if self._draw_real_time_line:
Widget.py(1434):         if self._is_rubber_band_selection:
Widget.py(1435):             if self.rubber_rect not in self.scene().items():
Widget.py(1437):             if not self.rubber_rect.isVisible():
Widget.py(1439):             r = QtCore.QRectF(self.mousePressPose.x(),
Widget.py(1440):                               self.mousePressPose.y(),
Widget.py(1441):                               self.mousePos.x() - self.mousePressPose.x(),
Widget.py(1442):                               self.mousePos.y() - self.mousePressPose.y())
Widget.py(1443):             self.rubber_rect.setRect(r.normalized())
Widget.py(1445):         super(GraphWidget, self).mouseMoveEvent(event)
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: Widget, funcname: mouseMoveEvent
Widget.py(1402):         self.mousePos = self.mapToScene(event.pos())
Widget.py(1404):         if self._resize_group_mode:
Widget.py(1417):         if self._draw_real_time_line:
Widget.py(1434):         if self._is_rubber_band_selection:
Widget.py(1435):             if self.rubber_rect not in self.scene().items():
Widget.py(1437):             if not self.rubber_rect.isVisible():
Widget.py(1439):             r = QtCore.QRectF(self.mousePressPose.x(),
Widget.py(1440):                               self.mousePressPose.y(),
Widget.py(1441):                               self.mousePos.x() - self.mousePressPose.x(),
Widget.py(1442):                               self.mousePos.y() - self.mousePressPose.y())
Widget.py(1443):             self.rubber_rect.setRect(r.normalized())
Widget.py(1445):         super(GraphWidget, self).mouseMoveEvent(event)
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: Widget, funcname: mouseReleaseEvent
Widget.py(1498):         self.released_item = self.itemAt(event.pos())
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
Widget.py(1499):         self.setDragMode(self.NoDrag)
Widget.py(1500):         self._resize_group_mode = False
Widget.py(1501):         self.viewport().setCursor(QtCore.Qt.ArrowCursor)
Widget.py(1502):         modifiers = event.modifiers()
Widget.py(1503):         if self.released_item and not hasattr(self.released_item, 'non_selectable'):
Widget.py(1504):             if isinstance(self.released_item, CommentNode):
Widget.py(1513):         for n in self.nodes:
Widget.py(1514):             n.setFlag(QtGui.QGraphicsItem.ItemIsMovable)
Widget.py(1513):         for n in self.nodes:
Widget.py(1516):         if event.button() == QtCore.Qt.RightButton:
Widget.py(1518):         if self._draw_real_time_line:
Widget.py(1522):         if self._is_rubber_band_selection:
Widget.py(1523):             self._is_rubber_band_selection = False
Widget.py(1524):             [i.setSelected(True) for i in self.rubber_rect.collidingItems()]
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: Port, funcname: shape
Port.py(73):         path = QtGui.QPainterPath()
Port.py(74):         path.addEllipse(self.boundingRect())
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
Port.py(75):         return path
 --- modulename: Port, funcname: shape
Port.py(73):         path = QtGui.QPainterPath()
Port.py(74):         path.addEllipse(self.boundingRect())
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
Port.py(75):         return path
 --- modulename: Port, funcname: shape
Port.py(73):         path = QtGui.QPainterPath()
Port.py(74):         path.addEllipse(self.boundingRect())
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
Port.py(75):         return path
Widget.py(1525):             self.remove_item_by_name(self.rubber_rect.name)
 --- modulename: Widget, funcname: remove_item_by_name
Widget.py(1494):         [self.scene().removeItem(i) for i in self.scene().items() if hasattr(i, 'name') and i.name == name]
Widget.py(1494):         [self.scene().removeItem(i) for i in self.scene().items() if hasattr(i, 'name') and i.name == name]
Widget.py(1494):         [self.scene().removeItem(i) for i in self.scene().items() if hasattr(i, 'name') and i.name == name]
Widget.py(1494):         [self.scene().removeItem(i) for i in self.scene().items() if hasattr(i, 'name') and i.name == name]
Widget.py(1494):         [self.scene().removeItem(i) for i in self.scene().items() if hasattr(i, 'name') and i.name == name]
Widget.py(1494):         [self.scene().removeItem(i) for i in self.scene().items() if hasattr(i, 'name') and i.name == name]
Widget.py(1494):         [self.scene().removeItem(i) for i in self.scene().items() if hasattr(i, 'name') and i.name == name]
Widget.py(1494):         [self.scene().removeItem(i) for i in self.scene().items() if hasattr(i, 'name') and i.name == name]
Widget.py(1494):         [self.scene().removeItem(i) for i in self.scene().items() if hasattr(i, 'name') and i.name == name]
Widget.py(1494):         [self.scene().removeItem(i) for i in self.scene().items() if hasattr(i, 'name') and i.name == name]
Widget.py(1494):         [self.scene().removeItem(i) for i in self.scene().items() if hasattr(i, 'name') and i.name == name]
Widget.py(1494):         [self.scene().removeItem(i) for i in self.scene().items() if hasattr(i, 'name') and i.name == name]
Widget.py(1494):         [self.scene().removeItem(i) for i in self.scene().items() if hasattr(i, 'name') and i.name == name]
Widget.py(1526):         if event.button() == QtCore.Qt.RightButton:
Widget.py(1528):         p_itm = self.pressed_item
Widget.py(1529):         r_itm = self.released_item
Widget.py(1530):         do_connect = True
Widget.py(1531):         for i in [p_itm, r_itm]:
Widget.py(1532):             if not i:
Widget.py(1533):                 do_connect = False
Widget.py(1534):                 break
Widget.py(1541):         if p_itm and r_itm:
Widget.py(1548):         if do_connect:
Widget.py(1550):         selected_nodes = self.selected_nodes()
 --- modulename: Widget, funcname: selected_nodes
Widget.py(1268):         return [i for i in self.nodes if i.isSelected()]
Widget.py(1268):         return [i for i in self.nodes if i.isSelected()]
Widget.py(1551):         if len(selected_nodes) != 0:
Widget.py(1554):             clearLayout(self.parent.PropertiesformLayout)
 --- modulename: Widget, funcname: clearLayout
Widget.py(39):     while layout.count():
Widget.py(40):         child = layout.takeAt(0)
Widget.py(41):         if child.widget() is not None:
Widget.py(42):             child.widget().deleteLater()
Widget.py(39):     while layout.count():
Widget.py(40):         child = layout.takeAt(0)
Widget.py(41):         if child.widget() is not None:
Widget.py(42):             child.widget().deleteLater()
Widget.py(39):     while layout.count():
Widget.py(40):         child = layout.takeAt(0)
Widget.py(41):         if child.widget() is not None:
Widget.py(42):             child.widget().deleteLater()
Widget.py(39):     while layout.count():
Widget.py(40):         child = layout.takeAt(0)
Widget.py(41):         if child.widget() is not None:
Widget.py(42):             child.widget().deleteLater()
Widget.py(39):     while layout.count():
Widget.py(40):         child = layout.takeAt(0)
Widget.py(41):         if child.widget() is not None:
Widget.py(42):             child.widget().deleteLater()
Widget.py(39):     while layout.count():
Widget.py(40):         child = layout.takeAt(0)
Widget.py(41):         if child.widget() is not None:
Widget.py(42):             child.widget().deleteLater()
Widget.py(39):     while layout.count():
Widget.py(40):         child = layout.takeAt(0)
Widget.py(41):         if child.widget() is not None:
Widget.py(42):             child.widget().deleteLater()
Widget.py(39):     while layout.count():
Widget.py(40):         child = layout.takeAt(0)
Widget.py(41):         if child.widget() is not None:
Widget.py(42):             child.widget().deleteLater()
Widget.py(39):     while layout.count():
Widget.py(40):         child = layout.takeAt(0)
Widget.py(41):         if child.widget() is not None:
Widget.py(42):             child.widget().deleteLater()
Widget.py(39):     while layout.count():
Widget.py(40):         child = layout.takeAt(0)
Widget.py(41):         if child.widget() is not None:
Widget.py(42):             child.widget().deleteLater()
Widget.py(39):     while layout.count():
Widget.py(40):         child = layout.takeAt(0)
Widget.py(41):         if child.widget() is not None:
Widget.py(42):             child.widget().deleteLater()
Widget.py(39):     while layout.count():
Widget.py(40):         child = layout.takeAt(0)
Widget.py(41):         if child.widget() is not None:
Widget.py(42):             child.widget().deleteLater()
Widget.py(39):     while layout.count():
Widget.py(40):         child = layout.takeAt(0)
Widget.py(41):         if child.widget() is not None:
Widget.py(42):             child.widget().deleteLater()
Widget.py(39):     while layout.count():
Widget.py(40):         child = layout.takeAt(0)
Widget.py(41):         if child.widget() is not None:
Widget.py(42):             child.widget().deleteLater()
Widget.py(39):     while layout.count():
Widget.py(1556):         super(GraphWidget, self).mouseReleaseEvent(event)
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: Widget, funcname: _tick_executor
Widget.py(988):         for foo in self._tick_functions:
 --- modulename: Widget, funcname: mouseMoveEvent
Widget.py(1402):         self.mousePos = self.mapToScene(event.pos())
Widget.py(1404):         if self._resize_group_mode:
Widget.py(1417):         if self._draw_real_time_line:
Widget.py(1434):         if self._is_rubber_band_selection:
Widget.py(1445):         super(GraphWidget, self).mouseMoveEvent(event)
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Widget, funcname: mouseMoveEvent
Widget.py(1402):         self.mousePos = self.mapToScene(event.pos())
Widget.py(1404):         if self._resize_group_mode:
Widget.py(1417):         if self._draw_real_time_line:
Widget.py(1434):         if self._is_rubber_band_selection:
Widget.py(1445):         super(GraphWidget, self).mouseMoveEvent(event)
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Widget, funcname: mouseMoveEvent
Widget.py(1402):         self.mousePos = self.mapToScene(event.pos())
Widget.py(1404):         if self._resize_group_mode:
Widget.py(1417):         if self._draw_real_time_line:
Widget.py(1434):         if self._is_rubber_band_selection:
Widget.py(1445):         super(GraphWidget, self).mouseMoveEvent(event)
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Widget, funcname: mouseMoveEvent
Widget.py(1402):         self.mousePos = self.mapToScene(event.pos())
Widget.py(1404):         if self._resize_group_mode:
Widget.py(1417):         if self._draw_real_time_line:
Widget.py(1434):         if self._is_rubber_band_selection:
Widget.py(1445):         super(GraphWidget, self).mouseMoveEvent(event)
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Widget, funcname: mouseMoveEvent
Widget.py(1402):         self.mousePos = self.mapToScene(event.pos())
Widget.py(1404):         if self._resize_group_mode:
Widget.py(1417):         if self._draw_real_time_line:
Widget.py(1434):         if self._is_rubber_band_selection:
Widget.py(1445):         super(GraphWidget, self).mouseMoveEvent(event)
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Widget, funcname: mouseMoveEvent
Widget.py(1402):         self.mousePos = self.mapToScene(event.pos())
Widget.py(1404):         if self._resize_group_mode:
Widget.py(1417):         if self._draw_real_time_line:
Widget.py(1434):         if self._is_rubber_band_selection:
Widget.py(1445):         super(GraphWidget, self).mouseMoveEvent(event)
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Widget, funcname: mouseMoveEvent
Widget.py(1402):         self.mousePos = self.mapToScene(event.pos())
Widget.py(1404):         if self._resize_group_mode:
Widget.py(1417):         if self._draw_real_time_line:
Widget.py(1434):         if self._is_rubber_band_selection:
Widget.py(1445):         super(GraphWidget, self).mouseMoveEvent(event)
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Widget, funcname: mouseMoveEvent
Widget.py(1402):         self.mousePos = self.mapToScene(event.pos())
Widget.py(1404):         if self._resize_group_mode:
Widget.py(1417):         if self._draw_real_time_line:
Widget.py(1434):         if self._is_rubber_band_selection:
Widget.py(1445):         super(GraphWidget, self).mouseMoveEvent(event)
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Widget, funcname: _tick_executor
Widget.py(988):         for foo in self._tick_functions:
 --- modulename: Widget, funcname: mouseMoveEvent
Widget.py(1402):         self.mousePos = self.mapToScene(event.pos())
Widget.py(1404):         if self._resize_group_mode:
Widget.py(1417):         if self._draw_real_time_line:
Widget.py(1434):         if self._is_rubber_band_selection:
Widget.py(1445):         super(GraphWidget, self).mouseMoveEvent(event)
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Widget, funcname: mouseMoveEvent
Widget.py(1402):         self.mousePos = self.mapToScene(event.pos())
Widget.py(1404):         if self._resize_group_mode:
Widget.py(1417):         if self._draw_real_time_line:
Widget.py(1434):         if self._is_rubber_band_selection:
Widget.py(1445):         super(GraphWidget, self).mouseMoveEvent(event)
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Widget, funcname: mouseMoveEvent
Widget.py(1402):         self.mousePos = self.mapToScene(event.pos())
Widget.py(1404):         if self._resize_group_mode:
Widget.py(1417):         if self._draw_real_time_line:
Widget.py(1434):         if self._is_rubber_band_selection:
Widget.py(1445):         super(GraphWidget, self).mouseMoveEvent(event)
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Widget, funcname: mouseMoveEvent
Widget.py(1402):         self.mousePos = self.mapToScene(event.pos())
Widget.py(1404):         if self._resize_group_mode:
Widget.py(1417):         if self._draw_real_time_line:
Widget.py(1434):         if self._is_rubber_band_selection:
Widget.py(1445):         super(GraphWidget, self).mouseMoveEvent(event)
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Widget, funcname: mouseMoveEvent
Widget.py(1402):         self.mousePos = self.mapToScene(event.pos())
Widget.py(1404):         if self._resize_group_mode:
Widget.py(1417):         if self._draw_real_time_line:
Widget.py(1434):         if self._is_rubber_band_selection:
Widget.py(1445):         super(GraphWidget, self).mouseMoveEvent(event)
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Widget, funcname: mouseMoveEvent
Widget.py(1402):         self.mousePos = self.mapToScene(event.pos())
Widget.py(1404):         if self._resize_group_mode:
Widget.py(1417):         if self._draw_real_time_line:
Widget.py(1434):         if self._is_rubber_band_selection:
Widget.py(1445):         super(GraphWidget, self).mouseMoveEvent(event)
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Widget, funcname: mouseMoveEvent
Widget.py(1402):         self.mousePos = self.mapToScene(event.pos())
Widget.py(1404):         if self._resize_group_mode:
Widget.py(1417):         if self._draw_real_time_line:
Widget.py(1434):         if self._is_rubber_band_selection:
Widget.py(1445):         super(GraphWidget, self).mouseMoveEvent(event)
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Widget, funcname: _tick_executor
Widget.py(988):         for foo in self._tick_functions:
 --- modulename: Widget, funcname: mouseMoveEvent
Widget.py(1402):         self.mousePos = self.mapToScene(event.pos())
Widget.py(1404):         if self._resize_group_mode:
Widget.py(1417):         if self._draw_real_time_line:
Widget.py(1434):         if self._is_rubber_band_selection:
Widget.py(1445):         super(GraphWidget, self).mouseMoveEvent(event)
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Widget, funcname: mouseMoveEvent
Widget.py(1402):         self.mousePos = self.mapToScene(event.pos())
Widget.py(1404):         if self._resize_group_mode:
Widget.py(1417):         if self._draw_real_time_line:
Widget.py(1434):         if self._is_rubber_band_selection:
Widget.py(1445):         super(GraphWidget, self).mouseMoveEvent(event)
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Widget, funcname: mouseMoveEvent
Widget.py(1402):         self.mousePos = self.mapToScene(event.pos())
Widget.py(1404):         if self._resize_group_mode:
Widget.py(1417):         if self._draw_real_time_line:
Widget.py(1434):         if self._is_rubber_band_selection:
Widget.py(1445):         super(GraphWidget, self).mouseMoveEvent(event)
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Widget, funcname: mouseMoveEvent
Widget.py(1402):         self.mousePos = self.mapToScene(event.pos())
Widget.py(1404):         if self._resize_group_mode:
Widget.py(1417):         if self._draw_real_time_line:
Widget.py(1434):         if self._is_rubber_band_selection:
Widget.py(1445):         super(GraphWidget, self).mouseMoveEvent(event)
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Widget, funcname: mouseMoveEvent
Widget.py(1402):         self.mousePos = self.mapToScene(event.pos())
Widget.py(1404):         if self._resize_group_mode:
Widget.py(1417):         if self._draw_real_time_line:
Widget.py(1434):         if self._is_rubber_band_selection:
Widget.py(1445):         super(GraphWidget, self).mouseMoveEvent(event)
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Widget, funcname: mouseMoveEvent
Widget.py(1402):         self.mousePos = self.mapToScene(event.pos())
Widget.py(1404):         if self._resize_group_mode:
Widget.py(1417):         if self._draw_real_time_line:
Widget.py(1434):         if self._is_rubber_band_selection:
Widget.py(1445):         super(GraphWidget, self).mouseMoveEvent(event)
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Widget, funcname: mouseMoveEvent
Widget.py(1402):         self.mousePos = self.mapToScene(event.pos())
Widget.py(1404):         if self._resize_group_mode:
Widget.py(1417):         if self._draw_real_time_line:
Widget.py(1434):         if self._is_rubber_band_selection:
Widget.py(1445):         super(GraphWidget, self).mouseMoveEvent(event)
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Widget, funcname: mouseMoveEvent
Widget.py(1402):         self.mousePos = self.mapToScene(event.pos())
Widget.py(1404):         if self._resize_group_mode:
Widget.py(1417):         if self._draw_real_time_line:
Widget.py(1434):         if self._is_rubber_band_selection:
Widget.py(1445):         super(GraphWidget, self).mouseMoveEvent(event)
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Widget, funcname: _tick_executor
Widget.py(988):         for foo in self._tick_functions:
 --- modulename: Widget, funcname: mouseMoveEvent
Widget.py(1402):         self.mousePos = self.mapToScene(event.pos())
Widget.py(1404):         if self._resize_group_mode:
Widget.py(1417):         if self._draw_real_time_line:
Widget.py(1434):         if self._is_rubber_band_selection:
Widget.py(1445):         super(GraphWidget, self).mouseMoveEvent(event)
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Widget, funcname: mouseMoveEvent
Widget.py(1402):         self.mousePos = self.mapToScene(event.pos())
Widget.py(1404):         if self._resize_group_mode:
Widget.py(1417):         if self._draw_real_time_line:
Widget.py(1434):         if self._is_rubber_band_selection:
Widget.py(1445):         super(GraphWidget, self).mouseMoveEvent(event)
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Widget, funcname: mouseMoveEvent
Widget.py(1402):         self.mousePos = self.mapToScene(event.pos())
Widget.py(1404):         if self._resize_group_mode:
Widget.py(1417):         if self._draw_real_time_line:
Widget.py(1434):         if self._is_rubber_band_selection:
Widget.py(1445):         super(GraphWidget, self).mouseMoveEvent(event)
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Widget, funcname: mouseMoveEvent
Widget.py(1402):         self.mousePos = self.mapToScene(event.pos())
Widget.py(1404):         if self._resize_group_mode:
Widget.py(1417):         if self._draw_real_time_line:
Widget.py(1434):         if self._is_rubber_band_selection:
Widget.py(1445):         super(GraphWidget, self).mouseMoveEvent(event)
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Widget, funcname: mouseMoveEvent
Widget.py(1402):         self.mousePos = self.mapToScene(event.pos())
Widget.py(1404):         if self._resize_group_mode:
Widget.py(1417):         if self._draw_real_time_line:
Widget.py(1434):         if self._is_rubber_band_selection:
Widget.py(1445):         super(GraphWidget, self).mouseMoveEvent(event)
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Widget, funcname: mouseMoveEvent
Widget.py(1402):         self.mousePos = self.mapToScene(event.pos())
Widget.py(1404):         if self._resize_group_mode:
Widget.py(1417):         if self._draw_real_time_line:
Widget.py(1434):         if self._is_rubber_band_selection:
Widget.py(1445):         super(GraphWidget, self).mouseMoveEvent(event)
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Widget, funcname: _tick_executor
Widget.py(988):         for foo in self._tick_functions:
 --- modulename: Widget, funcname: mouseMoveEvent
Widget.py(1402):         self.mousePos = self.mapToScene(event.pos())
Widget.py(1404):         if self._resize_group_mode:
Widget.py(1417):         if self._draw_real_time_line:
Widget.py(1434):         if self._is_rubber_band_selection:
Widget.py(1445):         super(GraphWidget, self).mouseMoveEvent(event)
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Widget, funcname: mousePressEvent
Widget.py(1371):         modifiers = event.modifiers()
Widget.py(1372):         self.pressed_item = self.itemAt(event.pos())
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
Widget.py(1373):         if self.pressed_item and hasattr(self.pressed_item, 'mark'):
Widget.py(1376):         if not self.pressed_item:
Widget.py(1379):         if self.pressed_item:
Widget.py(1380):             if hasattr(self.pressed_item, 'object_type') and not hasattr(self.pressed_item, 'non_selectable'):
Widget.py(1381):                 if self.pressed_item.object_type == AGObjectTypes.tPort:
Widget.py(1385):         self.mousePressPose = self.mapToScene(event.pos())
Widget.py(1386):         if self.pressed_item and event.button() == QtCore.Qt.LeftButton:
Widget.py(1387):             if hasattr(self.pressed_item, 'object_type'):
Widget.py(1388):                 if self.pressed_item.object_type == AGObjectTypes.tPort:
Widget.py(1391):         if event.button() == QtCore.Qt.RightButton:
Widget.py(1393):         if all([event.button() == QtCore.Qt.LeftButton, modifiers == QtCore.Qt.AltModifier]):
Widget.py(1395):         if all([event.button() == QtCore.Qt.LeftButton,
Widget.py(1396):                 modifiers == QtCore.Qt.NoModifier or modifiers == QtCore.Qt.ControlModifier | QtCore.Qt.ShiftModifier]):
Widget.py(1397):             if not self.pressed_item or hasattr(self.pressed_item, 'non_selectable'):
Widget.py(1399):         super(GraphWidget, self).mousePressEvent(event)
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: BaseNode, funcname: mousePressEvent
BaseNode.py(243):         self.update()
BaseNode.py(244):         self.setCursor(QtCore.Qt.ClosedHandCursor)
 --- modulename: BaseNode, funcname: itemChange
BaseNode.py(147):         if change == self.ItemPositionChange:
BaseNode.py(152):         return QtGui.QGraphicsItem.itemChange(self, change, value)
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: BaseNode, funcname: itemChange
BaseNode.py(147):         if change == self.ItemPositionChange:
BaseNode.py(152):         return QtGui.QGraphicsItem.itemChange(self, change, value)
BaseNode.py(245):         QtGui.QGraphicsItem.mousePressEvent(self, event)
 --- modulename: BaseNode, funcname: itemChange
BaseNode.py(147):         if change == self.ItemPositionChange:
BaseNode.py(152):         return QtGui.QGraphicsItem.itemChange(self, change, value)
 --- modulename: Widget, funcname: OnSelectionChanged
Widget.py(210):         selected_nodes = []
Widget.py(211):         for n in self.parent().get_nodes():
 --- modulename: Widget, funcname: get_nodes
Widget.py(1026):         ls = []
Widget.py(1027):         for i in self.scene().items():
Widget.py(1028):             if hasattr(i, 'object_type'):
Widget.py(1027):         for i in self.scene().items():
Widget.py(1028):             if hasattr(i, 'object_type'):
Widget.py(1029):                 if i.object_type == AGObjectTypes.tNode:
Widget.py(1027):         for i in self.scene().items():
Widget.py(1028):             if hasattr(i, 'object_type'):
Widget.py(1029):                 if i.object_type == AGObjectTypes.tNode:
Widget.py(1030):                     if i.isVisible():
Widget.py(1031):                         ls.append(i)
Widget.py(1027):         for i in self.scene().items():
Widget.py(1028):             if hasattr(i, 'object_type'):
Widget.py(1029):                 if i.object_type == AGObjectTypes.tNode:
Widget.py(1027):         for i in self.scene().items():
Widget.py(1028):             if hasattr(i, 'object_type'):
Widget.py(1027):         for i in self.scene().items():
Widget.py(1028):             if hasattr(i, 'object_type'):
Widget.py(1027):         for i in self.scene().items():
Widget.py(1028):             if hasattr(i, 'object_type'):
Widget.py(1027):         for i in self.scene().items():
Widget.py(1028):             if hasattr(i, 'object_type'):
Widget.py(1027):         for i in self.scene().items():
Widget.py(1028):             if hasattr(i, 'object_type'):
Widget.py(1029):                 if i.object_type == AGObjectTypes.tNode:
Widget.py(1027):         for i in self.scene().items():
Widget.py(1028):             if hasattr(i, 'object_type'):
Widget.py(1029):                 if i.object_type == AGObjectTypes.tNode:
Widget.py(1027):         for i in self.scene().items():
Widget.py(1028):             if hasattr(i, 'object_type'):
Widget.py(1029):                 if i.object_type == AGObjectTypes.tNode:
Widget.py(1027):         for i in self.scene().items():
Widget.py(1032):         return ls
Widget.py(212):             if n.isSelected():
Widget.py(213):                 selected_nodes.append(n.name)
Widget.py(211):         for n in self.parent().get_nodes():
Widget.py(214):         if len(selected_nodes) == 0:
Widget.py(217):         cmd = "select {0}nl ".format(FLAG_SYMBOL)
Widget.py(218):         for n in selected_nodes:
Widget.py(219):             cmd += n
Widget.py(220):             cmd += " "
Widget.py(218):         for n in selected_nodes:
Widget.py(221):         self.parent().write_to_console(cmd[:-1])
 --- modulename: Widget, funcname: write_to_console
Widget.py(1987):         if not force:
Widget.py(1988):             if not self.is_debug():
 --- modulename: AbstractGraph, funcname: is_debug
AbstractGraph.py(223):         return self._debug
Widget.py(1989):                 return
 --- modulename: BaseNode, funcname: itemChange
BaseNode.py(147):         if change == self.ItemPositionChange:
BaseNode.py(152):         return QtGui.QGraphicsItem.itemChange(self, change, value)
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: BaseNode, funcname: paint
BaseNode.py(199):         painter.setPen(QtCore.Qt.NoPen)
BaseNode.py(200):         painter.setBrush(QtCore.Qt.darkGray)
BaseNode.py(202):         if self.options:
BaseNode.py(203):             color = self.opt_node_base_color
BaseNode.py(206):         if self.isSelected():
BaseNode.py(207):             color = color.lighter(150)
BaseNode.py(209):         linearGrad = QtGui.QRadialGradient(QtCore.QPointF(40, 40), 300)
BaseNode.py(210):         linearGrad.setColorAt(0, color)
BaseNode.py(211):         linearGrad.setColorAt(1, color.lighter(180))
BaseNode.py(212):         br = QtGui.QBrush(linearGrad)
BaseNode.py(213):         painter.setBrush(br)
BaseNode.py(214):         pen = QtGui.QPen(QtCore.Qt.black, 0.5)
BaseNode.py(215):         if option.state & QtGui.QStyle.State_Selected:
BaseNode.py(216):             if self.options:
BaseNode.py(217):                 pen.setColor(self.opt_selected_pen_color)
BaseNode.py(218):                 pen.setStyle(self.opt_pen_selected_type)
BaseNode.py(222):         painter.setPen(pen)
BaseNode.py(223):         painter.drawRoundedRect(self.sizes[0], self.sizes[1],
BaseNode.py(224):                                 self.childrenBoundingRect().width(), self.nodeMainGWidget.boundingRect().height(),
BaseNode.py(225):                                 self.sizes[4], self.sizes[5])
 --- modulename: BaseNode, funcname: paint
BaseNode.py(39):         if self.options:
BaseNode.py(40):             painter.fillRect(option.rect, QtGui.QColor(self.opt_bg_color))
BaseNode.py(43):         super(NodeName, self).paint(painter, option, widget)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Widget, funcname: _tick_executor
Widget.py(988):         for foo in self._tick_functions:
 --- modulename: Widget, funcname: mouseMoveEvent
Widget.py(1402):         self.mousePos = self.mapToScene(event.pos())
Widget.py(1404):         if self._resize_group_mode:
Widget.py(1417):         if self._draw_real_time_line:
Widget.py(1434):         if self._is_rubber_band_selection:
Widget.py(1445):         super(GraphWidget, self).mouseMoveEvent(event)
 --- modulename: BaseNode, funcname: itemChange
BaseNode.py(147):         if change == self.ItemPositionChange:
BaseNode.py(149):             value.setX(roundup(value.x() - self.graph().grid_size + self.graph().grid_size / 3.0, self.graph().grid_size))
 --- modulename: AGraphCommon, funcname: roundup
AGraphCommon.py(11):     return int(math.ceil(x / to)) * to
BaseNode.py(150):             value.setY(roundup(value.y() - self.graph().grid_size + self.graph().grid_size / 3.0, self.graph().grid_size))
 --- modulename: AGraphCommon, funcname: roundup
AGraphCommon.py(11):     return int(math.ceil(x / to)) * to
BaseNode.py(151):             return value
 --- modulename: Widget, funcname: mouseMoveEvent
Widget.py(1402):         self.mousePos = self.mapToScene(event.pos())
Widget.py(1404):         if self._resize_group_mode:
Widget.py(1417):         if self._draw_real_time_line:
Widget.py(1434):         if self._is_rubber_band_selection:
Widget.py(1445):         super(GraphWidget, self).mouseMoveEvent(event)
 --- modulename: BaseNode, funcname: itemChange
BaseNode.py(147):         if change == self.ItemPositionChange:
BaseNode.py(149):             value.setX(roundup(value.x() - self.graph().grid_size + self.graph().grid_size / 3.0, self.graph().grid_size))
 --- modulename: AGraphCommon, funcname: roundup
AGraphCommon.py(11):     return int(math.ceil(x / to)) * to
BaseNode.py(150):             value.setY(roundup(value.y() - self.graph().grid_size + self.graph().grid_size / 3.0, self.graph().grid_size))
 --- modulename: AGraphCommon, funcname: roundup
AGraphCommon.py(11):     return int(math.ceil(x / to)) * to
BaseNode.py(151):             return value
 --- modulename: Widget, funcname: mouseMoveEvent
Widget.py(1402):         self.mousePos = self.mapToScene(event.pos())
Widget.py(1404):         if self._resize_group_mode:
Widget.py(1417):         if self._draw_real_time_line:
Widget.py(1434):         if self._is_rubber_band_selection:
Widget.py(1445):         super(GraphWidget, self).mouseMoveEvent(event)
 --- modulename: BaseNode, funcname: itemChange
BaseNode.py(147):         if change == self.ItemPositionChange:
BaseNode.py(149):             value.setX(roundup(value.x() - self.graph().grid_size + self.graph().grid_size / 3.0, self.graph().grid_size))
 --- modulename: AGraphCommon, funcname: roundup
AGraphCommon.py(11):     return int(math.ceil(x / to)) * to
BaseNode.py(150):             value.setY(roundup(value.y() - self.graph().grid_size + self.graph().grid_size / 3.0, self.graph().grid_size))
 --- modulename: AGraphCommon, funcname: roundup
AGraphCommon.py(11):     return int(math.ceil(x / to)) * to
BaseNode.py(151):             return value
 --- modulename: BaseNode, funcname: itemChange
BaseNode.py(147):         if change == self.ItemPositionChange:
BaseNode.py(152):         return QtGui.QGraphicsItem.itemChange(self, change, value)
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: BaseNode, funcname: paint
BaseNode.py(199):         painter.setPen(QtCore.Qt.NoPen)
BaseNode.py(200):         painter.setBrush(QtCore.Qt.darkGray)
BaseNode.py(202):         if self.options:
BaseNode.py(203):             color = self.opt_node_base_color
BaseNode.py(206):         if self.isSelected():
BaseNode.py(207):             color = color.lighter(150)
BaseNode.py(209):         linearGrad = QtGui.QRadialGradient(QtCore.QPointF(40, 40), 300)
BaseNode.py(210):         linearGrad.setColorAt(0, color)
BaseNode.py(211):         linearGrad.setColorAt(1, color.lighter(180))
BaseNode.py(212):         br = QtGui.QBrush(linearGrad)
BaseNode.py(213):         painter.setBrush(br)
BaseNode.py(214):         pen = QtGui.QPen(QtCore.Qt.black, 0.5)
BaseNode.py(215):         if option.state & QtGui.QStyle.State_Selected:
BaseNode.py(216):             if self.options:
BaseNode.py(217):                 pen.setColor(self.opt_selected_pen_color)
BaseNode.py(218):                 pen.setStyle(self.opt_pen_selected_type)
BaseNode.py(222):         painter.setPen(pen)
BaseNode.py(223):         painter.drawRoundedRect(self.sizes[0], self.sizes[1],
BaseNode.py(224):                                 self.childrenBoundingRect().width(), self.nodeMainGWidget.boundingRect().height(),
BaseNode.py(225):                                 self.sizes[4], self.sizes[5])
 --- modulename: BaseNode, funcname: paint
BaseNode.py(39):         if self.options:
BaseNode.py(40):             painter.fillRect(option.rect, QtGui.QColor(self.opt_bg_color))
BaseNode.py(43):         super(NodeName, self).paint(painter, option, widget)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Widget, funcname: mouseMoveEvent
Widget.py(1402):         self.mousePos = self.mapToScene(event.pos())
Widget.py(1404):         if self._resize_group_mode:
Widget.py(1417):         if self._draw_real_time_line:
Widget.py(1434):         if self._is_rubber_band_selection:
Widget.py(1445):         super(GraphWidget, self).mouseMoveEvent(event)
 --- modulename: BaseNode, funcname: itemChange
BaseNode.py(147):         if change == self.ItemPositionChange:
BaseNode.py(149):             value.setX(roundup(value.x() - self.graph().grid_size + self.graph().grid_size / 3.0, self.graph().grid_size))
 --- modulename: AGraphCommon, funcname: roundup
AGraphCommon.py(11):     return int(math.ceil(x / to)) * to
BaseNode.py(150):             value.setY(roundup(value.y() - self.graph().grid_size + self.graph().grid_size / 3.0, self.graph().grid_size))
 --- modulename: AGraphCommon, funcname: roundup
AGraphCommon.py(11):     return int(math.ceil(x / to)) * to
BaseNode.py(151):             return value
 --- modulename: BaseNode, funcname: itemChange
BaseNode.py(147):         if change == self.ItemPositionChange:
BaseNode.py(152):         return QtGui.QGraphicsItem.itemChange(self, change, value)
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: BaseNode, funcname: paint
BaseNode.py(199):         painter.setPen(QtCore.Qt.NoPen)
BaseNode.py(200):         painter.setBrush(QtCore.Qt.darkGray)
BaseNode.py(202):         if self.options:
BaseNode.py(203):             color = self.opt_node_base_color
BaseNode.py(206):         if self.isSelected():
BaseNode.py(207):             color = color.lighter(150)
BaseNode.py(209):         linearGrad = QtGui.QRadialGradient(QtCore.QPointF(40, 40), 300)
BaseNode.py(210):         linearGrad.setColorAt(0, color)
BaseNode.py(211):         linearGrad.setColorAt(1, color.lighter(180))
BaseNode.py(212):         br = QtGui.QBrush(linearGrad)
BaseNode.py(213):         painter.setBrush(br)
BaseNode.py(214):         pen = QtGui.QPen(QtCore.Qt.black, 0.5)
BaseNode.py(215):         if option.state & QtGui.QStyle.State_Selected:
BaseNode.py(216):             if self.options:
BaseNode.py(217):                 pen.setColor(self.opt_selected_pen_color)
BaseNode.py(218):                 pen.setStyle(self.opt_pen_selected_type)
BaseNode.py(222):         painter.setPen(pen)
BaseNode.py(223):         painter.drawRoundedRect(self.sizes[0], self.sizes[1],
BaseNode.py(224):                                 self.childrenBoundingRect().width(), self.nodeMainGWidget.boundingRect().height(),
BaseNode.py(225):                                 self.sizes[4], self.sizes[5])
 --- modulename: BaseNode, funcname: paint
BaseNode.py(39):         if self.options:
BaseNode.py(40):             painter.fillRect(option.rect, QtGui.QColor(self.opt_bg_color))
BaseNode.py(43):         super(NodeName, self).paint(painter, option, widget)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Widget, funcname: mouseMoveEvent
Widget.py(1402):         self.mousePos = self.mapToScene(event.pos())
Widget.py(1404):         if self._resize_group_mode:
Widget.py(1417):         if self._draw_real_time_line:
Widget.py(1434):         if self._is_rubber_band_selection:
Widget.py(1445):         super(GraphWidget, self).mouseMoveEvent(event)
 --- modulename: BaseNode, funcname: itemChange
BaseNode.py(147):         if change == self.ItemPositionChange:
BaseNode.py(149):             value.setX(roundup(value.x() - self.graph().grid_size + self.graph().grid_size / 3.0, self.graph().grid_size))
 --- modulename: AGraphCommon, funcname: roundup
AGraphCommon.py(11):     return int(math.ceil(x / to)) * to
BaseNode.py(150):             value.setY(roundup(value.y() - self.graph().grid_size + self.graph().grid_size / 3.0, self.graph().grid_size))
 --- modulename: AGraphCommon, funcname: roundup
AGraphCommon.py(11):     return int(math.ceil(x / to)) * to
BaseNode.py(151):             return value
 --- modulename: Widget, funcname: mouseMoveEvent
Widget.py(1402):         self.mousePos = self.mapToScene(event.pos())
Widget.py(1404):         if self._resize_group_mode:
Widget.py(1417):         if self._draw_real_time_line:
Widget.py(1434):         if self._is_rubber_band_selection:
Widget.py(1445):         super(GraphWidget, self).mouseMoveEvent(event)
 --- modulename: BaseNode, funcname: itemChange
BaseNode.py(147):         if change == self.ItemPositionChange:
BaseNode.py(149):             value.setX(roundup(value.x() - self.graph().grid_size + self.graph().grid_size / 3.0, self.graph().grid_size))
 --- modulename: AGraphCommon, funcname: roundup
AGraphCommon.py(11):     return int(math.ceil(x / to)) * to
BaseNode.py(150):             value.setY(roundup(value.y() - self.graph().grid_size + self.graph().grid_size / 3.0, self.graph().grid_size))
 --- modulename: AGraphCommon, funcname: roundup
AGraphCommon.py(11):     return int(math.ceil(x / to)) * to
BaseNode.py(151):             return value
 --- modulename: Widget, funcname: mouseMoveEvent
Widget.py(1402):         self.mousePos = self.mapToScene(event.pos())
Widget.py(1404):         if self._resize_group_mode:
Widget.py(1417):         if self._draw_real_time_line:
Widget.py(1434):         if self._is_rubber_band_selection:
Widget.py(1445):         super(GraphWidget, self).mouseMoveEvent(event)
 --- modulename: BaseNode, funcname: itemChange
BaseNode.py(147):         if change == self.ItemPositionChange:
BaseNode.py(149):             value.setX(roundup(value.x() - self.graph().grid_size + self.graph().grid_size / 3.0, self.graph().grid_size))
 --- modulename: AGraphCommon, funcname: roundup
AGraphCommon.py(11):     return int(math.ceil(x / to)) * to
BaseNode.py(150):             value.setY(roundup(value.y() - self.graph().grid_size + self.graph().grid_size / 3.0, self.graph().grid_size))
 --- modulename: AGraphCommon, funcname: roundup
AGraphCommon.py(11):     return int(math.ceil(x / to)) * to
BaseNode.py(151):             return value
 --- modulename: Widget, funcname: mouseMoveEvent
Widget.py(1402):         self.mousePos = self.mapToScene(event.pos())
Widget.py(1404):         if self._resize_group_mode:
Widget.py(1417):         if self._draw_real_time_line:
Widget.py(1434):         if self._is_rubber_band_selection:
Widget.py(1445):         super(GraphWidget, self).mouseMoveEvent(event)
 --- modulename: BaseNode, funcname: itemChange
BaseNode.py(147):         if change == self.ItemPositionChange:
BaseNode.py(149):             value.setX(roundup(value.x() - self.graph().grid_size + self.graph().grid_size / 3.0, self.graph().grid_size))
 --- modulename: AGraphCommon, funcname: roundup
AGraphCommon.py(11):     return int(math.ceil(x / to)) * to
BaseNode.py(150):             value.setY(roundup(value.y() - self.graph().grid_size + self.graph().grid_size / 3.0, self.graph().grid_size))
 --- modulename: AGraphCommon, funcname: roundup
AGraphCommon.py(11):     return int(math.ceil(x / to)) * to
BaseNode.py(151):             return value
 --- modulename: BaseNode, funcname: itemChange
BaseNode.py(147):         if change == self.ItemPositionChange:
BaseNode.py(152):         return QtGui.QGraphicsItem.itemChange(self, change, value)
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: BaseNode, funcname: paint
BaseNode.py(199):         painter.setPen(QtCore.Qt.NoPen)
BaseNode.py(200):         painter.setBrush(QtCore.Qt.darkGray)
BaseNode.py(202):         if self.options:
BaseNode.py(203):             color = self.opt_node_base_color
BaseNode.py(206):         if self.isSelected():
BaseNode.py(207):             color = color.lighter(150)
BaseNode.py(209):         linearGrad = QtGui.QRadialGradient(QtCore.QPointF(40, 40), 300)
BaseNode.py(210):         linearGrad.setColorAt(0, color)
BaseNode.py(211):         linearGrad.setColorAt(1, color.lighter(180))
BaseNode.py(212):         br = QtGui.QBrush(linearGrad)
BaseNode.py(213):         painter.setBrush(br)
BaseNode.py(214):         pen = QtGui.QPen(QtCore.Qt.black, 0.5)
BaseNode.py(215):         if option.state & QtGui.QStyle.State_Selected:
BaseNode.py(216):             if self.options:
BaseNode.py(217):                 pen.setColor(self.opt_selected_pen_color)
BaseNode.py(218):                 pen.setStyle(self.opt_pen_selected_type)
BaseNode.py(222):         painter.setPen(pen)
BaseNode.py(223):         painter.drawRoundedRect(self.sizes[0], self.sizes[1],
BaseNode.py(224):                                 self.childrenBoundingRect().width(), self.nodeMainGWidget.boundingRect().height(),
BaseNode.py(225):                                 self.sizes[4], self.sizes[5])
 --- modulename: BaseNode, funcname: paint
BaseNode.py(39):         if self.options:
BaseNode.py(40):             painter.fillRect(option.rect, QtGui.QColor(self.opt_bg_color))
BaseNode.py(43):         super(NodeName, self).paint(painter, option, widget)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Widget, funcname: _tick_executor
Widget.py(988):         for foo in self._tick_functions:
 --- modulename: Widget, funcname: mouseMoveEvent
Widget.py(1402):         self.mousePos = self.mapToScene(event.pos())
Widget.py(1404):         if self._resize_group_mode:
Widget.py(1417):         if self._draw_real_time_line:
Widget.py(1434):         if self._is_rubber_band_selection:
Widget.py(1445):         super(GraphWidget, self).mouseMoveEvent(event)
 --- modulename: BaseNode, funcname: itemChange
BaseNode.py(147):         if change == self.ItemPositionChange:
BaseNode.py(149):             value.setX(roundup(value.x() - self.graph().grid_size + self.graph().grid_size / 3.0, self.graph().grid_size))
 --- modulename: AGraphCommon, funcname: roundup
AGraphCommon.py(11):     return int(math.ceil(x / to)) * to
BaseNode.py(150):             value.setY(roundup(value.y() - self.graph().grid_size + self.graph().grid_size / 3.0, self.graph().grid_size))
 --- modulename: AGraphCommon, funcname: roundup
AGraphCommon.py(11):     return int(math.ceil(x / to)) * to
BaseNode.py(151):             return value
 --- modulename: Widget, funcname: _tick_executor
Widget.py(988):         for foo in self._tick_functions:
 --- modulename: Widget, funcname: mouseMoveEvent
Widget.py(1402):         self.mousePos = self.mapToScene(event.pos())
Widget.py(1404):         if self._resize_group_mode:
Widget.py(1417):         if self._draw_real_time_line:
Widget.py(1434):         if self._is_rubber_band_selection:
Widget.py(1445):         super(GraphWidget, self).mouseMoveEvent(event)
 --- modulename: BaseNode, funcname: itemChange
BaseNode.py(147):         if change == self.ItemPositionChange:
BaseNode.py(149):             value.setX(roundup(value.x() - self.graph().grid_size + self.graph().grid_size / 3.0, self.graph().grid_size))
 --- modulename: AGraphCommon, funcname: roundup
AGraphCommon.py(11):     return int(math.ceil(x / to)) * to
BaseNode.py(150):             value.setY(roundup(value.y() - self.graph().grid_size + self.graph().grid_size / 3.0, self.graph().grid_size))
 --- modulename: AGraphCommon, funcname: roundup
AGraphCommon.py(11):     return int(math.ceil(x / to)) * to
BaseNode.py(151):             return value
 --- modulename: Widget, funcname: mouseMoveEvent
Widget.py(1402):         self.mousePos = self.mapToScene(event.pos())
Widget.py(1404):         if self._resize_group_mode:
Widget.py(1417):         if self._draw_real_time_line:
Widget.py(1434):         if self._is_rubber_band_selection:
Widget.py(1445):         super(GraphWidget, self).mouseMoveEvent(event)
 --- modulename: BaseNode, funcname: itemChange
BaseNode.py(147):         if change == self.ItemPositionChange:
BaseNode.py(149):             value.setX(roundup(value.x() - self.graph().grid_size + self.graph().grid_size / 3.0, self.graph().grid_size))
 --- modulename: AGraphCommon, funcname: roundup
AGraphCommon.py(11):     return int(math.ceil(x / to)) * to
BaseNode.py(150):             value.setY(roundup(value.y() - self.graph().grid_size + self.graph().grid_size / 3.0, self.graph().grid_size))
 --- modulename: AGraphCommon, funcname: roundup
AGraphCommon.py(11):     return int(math.ceil(x / to)) * to
BaseNode.py(151):             return value
 --- modulename: Widget, funcname: _tick_executor
Widget.py(988):         for foo in self._tick_functions:
 --- modulename: Widget, funcname: mouseMoveEvent
Widget.py(1402):         self.mousePos = self.mapToScene(event.pos())
Widget.py(1404):         if self._resize_group_mode:
Widget.py(1417):         if self._draw_real_time_line:
Widget.py(1434):         if self._is_rubber_band_selection:
Widget.py(1445):         super(GraphWidget, self).mouseMoveEvent(event)
 --- modulename: BaseNode, funcname: itemChange
BaseNode.py(147):         if change == self.ItemPositionChange:
BaseNode.py(149):             value.setX(roundup(value.x() - self.graph().grid_size + self.graph().grid_size / 3.0, self.graph().grid_size))
 --- modulename: AGraphCommon, funcname: roundup
AGraphCommon.py(11):     return int(math.ceil(x / to)) * to
BaseNode.py(150):             value.setY(roundup(value.y() - self.graph().grid_size + self.graph().grid_size / 3.0, self.graph().grid_size))
 --- modulename: AGraphCommon, funcname: roundup
AGraphCommon.py(11):     return int(math.ceil(x / to)) * to
BaseNode.py(151):             return value
 --- modulename: BaseNode, funcname: itemChange
BaseNode.py(147):         if change == self.ItemPositionChange:
BaseNode.py(152):         return QtGui.QGraphicsItem.itemChange(self, change, value)
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: BaseNode, funcname: paint
BaseNode.py(199):         painter.setPen(QtCore.Qt.NoPen)
BaseNode.py(200):         painter.setBrush(QtCore.Qt.darkGray)
BaseNode.py(202):         if self.options:
BaseNode.py(203):             color = self.opt_node_base_color
BaseNode.py(206):         if self.isSelected():
BaseNode.py(207):             color = color.lighter(150)
BaseNode.py(209):         linearGrad = QtGui.QRadialGradient(QtCore.QPointF(40, 40), 300)
BaseNode.py(210):         linearGrad.setColorAt(0, color)
BaseNode.py(211):         linearGrad.setColorAt(1, color.lighter(180))
BaseNode.py(212):         br = QtGui.QBrush(linearGrad)
BaseNode.py(213):         painter.setBrush(br)
BaseNode.py(214):         pen = QtGui.QPen(QtCore.Qt.black, 0.5)
BaseNode.py(215):         if option.state & QtGui.QStyle.State_Selected:
BaseNode.py(216):             if self.options:
BaseNode.py(217):                 pen.setColor(self.opt_selected_pen_color)
BaseNode.py(218):                 pen.setStyle(self.opt_pen_selected_type)
BaseNode.py(222):         painter.setPen(pen)
BaseNode.py(223):         painter.drawRoundedRect(self.sizes[0], self.sizes[1],
BaseNode.py(224):                                 self.childrenBoundingRect().width(), self.nodeMainGWidget.boundingRect().height(),
BaseNode.py(225):                                 self.sizes[4], self.sizes[5])
 --- modulename: BaseNode, funcname: paint
BaseNode.py(39):         if self.options:
BaseNode.py(40):             painter.fillRect(option.rect, QtGui.QColor(self.opt_bg_color))
BaseNode.py(43):         super(NodeName, self).paint(painter, option, widget)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Widget, funcname: mouseReleaseEvent
Widget.py(1498):         self.released_item = self.itemAt(event.pos())
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
Widget.py(1499):         self.setDragMode(self.NoDrag)
Widget.py(1500):         self._resize_group_mode = False
Widget.py(1501):         self.viewport().setCursor(QtCore.Qt.ArrowCursor)
Widget.py(1502):         modifiers = event.modifiers()
Widget.py(1503):         if self.released_item and not hasattr(self.released_item, 'non_selectable'):
Widget.py(1504):             if isinstance(self.released_item, CommentNode):
Widget.py(1513):         for n in self.nodes:
Widget.py(1514):             n.setFlag(QtGui.QGraphicsItem.ItemIsMovable)
Widget.py(1513):         for n in self.nodes:
Widget.py(1516):         if event.button() == QtCore.Qt.RightButton:
Widget.py(1518):         if self._draw_real_time_line:
Widget.py(1522):         if self._is_rubber_band_selection:
Widget.py(1526):         if event.button() == QtCore.Qt.RightButton:
Widget.py(1528):         p_itm = self.pressed_item
Widget.py(1529):         r_itm = self.released_item
Widget.py(1530):         do_connect = True
Widget.py(1531):         for i in [p_itm, r_itm]:
Widget.py(1532):             if not i:
Widget.py(1535):             if not hasattr(i, 'object_type'):
Widget.py(1538):             if not i.object_type == AGObjectTypes.tPort:
Widget.py(1539):                 do_connect = False
Widget.py(1540):                 break
Widget.py(1541):         if p_itm and r_itm:
Widget.py(1542):             if hasattr(p_itm, 'object_type') and hasattr(r_itm, 'object_type'):
Widget.py(1543):                 if all([p_itm.object_type == AGObjectTypes.tPort, r_itm.object_type == AGObjectTypes.tPort]):
Widget.py(1548):         if do_connect:
Widget.py(1550):         selected_nodes = self.selected_nodes()
 --- modulename: Widget, funcname: selected_nodes
Widget.py(1268):         return [i for i in self.nodes if i.isSelected()]
Widget.py(1268):         return [i for i in self.nodes if i.isSelected()]
Widget.py(1551):         if len(selected_nodes) != 0:
Widget.py(1552):             self.update_property_view(selected_nodes[0])
 --- modulename: Widget, funcname: update_property_view
Widget.py(1559):         root = self.parent.dockWidgetNodeView
Widget.py(1560):         layout = self.parent.PropertiesformLayout
Widget.py(1561):         root.owned_node = node
Widget.py(1562):         clearLayout(layout)
 --- modulename: Widget, funcname: clearLayout
Widget.py(39):     while layout.count():
Widget.py(1565):         le_name = QtGui.QLineEdit(node.get_name())
 --- modulename: AbstractGraph, funcname: get_name
AbstractGraph.py(161):         return self.name
Widget.py(1566):         le_name.returnPressed.connect(lambda: node.set_name(le_name.text()))
Widget.py(1567):         layout.addRow("Name", le_name)
Widget.py(1570):         le_pos = QtGui.QLineEdit("{0} x {1}".format(node.pos().x(), node.pos().y()))
Widget.py(1571):         layout.addRow("Pos", le_pos)
Widget.py(1574):         if len(node.inputs) != 0:
Widget.py(1575):             sep_inputs = QtGui.QLabel()
Widget.py(1576):             sep_inputs.setStyleSheet("background-color: black;")
Widget.py(1577):             sep_inputs.setText("INPUTS")
Widget.py(1578):             layout.addRow("", sep_inputs)
Widget.py(1580):             def tmp(le):
Widget.py(1583):             for inp in node.inputs:
Widget.py(1584):                 le = QtGui.QLineEdit(str(inp.current_data()))
 --- modulename: AbstractGraph, funcname: current_data
AbstractGraph.py(44):         if self._data is None:
AbstractGraph.py(46):         return self._data
Widget.py(1585):                 layout.addRow(inp.name, le)
Widget.py(1586):                 le.setReadOnly(True)
Widget.py(1583):             for inp in node.inputs:
Widget.py(1584):                 le = QtGui.QLineEdit(str(inp.current_data()))
 --- modulename: AbstractGraph, funcname: current_data
AbstractGraph.py(44):         if self._data is None:
AbstractGraph.py(46):         return self._data
Widget.py(1585):                 layout.addRow(inp.name, le)
Widget.py(1586):                 le.setReadOnly(True)
Widget.py(1583):             for inp in node.inputs:
Widget.py(1589):         if len(node.outputs) != 0:
Widget.py(1590):             sep_outputs = QtGui.QLabel()
Widget.py(1591):             sep_outputs.setStyleSheet("background-color: black;")
Widget.py(1592):             sep_outputs.setText("OUTPUTS")
Widget.py(1593):             layout.addRow("", sep_outputs)
Widget.py(1594):             for out in node.outputs:
Widget.py(1595):                 le = QtGui.QLineEdit(str(out.current_data()))
 --- modulename: AbstractGraph, funcname: current_data
AbstractGraph.py(44):         if self._data is None:
AbstractGraph.py(46):         return self._data
Widget.py(1596):                 le.setReadOnly(True)
Widget.py(1597):                 layout.addRow(out.name, le)
Widget.py(1594):             for out in node.outputs:
Widget.py(1599):         doc_lb = QtGui.QLabel()
Widget.py(1600):         doc_lb.setStyleSheet("background-color: black;")
Widget.py(1601):         doc_lb.setText("Description")
Widget.py(1602):         layout.addRow("", doc_lb)
Widget.py(1603):         doc = QtGui.QLabel(node.description())
 --- modulename: BaseNode, funcname: description
BaseNode.py(156):         return "Default node description"
Widget.py(1604):         doc.setWordWrap(True)
Widget.py(1605):         layout.addRow("", doc)
Widget.py(1556):         super(GraphWidget, self).mouseReleaseEvent(event)
 --- modulename: BaseNode, funcname: mouseReleaseEvent
BaseNode.py(249):         self.update()
BaseNode.py(250):         self.setCursor(QtCore.Qt.OpenHandCursor)
 --- modulename: BaseNode, funcname: itemChange
BaseNode.py(147):         if change == self.ItemPositionChange:
BaseNode.py(152):         return QtGui.QGraphicsItem.itemChange(self, change, value)
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: BaseNode, funcname: itemChange
BaseNode.py(147):         if change == self.ItemPositionChange:
BaseNode.py(152):         return QtGui.QGraphicsItem.itemChange(self, change, value)
BaseNode.py(251):         modifiers = event.modifiers()
BaseNode.py(252):         selected_nodes = [n for n in self.graph().nodes if n.isSelected()]
BaseNode.py(252):         selected_nodes = [n for n in self.graph().nodes if n.isSelected()]
BaseNode.py(253):         groupers = [i for i in self.graph().groupers if i.object_type == AGObjectTypes.tGrouper]
BaseNode.py(254):         grouper = [g for g in groupers if self in g.collidingItems()]
BaseNode.py(255):         if len(grouper) == 1:
BaseNode.py(259):             parent = self.parentItem()
BaseNode.py(260):             if parent and parent.object_type == AGObjectTypes.tGrouper:
BaseNode.py(269):         p_item = self.parentItem()
BaseNode.py(270):         if p_item and hasattr(p_item, 'object_type'):
BaseNode.py(274):         QtGui.QGraphicsItem.mouseReleaseEvent(self, event)
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: BaseNode, funcname: paint
BaseNode.py(199):         painter.setPen(QtCore.Qt.NoPen)
BaseNode.py(200):         painter.setBrush(QtCore.Qt.darkGray)
BaseNode.py(202):         if self.options:
BaseNode.py(203):             color = self.opt_node_base_color
BaseNode.py(206):         if self.isSelected():
BaseNode.py(207):             color = color.lighter(150)
BaseNode.py(209):         linearGrad = QtGui.QRadialGradient(QtCore.QPointF(40, 40), 300)
BaseNode.py(210):         linearGrad.setColorAt(0, color)
BaseNode.py(211):         linearGrad.setColorAt(1, color.lighter(180))
BaseNode.py(212):         br = QtGui.QBrush(linearGrad)
BaseNode.py(213):         painter.setBrush(br)
BaseNode.py(214):         pen = QtGui.QPen(QtCore.Qt.black, 0.5)
BaseNode.py(215):         if option.state & QtGui.QStyle.State_Selected:
BaseNode.py(216):             if self.options:
BaseNode.py(217):                 pen.setColor(self.opt_selected_pen_color)
BaseNode.py(218):                 pen.setStyle(self.opt_pen_selected_type)
BaseNode.py(222):         painter.setPen(pen)
BaseNode.py(223):         painter.drawRoundedRect(self.sizes[0], self.sizes[1],
BaseNode.py(224):                                 self.childrenBoundingRect().width(), self.nodeMainGWidget.boundingRect().height(),
BaseNode.py(225):                                 self.sizes[4], self.sizes[5])
 --- modulename: BaseNode, funcname: paint
BaseNode.py(39):         if self.options:
BaseNode.py(40):             painter.fillRect(option.rect, QtGui.QColor(self.opt_bg_color))
BaseNode.py(43):         super(NodeName, self).paint(painter, option, widget)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Widget, funcname: mouseMoveEvent
Widget.py(1402):         self.mousePos = self.mapToScene(event.pos())
Widget.py(1404):         if self._resize_group_mode:
Widget.py(1417):         if self._draw_real_time_line:
Widget.py(1434):         if self._is_rubber_band_selection:
Widget.py(1445):         super(GraphWidget, self).mouseMoveEvent(event)
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Widget, funcname: mouseMoveEvent
Widget.py(1402):         self.mousePos = self.mapToScene(event.pos())
Widget.py(1404):         if self._resize_group_mode:
Widget.py(1417):         if self._draw_real_time_line:
Widget.py(1434):         if self._is_rubber_band_selection:
Widget.py(1445):         super(GraphWidget, self).mouseMoveEvent(event)
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Widget, funcname: _tick_executor
Widget.py(988):         for foo in self._tick_functions:
 --- modulename: Widget, funcname: mouseMoveEvent
Widget.py(1402):         self.mousePos = self.mapToScene(event.pos())
Widget.py(1404):         if self._resize_group_mode:
Widget.py(1417):         if self._draw_real_time_line:
Widget.py(1434):         if self._is_rubber_band_selection:
Widget.py(1445):         super(GraphWidget, self).mouseMoveEvent(event)
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Widget, funcname: mouseMoveEvent
Widget.py(1402):         self.mousePos = self.mapToScene(event.pos())
Widget.py(1404):         if self._resize_group_mode:
Widget.py(1417):         if self._draw_real_time_line:
Widget.py(1434):         if self._is_rubber_band_selection:
Widget.py(1445):         super(GraphWidget, self).mouseMoveEvent(event)
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Widget, funcname: mouseMoveEvent
Widget.py(1402):         self.mousePos = self.mapToScene(event.pos())
Widget.py(1404):         if self._resize_group_mode:
Widget.py(1417):         if self._draw_real_time_line:
Widget.py(1434):         if self._is_rubber_band_selection:
Widget.py(1445):         super(GraphWidget, self).mouseMoveEvent(event)
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Widget, funcname: mouseMoveEvent
Widget.py(1402):         self.mousePos = self.mapToScene(event.pos())
Widget.py(1404):         if self._resize_group_mode:
Widget.py(1417):         if self._draw_real_time_line:
Widget.py(1434):         if self._is_rubber_band_selection:
Widget.py(1445):         super(GraphWidget, self).mouseMoveEvent(event)
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Widget, funcname: mouseMoveEvent
Widget.py(1402):         self.mousePos = self.mapToScene(event.pos())
Widget.py(1404):         if self._resize_group_mode:
Widget.py(1417):         if self._draw_real_time_line:
Widget.py(1434):         if self._is_rubber_band_selection:
Widget.py(1445):         super(GraphWidget, self).mouseMoveEvent(event)
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Widget, funcname: mouseMoveEvent
Widget.py(1402):         self.mousePos = self.mapToScene(event.pos())
Widget.py(1404):         if self._resize_group_mode:
Widget.py(1417):         if self._draw_real_time_line:
Widget.py(1434):         if self._is_rubber_band_selection:
Widget.py(1445):         super(GraphWidget, self).mouseMoveEvent(event)
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Widget, funcname: mouseMoveEvent
Widget.py(1402):         self.mousePos = self.mapToScene(event.pos())
Widget.py(1404):         if self._resize_group_mode:
Widget.py(1417):         if self._draw_real_time_line:
Widget.py(1434):         if self._is_rubber_band_selection:
Widget.py(1445):         super(GraphWidget, self).mouseMoveEvent(event)
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Widget, funcname: mouseMoveEvent
Widget.py(1402):         self.mousePos = self.mapToScene(event.pos())
Widget.py(1404):         if self._resize_group_mode:
Widget.py(1417):         if self._draw_real_time_line:
Widget.py(1434):         if self._is_rubber_band_selection:
Widget.py(1445):         super(GraphWidget, self).mouseMoveEvent(event)
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Widget, funcname: mouseMoveEvent
Widget.py(1402):         self.mousePos = self.mapToScene(event.pos())
Widget.py(1404):         if self._resize_group_mode:
Widget.py(1417):         if self._draw_real_time_line:
Widget.py(1434):         if self._is_rubber_band_selection:
Widget.py(1445):         super(GraphWidget, self).mouseMoveEvent(event)
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Widget, funcname: _tick_executor
Widget.py(988):         for foo in self._tick_functions:
 --- modulename: Widget, funcname: mouseMoveEvent
Widget.py(1402):         self.mousePos = self.mapToScene(event.pos())
Widget.py(1404):         if self._resize_group_mode:
Widget.py(1417):         if self._draw_real_time_line:
Widget.py(1434):         if self._is_rubber_band_selection:
Widget.py(1445):         super(GraphWidget, self).mouseMoveEvent(event)
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Widget, funcname: mouseMoveEvent
Widget.py(1402):         self.mousePos = self.mapToScene(event.pos())
Widget.py(1404):         if self._resize_group_mode:
Widget.py(1417):         if self._draw_real_time_line:
Widget.py(1434):         if self._is_rubber_band_selection:
Widget.py(1445):         super(GraphWidget, self).mouseMoveEvent(event)
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Widget, funcname: mouseMoveEvent
Widget.py(1402):         self.mousePos = self.mapToScene(event.pos())
Widget.py(1404):         if self._resize_group_mode:
Widget.py(1417):         if self._draw_real_time_line:
Widget.py(1434):         if self._is_rubber_band_selection:
Widget.py(1445):         super(GraphWidget, self).mouseMoveEvent(event)
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Widget, funcname: mouseMoveEvent
Widget.py(1402):         self.mousePos = self.mapToScene(event.pos())
Widget.py(1404):         if self._resize_group_mode:
Widget.py(1417):         if self._draw_real_time_line:
Widget.py(1434):         if self._is_rubber_band_selection:
Widget.py(1445):         super(GraphWidget, self).mouseMoveEvent(event)
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Widget, funcname: mouseMoveEvent
Widget.py(1402):         self.mousePos = self.mapToScene(event.pos())
Widget.py(1404):         if self._resize_group_mode:
Widget.py(1417):         if self._draw_real_time_line:
Widget.py(1434):         if self._is_rubber_band_selection:
Widget.py(1445):         super(GraphWidget, self).mouseMoveEvent(event)
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Widget, funcname: _tick_executor
Widget.py(988):         for foo in self._tick_functions:
 --- modulename: Widget, funcname: mousePressEvent
Widget.py(1371):         modifiers = event.modifiers()
Widget.py(1372):         self.pressed_item = self.itemAt(event.pos())
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
Widget.py(1373):         if self.pressed_item and hasattr(self.pressed_item, 'mark'):
Widget.py(1376):         if not self.pressed_item:
Widget.py(1377):             self.node_box.close()
Widget.py(1378):             self.node_box.le_nodes.clear()
Widget.py(1379):         if self.pressed_item:
Widget.py(1385):         self.mousePressPose = self.mapToScene(event.pos())
Widget.py(1386):         if self.pressed_item and event.button() == QtCore.Qt.LeftButton:
Widget.py(1391):         if event.button() == QtCore.Qt.RightButton:
Widget.py(1393):         if all([event.button() == QtCore.Qt.LeftButton, modifiers == QtCore.Qt.AltModifier]):
Widget.py(1395):         if all([event.button() == QtCore.Qt.LeftButton,
Widget.py(1396):                 modifiers == QtCore.Qt.NoModifier or modifiers == QtCore.Qt.ControlModifier | QtCore.Qt.ShiftModifier]):
Widget.py(1397):             if not self.pressed_item or hasattr(self.pressed_item, 'non_selectable'):
Widget.py(1398):                 self._is_rubber_band_selection = True
Widget.py(1399):         super(GraphWidget, self).mousePressEvent(event)
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: BaseNode, funcname: itemChange
BaseNode.py(147):         if change == self.ItemPositionChange:
BaseNode.py(152):         return QtGui.QGraphicsItem.itemChange(self, change, value)
 --- modulename: BaseNode, funcname: itemChange
BaseNode.py(147):         if change == self.ItemPositionChange:
BaseNode.py(152):         return QtGui.QGraphicsItem.itemChange(self, change, value)
 --- modulename: Widget, funcname: OnSelectionChanged
Widget.py(210):         selected_nodes = []
Widget.py(211):         for n in self.parent().get_nodes():
 --- modulename: Widget, funcname: get_nodes
Widget.py(1026):         ls = []
Widget.py(1027):         for i in self.scene().items():
Widget.py(1028):             if hasattr(i, 'object_type'):
Widget.py(1027):         for i in self.scene().items():
Widget.py(1028):             if hasattr(i, 'object_type'):
Widget.py(1029):                 if i.object_type == AGObjectTypes.tNode:
Widget.py(1027):         for i in self.scene().items():
Widget.py(1028):             if hasattr(i, 'object_type'):
Widget.py(1029):                 if i.object_type == AGObjectTypes.tNode:
Widget.py(1030):                     if i.isVisible():
Widget.py(1031):                         ls.append(i)
Widget.py(1027):         for i in self.scene().items():
Widget.py(1028):             if hasattr(i, 'object_type'):
Widget.py(1029):                 if i.object_type == AGObjectTypes.tNode:
Widget.py(1027):         for i in self.scene().items():
Widget.py(1028):             if hasattr(i, 'object_type'):
Widget.py(1027):         for i in self.scene().items():
Widget.py(1028):             if hasattr(i, 'object_type'):
Widget.py(1027):         for i in self.scene().items():
Widget.py(1028):             if hasattr(i, 'object_type'):
Widget.py(1027):         for i in self.scene().items():
Widget.py(1028):             if hasattr(i, 'object_type'):
Widget.py(1027):         for i in self.scene().items():
Widget.py(1028):             if hasattr(i, 'object_type'):
Widget.py(1029):                 if i.object_type == AGObjectTypes.tNode:
Widget.py(1027):         for i in self.scene().items():
Widget.py(1028):             if hasattr(i, 'object_type'):
Widget.py(1029):                 if i.object_type == AGObjectTypes.tNode:
Widget.py(1027):         for i in self.scene().items():
Widget.py(1028):             if hasattr(i, 'object_type'):
Widget.py(1029):                 if i.object_type == AGObjectTypes.tNode:
Widget.py(1027):         for i in self.scene().items():
Widget.py(1032):         return ls
Widget.py(212):             if n.isSelected():
Widget.py(211):         for n in self.parent().get_nodes():
Widget.py(214):         if len(selected_nodes) == 0:
Widget.py(215):             self.parent().write_to_console("select {0}nl none".format(FLAG_SYMBOL))
 --- modulename: Widget, funcname: write_to_console
Widget.py(1987):         if not force:
Widget.py(1988):             if not self.is_debug():
 --- modulename: AbstractGraph, funcname: is_debug
AbstractGraph.py(223):         return self._debug
Widget.py(1989):                 return
Widget.py(216):             return
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: BaseNode, funcname: paint
BaseNode.py(199):         painter.setPen(QtCore.Qt.NoPen)
BaseNode.py(200):         painter.setBrush(QtCore.Qt.darkGray)
BaseNode.py(202):         if self.options:
BaseNode.py(203):             color = self.opt_node_base_color
BaseNode.py(206):         if self.isSelected():
BaseNode.py(209):         linearGrad = QtGui.QRadialGradient(QtCore.QPointF(40, 40), 300)
BaseNode.py(210):         linearGrad.setColorAt(0, color)
BaseNode.py(211):         linearGrad.setColorAt(1, color.lighter(180))
BaseNode.py(212):         br = QtGui.QBrush(linearGrad)
BaseNode.py(213):         painter.setBrush(br)
BaseNode.py(214):         pen = QtGui.QPen(QtCore.Qt.black, 0.5)
BaseNode.py(215):         if option.state & QtGui.QStyle.State_Selected:
BaseNode.py(222):         painter.setPen(pen)
BaseNode.py(223):         painter.drawRoundedRect(self.sizes[0], self.sizes[1],
BaseNode.py(224):                                 self.childrenBoundingRect().width(), self.nodeMainGWidget.boundingRect().height(),
BaseNode.py(225):                                 self.sizes[4], self.sizes[5])
 --- modulename: BaseNode, funcname: paint
BaseNode.py(39):         if self.options:
BaseNode.py(40):             painter.fillRect(option.rect, QtGui.QColor(self.opt_bg_color))
BaseNode.py(43):         super(NodeName, self).paint(painter, option, widget)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Widget, funcname: _tick_executor
Widget.py(988):         for foo in self._tick_functions:
 --- modulename: Widget, funcname: mouseMoveEvent
Widget.py(1402):         self.mousePos = self.mapToScene(event.pos())
Widget.py(1404):         if self._resize_group_mode:
Widget.py(1417):         if self._draw_real_time_line:
Widget.py(1434):         if self._is_rubber_band_selection:
Widget.py(1435):             if self.rubber_rect not in self.scene().items():
Widget.py(1436):                 self.scene().addItem(self.rubber_rect)
Widget.py(1437):             if not self.rubber_rect.isVisible():
Widget.py(1439):             r = QtCore.QRectF(self.mousePressPose.x(),
Widget.py(1440):                               self.mousePressPose.y(),
Widget.py(1441):                               self.mousePos.x() - self.mousePressPose.x(),
Widget.py(1442):                               self.mousePos.y() - self.mousePressPose.y())
Widget.py(1443):             self.rubber_rect.setRect(r.normalized())
Widget.py(1445):         super(GraphWidget, self).mouseMoveEvent(event)
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: Widget, funcname: mouseMoveEvent
Widget.py(1402):         self.mousePos = self.mapToScene(event.pos())
Widget.py(1404):         if self._resize_group_mode:
Widget.py(1417):         if self._draw_real_time_line:
Widget.py(1434):         if self._is_rubber_band_selection:
Widget.py(1435):             if self.rubber_rect not in self.scene().items():
Widget.py(1437):             if not self.rubber_rect.isVisible():
Widget.py(1439):             r = QtCore.QRectF(self.mousePressPose.x(),
Widget.py(1440):                               self.mousePressPose.y(),
Widget.py(1441):                               self.mousePos.x() - self.mousePressPose.x(),
Widget.py(1442):                               self.mousePos.y() - self.mousePressPose.y())
Widget.py(1443):             self.rubber_rect.setRect(r.normalized())
Widget.py(1445):         super(GraphWidget, self).mouseMoveEvent(event)
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: Widget, funcname: mouseMoveEvent
Widget.py(1402):         self.mousePos = self.mapToScene(event.pos())
Widget.py(1404):         if self._resize_group_mode:
Widget.py(1417):         if self._draw_real_time_line:
Widget.py(1434):         if self._is_rubber_band_selection:
Widget.py(1435):             if self.rubber_rect not in self.scene().items():
Widget.py(1437):             if not self.rubber_rect.isVisible():
Widget.py(1439):             r = QtCore.QRectF(self.mousePressPose.x(),
Widget.py(1440):                               self.mousePressPose.y(),
Widget.py(1441):                               self.mousePos.x() - self.mousePressPose.x(),
Widget.py(1442):                               self.mousePos.y() - self.mousePressPose.y())
Widget.py(1443):             self.rubber_rect.setRect(r.normalized())
Widget.py(1445):         super(GraphWidget, self).mouseMoveEvent(event)
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: Widget, funcname: mouseMoveEvent
Widget.py(1402):         self.mousePos = self.mapToScene(event.pos())
Widget.py(1404):         if self._resize_group_mode:
Widget.py(1417):         if self._draw_real_time_line:
Widget.py(1434):         if self._is_rubber_band_selection:
Widget.py(1435):             if self.rubber_rect not in self.scene().items():
Widget.py(1437):             if not self.rubber_rect.isVisible():
Widget.py(1439):             r = QtCore.QRectF(self.mousePressPose.x(),
Widget.py(1440):                               self.mousePressPose.y(),
Widget.py(1441):                               self.mousePos.x() - self.mousePressPose.x(),
Widget.py(1442):                               self.mousePos.y() - self.mousePressPose.y())
Widget.py(1443):             self.rubber_rect.setRect(r.normalized())
Widget.py(1445):         super(GraphWidget, self).mouseMoveEvent(event)
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: Widget, funcname: mouseMoveEvent
Widget.py(1402):         self.mousePos = self.mapToScene(event.pos())
Widget.py(1404):         if self._resize_group_mode:
Widget.py(1417):         if self._draw_real_time_line:
Widget.py(1434):         if self._is_rubber_band_selection:
Widget.py(1435):             if self.rubber_rect not in self.scene().items():
Widget.py(1437):             if not self.rubber_rect.isVisible():
Widget.py(1439):             r = QtCore.QRectF(self.mousePressPose.x(),
Widget.py(1440):                               self.mousePressPose.y(),
Widget.py(1441):                               self.mousePos.x() - self.mousePressPose.x(),
Widget.py(1442):                               self.mousePos.y() - self.mousePressPose.y())
Widget.py(1443):             self.rubber_rect.setRect(r.normalized())
Widget.py(1445):         super(GraphWidget, self).mouseMoveEvent(event)
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: Widget, funcname: mouseMoveEvent
Widget.py(1402):         self.mousePos = self.mapToScene(event.pos())
Widget.py(1404):         if self._resize_group_mode:
Widget.py(1417):         if self._draw_real_time_line:
Widget.py(1434):         if self._is_rubber_band_selection:
Widget.py(1435):             if self.rubber_rect not in self.scene().items():
Widget.py(1437):             if not self.rubber_rect.isVisible():
Widget.py(1439):             r = QtCore.QRectF(self.mousePressPose.x(),
Widget.py(1440):                               self.mousePressPose.y(),
Widget.py(1441):                               self.mousePos.x() - self.mousePressPose.x(),
Widget.py(1442):                               self.mousePos.y() - self.mousePressPose.y())
Widget.py(1443):             self.rubber_rect.setRect(r.normalized())
Widget.py(1445):         super(GraphWidget, self).mouseMoveEvent(event)
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: Widget, funcname: mouseMoveEvent
Widget.py(1402):         self.mousePos = self.mapToScene(event.pos())
Widget.py(1404):         if self._resize_group_mode:
Widget.py(1417):         if self._draw_real_time_line:
Widget.py(1434):         if self._is_rubber_band_selection:
Widget.py(1435):             if self.rubber_rect not in self.scene().items():
Widget.py(1437):             if not self.rubber_rect.isVisible():
Widget.py(1439):             r = QtCore.QRectF(self.mousePressPose.x(),
Widget.py(1440):                               self.mousePressPose.y(),
Widget.py(1441):                               self.mousePos.x() - self.mousePressPose.x(),
Widget.py(1442):                               self.mousePos.y() - self.mousePressPose.y())
Widget.py(1443):             self.rubber_rect.setRect(r.normalized())
Widget.py(1445):         super(GraphWidget, self).mouseMoveEvent(event)
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: Widget, funcname: mouseMoveEvent
Widget.py(1402):         self.mousePos = self.mapToScene(event.pos())
Widget.py(1404):         if self._resize_group_mode:
Widget.py(1417):         if self._draw_real_time_line:
Widget.py(1434):         if self._is_rubber_band_selection:
Widget.py(1435):             if self.rubber_rect not in self.scene().items():
Widget.py(1437):             if not self.rubber_rect.isVisible():
Widget.py(1439):             r = QtCore.QRectF(self.mousePressPose.x(),
Widget.py(1440):                               self.mousePressPose.y(),
Widget.py(1441):                               self.mousePos.x() - self.mousePressPose.x(),
Widget.py(1442):                               self.mousePos.y() - self.mousePressPose.y())
Widget.py(1443):             self.rubber_rect.setRect(r.normalized())
Widget.py(1445):         super(GraphWidget, self).mouseMoveEvent(event)
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: Widget, funcname: mouseMoveEvent
Widget.py(1402):         self.mousePos = self.mapToScene(event.pos())
Widget.py(1404):         if self._resize_group_mode:
Widget.py(1417):         if self._draw_real_time_line:
Widget.py(1434):         if self._is_rubber_band_selection:
Widget.py(1435):             if self.rubber_rect not in self.scene().items():
Widget.py(1437):             if not self.rubber_rect.isVisible():
Widget.py(1439):             r = QtCore.QRectF(self.mousePressPose.x(),
Widget.py(1440):                               self.mousePressPose.y(),
Widget.py(1441):                               self.mousePos.x() - self.mousePressPose.x(),
Widget.py(1442):                               self.mousePos.y() - self.mousePressPose.y())
Widget.py(1443):             self.rubber_rect.setRect(r.normalized())
Widget.py(1445):         super(GraphWidget, self).mouseMoveEvent(event)
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: Widget, funcname: _tick_executor
Widget.py(988):         for foo in self._tick_functions:
 --- modulename: Widget, funcname: mouseMoveEvent
Widget.py(1402):         self.mousePos = self.mapToScene(event.pos())
Widget.py(1404):         if self._resize_group_mode:
Widget.py(1417):         if self._draw_real_time_line:
Widget.py(1434):         if self._is_rubber_band_selection:
Widget.py(1435):             if self.rubber_rect not in self.scene().items():
Widget.py(1437):             if not self.rubber_rect.isVisible():
Widget.py(1439):             r = QtCore.QRectF(self.mousePressPose.x(),
Widget.py(1440):                               self.mousePressPose.y(),
Widget.py(1441):                               self.mousePos.x() - self.mousePressPose.x(),
Widget.py(1442):                               self.mousePos.y() - self.mousePressPose.y())
Widget.py(1443):             self.rubber_rect.setRect(r.normalized())
Widget.py(1445):         super(GraphWidget, self).mouseMoveEvent(event)
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: Widget, funcname: mouseMoveEvent
Widget.py(1402):         self.mousePos = self.mapToScene(event.pos())
Widget.py(1404):         if self._resize_group_mode:
Widget.py(1417):         if self._draw_real_time_line:
Widget.py(1434):         if self._is_rubber_band_selection:
Widget.py(1435):             if self.rubber_rect not in self.scene().items():
Widget.py(1437):             if not self.rubber_rect.isVisible():
Widget.py(1439):             r = QtCore.QRectF(self.mousePressPose.x(),
Widget.py(1440):                               self.mousePressPose.y(),
Widget.py(1441):                               self.mousePos.x() - self.mousePressPose.x(),
Widget.py(1442):                               self.mousePos.y() - self.mousePressPose.y())
Widget.py(1443):             self.rubber_rect.setRect(r.normalized())
Widget.py(1445):         super(GraphWidget, self).mouseMoveEvent(event)
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: Widget, funcname: mouseMoveEvent
Widget.py(1402):         self.mousePos = self.mapToScene(event.pos())
Widget.py(1404):         if self._resize_group_mode:
Widget.py(1417):         if self._draw_real_time_line:
Widget.py(1434):         if self._is_rubber_band_selection:
Widget.py(1435):             if self.rubber_rect not in self.scene().items():
Widget.py(1437):             if not self.rubber_rect.isVisible():
Widget.py(1439):             r = QtCore.QRectF(self.mousePressPose.x(),
Widget.py(1440):                               self.mousePressPose.y(),
Widget.py(1441):                               self.mousePos.x() - self.mousePressPose.x(),
Widget.py(1442):                               self.mousePos.y() - self.mousePressPose.y())
Widget.py(1443):             self.rubber_rect.setRect(r.normalized())
Widget.py(1445):         super(GraphWidget, self).mouseMoveEvent(event)
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: Widget, funcname: mouseReleaseEvent
Widget.py(1498):         self.released_item = self.itemAt(event.pos())
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
Widget.py(1499):         self.setDragMode(self.NoDrag)
Widget.py(1500):         self._resize_group_mode = False
Widget.py(1501):         self.viewport().setCursor(QtCore.Qt.ArrowCursor)
Widget.py(1502):         modifiers = event.modifiers()
Widget.py(1503):         if self.released_item and not hasattr(self.released_item, 'non_selectable'):
Widget.py(1504):             if isinstance(self.released_item, CommentNode):
Widget.py(1513):         for n in self.nodes:
Widget.py(1514):             n.setFlag(QtGui.QGraphicsItem.ItemIsMovable)
Widget.py(1513):         for n in self.nodes:
Widget.py(1516):         if event.button() == QtCore.Qt.RightButton:
Widget.py(1518):         if self._draw_real_time_line:
Widget.py(1522):         if self._is_rubber_band_selection:
Widget.py(1523):             self._is_rubber_band_selection = False
Widget.py(1524):             [i.setSelected(True) for i in self.rubber_rect.collidingItems()]
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: Port, funcname: shape
Port.py(73):         path = QtGui.QPainterPath()
Port.py(74):         path.addEllipse(self.boundingRect())
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
Port.py(75):         return path
 --- modulename: Port, funcname: shape
Port.py(73):         path = QtGui.QPainterPath()
Port.py(74):         path.addEllipse(self.boundingRect())
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
Port.py(75):         return path
 --- modulename: Port, funcname: shape
Port.py(73):         path = QtGui.QPainterPath()
Port.py(74):         path.addEllipse(self.boundingRect())
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
Port.py(75):         return path
Widget.py(1525):             self.remove_item_by_name(self.rubber_rect.name)
 --- modulename: Widget, funcname: remove_item_by_name
Widget.py(1494):         [self.scene().removeItem(i) for i in self.scene().items() if hasattr(i, 'name') and i.name == name]
Widget.py(1494):         [self.scene().removeItem(i) for i in self.scene().items() if hasattr(i, 'name') and i.name == name]
Widget.py(1494):         [self.scene().removeItem(i) for i in self.scene().items() if hasattr(i, 'name') and i.name == name]
Widget.py(1494):         [self.scene().removeItem(i) for i in self.scene().items() if hasattr(i, 'name') and i.name == name]
Widget.py(1494):         [self.scene().removeItem(i) for i in self.scene().items() if hasattr(i, 'name') and i.name == name]
Widget.py(1494):         [self.scene().removeItem(i) for i in self.scene().items() if hasattr(i, 'name') and i.name == name]
Widget.py(1494):         [self.scene().removeItem(i) for i in self.scene().items() if hasattr(i, 'name') and i.name == name]
Widget.py(1494):         [self.scene().removeItem(i) for i in self.scene().items() if hasattr(i, 'name') and i.name == name]
Widget.py(1494):         [self.scene().removeItem(i) for i in self.scene().items() if hasattr(i, 'name') and i.name == name]
Widget.py(1494):         [self.scene().removeItem(i) for i in self.scene().items() if hasattr(i, 'name') and i.name == name]
Widget.py(1494):         [self.scene().removeItem(i) for i in self.scene().items() if hasattr(i, 'name') and i.name == name]
Widget.py(1494):         [self.scene().removeItem(i) for i in self.scene().items() if hasattr(i, 'name') and i.name == name]
Widget.py(1494):         [self.scene().removeItem(i) for i in self.scene().items() if hasattr(i, 'name') and i.name == name]
Widget.py(1526):         if event.button() == QtCore.Qt.RightButton:
Widget.py(1528):         p_itm = self.pressed_item
Widget.py(1529):         r_itm = self.released_item
Widget.py(1530):         do_connect = True
Widget.py(1531):         for i in [p_itm, r_itm]:
Widget.py(1532):             if not i:
Widget.py(1533):                 do_connect = False
Widget.py(1534):                 break
Widget.py(1541):         if p_itm and r_itm:
Widget.py(1548):         if do_connect:
Widget.py(1550):         selected_nodes = self.selected_nodes()
 --- modulename: Widget, funcname: selected_nodes
Widget.py(1268):         return [i for i in self.nodes if i.isSelected()]
Widget.py(1268):         return [i for i in self.nodes if i.isSelected()]
Widget.py(1551):         if len(selected_nodes) != 0:
Widget.py(1554):             clearLayout(self.parent.PropertiesformLayout)
 --- modulename: Widget, funcname: clearLayout
Widget.py(39):     while layout.count():
Widget.py(40):         child = layout.takeAt(0)
Widget.py(41):         if child.widget() is not None:
Widget.py(42):             child.widget().deleteLater()
Widget.py(39):     while layout.count():
Widget.py(40):         child = layout.takeAt(0)
Widget.py(41):         if child.widget() is not None:
Widget.py(42):             child.widget().deleteLater()
Widget.py(39):     while layout.count():
Widget.py(40):         child = layout.takeAt(0)
Widget.py(41):         if child.widget() is not None:
Widget.py(42):             child.widget().deleteLater()
Widget.py(39):     while layout.count():
Widget.py(40):         child = layout.takeAt(0)
Widget.py(41):         if child.widget() is not None:
Widget.py(42):             child.widget().deleteLater()
Widget.py(39):     while layout.count():
Widget.py(40):         child = layout.takeAt(0)
Widget.py(41):         if child.widget() is not None:
Widget.py(42):             child.widget().deleteLater()
Widget.py(39):     while layout.count():
Widget.py(40):         child = layout.takeAt(0)
Widget.py(41):         if child.widget() is not None:
Widget.py(42):             child.widget().deleteLater()
Widget.py(39):     while layout.count():
Widget.py(40):         child = layout.takeAt(0)
Widget.py(41):         if child.widget() is not None:
Widget.py(42):             child.widget().deleteLater()
Widget.py(39):     while layout.count():
Widget.py(40):         child = layout.takeAt(0)
Widget.py(41):         if child.widget() is not None:
Widget.py(42):             child.widget().deleteLater()
Widget.py(39):     while layout.count():
Widget.py(40):         child = layout.takeAt(0)
Widget.py(41):         if child.widget() is not None:
Widget.py(42):             child.widget().deleteLater()
Widget.py(39):     while layout.count():
Widget.py(40):         child = layout.takeAt(0)
Widget.py(41):         if child.widget() is not None:
Widget.py(42):             child.widget().deleteLater()
Widget.py(39):     while layout.count():
Widget.py(40):         child = layout.takeAt(0)
Widget.py(41):         if child.widget() is not None:
Widget.py(42):             child.widget().deleteLater()
Widget.py(39):     while layout.count():
Widget.py(40):         child = layout.takeAt(0)
Widget.py(41):         if child.widget() is not None:
Widget.py(42):             child.widget().deleteLater()
Widget.py(39):     while layout.count():
Widget.py(40):         child = layout.takeAt(0)
Widget.py(41):         if child.widget() is not None:
Widget.py(42):             child.widget().deleteLater()
Widget.py(39):     while layout.count():
Widget.py(40):         child = layout.takeAt(0)
Widget.py(41):         if child.widget() is not None:
Widget.py(42):             child.widget().deleteLater()
Widget.py(39):     while layout.count():
Widget.py(1556):         super(GraphWidget, self).mouseReleaseEvent(event)
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: Widget, funcname: mouseMoveEvent
Widget.py(1402):         self.mousePos = self.mapToScene(event.pos())
Widget.py(1404):         if self._resize_group_mode:
Widget.py(1417):         if self._draw_real_time_line:
Widget.py(1434):         if self._is_rubber_band_selection:
Widget.py(1445):         super(GraphWidget, self).mouseMoveEvent(event)
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Widget, funcname: _tick_executor
Widget.py(988):         for foo in self._tick_functions:
 --- modulename: Widget, funcname: mouseMoveEvent
Widget.py(1402):         self.mousePos = self.mapToScene(event.pos())
Widget.py(1404):         if self._resize_group_mode:
Widget.py(1417):         if self._draw_real_time_line:
Widget.py(1434):         if self._is_rubber_band_selection:
Widget.py(1445):         super(GraphWidget, self).mouseMoveEvent(event)
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Widget, funcname: mouseMoveEvent
Widget.py(1402):         self.mousePos = self.mapToScene(event.pos())
Widget.py(1404):         if self._resize_group_mode:
Widget.py(1417):         if self._draw_real_time_line:
Widget.py(1434):         if self._is_rubber_band_selection:
Widget.py(1445):         super(GraphWidget, self).mouseMoveEvent(event)
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Widget, funcname: mouseMoveEvent
Widget.py(1402):         self.mousePos = self.mapToScene(event.pos())
Widget.py(1404):         if self._resize_group_mode:
Widget.py(1417):         if self._draw_real_time_line:
Widget.py(1434):         if self._is_rubber_band_selection:
Widget.py(1445):         super(GraphWidget, self).mouseMoveEvent(event)
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Widget, funcname: mouseMoveEvent
Widget.py(1402):         self.mousePos = self.mapToScene(event.pos())
Widget.py(1404):         if self._resize_group_mode:
Widget.py(1417):         if self._draw_real_time_line:
Widget.py(1434):         if self._is_rubber_band_selection:
Widget.py(1445):         super(GraphWidget, self).mouseMoveEvent(event)
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Widget, funcname: mouseMoveEvent
Widget.py(1402):         self.mousePos = self.mapToScene(event.pos())
Widget.py(1404):         if self._resize_group_mode:
Widget.py(1417):         if self._draw_real_time_line:
Widget.py(1434):         if self._is_rubber_band_selection:
Widget.py(1445):         super(GraphWidget, self).mouseMoveEvent(event)
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Widget, funcname: mouseMoveEvent
Widget.py(1402):         self.mousePos = self.mapToScene(event.pos())
Widget.py(1404):         if self._resize_group_mode:
Widget.py(1417):         if self._draw_real_time_line:
Widget.py(1434):         if self._is_rubber_band_selection:
Widget.py(1445):         super(GraphWidget, self).mouseMoveEvent(event)
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Widget, funcname: mouseMoveEvent
Widget.py(1402):         self.mousePos = self.mapToScene(event.pos())
Widget.py(1404):         if self._resize_group_mode:
Widget.py(1417):         if self._draw_real_time_line:
Widget.py(1434):         if self._is_rubber_band_selection:
Widget.py(1445):         super(GraphWidget, self).mouseMoveEvent(event)
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Widget, funcname: mouseMoveEvent
Widget.py(1402):         self.mousePos = self.mapToScene(event.pos())
Widget.py(1404):         if self._resize_group_mode:
Widget.py(1417):         if self._draw_real_time_line:
Widget.py(1434):         if self._is_rubber_band_selection:
Widget.py(1445):         super(GraphWidget, self).mouseMoveEvent(event)
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Widget, funcname: _tick_executor
Widget.py(988):         for foo in self._tick_functions:
 --- modulename: Widget, funcname: mouseMoveEvent
Widget.py(1402):         self.mousePos = self.mapToScene(event.pos())
Widget.py(1404):         if self._resize_group_mode:
Widget.py(1417):         if self._draw_real_time_line:
Widget.py(1434):         if self._is_rubber_band_selection:
Widget.py(1445):         super(GraphWidget, self).mouseMoveEvent(event)
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Widget, funcname: mouseMoveEvent
Widget.py(1402):         self.mousePos = self.mapToScene(event.pos())
Widget.py(1404):         if self._resize_group_mode:
Widget.py(1417):         if self._draw_real_time_line:
Widget.py(1434):         if self._is_rubber_band_selection:
Widget.py(1445):         super(GraphWidget, self).mouseMoveEvent(event)
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Widget, funcname: mouseMoveEvent
Widget.py(1402):         self.mousePos = self.mapToScene(event.pos())
Widget.py(1404):         if self._resize_group_mode:
Widget.py(1417):         if self._draw_real_time_line:
Widget.py(1434):         if self._is_rubber_band_selection:
Widget.py(1445):         super(GraphWidget, self).mouseMoveEvent(event)
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Widget, funcname: mouseMoveEvent
Widget.py(1402):         self.mousePos = self.mapToScene(event.pos())
Widget.py(1404):         if self._resize_group_mode:
Widget.py(1417):         if self._draw_real_time_line:
Widget.py(1434):         if self._is_rubber_band_selection:
Widget.py(1445):         super(GraphWidget, self).mouseMoveEvent(event)
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Widget, funcname: mouseMoveEvent
Widget.py(1402):         self.mousePos = self.mapToScene(event.pos())
Widget.py(1404):         if self._resize_group_mode:
Widget.py(1417):         if self._draw_real_time_line:
Widget.py(1434):         if self._is_rubber_band_selection:
Widget.py(1445):         super(GraphWidget, self).mouseMoveEvent(event)
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Widget, funcname: mouseMoveEvent
Widget.py(1402):         self.mousePos = self.mapToScene(event.pos())
Widget.py(1404):         if self._resize_group_mode:
Widget.py(1417):         if self._draw_real_time_line:
Widget.py(1434):         if self._is_rubber_band_selection:
Widget.py(1445):         super(GraphWidget, self).mouseMoveEvent(event)
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Widget, funcname: mouseMoveEvent
Widget.py(1402):         self.mousePos = self.mapToScene(event.pos())
Widget.py(1404):         if self._resize_group_mode:
Widget.py(1417):         if self._draw_real_time_line:
Widget.py(1434):         if self._is_rubber_band_selection:
Widget.py(1445):         super(GraphWidget, self).mouseMoveEvent(event)
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Widget, funcname: _tick_executor
Widget.py(988):         for foo in self._tick_functions:
 --- modulename: Widget, funcname: mouseMoveEvent
Widget.py(1402):         self.mousePos = self.mapToScene(event.pos())
Widget.py(1404):         if self._resize_group_mode:
Widget.py(1417):         if self._draw_real_time_line:
Widget.py(1434):         if self._is_rubber_band_selection:
Widget.py(1445):         super(GraphWidget, self).mouseMoveEvent(event)
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Widget, funcname: mouseMoveEvent
Widget.py(1402):         self.mousePos = self.mapToScene(event.pos())
Widget.py(1404):         if self._resize_group_mode:
Widget.py(1417):         if self._draw_real_time_line:
Widget.py(1434):         if self._is_rubber_band_selection:
Widget.py(1445):         super(GraphWidget, self).mouseMoveEvent(event)
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Widget, funcname: mouseMoveEvent
Widget.py(1402):         self.mousePos = self.mapToScene(event.pos())
Widget.py(1404):         if self._resize_group_mode:
Widget.py(1417):         if self._draw_real_time_line:
Widget.py(1434):         if self._is_rubber_band_selection:
Widget.py(1445):         super(GraphWidget, self).mouseMoveEvent(event)
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Widget, funcname: mouseMoveEvent
Widget.py(1402):         self.mousePos = self.mapToScene(event.pos())
Widget.py(1404):         if self._resize_group_mode:
Widget.py(1417):         if self._draw_real_time_line:
Widget.py(1434):         if self._is_rubber_band_selection:
Widget.py(1445):         super(GraphWidget, self).mouseMoveEvent(event)
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Widget, funcname: mouseMoveEvent
Widget.py(1402):         self.mousePos = self.mapToScene(event.pos())
Widget.py(1404):         if self._resize_group_mode:
Widget.py(1417):         if self._draw_real_time_line:
Widget.py(1434):         if self._is_rubber_band_selection:
Widget.py(1445):         super(GraphWidget, self).mouseMoveEvent(event)
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Widget, funcname: mouseMoveEvent
Widget.py(1402):         self.mousePos = self.mapToScene(event.pos())
Widget.py(1404):         if self._resize_group_mode:
Widget.py(1417):         if self._draw_real_time_line:
Widget.py(1434):         if self._is_rubber_band_selection:
Widget.py(1445):         super(GraphWidget, self).mouseMoveEvent(event)
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Widget, funcname: mouseMoveEvent
Widget.py(1402):         self.mousePos = self.mapToScene(event.pos())
Widget.py(1404):         if self._resize_group_mode:
Widget.py(1417):         if self._draw_real_time_line:
Widget.py(1434):         if self._is_rubber_band_selection:
Widget.py(1445):         super(GraphWidget, self).mouseMoveEvent(event)
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Widget, funcname: mouseMoveEvent
Widget.py(1402):         self.mousePos = self.mapToScene(event.pos())
Widget.py(1404):         if self._resize_group_mode:
Widget.py(1417):         if self._draw_real_time_line:
Widget.py(1434):         if self._is_rubber_band_selection:
Widget.py(1445):         super(GraphWidget, self).mouseMoveEvent(event)
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Widget, funcname: _tick_executor
Widget.py(988):         for foo in self._tick_functions:
 --- modulename: Widget, funcname: mouseMoveEvent
Widget.py(1402):         self.mousePos = self.mapToScene(event.pos())
Widget.py(1404):         if self._resize_group_mode:
Widget.py(1417):         if self._draw_real_time_line:
Widget.py(1434):         if self._is_rubber_band_selection:
Widget.py(1445):         super(GraphWidget, self).mouseMoveEvent(event)
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Widget, funcname: mouseMoveEvent
Widget.py(1402):         self.mousePos = self.mapToScene(event.pos())
Widget.py(1404):         if self._resize_group_mode:
Widget.py(1417):         if self._draw_real_time_line:
Widget.py(1434):         if self._is_rubber_band_selection:
Widget.py(1445):         super(GraphWidget, self).mouseMoveEvent(event)
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Widget, funcname: mouseMoveEvent
Widget.py(1402):         self.mousePos = self.mapToScene(event.pos())
Widget.py(1404):         if self._resize_group_mode:
Widget.py(1417):         if self._draw_real_time_line:
Widget.py(1434):         if self._is_rubber_band_selection:
Widget.py(1445):         super(GraphWidget, self).mouseMoveEvent(event)
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Widget, funcname: mousePressEvent
Widget.py(1371):         modifiers = event.modifiers()
Widget.py(1372):         self.pressed_item = self.itemAt(event.pos())
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
Widget.py(1373):         if self.pressed_item and hasattr(self.pressed_item, 'mark'):
Widget.py(1376):         if not self.pressed_item:
Widget.py(1379):         if self.pressed_item:
Widget.py(1380):             if hasattr(self.pressed_item, 'object_type') and not hasattr(self.pressed_item, 'non_selectable'):
Widget.py(1381):                 if self.pressed_item.object_type == AGObjectTypes.tPort:
Widget.py(1385):         self.mousePressPose = self.mapToScene(event.pos())
Widget.py(1386):         if self.pressed_item and event.button() == QtCore.Qt.LeftButton:
Widget.py(1387):             if hasattr(self.pressed_item, 'object_type'):
Widget.py(1388):                 if self.pressed_item.object_type == AGObjectTypes.tPort:
Widget.py(1391):         if event.button() == QtCore.Qt.RightButton:
Widget.py(1393):         if all([event.button() == QtCore.Qt.LeftButton, modifiers == QtCore.Qt.AltModifier]):
Widget.py(1395):         if all([event.button() == QtCore.Qt.LeftButton,
Widget.py(1396):                 modifiers == QtCore.Qt.NoModifier or modifiers == QtCore.Qt.ControlModifier | QtCore.Qt.ShiftModifier]):
Widget.py(1397):             if not self.pressed_item or hasattr(self.pressed_item, 'non_selectable'):
Widget.py(1399):         super(GraphWidget, self).mousePressEvent(event)
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: BaseNode, funcname: mousePressEvent
BaseNode.py(243):         self.update()
BaseNode.py(244):         self.setCursor(QtCore.Qt.ClosedHandCursor)
 --- modulename: BaseNode, funcname: itemChange
BaseNode.py(147):         if change == self.ItemPositionChange:
BaseNode.py(152):         return QtGui.QGraphicsItem.itemChange(self, change, value)
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: BaseNode, funcname: itemChange
BaseNode.py(147):         if change == self.ItemPositionChange:
BaseNode.py(152):         return QtGui.QGraphicsItem.itemChange(self, change, value)
BaseNode.py(245):         QtGui.QGraphicsItem.mousePressEvent(self, event)
 --- modulename: BaseNode, funcname: itemChange
BaseNode.py(147):         if change == self.ItemPositionChange:
BaseNode.py(152):         return QtGui.QGraphicsItem.itemChange(self, change, value)
 --- modulename: Widget, funcname: OnSelectionChanged
Widget.py(210):         selected_nodes = []
Widget.py(211):         for n in self.parent().get_nodes():
 --- modulename: Widget, funcname: get_nodes
Widget.py(1026):         ls = []
Widget.py(1027):         for i in self.scene().items():
Widget.py(1028):             if hasattr(i, 'object_type'):
Widget.py(1027):         for i in self.scene().items():
Widget.py(1028):             if hasattr(i, 'object_type'):
Widget.py(1029):                 if i.object_type == AGObjectTypes.tNode:
Widget.py(1027):         for i in self.scene().items():
Widget.py(1028):             if hasattr(i, 'object_type'):
Widget.py(1029):                 if i.object_type == AGObjectTypes.tNode:
Widget.py(1030):                     if i.isVisible():
Widget.py(1031):                         ls.append(i)
Widget.py(1027):         for i in self.scene().items():
Widget.py(1028):             if hasattr(i, 'object_type'):
Widget.py(1029):                 if i.object_type == AGObjectTypes.tNode:
Widget.py(1027):         for i in self.scene().items():
Widget.py(1028):             if hasattr(i, 'object_type'):
Widget.py(1027):         for i in self.scene().items():
Widget.py(1028):             if hasattr(i, 'object_type'):
Widget.py(1027):         for i in self.scene().items():
Widget.py(1028):             if hasattr(i, 'object_type'):
Widget.py(1027):         for i in self.scene().items():
Widget.py(1028):             if hasattr(i, 'object_type'):
Widget.py(1027):         for i in self.scene().items():
Widget.py(1028):             if hasattr(i, 'object_type'):
Widget.py(1029):                 if i.object_type == AGObjectTypes.tNode:
Widget.py(1027):         for i in self.scene().items():
Widget.py(1028):             if hasattr(i, 'object_type'):
Widget.py(1029):                 if i.object_type == AGObjectTypes.tNode:
Widget.py(1027):         for i in self.scene().items():
Widget.py(1028):             if hasattr(i, 'object_type'):
Widget.py(1029):                 if i.object_type == AGObjectTypes.tNode:
Widget.py(1027):         for i in self.scene().items():
Widget.py(1032):         return ls
Widget.py(212):             if n.isSelected():
Widget.py(213):                 selected_nodes.append(n.name)
Widget.py(211):         for n in self.parent().get_nodes():
Widget.py(214):         if len(selected_nodes) == 0:
Widget.py(217):         cmd = "select {0}nl ".format(FLAG_SYMBOL)
Widget.py(218):         for n in selected_nodes:
Widget.py(219):             cmd += n
Widget.py(220):             cmd += " "
Widget.py(218):         for n in selected_nodes:
Widget.py(221):         self.parent().write_to_console(cmd[:-1])
 --- modulename: Widget, funcname: write_to_console
Widget.py(1987):         if not force:
Widget.py(1988):             if not self.is_debug():
 --- modulename: AbstractGraph, funcname: is_debug
AbstractGraph.py(223):         return self._debug
Widget.py(1989):                 return
 --- modulename: BaseNode, funcname: itemChange
BaseNode.py(147):         if change == self.ItemPositionChange:
BaseNode.py(152):         return QtGui.QGraphicsItem.itemChange(self, change, value)
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: BaseNode, funcname: paint
BaseNode.py(199):         painter.setPen(QtCore.Qt.NoPen)
BaseNode.py(200):         painter.setBrush(QtCore.Qt.darkGray)
BaseNode.py(202):         if self.options:
BaseNode.py(203):             color = self.opt_node_base_color
BaseNode.py(206):         if self.isSelected():
BaseNode.py(207):             color = color.lighter(150)
BaseNode.py(209):         linearGrad = QtGui.QRadialGradient(QtCore.QPointF(40, 40), 300)
BaseNode.py(210):         linearGrad.setColorAt(0, color)
BaseNode.py(211):         linearGrad.setColorAt(1, color.lighter(180))
BaseNode.py(212):         br = QtGui.QBrush(linearGrad)
BaseNode.py(213):         painter.setBrush(br)
BaseNode.py(214):         pen = QtGui.QPen(QtCore.Qt.black, 0.5)
BaseNode.py(215):         if option.state & QtGui.QStyle.State_Selected:
BaseNode.py(216):             if self.options:
BaseNode.py(217):                 pen.setColor(self.opt_selected_pen_color)
BaseNode.py(218):                 pen.setStyle(self.opt_pen_selected_type)
BaseNode.py(222):         painter.setPen(pen)
BaseNode.py(223):         painter.drawRoundedRect(self.sizes[0], self.sizes[1],
BaseNode.py(224):                                 self.childrenBoundingRect().width(), self.nodeMainGWidget.boundingRect().height(),
BaseNode.py(225):                                 self.sizes[4], self.sizes[5])
 --- modulename: BaseNode, funcname: paint
BaseNode.py(39):         if self.options:
BaseNode.py(40):             painter.fillRect(option.rect, QtGui.QColor(self.opt_bg_color))
BaseNode.py(43):         super(NodeName, self).paint(painter, option, widget)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Widget, funcname: _tick_executor
Widget.py(988):         for foo in self._tick_functions:
 --- modulename: Widget, funcname: mouseMoveEvent
Widget.py(1402):         self.mousePos = self.mapToScene(event.pos())
Widget.py(1404):         if self._resize_group_mode:
Widget.py(1417):         if self._draw_real_time_line:
Widget.py(1434):         if self._is_rubber_band_selection:
Widget.py(1445):         super(GraphWidget, self).mouseMoveEvent(event)
 --- modulename: BaseNode, funcname: itemChange
BaseNode.py(147):         if change == self.ItemPositionChange:
BaseNode.py(149):             value.setX(roundup(value.x() - self.graph().grid_size + self.graph().grid_size / 3.0, self.graph().grid_size))
 --- modulename: AGraphCommon, funcname: roundup
AGraphCommon.py(11):     return int(math.ceil(x / to)) * to
BaseNode.py(150):             value.setY(roundup(value.y() - self.graph().grid_size + self.graph().grid_size / 3.0, self.graph().grid_size))
 --- modulename: AGraphCommon, funcname: roundup
AGraphCommon.py(11):     return int(math.ceil(x / to)) * to
BaseNode.py(151):             return value
 --- modulename: Widget, funcname: mouseMoveEvent
Widget.py(1402):         self.mousePos = self.mapToScene(event.pos())
Widget.py(1404):         if self._resize_group_mode:
Widget.py(1417):         if self._draw_real_time_line:
Widget.py(1434):         if self._is_rubber_band_selection:
Widget.py(1445):         super(GraphWidget, self).mouseMoveEvent(event)
 --- modulename: BaseNode, funcname: itemChange
BaseNode.py(147):         if change == self.ItemPositionChange:
BaseNode.py(149):             value.setX(roundup(value.x() - self.graph().grid_size + self.graph().grid_size / 3.0, self.graph().grid_size))
 --- modulename: AGraphCommon, funcname: roundup
AGraphCommon.py(11):     return int(math.ceil(x / to)) * to
BaseNode.py(150):             value.setY(roundup(value.y() - self.graph().grid_size + self.graph().grid_size / 3.0, self.graph().grid_size))
 --- modulename: AGraphCommon, funcname: roundup
AGraphCommon.py(11):     return int(math.ceil(x / to)) * to
BaseNode.py(151):             return value
 --- modulename: Widget, funcname: mouseMoveEvent
Widget.py(1402):         self.mousePos = self.mapToScene(event.pos())
Widget.py(1404):         if self._resize_group_mode:
Widget.py(1417):         if self._draw_real_time_line:
Widget.py(1434):         if self._is_rubber_band_selection:
Widget.py(1445):         super(GraphWidget, self).mouseMoveEvent(event)
 --- modulename: BaseNode, funcname: itemChange
BaseNode.py(147):         if change == self.ItemPositionChange:
BaseNode.py(149):             value.setX(roundup(value.x() - self.graph().grid_size + self.graph().grid_size / 3.0, self.graph().grid_size))
 --- modulename: AGraphCommon, funcname: roundup
AGraphCommon.py(11):     return int(math.ceil(x / to)) * to
BaseNode.py(150):             value.setY(roundup(value.y() - self.graph().grid_size + self.graph().grid_size / 3.0, self.graph().grid_size))
 --- modulename: AGraphCommon, funcname: roundup
AGraphCommon.py(11):     return int(math.ceil(x / to)) * to
BaseNode.py(151):             return value
 --- modulename: BaseNode, funcname: itemChange
BaseNode.py(147):         if change == self.ItemPositionChange:
BaseNode.py(152):         return QtGui.QGraphicsItem.itemChange(self, change, value)
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: BaseNode, funcname: paint
BaseNode.py(199):         painter.setPen(QtCore.Qt.NoPen)
BaseNode.py(200):         painter.setBrush(QtCore.Qt.darkGray)
BaseNode.py(202):         if self.options:
BaseNode.py(203):             color = self.opt_node_base_color
BaseNode.py(206):         if self.isSelected():
BaseNode.py(207):             color = color.lighter(150)
BaseNode.py(209):         linearGrad = QtGui.QRadialGradient(QtCore.QPointF(40, 40), 300)
BaseNode.py(210):         linearGrad.setColorAt(0, color)
BaseNode.py(211):         linearGrad.setColorAt(1, color.lighter(180))
BaseNode.py(212):         br = QtGui.QBrush(linearGrad)
BaseNode.py(213):         painter.setBrush(br)
BaseNode.py(214):         pen = QtGui.QPen(QtCore.Qt.black, 0.5)
BaseNode.py(215):         if option.state & QtGui.QStyle.State_Selected:
BaseNode.py(216):             if self.options:
BaseNode.py(217):                 pen.setColor(self.opt_selected_pen_color)
BaseNode.py(218):                 pen.setStyle(self.opt_pen_selected_type)
BaseNode.py(222):         painter.setPen(pen)
BaseNode.py(223):         painter.drawRoundedRect(self.sizes[0], self.sizes[1],
BaseNode.py(224):                                 self.childrenBoundingRect().width(), self.nodeMainGWidget.boundingRect().height(),
BaseNode.py(225):                                 self.sizes[4], self.sizes[5])
 --- modulename: BaseNode, funcname: paint
BaseNode.py(39):         if self.options:
BaseNode.py(40):             painter.fillRect(option.rect, QtGui.QColor(self.opt_bg_color))
BaseNode.py(43):         super(NodeName, self).paint(painter, option, widget)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Widget, funcname: mouseMoveEvent
Widget.py(1402):         self.mousePos = self.mapToScene(event.pos())
Widget.py(1404):         if self._resize_group_mode:
Widget.py(1417):         if self._draw_real_time_line:
Widget.py(1434):         if self._is_rubber_band_selection:
Widget.py(1445):         super(GraphWidget, self).mouseMoveEvent(event)
 --- modulename: BaseNode, funcname: itemChange
BaseNode.py(147):         if change == self.ItemPositionChange:
BaseNode.py(149):             value.setX(roundup(value.x() - self.graph().grid_size + self.graph().grid_size / 3.0, self.graph().grid_size))
 --- modulename: AGraphCommon, funcname: roundup
AGraphCommon.py(11):     return int(math.ceil(x / to)) * to
BaseNode.py(150):             value.setY(roundup(value.y() - self.graph().grid_size + self.graph().grid_size / 3.0, self.graph().grid_size))
 --- modulename: AGraphCommon, funcname: roundup
AGraphCommon.py(11):     return int(math.ceil(x / to)) * to
BaseNode.py(151):             return value
 --- modulename: Widget, funcname: mouseMoveEvent
Widget.py(1402):         self.mousePos = self.mapToScene(event.pos())
Widget.py(1404):         if self._resize_group_mode:
Widget.py(1417):         if self._draw_real_time_line:
Widget.py(1434):         if self._is_rubber_band_selection:
Widget.py(1445):         super(GraphWidget, self).mouseMoveEvent(event)
 --- modulename: BaseNode, funcname: itemChange
BaseNode.py(147):         if change == self.ItemPositionChange:
BaseNode.py(149):             value.setX(roundup(value.x() - self.graph().grid_size + self.graph().grid_size / 3.0, self.graph().grid_size))
 --- modulename: AGraphCommon, funcname: roundup
AGraphCommon.py(11):     return int(math.ceil(x / to)) * to
BaseNode.py(150):             value.setY(roundup(value.y() - self.graph().grid_size + self.graph().grid_size / 3.0, self.graph().grid_size))
 --- modulename: AGraphCommon, funcname: roundup
AGraphCommon.py(11):     return int(math.ceil(x / to)) * to
BaseNode.py(151):             return value
 --- modulename: Widget, funcname: _tick_executor
Widget.py(988):         for foo in self._tick_functions:
 --- modulename: Widget, funcname: mouseMoveEvent
Widget.py(1402):         self.mousePos = self.mapToScene(event.pos())
Widget.py(1404):         if self._resize_group_mode:
Widget.py(1417):         if self._draw_real_time_line:
Widget.py(1434):         if self._is_rubber_band_selection:
Widget.py(1445):         super(GraphWidget, self).mouseMoveEvent(event)
 --- modulename: BaseNode, funcname: itemChange
BaseNode.py(147):         if change == self.ItemPositionChange:
BaseNode.py(149):             value.setX(roundup(value.x() - self.graph().grid_size + self.graph().grid_size / 3.0, self.graph().grid_size))
 --- modulename: AGraphCommon, funcname: roundup
AGraphCommon.py(11):     return int(math.ceil(x / to)) * to
BaseNode.py(150):             value.setY(roundup(value.y() - self.graph().grid_size + self.graph().grid_size / 3.0, self.graph().grid_size))
 --- modulename: AGraphCommon, funcname: roundup
AGraphCommon.py(11):     return int(math.ceil(x / to)) * to
BaseNode.py(151):             return value
 --- modulename: Widget, funcname: mouseMoveEvent
Widget.py(1402):         self.mousePos = self.mapToScene(event.pos())
Widget.py(1404):         if self._resize_group_mode:
Widget.py(1417):         if self._draw_real_time_line:
Widget.py(1434):         if self._is_rubber_band_selection:
Widget.py(1445):         super(GraphWidget, self).mouseMoveEvent(event)
 --- modulename: BaseNode, funcname: itemChange
BaseNode.py(147):         if change == self.ItemPositionChange:
BaseNode.py(149):             value.setX(roundup(value.x() - self.graph().grid_size + self.graph().grid_size / 3.0, self.graph().grid_size))
 --- modulename: AGraphCommon, funcname: roundup
AGraphCommon.py(11):     return int(math.ceil(x / to)) * to
BaseNode.py(150):             value.setY(roundup(value.y() - self.graph().grid_size + self.graph().grid_size / 3.0, self.graph().grid_size))
 --- modulename: AGraphCommon, funcname: roundup
AGraphCommon.py(11):     return int(math.ceil(x / to)) * to
BaseNode.py(151):             return value
 --- modulename: Widget, funcname: mouseMoveEvent
Widget.py(1402):         self.mousePos = self.mapToScene(event.pos())
Widget.py(1404):         if self._resize_group_mode:
Widget.py(1417):         if self._draw_real_time_line:
Widget.py(1434):         if self._is_rubber_band_selection:
Widget.py(1445):         super(GraphWidget, self).mouseMoveEvent(event)
 --- modulename: BaseNode, funcname: itemChange
BaseNode.py(147):         if change == self.ItemPositionChange:
BaseNode.py(149):             value.setX(roundup(value.x() - self.graph().grid_size + self.graph().grid_size / 3.0, self.graph().grid_size))
 --- modulename: AGraphCommon, funcname: roundup
AGraphCommon.py(11):     return int(math.ceil(x / to)) * to
BaseNode.py(150):             value.setY(roundup(value.y() - self.graph().grid_size + self.graph().grid_size / 3.0, self.graph().grid_size))
 --- modulename: AGraphCommon, funcname: roundup
AGraphCommon.py(11):     return int(math.ceil(x / to)) * to
BaseNode.py(151):             return value
 --- modulename: BaseNode, funcname: itemChange
BaseNode.py(147):         if change == self.ItemPositionChange:
BaseNode.py(152):         return QtGui.QGraphicsItem.itemChange(self, change, value)
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: BaseNode, funcname: paint
BaseNode.py(199):         painter.setPen(QtCore.Qt.NoPen)
BaseNode.py(200):         painter.setBrush(QtCore.Qt.darkGray)
BaseNode.py(202):         if self.options:
BaseNode.py(203):             color = self.opt_node_base_color
BaseNode.py(206):         if self.isSelected():
BaseNode.py(207):             color = color.lighter(150)
BaseNode.py(209):         linearGrad = QtGui.QRadialGradient(QtCore.QPointF(40, 40), 300)
BaseNode.py(210):         linearGrad.setColorAt(0, color)
BaseNode.py(211):         linearGrad.setColorAt(1, color.lighter(180))
BaseNode.py(212):         br = QtGui.QBrush(linearGrad)
BaseNode.py(213):         painter.setBrush(br)
BaseNode.py(214):         pen = QtGui.QPen(QtCore.Qt.black, 0.5)
BaseNode.py(215):         if option.state & QtGui.QStyle.State_Selected:
BaseNode.py(216):             if self.options:
BaseNode.py(217):                 pen.setColor(self.opt_selected_pen_color)
BaseNode.py(218):                 pen.setStyle(self.opt_pen_selected_type)
BaseNode.py(222):         painter.setPen(pen)
BaseNode.py(223):         painter.drawRoundedRect(self.sizes[0], self.sizes[1],
BaseNode.py(224):                                 self.childrenBoundingRect().width(), self.nodeMainGWidget.boundingRect().height(),
BaseNode.py(225):                                 self.sizes[4], self.sizes[5])
 --- modulename: BaseNode, funcname: paint
BaseNode.py(39):         if self.options:
BaseNode.py(40):             painter.fillRect(option.rect, QtGui.QColor(self.opt_bg_color))
BaseNode.py(43):         super(NodeName, self).paint(painter, option, widget)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Widget, funcname: mouseMoveEvent
Widget.py(1402):         self.mousePos = self.mapToScene(event.pos())
Widget.py(1404):         if self._resize_group_mode:
Widget.py(1417):         if self._draw_real_time_line:
Widget.py(1434):         if self._is_rubber_band_selection:
Widget.py(1445):         super(GraphWidget, self).mouseMoveEvent(event)
 --- modulename: BaseNode, funcname: itemChange
BaseNode.py(147):         if change == self.ItemPositionChange:
BaseNode.py(149):             value.setX(roundup(value.x() - self.graph().grid_size + self.graph().grid_size / 3.0, self.graph().grid_size))
 --- modulename: AGraphCommon, funcname: roundup
AGraphCommon.py(11):     return int(math.ceil(x / to)) * to
BaseNode.py(150):             value.setY(roundup(value.y() - self.graph().grid_size + self.graph().grid_size / 3.0, self.graph().grid_size))
 --- modulename: AGraphCommon, funcname: roundup
AGraphCommon.py(11):     return int(math.ceil(x / to)) * to
BaseNode.py(151):             return value
 --- modulename: Widget, funcname: _tick_executor
Widget.py(988):         for foo in self._tick_functions:
 --- modulename: Widget, funcname: mouseMoveEvent
Widget.py(1402):         self.mousePos = self.mapToScene(event.pos())
Widget.py(1404):         if self._resize_group_mode:
Widget.py(1417):         if self._draw_real_time_line:
Widget.py(1434):         if self._is_rubber_band_selection:
Widget.py(1445):         super(GraphWidget, self).mouseMoveEvent(event)
 --- modulename: BaseNode, funcname: itemChange
BaseNode.py(147):         if change == self.ItemPositionChange:
BaseNode.py(149):             value.setX(roundup(value.x() - self.graph().grid_size + self.graph().grid_size / 3.0, self.graph().grid_size))
 --- modulename: AGraphCommon, funcname: roundup
AGraphCommon.py(11):     return int(math.ceil(x / to)) * to
BaseNode.py(150):             value.setY(roundup(value.y() - self.graph().grid_size + self.graph().grid_size / 3.0, self.graph().grid_size))
 --- modulename: AGraphCommon, funcname: roundup
AGraphCommon.py(11):     return int(math.ceil(x / to)) * to
BaseNode.py(151):             return value
 --- modulename: Widget, funcname: mouseMoveEvent
Widget.py(1402):         self.mousePos = self.mapToScene(event.pos())
Widget.py(1404):         if self._resize_group_mode:
Widget.py(1417):         if self._draw_real_time_line:
Widget.py(1434):         if self._is_rubber_band_selection:
Widget.py(1445):         super(GraphWidget, self).mouseMoveEvent(event)
 --- modulename: BaseNode, funcname: itemChange
BaseNode.py(147):         if change == self.ItemPositionChange:
BaseNode.py(149):             value.setX(roundup(value.x() - self.graph().grid_size + self.graph().grid_size / 3.0, self.graph().grid_size))
 --- modulename: AGraphCommon, funcname: roundup
AGraphCommon.py(11):     return int(math.ceil(x / to)) * to
BaseNode.py(150):             value.setY(roundup(value.y() - self.graph().grid_size + self.graph().grid_size / 3.0, self.graph().grid_size))
 --- modulename: AGraphCommon, funcname: roundup
AGraphCommon.py(11):     return int(math.ceil(x / to)) * to
BaseNode.py(151):             return value
 --- modulename: BaseNode, funcname: itemChange
BaseNode.py(147):         if change == self.ItemPositionChange:
BaseNode.py(152):         return QtGui.QGraphicsItem.itemChange(self, change, value)
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: BaseNode, funcname: paint
BaseNode.py(199):         painter.setPen(QtCore.Qt.NoPen)
BaseNode.py(200):         painter.setBrush(QtCore.Qt.darkGray)
BaseNode.py(202):         if self.options:
BaseNode.py(203):             color = self.opt_node_base_color
BaseNode.py(206):         if self.isSelected():
BaseNode.py(207):             color = color.lighter(150)
BaseNode.py(209):         linearGrad = QtGui.QRadialGradient(QtCore.QPointF(40, 40), 300)
BaseNode.py(210):         linearGrad.setColorAt(0, color)
BaseNode.py(211):         linearGrad.setColorAt(1, color.lighter(180))
BaseNode.py(212):         br = QtGui.QBrush(linearGrad)
BaseNode.py(213):         painter.setBrush(br)
BaseNode.py(214):         pen = QtGui.QPen(QtCore.Qt.black, 0.5)
BaseNode.py(215):         if option.state & QtGui.QStyle.State_Selected:
BaseNode.py(216):             if self.options:
BaseNode.py(217):                 pen.setColor(self.opt_selected_pen_color)
BaseNode.py(218):                 pen.setStyle(self.opt_pen_selected_type)
BaseNode.py(222):         painter.setPen(pen)
BaseNode.py(223):         painter.drawRoundedRect(self.sizes[0], self.sizes[1],
BaseNode.py(224):                                 self.childrenBoundingRect().width(), self.nodeMainGWidget.boundingRect().height(),
BaseNode.py(225):                                 self.sizes[4], self.sizes[5])
 --- modulename: BaseNode, funcname: paint
BaseNode.py(39):         if self.options:
BaseNode.py(40):             painter.fillRect(option.rect, QtGui.QColor(self.opt_bg_color))
BaseNode.py(43):         super(NodeName, self).paint(painter, option, widget)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Widget, funcname: mouseMoveEvent
Widget.py(1402):         self.mousePos = self.mapToScene(event.pos())
Widget.py(1404):         if self._resize_group_mode:
Widget.py(1417):         if self._draw_real_time_line:
Widget.py(1434):         if self._is_rubber_band_selection:
Widget.py(1445):         super(GraphWidget, self).mouseMoveEvent(event)
 --- modulename: BaseNode, funcname: itemChange
BaseNode.py(147):         if change == self.ItemPositionChange:
BaseNode.py(149):             value.setX(roundup(value.x() - self.graph().grid_size + self.graph().grid_size / 3.0, self.graph().grid_size))
 --- modulename: AGraphCommon, funcname: roundup
AGraphCommon.py(11):     return int(math.ceil(x / to)) * to
BaseNode.py(150):             value.setY(roundup(value.y() - self.graph().grid_size + self.graph().grid_size / 3.0, self.graph().grid_size))
 --- modulename: AGraphCommon, funcname: roundup
AGraphCommon.py(11):     return int(math.ceil(x / to)) * to
BaseNode.py(151):             return value
 --- modulename: Widget, funcname: mouseMoveEvent
Widget.py(1402):         self.mousePos = self.mapToScene(event.pos())
Widget.py(1404):         if self._resize_group_mode:
Widget.py(1417):         if self._draw_real_time_line:
Widget.py(1434):         if self._is_rubber_band_selection:
Widget.py(1445):         super(GraphWidget, self).mouseMoveEvent(event)
 --- modulename: BaseNode, funcname: itemChange
BaseNode.py(147):         if change == self.ItemPositionChange:
BaseNode.py(149):             value.setX(roundup(value.x() - self.graph().grid_size + self.graph().grid_size / 3.0, self.graph().grid_size))
 --- modulename: AGraphCommon, funcname: roundup
AGraphCommon.py(11):     return int(math.ceil(x / to)) * to
BaseNode.py(150):             value.setY(roundup(value.y() - self.graph().grid_size + self.graph().grid_size / 3.0, self.graph().grid_size))
 --- modulename: AGraphCommon, funcname: roundup
AGraphCommon.py(11):     return int(math.ceil(x / to)) * to
BaseNode.py(151):             return value
 --- modulename: Widget, funcname: mouseMoveEvent
Widget.py(1402):         self.mousePos = self.mapToScene(event.pos())
Widget.py(1404):         if self._resize_group_mode:
Widget.py(1417):         if self._draw_real_time_line:
Widget.py(1434):         if self._is_rubber_band_selection:
Widget.py(1445):         super(GraphWidget, self).mouseMoveEvent(event)
 --- modulename: BaseNode, funcname: itemChange
BaseNode.py(147):         if change == self.ItemPositionChange:
BaseNode.py(149):             value.setX(roundup(value.x() - self.graph().grid_size + self.graph().grid_size / 3.0, self.graph().grid_size))
 --- modulename: AGraphCommon, funcname: roundup
AGraphCommon.py(11):     return int(math.ceil(x / to)) * to
BaseNode.py(150):             value.setY(roundup(value.y() - self.graph().grid_size + self.graph().grid_size / 3.0, self.graph().grid_size))
 --- modulename: AGraphCommon, funcname: roundup
AGraphCommon.py(11):     return int(math.ceil(x / to)) * to
BaseNode.py(151):             return value
 --- modulename: Widget, funcname: mouseMoveEvent
Widget.py(1402):         self.mousePos = self.mapToScene(event.pos())
Widget.py(1404):         if self._resize_group_mode:
Widget.py(1417):         if self._draw_real_time_line:
Widget.py(1434):         if self._is_rubber_band_selection:
Widget.py(1445):         super(GraphWidget, self).mouseMoveEvent(event)
 --- modulename: BaseNode, funcname: itemChange
BaseNode.py(147):         if change == self.ItemPositionChange:
BaseNode.py(149):             value.setX(roundup(value.x() - self.graph().grid_size + self.graph().grid_size / 3.0, self.graph().grid_size))
 --- modulename: AGraphCommon, funcname: roundup
AGraphCommon.py(11):     return int(math.ceil(x / to)) * to
BaseNode.py(150):             value.setY(roundup(value.y() - self.graph().grid_size + self.graph().grid_size / 3.0, self.graph().grid_size))
 --- modulename: AGraphCommon, funcname: roundup
AGraphCommon.py(11):     return int(math.ceil(x / to)) * to
BaseNode.py(151):             return value
 --- modulename: BaseNode, funcname: itemChange
BaseNode.py(147):         if change == self.ItemPositionChange:
BaseNode.py(152):         return QtGui.QGraphicsItem.itemChange(self, change, value)
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: BaseNode, funcname: paint
BaseNode.py(199):         painter.setPen(QtCore.Qt.NoPen)
BaseNode.py(200):         painter.setBrush(QtCore.Qt.darkGray)
BaseNode.py(202):         if self.options:
BaseNode.py(203):             color = self.opt_node_base_color
BaseNode.py(206):         if self.isSelected():
BaseNode.py(207):             color = color.lighter(150)
BaseNode.py(209):         linearGrad = QtGui.QRadialGradient(QtCore.QPointF(40, 40), 300)
BaseNode.py(210):         linearGrad.setColorAt(0, color)
BaseNode.py(211):         linearGrad.setColorAt(1, color.lighter(180))
BaseNode.py(212):         br = QtGui.QBrush(linearGrad)
BaseNode.py(213):         painter.setBrush(br)
BaseNode.py(214):         pen = QtGui.QPen(QtCore.Qt.black, 0.5)
BaseNode.py(215):         if option.state & QtGui.QStyle.State_Selected:
BaseNode.py(216):             if self.options:
BaseNode.py(217):                 pen.setColor(self.opt_selected_pen_color)
BaseNode.py(218):                 pen.setStyle(self.opt_pen_selected_type)
BaseNode.py(222):         painter.setPen(pen)
BaseNode.py(223):         painter.drawRoundedRect(self.sizes[0], self.sizes[1],
BaseNode.py(224):                                 self.childrenBoundingRect().width(), self.nodeMainGWidget.boundingRect().height(),
BaseNode.py(225):                                 self.sizes[4], self.sizes[5])
 --- modulename: BaseNode, funcname: paint
BaseNode.py(39):         if self.options:
BaseNode.py(40):             painter.fillRect(option.rect, QtGui.QColor(self.opt_bg_color))
BaseNode.py(43):         super(NodeName, self).paint(painter, option, widget)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Widget, funcname: _tick_executor
Widget.py(988):         for foo in self._tick_functions:
 --- modulename: Widget, funcname: mouseMoveEvent
Widget.py(1402):         self.mousePos = self.mapToScene(event.pos())
Widget.py(1404):         if self._resize_group_mode:
Widget.py(1417):         if self._draw_real_time_line:
Widget.py(1434):         if self._is_rubber_band_selection:
Widget.py(1445):         super(GraphWidget, self).mouseMoveEvent(event)
 --- modulename: BaseNode, funcname: itemChange
BaseNode.py(147):         if change == self.ItemPositionChange:
BaseNode.py(149):             value.setX(roundup(value.x() - self.graph().grid_size + self.graph().grid_size / 3.0, self.graph().grid_size))
 --- modulename: AGraphCommon, funcname: roundup
AGraphCommon.py(11):     return int(math.ceil(x / to)) * to
BaseNode.py(150):             value.setY(roundup(value.y() - self.graph().grid_size + self.graph().grid_size / 3.0, self.graph().grid_size))
 --- modulename: AGraphCommon, funcname: roundup
AGraphCommon.py(11):     return int(math.ceil(x / to)) * to
BaseNode.py(151):             return value
 --- modulename: Widget, funcname: mouseMoveEvent
Widget.py(1402):         self.mousePos = self.mapToScene(event.pos())
Widget.py(1404):         if self._resize_group_mode:
Widget.py(1417):         if self._draw_real_time_line:
Widget.py(1434):         if self._is_rubber_band_selection:
Widget.py(1445):         super(GraphWidget, self).mouseMoveEvent(event)
 --- modulename: BaseNode, funcname: itemChange
BaseNode.py(147):         if change == self.ItemPositionChange:
BaseNode.py(149):             value.setX(roundup(value.x() - self.graph().grid_size + self.graph().grid_size / 3.0, self.graph().grid_size))
 --- modulename: AGraphCommon, funcname: roundup
AGraphCommon.py(11):     return int(math.ceil(x / to)) * to
BaseNode.py(150):             value.setY(roundup(value.y() - self.graph().grid_size + self.graph().grid_size / 3.0, self.graph().grid_size))
 --- modulename: AGraphCommon, funcname: roundup
AGraphCommon.py(11):     return int(math.ceil(x / to)) * to
BaseNode.py(151):             return value
 --- modulename: Widget, funcname: mouseMoveEvent
Widget.py(1402):         self.mousePos = self.mapToScene(event.pos())
Widget.py(1404):         if self._resize_group_mode:
Widget.py(1417):         if self._draw_real_time_line:
Widget.py(1434):         if self._is_rubber_band_selection:
Widget.py(1445):         super(GraphWidget, self).mouseMoveEvent(event)
 --- modulename: BaseNode, funcname: itemChange
BaseNode.py(147):         if change == self.ItemPositionChange:
BaseNode.py(149):             value.setX(roundup(value.x() - self.graph().grid_size + self.graph().grid_size / 3.0, self.graph().grid_size))
 --- modulename: AGraphCommon, funcname: roundup
AGraphCommon.py(11):     return int(math.ceil(x / to)) * to
BaseNode.py(150):             value.setY(roundup(value.y() - self.graph().grid_size + self.graph().grid_size / 3.0, self.graph().grid_size))
 --- modulename: AGraphCommon, funcname: roundup
AGraphCommon.py(11):     return int(math.ceil(x / to)) * to
BaseNode.py(151):             return value
 --- modulename: Widget, funcname: mouseMoveEvent
Widget.py(1402):         self.mousePos = self.mapToScene(event.pos())
Widget.py(1404):         if self._resize_group_mode:
Widget.py(1417):         if self._draw_real_time_line:
Widget.py(1434):         if self._is_rubber_band_selection:
Widget.py(1445):         super(GraphWidget, self).mouseMoveEvent(event)
 --- modulename: BaseNode, funcname: itemChange
BaseNode.py(147):         if change == self.ItemPositionChange:
BaseNode.py(149):             value.setX(roundup(value.x() - self.graph().grid_size + self.graph().grid_size / 3.0, self.graph().grid_size))
 --- modulename: AGraphCommon, funcname: roundup
AGraphCommon.py(11):     return int(math.ceil(x / to)) * to
BaseNode.py(150):             value.setY(roundup(value.y() - self.graph().grid_size + self.graph().grid_size / 3.0, self.graph().grid_size))
 --- modulename: AGraphCommon, funcname: roundup
AGraphCommon.py(11):     return int(math.ceil(x / to)) * to
BaseNode.py(151):             return value
 --- modulename: BaseNode, funcname: itemChange
BaseNode.py(147):         if change == self.ItemPositionChange:
BaseNode.py(152):         return QtGui.QGraphicsItem.itemChange(self, change, value)
 --- modulename: Widget, funcname: mouseReleaseEvent
Widget.py(1498):         self.released_item = self.itemAt(event.pos())
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
Widget.py(1499):         self.setDragMode(self.NoDrag)
Widget.py(1500):         self._resize_group_mode = False
Widget.py(1501):         self.viewport().setCursor(QtCore.Qt.ArrowCursor)
Widget.py(1502):         modifiers = event.modifiers()
Widget.py(1503):         if self.released_item and not hasattr(self.released_item, 'non_selectable'):
Widget.py(1504):             if isinstance(self.released_item, CommentNode):
Widget.py(1513):         for n in self.nodes:
Widget.py(1514):             n.setFlag(QtGui.QGraphicsItem.ItemIsMovable)
Widget.py(1513):         for n in self.nodes:
Widget.py(1516):         if event.button() == QtCore.Qt.RightButton:
Widget.py(1518):         if self._draw_real_time_line:
Widget.py(1522):         if self._is_rubber_band_selection:
Widget.py(1526):         if event.button() == QtCore.Qt.RightButton:
Widget.py(1528):         p_itm = self.pressed_item
Widget.py(1529):         r_itm = self.released_item
Widget.py(1530):         do_connect = True
Widget.py(1531):         for i in [p_itm, r_itm]:
Widget.py(1532):             if not i:
Widget.py(1535):             if not hasattr(i, 'object_type'):
Widget.py(1538):             if not i.object_type == AGObjectTypes.tPort:
Widget.py(1539):                 do_connect = False
Widget.py(1540):                 break
Widget.py(1541):         if p_itm and r_itm:
Widget.py(1542):             if hasattr(p_itm, 'object_type') and hasattr(r_itm, 'object_type'):
Widget.py(1543):                 if all([p_itm.object_type == AGObjectTypes.tPort, r_itm.object_type == AGObjectTypes.tPort]):
Widget.py(1548):         if do_connect:
Widget.py(1550):         selected_nodes = self.selected_nodes()
 --- modulename: Widget, funcname: selected_nodes
Widget.py(1268):         return [i for i in self.nodes if i.isSelected()]
Widget.py(1268):         return [i for i in self.nodes if i.isSelected()]
Widget.py(1551):         if len(selected_nodes) != 0:
Widget.py(1552):             self.update_property_view(selected_nodes[0])
 --- modulename: Widget, funcname: update_property_view
Widget.py(1559):         root = self.parent.dockWidgetNodeView
Widget.py(1560):         layout = self.parent.PropertiesformLayout
Widget.py(1561):         root.owned_node = node
Widget.py(1562):         clearLayout(layout)
 --- modulename: Widget, funcname: clearLayout
Widget.py(39):     while layout.count():
Widget.py(1565):         le_name = QtGui.QLineEdit(node.get_name())
 --- modulename: AbstractGraph, funcname: get_name
AbstractGraph.py(161):         return self.name
Widget.py(1566):         le_name.returnPressed.connect(lambda: node.set_name(le_name.text()))
Widget.py(1567):         layout.addRow("Name", le_name)
Widget.py(1570):         le_pos = QtGui.QLineEdit("{0} x {1}".format(node.pos().x(), node.pos().y()))
Widget.py(1571):         layout.addRow("Pos", le_pos)
Widget.py(1574):         if len(node.inputs) != 0:
Widget.py(1575):             sep_inputs = QtGui.QLabel()
Widget.py(1576):             sep_inputs.setStyleSheet("background-color: black;")
Widget.py(1577):             sep_inputs.setText("INPUTS")
Widget.py(1578):             layout.addRow("", sep_inputs)
Widget.py(1580):             def tmp(le):
Widget.py(1583):             for inp in node.inputs:
Widget.py(1584):                 le = QtGui.QLineEdit(str(inp.current_data()))
 --- modulename: AbstractGraph, funcname: current_data
AbstractGraph.py(44):         if self._data is None:
AbstractGraph.py(46):         return self._data
Widget.py(1585):                 layout.addRow(inp.name, le)
Widget.py(1586):                 le.setReadOnly(True)
Widget.py(1583):             for inp in node.inputs:
Widget.py(1584):                 le = QtGui.QLineEdit(str(inp.current_data()))
 --- modulename: AbstractGraph, funcname: current_data
AbstractGraph.py(44):         if self._data is None:
AbstractGraph.py(46):         return self._data
Widget.py(1585):                 layout.addRow(inp.name, le)
Widget.py(1586):                 le.setReadOnly(True)
Widget.py(1583):             for inp in node.inputs:
Widget.py(1589):         if len(node.outputs) != 0:
Widget.py(1590):             sep_outputs = QtGui.QLabel()
Widget.py(1591):             sep_outputs.setStyleSheet("background-color: black;")
Widget.py(1592):             sep_outputs.setText("OUTPUTS")
Widget.py(1593):             layout.addRow("", sep_outputs)
Widget.py(1594):             for out in node.outputs:
Widget.py(1595):                 le = QtGui.QLineEdit(str(out.current_data()))
 --- modulename: AbstractGraph, funcname: current_data
AbstractGraph.py(44):         if self._data is None:
AbstractGraph.py(46):         return self._data
Widget.py(1596):                 le.setReadOnly(True)
Widget.py(1597):                 layout.addRow(out.name, le)
Widget.py(1594):             for out in node.outputs:
Widget.py(1599):         doc_lb = QtGui.QLabel()
Widget.py(1600):         doc_lb.setStyleSheet("background-color: black;")
Widget.py(1601):         doc_lb.setText("Description")
Widget.py(1602):         layout.addRow("", doc_lb)
Widget.py(1603):         doc = QtGui.QLabel(node.description())
 --- modulename: BaseNode, funcname: description
BaseNode.py(156):         return "Default node description"
Widget.py(1604):         doc.setWordWrap(True)
Widget.py(1605):         layout.addRow("", doc)
Widget.py(1556):         super(GraphWidget, self).mouseReleaseEvent(event)
 --- modulename: BaseNode, funcname: mouseReleaseEvent
BaseNode.py(249):         self.update()
BaseNode.py(250):         self.setCursor(QtCore.Qt.OpenHandCursor)
 --- modulename: BaseNode, funcname: itemChange
BaseNode.py(147):         if change == self.ItemPositionChange:
BaseNode.py(152):         return QtGui.QGraphicsItem.itemChange(self, change, value)
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: BaseNode, funcname: itemChange
BaseNode.py(147):         if change == self.ItemPositionChange:
BaseNode.py(152):         return QtGui.QGraphicsItem.itemChange(self, change, value)
BaseNode.py(251):         modifiers = event.modifiers()
BaseNode.py(252):         selected_nodes = [n for n in self.graph().nodes if n.isSelected()]
BaseNode.py(252):         selected_nodes = [n for n in self.graph().nodes if n.isSelected()]
BaseNode.py(253):         groupers = [i for i in self.graph().groupers if i.object_type == AGObjectTypes.tGrouper]
BaseNode.py(254):         grouper = [g for g in groupers if self in g.collidingItems()]
BaseNode.py(255):         if len(grouper) == 1:
BaseNode.py(259):             parent = self.parentItem()
BaseNode.py(260):             if parent and parent.object_type == AGObjectTypes.tGrouper:
BaseNode.py(269):         p_item = self.parentItem()
BaseNode.py(270):         if p_item and hasattr(p_item, 'object_type'):
BaseNode.py(274):         QtGui.QGraphicsItem.mouseReleaseEvent(self, event)
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: BaseNode, funcname: paint
BaseNode.py(199):         painter.setPen(QtCore.Qt.NoPen)
BaseNode.py(200):         painter.setBrush(QtCore.Qt.darkGray)
BaseNode.py(202):         if self.options:
BaseNode.py(203):             color = self.opt_node_base_color
BaseNode.py(206):         if self.isSelected():
BaseNode.py(207):             color = color.lighter(150)
BaseNode.py(209):         linearGrad = QtGui.QRadialGradient(QtCore.QPointF(40, 40), 300)
BaseNode.py(210):         linearGrad.setColorAt(0, color)
BaseNode.py(211):         linearGrad.setColorAt(1, color.lighter(180))
BaseNode.py(212):         br = QtGui.QBrush(linearGrad)
BaseNode.py(213):         painter.setBrush(br)
BaseNode.py(214):         pen = QtGui.QPen(QtCore.Qt.black, 0.5)
BaseNode.py(215):         if option.state & QtGui.QStyle.State_Selected:
BaseNode.py(216):             if self.options:
BaseNode.py(217):                 pen.setColor(self.opt_selected_pen_color)
BaseNode.py(218):                 pen.setStyle(self.opt_pen_selected_type)
BaseNode.py(222):         painter.setPen(pen)
BaseNode.py(223):         painter.drawRoundedRect(self.sizes[0], self.sizes[1],
BaseNode.py(224):                                 self.childrenBoundingRect().width(), self.nodeMainGWidget.boundingRect().height(),
BaseNode.py(225):                                 self.sizes[4], self.sizes[5])
 --- modulename: BaseNode, funcname: paint
BaseNode.py(39):         if self.options:
BaseNode.py(40):             painter.fillRect(option.rect, QtGui.QColor(self.opt_bg_color))
BaseNode.py(43):         super(NodeName, self).paint(painter, option, widget)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Widget, funcname: mouseMoveEvent
Widget.py(1402):         self.mousePos = self.mapToScene(event.pos())
Widget.py(1404):         if self._resize_group_mode:
Widget.py(1417):         if self._draw_real_time_line:
Widget.py(1434):         if self._is_rubber_band_selection:
Widget.py(1445):         super(GraphWidget, self).mouseMoveEvent(event)
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Widget, funcname: _tick_executor
Widget.py(988):         for foo in self._tick_functions:
 --- modulename: Widget, funcname: mouseMoveEvent
Widget.py(1402):         self.mousePos = self.mapToScene(event.pos())
Widget.py(1404):         if self._resize_group_mode:
Widget.py(1417):         if self._draw_real_time_line:
Widget.py(1434):         if self._is_rubber_band_selection:
Widget.py(1445):         super(GraphWidget, self).mouseMoveEvent(event)
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Widget, funcname: mouseMoveEvent
Widget.py(1402):         self.mousePos = self.mapToScene(event.pos())
Widget.py(1404):         if self._resize_group_mode:
Widget.py(1417):         if self._draw_real_time_line:
Widget.py(1434):         if self._is_rubber_band_selection:
Widget.py(1445):         super(GraphWidget, self).mouseMoveEvent(event)
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Widget, funcname: mouseMoveEvent
Widget.py(1402):         self.mousePos = self.mapToScene(event.pos())
Widget.py(1404):         if self._resize_group_mode:
Widget.py(1417):         if self._draw_real_time_line:
Widget.py(1434):         if self._is_rubber_band_selection:
Widget.py(1445):         super(GraphWidget, self).mouseMoveEvent(event)
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Widget, funcname: mouseMoveEvent
Widget.py(1402):         self.mousePos = self.mapToScene(event.pos())
Widget.py(1404):         if self._resize_group_mode:
Widget.py(1417):         if self._draw_real_time_line:
Widget.py(1434):         if self._is_rubber_band_selection:
Widget.py(1445):         super(GraphWidget, self).mouseMoveEvent(event)
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Widget, funcname: mouseMoveEvent
Widget.py(1402):         self.mousePos = self.mapToScene(event.pos())
Widget.py(1404):         if self._resize_group_mode:
Widget.py(1417):         if self._draw_real_time_line:
Widget.py(1434):         if self._is_rubber_band_selection:
Widget.py(1445):         super(GraphWidget, self).mouseMoveEvent(event)
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Widget, funcname: mouseMoveEvent
Widget.py(1402):         self.mousePos = self.mapToScene(event.pos())
Widget.py(1404):         if self._resize_group_mode:
Widget.py(1417):         if self._draw_real_time_line:
Widget.py(1434):         if self._is_rubber_band_selection:
Widget.py(1445):         super(GraphWidget, self).mouseMoveEvent(event)
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Widget, funcname: mouseMoveEvent
Widget.py(1402):         self.mousePos = self.mapToScene(event.pos())
Widget.py(1404):         if self._resize_group_mode:
Widget.py(1417):         if self._draw_real_time_line:
Widget.py(1434):         if self._is_rubber_band_selection:
Widget.py(1445):         super(GraphWidget, self).mouseMoveEvent(event)
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Widget, funcname: mouseMoveEvent
Widget.py(1402):         self.mousePos = self.mapToScene(event.pos())
Widget.py(1404):         if self._resize_group_mode:
Widget.py(1417):         if self._draw_real_time_line:
Widget.py(1434):         if self._is_rubber_band_selection:
Widget.py(1445):         super(GraphWidget, self).mouseMoveEvent(event)
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Widget, funcname: _tick_executor
Widget.py(988):         for foo in self._tick_functions:
 --- modulename: Widget, funcname: mouseMoveEvent
Widget.py(1402):         self.mousePos = self.mapToScene(event.pos())
Widget.py(1404):         if self._resize_group_mode:
Widget.py(1417):         if self._draw_real_time_line:
Widget.py(1434):         if self._is_rubber_band_selection:
Widget.py(1445):         super(GraphWidget, self).mouseMoveEvent(event)
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Widget, funcname: mouseMoveEvent
Widget.py(1402):         self.mousePos = self.mapToScene(event.pos())
Widget.py(1404):         if self._resize_group_mode:
Widget.py(1417):         if self._draw_real_time_line:
Widget.py(1434):         if self._is_rubber_band_selection:
Widget.py(1445):         super(GraphWidget, self).mouseMoveEvent(event)
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Widget, funcname: mouseMoveEvent
Widget.py(1402):         self.mousePos = self.mapToScene(event.pos())
Widget.py(1404):         if self._resize_group_mode:
Widget.py(1417):         if self._draw_real_time_line:
Widget.py(1434):         if self._is_rubber_band_selection:
Widget.py(1445):         super(GraphWidget, self).mouseMoveEvent(event)
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Widget, funcname: mouseMoveEvent
Widget.py(1402):         self.mousePos = self.mapToScene(event.pos())
Widget.py(1404):         if self._resize_group_mode:
Widget.py(1417):         if self._draw_real_time_line:
Widget.py(1434):         if self._is_rubber_band_selection:
Widget.py(1445):         super(GraphWidget, self).mouseMoveEvent(event)
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Widget, funcname: mouseMoveEvent
Widget.py(1402):         self.mousePos = self.mapToScene(event.pos())
Widget.py(1404):         if self._resize_group_mode:
Widget.py(1417):         if self._draw_real_time_line:
Widget.py(1434):         if self._is_rubber_band_selection:
Widget.py(1445):         super(GraphWidget, self).mouseMoveEvent(event)
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Widget, funcname: mouseMoveEvent
Widget.py(1402):         self.mousePos = self.mapToScene(event.pos())
Widget.py(1404):         if self._resize_group_mode:
Widget.py(1417):         if self._draw_real_time_line:
Widget.py(1434):         if self._is_rubber_band_selection:
Widget.py(1445):         super(GraphWidget, self).mouseMoveEvent(event)
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Widget, funcname: mouseMoveEvent
Widget.py(1402):         self.mousePos = self.mapToScene(event.pos())
Widget.py(1404):         if self._resize_group_mode:
Widget.py(1417):         if self._draw_real_time_line:
Widget.py(1434):         if self._is_rubber_band_selection:
Widget.py(1445):         super(GraphWidget, self).mouseMoveEvent(event)
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Widget, funcname: _tick_executor
Widget.py(988):         for foo in self._tick_functions:
 --- modulename: Widget, funcname: mouseMoveEvent
Widget.py(1402):         self.mousePos = self.mapToScene(event.pos())
Widget.py(1404):         if self._resize_group_mode:
Widget.py(1417):         if self._draw_real_time_line:
Widget.py(1434):         if self._is_rubber_band_selection:
Widget.py(1445):         super(GraphWidget, self).mouseMoveEvent(event)
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Widget, funcname: mousePressEvent
Widget.py(1371):         modifiers = event.modifiers()
Widget.py(1372):         self.pressed_item = self.itemAt(event.pos())
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
Widget.py(1373):         if self.pressed_item and hasattr(self.pressed_item, 'mark'):
Widget.py(1376):         if not self.pressed_item:
Widget.py(1377):             self.node_box.close()
Widget.py(1378):             self.node_box.le_nodes.clear()
Widget.py(1379):         if self.pressed_item:
Widget.py(1385):         self.mousePressPose = self.mapToScene(event.pos())
Widget.py(1386):         if self.pressed_item and event.button() == QtCore.Qt.LeftButton:
Widget.py(1391):         if event.button() == QtCore.Qt.RightButton:
Widget.py(1393):         if all([event.button() == QtCore.Qt.LeftButton, modifiers == QtCore.Qt.AltModifier]):
Widget.py(1395):         if all([event.button() == QtCore.Qt.LeftButton,
Widget.py(1396):                 modifiers == QtCore.Qt.NoModifier or modifiers == QtCore.Qt.ControlModifier | QtCore.Qt.ShiftModifier]):
Widget.py(1397):             if not self.pressed_item or hasattr(self.pressed_item, 'non_selectable'):
Widget.py(1398):                 self._is_rubber_band_selection = True
Widget.py(1399):         super(GraphWidget, self).mousePressEvent(event)
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: BaseNode, funcname: itemChange
BaseNode.py(147):         if change == self.ItemPositionChange:
BaseNode.py(152):         return QtGui.QGraphicsItem.itemChange(self, change, value)
 --- modulename: BaseNode, funcname: itemChange
BaseNode.py(147):         if change == self.ItemPositionChange:
BaseNode.py(152):         return QtGui.QGraphicsItem.itemChange(self, change, value)
 --- modulename: Widget, funcname: OnSelectionChanged
Widget.py(210):         selected_nodes = []
Widget.py(211):         for n in self.parent().get_nodes():
 --- modulename: Widget, funcname: get_nodes
Widget.py(1026):         ls = []
Widget.py(1027):         for i in self.scene().items():
Widget.py(1028):             if hasattr(i, 'object_type'):
Widget.py(1027):         for i in self.scene().items():
Widget.py(1028):             if hasattr(i, 'object_type'):
Widget.py(1029):                 if i.object_type == AGObjectTypes.tNode:
Widget.py(1027):         for i in self.scene().items():
Widget.py(1028):             if hasattr(i, 'object_type'):
Widget.py(1029):                 if i.object_type == AGObjectTypes.tNode:
Widget.py(1030):                     if i.isVisible():
Widget.py(1031):                         ls.append(i)
Widget.py(1027):         for i in self.scene().items():
Widget.py(1028):             if hasattr(i, 'object_type'):
Widget.py(1029):                 if i.object_type == AGObjectTypes.tNode:
Widget.py(1027):         for i in self.scene().items():
Widget.py(1028):             if hasattr(i, 'object_type'):
Widget.py(1027):         for i in self.scene().items():
Widget.py(1028):             if hasattr(i, 'object_type'):
Widget.py(1027):         for i in self.scene().items():
Widget.py(1028):             if hasattr(i, 'object_type'):
Widget.py(1027):         for i in self.scene().items():
Widget.py(1028):             if hasattr(i, 'object_type'):
Widget.py(1027):         for i in self.scene().items():
Widget.py(1028):             if hasattr(i, 'object_type'):
Widget.py(1029):                 if i.object_type == AGObjectTypes.tNode:
Widget.py(1027):         for i in self.scene().items():
Widget.py(1028):             if hasattr(i, 'object_type'):
Widget.py(1029):                 if i.object_type == AGObjectTypes.tNode:
Widget.py(1027):         for i in self.scene().items():
Widget.py(1028):             if hasattr(i, 'object_type'):
Widget.py(1029):                 if i.object_type == AGObjectTypes.tNode:
Widget.py(1027):         for i in self.scene().items():
Widget.py(1032):         return ls
Widget.py(212):             if n.isSelected():
Widget.py(211):         for n in self.parent().get_nodes():
Widget.py(214):         if len(selected_nodes) == 0:
Widget.py(215):             self.parent().write_to_console("select {0}nl none".format(FLAG_SYMBOL))
 --- modulename: Widget, funcname: write_to_console
Widget.py(1987):         if not force:
Widget.py(1988):             if not self.is_debug():
 --- modulename: AbstractGraph, funcname: is_debug
AbstractGraph.py(223):         return self._debug
Widget.py(1989):                 return
Widget.py(216):             return
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: BaseNode, funcname: paint
BaseNode.py(199):         painter.setPen(QtCore.Qt.NoPen)
BaseNode.py(200):         painter.setBrush(QtCore.Qt.darkGray)
BaseNode.py(202):         if self.options:
BaseNode.py(203):             color = self.opt_node_base_color
BaseNode.py(206):         if self.isSelected():
BaseNode.py(209):         linearGrad = QtGui.QRadialGradient(QtCore.QPointF(40, 40), 300)
BaseNode.py(210):         linearGrad.setColorAt(0, color)
BaseNode.py(211):         linearGrad.setColorAt(1, color.lighter(180))
BaseNode.py(212):         br = QtGui.QBrush(linearGrad)
BaseNode.py(213):         painter.setBrush(br)
BaseNode.py(214):         pen = QtGui.QPen(QtCore.Qt.black, 0.5)
BaseNode.py(215):         if option.state & QtGui.QStyle.State_Selected:
BaseNode.py(222):         painter.setPen(pen)
BaseNode.py(223):         painter.drawRoundedRect(self.sizes[0], self.sizes[1],
BaseNode.py(224):                                 self.childrenBoundingRect().width(), self.nodeMainGWidget.boundingRect().height(),
BaseNode.py(225):                                 self.sizes[4], self.sizes[5])
 --- modulename: BaseNode, funcname: paint
BaseNode.py(39):         if self.options:
BaseNode.py(40):             painter.fillRect(option.rect, QtGui.QColor(self.opt_bg_color))
BaseNode.py(43):         super(NodeName, self).paint(painter, option, widget)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Widget, funcname: mouseMoveEvent
Widget.py(1402):         self.mousePos = self.mapToScene(event.pos())
Widget.py(1404):         if self._resize_group_mode:
Widget.py(1417):         if self._draw_real_time_line:
Widget.py(1434):         if self._is_rubber_band_selection:
Widget.py(1435):             if self.rubber_rect not in self.scene().items():
Widget.py(1436):                 self.scene().addItem(self.rubber_rect)
Widget.py(1437):             if not self.rubber_rect.isVisible():
Widget.py(1439):             r = QtCore.QRectF(self.mousePressPose.x(),
Widget.py(1440):                               self.mousePressPose.y(),
Widget.py(1441):                               self.mousePos.x() - self.mousePressPose.x(),
Widget.py(1442):                               self.mousePos.y() - self.mousePressPose.y())
Widget.py(1443):             self.rubber_rect.setRect(r.normalized())
Widget.py(1445):         super(GraphWidget, self).mouseMoveEvent(event)
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: Widget, funcname: _tick_executor
Widget.py(988):         for foo in self._tick_functions:
 --- modulename: Widget, funcname: mouseMoveEvent
Widget.py(1402):         self.mousePos = self.mapToScene(event.pos())
Widget.py(1404):         if self._resize_group_mode:
Widget.py(1417):         if self._draw_real_time_line:
Widget.py(1434):         if self._is_rubber_band_selection:
Widget.py(1435):             if self.rubber_rect not in self.scene().items():
Widget.py(1437):             if not self.rubber_rect.isVisible():
Widget.py(1439):             r = QtCore.QRectF(self.mousePressPose.x(),
Widget.py(1440):                               self.mousePressPose.y(),
Widget.py(1441):                               self.mousePos.x() - self.mousePressPose.x(),
Widget.py(1442):                               self.mousePos.y() - self.mousePressPose.y())
Widget.py(1443):             self.rubber_rect.setRect(r.normalized())
Widget.py(1445):         super(GraphWidget, self).mouseMoveEvent(event)
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: Widget, funcname: mouseMoveEvent
Widget.py(1402):         self.mousePos = self.mapToScene(event.pos())
Widget.py(1404):         if self._resize_group_mode:
Widget.py(1417):         if self._draw_real_time_line:
Widget.py(1434):         if self._is_rubber_band_selection:
Widget.py(1435):             if self.rubber_rect not in self.scene().items():
Widget.py(1437):             if not self.rubber_rect.isVisible():
Widget.py(1439):             r = QtCore.QRectF(self.mousePressPose.x(),
Widget.py(1440):                               self.mousePressPose.y(),
Widget.py(1441):                               self.mousePos.x() - self.mousePressPose.x(),
Widget.py(1442):                               self.mousePos.y() - self.mousePressPose.y())
Widget.py(1443):             self.rubber_rect.setRect(r.normalized())
Widget.py(1445):         super(GraphWidget, self).mouseMoveEvent(event)
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: Widget, funcname: mouseMoveEvent
Widget.py(1402):         self.mousePos = self.mapToScene(event.pos())
Widget.py(1404):         if self._resize_group_mode:
Widget.py(1417):         if self._draw_real_time_line:
Widget.py(1434):         if self._is_rubber_band_selection:
Widget.py(1435):             if self.rubber_rect not in self.scene().items():
Widget.py(1437):             if not self.rubber_rect.isVisible():
Widget.py(1439):             r = QtCore.QRectF(self.mousePressPose.x(),
Widget.py(1440):                               self.mousePressPose.y(),
Widget.py(1441):                               self.mousePos.x() - self.mousePressPose.x(),
Widget.py(1442):                               self.mousePos.y() - self.mousePressPose.y())
Widget.py(1443):             self.rubber_rect.setRect(r.normalized())
Widget.py(1445):         super(GraphWidget, self).mouseMoveEvent(event)
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: Widget, funcname: mouseMoveEvent
Widget.py(1402):         self.mousePos = self.mapToScene(event.pos())
Widget.py(1404):         if self._resize_group_mode:
Widget.py(1417):         if self._draw_real_time_line:
Widget.py(1434):         if self._is_rubber_band_selection:
Widget.py(1435):             if self.rubber_rect not in self.scene().items():
Widget.py(1437):             if not self.rubber_rect.isVisible():
Widget.py(1439):             r = QtCore.QRectF(self.mousePressPose.x(),
Widget.py(1440):                               self.mousePressPose.y(),
Widget.py(1441):                               self.mousePos.x() - self.mousePressPose.x(),
Widget.py(1442):                               self.mousePos.y() - self.mousePressPose.y())
Widget.py(1443):             self.rubber_rect.setRect(r.normalized())
Widget.py(1445):         super(GraphWidget, self).mouseMoveEvent(event)
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: Widget, funcname: mouseMoveEvent
Widget.py(1402):         self.mousePos = self.mapToScene(event.pos())
Widget.py(1404):         if self._resize_group_mode:
Widget.py(1417):         if self._draw_real_time_line:
Widget.py(1434):         if self._is_rubber_band_selection:
Widget.py(1435):             if self.rubber_rect not in self.scene().items():
Widget.py(1437):             if not self.rubber_rect.isVisible():
Widget.py(1439):             r = QtCore.QRectF(self.mousePressPose.x(),
Widget.py(1440):                               self.mousePressPose.y(),
Widget.py(1441):                               self.mousePos.x() - self.mousePressPose.x(),
Widget.py(1442):                               self.mousePos.y() - self.mousePressPose.y())
Widget.py(1443):             self.rubber_rect.setRect(r.normalized())
Widget.py(1445):         super(GraphWidget, self).mouseMoveEvent(event)
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: Widget, funcname: mouseMoveEvent
Widget.py(1402):         self.mousePos = self.mapToScene(event.pos())
Widget.py(1404):         if self._resize_group_mode:
Widget.py(1417):         if self._draw_real_time_line:
Widget.py(1434):         if self._is_rubber_band_selection:
Widget.py(1435):             if self.rubber_rect not in self.scene().items():
Widget.py(1437):             if not self.rubber_rect.isVisible():
Widget.py(1439):             r = QtCore.QRectF(self.mousePressPose.x(),
Widget.py(1440):                               self.mousePressPose.y(),
Widget.py(1441):                               self.mousePos.x() - self.mousePressPose.x(),
Widget.py(1442):                               self.mousePos.y() - self.mousePressPose.y())
Widget.py(1443):             self.rubber_rect.setRect(r.normalized())
Widget.py(1445):         super(GraphWidget, self).mouseMoveEvent(event)
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: Widget, funcname: mouseMoveEvent
Widget.py(1402):         self.mousePos = self.mapToScene(event.pos())
Widget.py(1404):         if self._resize_group_mode:
Widget.py(1417):         if self._draw_real_time_line:
Widget.py(1434):         if self._is_rubber_band_selection:
Widget.py(1435):             if self.rubber_rect not in self.scene().items():
Widget.py(1437):             if not self.rubber_rect.isVisible():
Widget.py(1439):             r = QtCore.QRectF(self.mousePressPose.x(),
Widget.py(1440):                               self.mousePressPose.y(),
Widget.py(1441):                               self.mousePos.x() - self.mousePressPose.x(),
Widget.py(1442):                               self.mousePos.y() - self.mousePressPose.y())
Widget.py(1443):             self.rubber_rect.setRect(r.normalized())
Widget.py(1445):         super(GraphWidget, self).mouseMoveEvent(event)
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: Widget, funcname: mouseMoveEvent
Widget.py(1402):         self.mousePos = self.mapToScene(event.pos())
Widget.py(1404):         if self._resize_group_mode:
Widget.py(1417):         if self._draw_real_time_line:
Widget.py(1434):         if self._is_rubber_band_selection:
Widget.py(1435):             if self.rubber_rect not in self.scene().items():
Widget.py(1437):             if not self.rubber_rect.isVisible():
Widget.py(1439):             r = QtCore.QRectF(self.mousePressPose.x(),
Widget.py(1440):                               self.mousePressPose.y(),
Widget.py(1441):                               self.mousePos.x() - self.mousePressPose.x(),
Widget.py(1442):                               self.mousePos.y() - self.mousePressPose.y())
Widget.py(1443):             self.rubber_rect.setRect(r.normalized())
Widget.py(1445):         super(GraphWidget, self).mouseMoveEvent(event)
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: Widget, funcname: mouseMoveEvent
Widget.py(1402):         self.mousePos = self.mapToScene(event.pos())
Widget.py(1404):         if self._resize_group_mode:
Widget.py(1417):         if self._draw_real_time_line:
Widget.py(1434):         if self._is_rubber_band_selection:
Widget.py(1435):             if self.rubber_rect not in self.scene().items():
Widget.py(1437):             if not self.rubber_rect.isVisible():
Widget.py(1439):             r = QtCore.QRectF(self.mousePressPose.x(),
Widget.py(1440):                               self.mousePressPose.y(),
Widget.py(1441):                               self.mousePos.x() - self.mousePressPose.x(),
Widget.py(1442):                               self.mousePos.y() - self.mousePressPose.y())
Widget.py(1443):             self.rubber_rect.setRect(r.normalized())
Widget.py(1445):         super(GraphWidget, self).mouseMoveEvent(event)
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: Widget, funcname: mouseMoveEvent
Widget.py(1402):         self.mousePos = self.mapToScene(event.pos())
Widget.py(1404):         if self._resize_group_mode:
Widget.py(1417):         if self._draw_real_time_line:
Widget.py(1434):         if self._is_rubber_band_selection:
Widget.py(1435):             if self.rubber_rect not in self.scene().items():
Widget.py(1437):             if not self.rubber_rect.isVisible():
Widget.py(1439):             r = QtCore.QRectF(self.mousePressPose.x(),
Widget.py(1440):                               self.mousePressPose.y(),
Widget.py(1441):                               self.mousePos.x() - self.mousePressPose.x(),
Widget.py(1442):                               self.mousePos.y() - self.mousePressPose.y())
Widget.py(1443):             self.rubber_rect.setRect(r.normalized())
Widget.py(1445):         super(GraphWidget, self).mouseMoveEvent(event)
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: Widget, funcname: _tick_executor
Widget.py(988):         for foo in self._tick_functions:
 --- modulename: Widget, funcname: mouseMoveEvent
Widget.py(1402):         self.mousePos = self.mapToScene(event.pos())
Widget.py(1404):         if self._resize_group_mode:
Widget.py(1417):         if self._draw_real_time_line:
Widget.py(1434):         if self._is_rubber_band_selection:
Widget.py(1435):             if self.rubber_rect not in self.scene().items():
Widget.py(1437):             if not self.rubber_rect.isVisible():
Widget.py(1439):             r = QtCore.QRectF(self.mousePressPose.x(),
Widget.py(1440):                               self.mousePressPose.y(),
Widget.py(1441):                               self.mousePos.x() - self.mousePressPose.x(),
Widget.py(1442):                               self.mousePos.y() - self.mousePressPose.y())
Widget.py(1443):             self.rubber_rect.setRect(r.normalized())
Widget.py(1445):         super(GraphWidget, self).mouseMoveEvent(event)
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: Widget, funcname: mouseMoveEvent
Widget.py(1402):         self.mousePos = self.mapToScene(event.pos())
Widget.py(1404):         if self._resize_group_mode:
Widget.py(1417):         if self._draw_real_time_line:
Widget.py(1434):         if self._is_rubber_band_selection:
Widget.py(1435):             if self.rubber_rect not in self.scene().items():
Widget.py(1437):             if not self.rubber_rect.isVisible():
Widget.py(1439):             r = QtCore.QRectF(self.mousePressPose.x(),
Widget.py(1440):                               self.mousePressPose.y(),
Widget.py(1441):                               self.mousePos.x() - self.mousePressPose.x(),
Widget.py(1442):                               self.mousePos.y() - self.mousePressPose.y())
Widget.py(1443):             self.rubber_rect.setRect(r.normalized())
Widget.py(1445):         super(GraphWidget, self).mouseMoveEvent(event)
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: Widget, funcname: mouseMoveEvent
Widget.py(1402):         self.mousePos = self.mapToScene(event.pos())
Widget.py(1404):         if self._resize_group_mode:
Widget.py(1417):         if self._draw_real_time_line:
Widget.py(1434):         if self._is_rubber_band_selection:
Widget.py(1435):             if self.rubber_rect not in self.scene().items():
Widget.py(1437):             if not self.rubber_rect.isVisible():
Widget.py(1439):             r = QtCore.QRectF(self.mousePressPose.x(),
Widget.py(1440):                               self.mousePressPose.y(),
Widget.py(1441):                               self.mousePos.x() - self.mousePressPose.x(),
Widget.py(1442):                               self.mousePos.y() - self.mousePressPose.y())
Widget.py(1443):             self.rubber_rect.setRect(r.normalized())
Widget.py(1445):         super(GraphWidget, self).mouseMoveEvent(event)
 --- modulename: Widget, funcname: mouseReleaseEvent
Widget.py(1498):         self.released_item = self.itemAt(event.pos())
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
Widget.py(1499):         self.setDragMode(self.NoDrag)
Widget.py(1500):         self._resize_group_mode = False
Widget.py(1501):         self.viewport().setCursor(QtCore.Qt.ArrowCursor)
Widget.py(1502):         modifiers = event.modifiers()
Widget.py(1503):         if self.released_item and not hasattr(self.released_item, 'non_selectable'):
Widget.py(1504):             if isinstance(self.released_item, CommentNode):
Widget.py(1513):         for n in self.nodes:
Widget.py(1514):             n.setFlag(QtGui.QGraphicsItem.ItemIsMovable)
Widget.py(1513):         for n in self.nodes:
Widget.py(1516):         if event.button() == QtCore.Qt.RightButton:
Widget.py(1518):         if self._draw_real_time_line:
Widget.py(1522):         if self._is_rubber_band_selection:
Widget.py(1523):             self._is_rubber_band_selection = False
Widget.py(1524):             [i.setSelected(True) for i in self.rubber_rect.collidingItems()]
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: Port, funcname: shape
Port.py(73):         path = QtGui.QPainterPath()
Port.py(74):         path.addEllipse(self.boundingRect())
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
Port.py(75):         return path
 --- modulename: Port, funcname: shape
Port.py(73):         path = QtGui.QPainterPath()
Port.py(74):         path.addEllipse(self.boundingRect())
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
Port.py(75):         return path
 --- modulename: Port, funcname: shape
Port.py(73):         path = QtGui.QPainterPath()
Port.py(74):         path.addEllipse(self.boundingRect())
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
Port.py(75):         return path
Widget.py(1525):             self.remove_item_by_name(self.rubber_rect.name)
 --- modulename: Widget, funcname: remove_item_by_name
Widget.py(1494):         [self.scene().removeItem(i) for i in self.scene().items() if hasattr(i, 'name') and i.name == name]
Widget.py(1494):         [self.scene().removeItem(i) for i in self.scene().items() if hasattr(i, 'name') and i.name == name]
Widget.py(1494):         [self.scene().removeItem(i) for i in self.scene().items() if hasattr(i, 'name') and i.name == name]
Widget.py(1494):         [self.scene().removeItem(i) for i in self.scene().items() if hasattr(i, 'name') and i.name == name]
Widget.py(1494):         [self.scene().removeItem(i) for i in self.scene().items() if hasattr(i, 'name') and i.name == name]
Widget.py(1494):         [self.scene().removeItem(i) for i in self.scene().items() if hasattr(i, 'name') and i.name == name]
Widget.py(1494):         [self.scene().removeItem(i) for i in self.scene().items() if hasattr(i, 'name') and i.name == name]
Widget.py(1494):         [self.scene().removeItem(i) for i in self.scene().items() if hasattr(i, 'name') and i.name == name]
Widget.py(1494):         [self.scene().removeItem(i) for i in self.scene().items() if hasattr(i, 'name') and i.name == name]
Widget.py(1494):         [self.scene().removeItem(i) for i in self.scene().items() if hasattr(i, 'name') and i.name == name]
Widget.py(1494):         [self.scene().removeItem(i) for i in self.scene().items() if hasattr(i, 'name') and i.name == name]
Widget.py(1494):         [self.scene().removeItem(i) for i in self.scene().items() if hasattr(i, 'name') and i.name == name]
Widget.py(1494):         [self.scene().removeItem(i) for i in self.scene().items() if hasattr(i, 'name') and i.name == name]
Widget.py(1526):         if event.button() == QtCore.Qt.RightButton:
Widget.py(1528):         p_itm = self.pressed_item
Widget.py(1529):         r_itm = self.released_item
Widget.py(1530):         do_connect = True
Widget.py(1531):         for i in [p_itm, r_itm]:
Widget.py(1532):             if not i:
Widget.py(1533):                 do_connect = False
Widget.py(1534):                 break
Widget.py(1541):         if p_itm and r_itm:
Widget.py(1548):         if do_connect:
Widget.py(1550):         selected_nodes = self.selected_nodes()
 --- modulename: Widget, funcname: selected_nodes
Widget.py(1268):         return [i for i in self.nodes if i.isSelected()]
Widget.py(1268):         return [i for i in self.nodes if i.isSelected()]
Widget.py(1551):         if len(selected_nodes) != 0:
Widget.py(1554):             clearLayout(self.parent.PropertiesformLayout)
 --- modulename: Widget, funcname: clearLayout
Widget.py(39):     while layout.count():
Widget.py(40):         child = layout.takeAt(0)
Widget.py(41):         if child.widget() is not None:
Widget.py(42):             child.widget().deleteLater()
Widget.py(39):     while layout.count():
Widget.py(40):         child = layout.takeAt(0)
Widget.py(41):         if child.widget() is not None:
Widget.py(42):             child.widget().deleteLater()
Widget.py(39):     while layout.count():
Widget.py(40):         child = layout.takeAt(0)
Widget.py(41):         if child.widget() is not None:
Widget.py(42):             child.widget().deleteLater()
Widget.py(39):     while layout.count():
Widget.py(40):         child = layout.takeAt(0)
Widget.py(41):         if child.widget() is not None:
Widget.py(42):             child.widget().deleteLater()
Widget.py(39):     while layout.count():
Widget.py(40):         child = layout.takeAt(0)
Widget.py(41):         if child.widget() is not None:
Widget.py(42):             child.widget().deleteLater()
Widget.py(39):     while layout.count():
Widget.py(40):         child = layout.takeAt(0)
Widget.py(41):         if child.widget() is not None:
Widget.py(42):             child.widget().deleteLater()
Widget.py(39):     while layout.count():
Widget.py(40):         child = layout.takeAt(0)
Widget.py(41):         if child.widget() is not None:
Widget.py(42):             child.widget().deleteLater()
Widget.py(39):     while layout.count():
Widget.py(40):         child = layout.takeAt(0)
Widget.py(41):         if child.widget() is not None:
Widget.py(42):             child.widget().deleteLater()
Widget.py(39):     while layout.count():
Widget.py(40):         child = layout.takeAt(0)
Widget.py(41):         if child.widget() is not None:
Widget.py(42):             child.widget().deleteLater()
Widget.py(39):     while layout.count():
Widget.py(40):         child = layout.takeAt(0)
Widget.py(41):         if child.widget() is not None:
Widget.py(42):             child.widget().deleteLater()
Widget.py(39):     while layout.count():
Widget.py(40):         child = layout.takeAt(0)
Widget.py(41):         if child.widget() is not None:
Widget.py(42):             child.widget().deleteLater()
Widget.py(39):     while layout.count():
Widget.py(40):         child = layout.takeAt(0)
Widget.py(41):         if child.widget() is not None:
Widget.py(42):             child.widget().deleteLater()
Widget.py(39):     while layout.count():
Widget.py(40):         child = layout.takeAt(0)
Widget.py(41):         if child.widget() is not None:
Widget.py(42):             child.widget().deleteLater()
Widget.py(39):     while layout.count():
Widget.py(40):         child = layout.takeAt(0)
Widget.py(41):         if child.widget() is not None:
Widget.py(42):             child.widget().deleteLater()
Widget.py(39):     while layout.count():
Widget.py(1556):         super(GraphWidget, self).mouseReleaseEvent(event)
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: Widget, funcname: mouseMoveEvent
Widget.py(1402):         self.mousePos = self.mapToScene(event.pos())
Widget.py(1404):         if self._resize_group_mode:
Widget.py(1417):         if self._draw_real_time_line:
Widget.py(1434):         if self._is_rubber_band_selection:
Widget.py(1445):         super(GraphWidget, self).mouseMoveEvent(event)
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Widget, funcname: _tick_executor
Widget.py(988):         for foo in self._tick_functions:
 --- modulename: Widget, funcname: _tick_executor
Widget.py(988):         for foo in self._tick_functions:
 --- modulename: Widget, funcname: mouseMoveEvent
Widget.py(1402):         self.mousePos = self.mapToScene(event.pos())
Widget.py(1404):         if self._resize_group_mode:
Widget.py(1417):         if self._draw_real_time_line:
Widget.py(1434):         if self._is_rubber_band_selection:
Widget.py(1445):         super(GraphWidget, self).mouseMoveEvent(event)
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Widget, funcname: mouseMoveEvent
Widget.py(1402):         self.mousePos = self.mapToScene(event.pos())
Widget.py(1404):         if self._resize_group_mode:
Widget.py(1417):         if self._draw_real_time_line:
Widget.py(1434):         if self._is_rubber_band_selection:
Widget.py(1445):         super(GraphWidget, self).mouseMoveEvent(event)
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Widget, funcname: mouseMoveEvent
Widget.py(1402):         self.mousePos = self.mapToScene(event.pos())
Widget.py(1404):         if self._resize_group_mode:
Widget.py(1417):         if self._draw_real_time_line:
Widget.py(1434):         if self._is_rubber_band_selection:
Widget.py(1445):         super(GraphWidget, self).mouseMoveEvent(event)
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Widget, funcname: mouseMoveEvent
Widget.py(1402):         self.mousePos = self.mapToScene(event.pos())
Widget.py(1404):         if self._resize_group_mode:
Widget.py(1417):         if self._draw_real_time_line:
Widget.py(1434):         if self._is_rubber_band_selection:
Widget.py(1445):         super(GraphWidget, self).mouseMoveEvent(event)
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Widget, funcname: mouseMoveEvent
Widget.py(1402):         self.mousePos = self.mapToScene(event.pos())
Widget.py(1404):         if self._resize_group_mode:
Widget.py(1417):         if self._draw_real_time_line:
Widget.py(1434):         if self._is_rubber_band_selection:
Widget.py(1445):         super(GraphWidget, self).mouseMoveEvent(event)
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Widget, funcname: mouseMoveEvent
Widget.py(1402):         self.mousePos = self.mapToScene(event.pos())
Widget.py(1404):         if self._resize_group_mode:
Widget.py(1417):         if self._draw_real_time_line:
Widget.py(1434):         if self._is_rubber_band_selection:
Widget.py(1445):         super(GraphWidget, self).mouseMoveEvent(event)
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Widget, funcname: mouseMoveEvent
Widget.py(1402):         self.mousePos = self.mapToScene(event.pos())
Widget.py(1404):         if self._resize_group_mode:
Widget.py(1417):         if self._draw_real_time_line:
Widget.py(1434):         if self._is_rubber_band_selection:
Widget.py(1445):         super(GraphWidget, self).mouseMoveEvent(event)
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Widget, funcname: _tick_executor
Widget.py(988):         for foo in self._tick_functions:
 --- modulename: Widget, funcname: mouseMoveEvent
Widget.py(1402):         self.mousePos = self.mapToScene(event.pos())
Widget.py(1404):         if self._resize_group_mode:
Widget.py(1417):         if self._draw_real_time_line:
Widget.py(1434):         if self._is_rubber_band_selection:
Widget.py(1445):         super(GraphWidget, self).mouseMoveEvent(event)
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Widget, funcname: mouseMoveEvent
Widget.py(1402):         self.mousePos = self.mapToScene(event.pos())
Widget.py(1404):         if self._resize_group_mode:
Widget.py(1417):         if self._draw_real_time_line:
Widget.py(1434):         if self._is_rubber_band_selection:
Widget.py(1445):         super(GraphWidget, self).mouseMoveEvent(event)
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Widget, funcname: mouseMoveEvent
Widget.py(1402):         self.mousePos = self.mapToScene(event.pos())
Widget.py(1404):         if self._resize_group_mode:
Widget.py(1417):         if self._draw_real_time_line:
Widget.py(1434):         if self._is_rubber_band_selection:
Widget.py(1445):         super(GraphWidget, self).mouseMoveEvent(event)
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Widget, funcname: mouseMoveEvent
Widget.py(1402):         self.mousePos = self.mapToScene(event.pos())
Widget.py(1404):         if self._resize_group_mode:
Widget.py(1417):         if self._draw_real_time_line:
Widget.py(1434):         if self._is_rubber_band_selection:
Widget.py(1445):         super(GraphWidget, self).mouseMoveEvent(event)
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Widget, funcname: mouseMoveEvent
Widget.py(1402):         self.mousePos = self.mapToScene(event.pos())
Widget.py(1404):         if self._resize_group_mode:
Widget.py(1417):         if self._draw_real_time_line:
Widget.py(1434):         if self._is_rubber_band_selection:
Widget.py(1445):         super(GraphWidget, self).mouseMoveEvent(event)
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Widget, funcname: _tick_executor
Widget.py(988):         for foo in self._tick_functions:
 --- modulename: Widget, funcname: _tick_executor
Widget.py(988):         for foo in self._tick_functions:
 --- modulename: Widget, funcname: _tick_executor
Widget.py(988):         for foo in self._tick_functions:
 --- modulename: Widget, funcname: _tick_executor
Widget.py(988):         for foo in self._tick_functions:
 --- modulename: Widget, funcname: _tick_executor
Widget.py(988):         for foo in self._tick_functions:
 --- modulename: Widget, funcname: _tick_executor
Widget.py(988):         for foo in self._tick_functions:
 --- modulename: Widget, funcname: _tick_executor
Widget.py(988):         for foo in self._tick_functions:
 --- modulename: Widget, funcname: _tick_executor
Widget.py(988):         for foo in self._tick_functions:
 --- modulename: Launcher, funcname: closeEvent
Launcher.py(66):         question = "Shure?"
Launcher.py(67):         reply = QtGui.QMessageBox.question(self, 'Exit', question, QtGui.QMessageBox.Yes, QtGui.QMessageBox.No)
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: BaseNode, funcname: boundingRect
BaseNode.py(144):         return self.childrenBoundingRect()
 --- modulename: BaseNode, funcname: paint
BaseNode.py(199):         painter.setPen(QtCore.Qt.NoPen)
BaseNode.py(200):         painter.setBrush(QtCore.Qt.darkGray)
BaseNode.py(202):         if self.options:
BaseNode.py(203):             color = self.opt_node_base_color
BaseNode.py(206):         if self.isSelected():
BaseNode.py(209):         linearGrad = QtGui.QRadialGradient(QtCore.QPointF(40, 40), 300)
BaseNode.py(210):         linearGrad.setColorAt(0, color)
BaseNode.py(211):         linearGrad.setColorAt(1, color.lighter(180))
BaseNode.py(212):         br = QtGui.QBrush(linearGrad)
BaseNode.py(213):         painter.setBrush(br)
BaseNode.py(214):         pen = QtGui.QPen(QtCore.Qt.black, 0.5)
BaseNode.py(215):         if option.state & QtGui.QStyle.State_Selected:
BaseNode.py(222):         painter.setPen(pen)
BaseNode.py(223):         painter.drawRoundedRect(self.sizes[0], self.sizes[1],
BaseNode.py(224):                                 self.childrenBoundingRect().width(), self.nodeMainGWidget.boundingRect().height(),
BaseNode.py(225):                                 self.sizes[4], self.sizes[5])
 --- modulename: BaseNode, funcname: paint
BaseNode.py(39):         if self.options:
BaseNode.py(40):             painter.fillRect(option.rect, QtGui.QColor(self.opt_bg_color))
BaseNode.py(43):         super(NodeName, self).paint(painter, option, widget)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: paint
Port.py(83):         background_rect = self.boundingRect()
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
Port.py(84):         background_rect.setWidth(self.__width)
Port.py(86):         w = background_rect.width() / 2
Port.py(87):         h = background_rect.height() / 2
Port.py(89):         linearGrad = QtGui.QRadialGradient(QtCore.QPointF(w, h), self.__width / 2)
Port.py(90):         linearGrad.setColorAt(0, self.color)
Port.py(91):         linearGrad.setColorAt(0.2, self.color)
Port.py(92):         linearGrad.setColorAt(1, self.color.lighter(150))
Port.py(94):         if self.dirty:
Port.py(95):             painter.setPen(self._dirty_pen)
Port.py(96):         if self.hovered:
Port.py(99):             painter.setBrush(QtGui.QBrush(self.color))
Port.py(100):         if self.data_type == AGPortDataTypes.tArray:
Port.py(103):             painter.setBrush(linearGrad)
Port.py(104):             painter.drawEllipse(background_rect)
Port.py(105):             arrHeight = -0.4
Port.py(106):             arrow = QtGui.QPolygonF([QtCore.QPointF(self.__width, self.__height * 0.7 + arrHeight),
Port.py(107):                                     QtCore.QPointF(self.__width * 1.2, self.__height / 2.0 + arrHeight),
Port.py(108):                                     QtCore.QPointF(self.__width, self.__height * 0.3 + arrHeight),
Port.py(109):                                     QtCore.QPointF(self.__width, self.__height * 0.7 + arrHeight)])
Port.py(110):             painter.drawPolygon(arrow)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: paint
Port.py(83):         background_rect = self.boundingRect()
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
Port.py(84):         background_rect.setWidth(self.__width)
Port.py(86):         w = background_rect.width() / 2
Port.py(87):         h = background_rect.height() / 2
Port.py(89):         linearGrad = QtGui.QRadialGradient(QtCore.QPointF(w, h), self.__width / 2)
Port.py(90):         linearGrad.setColorAt(0, self.color)
Port.py(91):         linearGrad.setColorAt(0.2, self.color)
Port.py(92):         linearGrad.setColorAt(1, self.color.lighter(150))
Port.py(94):         if self.dirty:
Port.py(95):             painter.setPen(self._dirty_pen)
Port.py(96):         if self.hovered:
Port.py(99):             painter.setBrush(QtGui.QBrush(self.color))
Port.py(100):         if self.data_type == AGPortDataTypes.tArray:
Port.py(103):             painter.setBrush(linearGrad)
Port.py(104):             painter.drawEllipse(background_rect)
Port.py(105):             arrHeight = -0.4
Port.py(106):             arrow = QtGui.QPolygonF([QtCore.QPointF(self.__width, self.__height * 0.7 + arrHeight),
Port.py(107):                                     QtCore.QPointF(self.__width * 1.2, self.__height / 2.0 + arrHeight),
Port.py(108):                                     QtCore.QPointF(self.__width, self.__height * 0.3 + arrHeight),
Port.py(109):                                     QtCore.QPointF(self.__width, self.__height * 0.7 + arrHeight)])
Port.py(110):             painter.drawPolygon(arrow)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
 --- modulename: Port, funcname: paint
Port.py(83):         background_rect = self.boundingRect()
 --- modulename: Port, funcname: boundingRect
Port.py(49):         return QtCore.QRectF(0, -0.5, self.__width * 1.5, self.__height)
Port.py(84):         background_rect.setWidth(self.__width)
Port.py(86):         w = background_rect.width() / 2
Port.py(87):         h = background_rect.height() / 2
Port.py(89):         linearGrad = QtGui.QRadialGradient(QtCore.QPointF(w, h), self.__width / 2)
Port.py(90):         linearGrad.setColorAt(0, self.color)
Port.py(91):         linearGrad.setColorAt(0.2, self.color)
Port.py(92):         linearGrad.setColorAt(1, self.color.lighter(150))
Port.py(94):         if self.dirty:
Port.py(95):             painter.setPen(self._dirty_pen)
Port.py(96):         if self.hovered:
Port.py(99):             painter.setBrush(QtGui.QBrush(self.color))
Port.py(100):         if self.data_type == AGPortDataTypes.tArray:
Port.py(103):             painter.setBrush(linearGrad)
Port.py(104):             painter.drawEllipse(background_rect)
Port.py(105):             arrHeight = -0.4
Port.py(106):             arrow = QtGui.QPolygonF([QtCore.QPointF(self.__width, self.__height * 0.7 + arrHeight),
Port.py(107):                                     QtCore.QPointF(self.__width * 1.2, self.__height / 2.0 + arrHeight),
Port.py(108):                                     QtCore.QPointF(self.__width, self.__height * 0.3 + arrHeight),
Port.py(109):                                     QtCore.QPointF(self.__width, self.__height * 0.7 + arrHeight)])
Port.py(110):             painter.drawPolygon(arrow)
 --- modulename: Widget, funcname: _tick_executor
Widget.py(988):         for foo in self._tick_functions:
 --- modulename: Widget, funcname: _tick_executor
Widget.py(988):         for foo in self._tick_functions:
 --- modulename: Widget, funcname: _tick_executor
Widget.py(988):         for foo in self._tick_functions:
 --- modulename: Widget, funcname: _tick_executor
Widget.py(988):         for foo in self._tick_functions:
 --- modulename: Widget, funcname: _tick_executor
Widget.py(988):         for foo in self._tick_functions:
 --- modulename: Widget, funcname: _tick_executor
Widget.py(988):         for foo in self._tick_functions:
 --- modulename: Widget, funcname: _tick_executor
Widget.py(988):         for foo in self._tick_functions:
 --- modulename: Widget, funcname: _tick_executor
Widget.py(988):         for foo in self._tick_functions:
 --- modulename: Widget, funcname: _tick_executor
Widget.py(988):         for foo in self._tick_functions:
 --- modulename: Widget, funcname: _tick_executor
Widget.py(988):         for foo in self._tick_functions:
 --- modulename: Widget, funcname: _tick_executor
Widget.py(988):         for foo in self._tick_functions:
 --- modulename: Widget, funcname: _tick_executor
Widget.py(988):         for foo in self._tick_functions:
 --- modulename: Widget, funcname: _tick_executor
Widget.py(988):         for foo in self._tick_functions:
 --- modulename: Widget, funcname: _tick_executor
Widget.py(988):         for foo in self._tick_functions:
 --- modulename: Widget, funcname: _tick_executor
Widget.py(988):         for foo in self._tick_functions:
Launcher.py(68):         if reply == QtGui.QMessageBox.Yes:
Launcher.py(69):             self.G.shoutDown()
 --- modulename: Widget, funcname: shoutDown
Widget.py(951):         self.scene().clear()
